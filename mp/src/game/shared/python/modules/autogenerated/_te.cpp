// This file has been generated by Py++.

#include "cbase.h"
#ifdef CLIENT_DLL
#include "cbase.h"

#include "effect_dispatch_data.h"

#include "srcpy_te.h"

#include "tempent.h"

#include "c_te_legacytempents.h"

#include "c_te_effect_dispatch.h"

#include "fx.h"

#include "fx_quad.h"

#include "fx_line.h"

#include "clientsideeffects.h"

#include "fx_envelope.h"

#include "tier0/valve_minmax_off.h"

#include "srcpy.h"

#include "tier0/valve_minmax_on.h"

#include "tier0/memdbgon.h"

namespace bp = boost::python;

struct C_EnvelopeFX_wrapper : C_EnvelopeFX, bp::wrapper< C_EnvelopeFX > {

    C_EnvelopeFX_wrapper( )
    : C_EnvelopeFX( )
      , bp::wrapper< C_EnvelopeFX >(){
        // null constructor
    
    }

    void RemoveRenderable(  ){
        C_EnvelopeFX::RemoveRenderable(  );
    }

    virtual void GetRenderBounds( ::Vector & mins, ::Vector & maxs ){
        bp::override func_GetRenderBounds = this->get_override( "GetRenderBounds" );
        try {
            func_GetRenderBounds( boost::ref(mins), boost::ref(maxs) );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

};

struct PyClientSideEffect_wrapper : PyClientSideEffect, bp::wrapper< PyClientSideEffect > {

    PyClientSideEffect_wrapper(char const * name )
    : PyClientSideEffect( name )
      , bp::wrapper< PyClientSideEffect >(){
        // constructor
    
    }

    virtual void Draw( double frametime ) {
        PY_OVERRIDE_CHECK( PyClientSideEffect, Draw )
        PY_OVERRIDE_LOG( _te, PyClientSideEffect, Draw )
        bp::override func_Draw = this->get_override( "Draw" );
        if( func_Draw.ptr() != Py_None )
            try {
                func_Draw( frametime );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PyClientSideEffect::Draw( frametime );
            }
        else
            this->PyClientSideEffect::Draw( frametime );
    }
    
    void default_Draw( double frametime ) {
        PyClientSideEffect::Draw( frametime );
    }

};

struct PyMeshBuilder_wrapper : PyMeshBuilder, bp::wrapper< PyMeshBuilder > {

    PyMeshBuilder_wrapper(char const * pMaterialName, ::MaterialPrimitiveType_t type=::MaterialPrimitiveType_t::MATERIAL_POINTS )
    : PyMeshBuilder( pMaterialName, type )
      , bp::wrapper< PyMeshBuilder >(){
        // constructor
    
    }

    int GetNumPrimitives(  ){
        return PyMeshBuilder::GetNumPrimitives(  );
    }

};

struct PyMeshRallyLine_wrapper : PyMeshRallyLine, bp::wrapper< PyMeshRallyLine > {

    PyMeshRallyLine_wrapper(char const * pMaterialName )
    : PyMeshRallyLine( pMaterialName )
      , bp::wrapper< PyMeshRallyLine >(){
        // constructor
    
    }

    int GetNumPrimitives(  ){
        return PyMeshBuilder::GetNumPrimitives(  );
    }

};

struct PyMeshVertex_wrapper : PyMeshVertex, bp::wrapper< PyMeshVertex > {

    PyMeshVertex_wrapper(PyMeshVertex const & arg )
    : PyMeshVertex( arg )
      , bp::wrapper< PyMeshVertex >(){
        // copy constructor
        
    }

    PyMeshVertex_wrapper( )
    : PyMeshVertex( )
      , bp::wrapper< PyMeshVertex >(){
        // null constructor
    
    }

    virtual void Draw( ::CMeshBuilder & builder ) {
        PY_OVERRIDE_CHECK( PyMeshVertex, Draw )
        PY_OVERRIDE_LOG( _te, PyMeshVertex, Draw )
        bp::override func_Draw = this->get_override( "Draw" );
        if( func_Draw.ptr() != Py_None )
            try {
                func_Draw( boost::ref(builder) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PyMeshVertex::Draw( builder );
            }
        else
            this->PyMeshVertex::Draw( builder );
    }
    
    void default_Draw( ::CMeshBuilder & builder ) {
        PyMeshVertex::Draw( builder );
    }

};

BOOST_PYTHON_MODULE(_te){
    bp::docstring_options doc_options( true, true, false );

    bp::enum_< MaterialPrimitiveType_t>("MaterialPrimitiveType_t")
        .value("MATERIAL_POINTS", MATERIAL_POINTS)
        .value("MATERIAL_LINES", MATERIAL_LINES)
        .value("MATERIAL_TRIANGLES", MATERIAL_TRIANGLES)
        .value("MATERIAL_TRIANGLE_STRIP", MATERIAL_TRIANGLE_STRIP)
        .value("MATERIAL_LINE_STRIP", MATERIAL_LINE_STRIP)
        .value("MATERIAL_LINE_LOOP", MATERIAL_LINE_LOOP)
        .value("MATERIAL_POLYGON", MATERIAL_POLYGON)
        .value("MATERIAL_QUADS", MATERIAL_QUADS)
        .value("MATERIAL_INSTANCED_QUADS", MATERIAL_INSTANCED_QUADS)
        .value("MATERIAL_HETEROGENOUS", MATERIAL_HETEROGENOUS)
        .export_values()
        ;

    bp::class_< CEffectData >( "CEffectData", bp::init< >() )    
        .def_readwrite( "m_ControlPoint1", &CEffectData::m_ControlPoint1 )    
        .def_readwrite( "m_CustomColors", &CEffectData::m_CustomColors )    
        .def_readwrite( "m_bControlPoint1", &CEffectData::m_bControlPoint1 )    
        .def_readwrite( "m_bCustomColors", &CEffectData::m_bCustomColors )    
        .def_readwrite( "flags", &CEffectData::m_fFlags )    
        .def_readwrite( "magnitude", &CEffectData::m_flMagnitude )    
        .def_readwrite( "radius", &CEffectData::m_flRadius )    
        .def_readwrite( "scale", &CEffectData::m_flScale )    
        .def_readwrite( "attachmentindex", &CEffectData::m_nAttachmentIndex )    
        .def_readwrite( "color", &CEffectData::m_nColor )    
        .def_readwrite( "damagetype", &CEffectData::m_nDamageType )    
        .def_readwrite( "hitbox", &CEffectData::m_nHitBox )    
        .def_readwrite( "material", &CEffectData::m_nMaterial )    
        .def_readwrite( "surfaceprop", &CEffectData::m_nSurfaceProp )    
        .def_readwrite( "angles", &CEffectData::m_vAngles )    
        .def_readwrite( "normal", &CEffectData::m_vNormal )    
        .def_readwrite( "origin", &CEffectData::m_vOrigin )    
        .def_readwrite( "start", &CEffectData::m_vStart );

    { //::CTempEnts
        typedef bp::class_< CTempEnts, boost::noncopyable > CTempEnts_exposer_t;
        CTempEnts_exposer_t CTempEnts_exposer = CTempEnts_exposer_t( "CTempEnts", bp::no_init );
        bp::scope CTempEnts_scope( CTempEnts_exposer );
        bp::scope().attr("MAX_TEMP_ENTITIES") = (int)CTempEnts::MAX_TEMP_ENTITIES;
        bp::scope().attr("MAX_TEMP_ENTITY_SPRITES") = (int)CTempEnts::MAX_TEMP_ENTITY_SPRITES;
        bp::scope().attr("MAX_TEMP_ENTITY_STUDIOMODEL") = (int)CTempEnts::MAX_TEMP_ENTITY_STUDIOMODEL;
        CTempEnts_exposer.def( bp::init< >() );
        { //::CTempEnts::AttachTentToPlayer
        
            typedef void ( ::CTempEnts::*AttachTentToPlayer_function_type)( int,int,float,float ) ;
            
            CTempEnts_exposer.def( 
                "AttachTentToPlayer"
                , AttachTentToPlayer_function_type( &::CTempEnts::AttachTentToPlayer )
                , ( bp::arg("client"), bp::arg("modelIndex"), bp::arg("zoffset"), bp::arg("life") ) );
        
        }
        { //::CTempEnts::BloodSprite
        
            typedef void ( ::CTempEnts::*BloodSprite_function_type)( ::Vector const &,int,int,int,int,int,int,float ) ;
            
            CTempEnts_exposer.def( 
                "BloodSprite"
                , BloodSprite_function_type( &::CTempEnts::BloodSprite )
                , ( bp::arg("org"), bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("a"), bp::arg("modelIndex"), bp::arg("modelIndex2"), bp::arg("size") ) );
        
        }
        { //::CTempEnts::BreakModel
        
            typedef void ( ::CTempEnts::*BreakModel_function_type)( ::Vector const &,::QAngle const &,::Vector const &,::Vector const &,float,float,int,int,char ) ;
            
            CTempEnts_exposer.def( 
                "BreakModel"
                , BreakModel_function_type( &::CTempEnts::BreakModel )
                , ( bp::arg("pos"), bp::arg("angles"), bp::arg("size"), bp::arg("dir"), bp::arg("random_valve"), bp::arg("life"), bp::arg("count"), bp::arg("modelIndex"), bp::arg("flags") ) );
        
        }
        { //::CTempEnts::BubbleTrail
        
            typedef void ( ::CTempEnts::*BubbleTrail_function_type)( ::Vector const &,::Vector const &,float,int,int,float ) ;
            
            CTempEnts_exposer.def( 
                "BubbleTrail"
                , BubbleTrail_function_type( &::CTempEnts::BubbleTrail )
                , ( bp::arg("start"), bp::arg("end"), bp::arg("height"), bp::arg("modelIndex"), bp::arg("count"), bp::arg("speed") ) );
        
        }
        { //::CTempEnts::Bubbles
        
            typedef void ( ::CTempEnts::*Bubbles_function_type)( ::Vector const &,::Vector const &,float,int,int,float ) ;
            
            CTempEnts_exposer.def( 
                "Bubbles"
                , Bubbles_function_type( &::CTempEnts::Bubbles )
                , ( bp::arg("mins"), bp::arg("maxs"), bp::arg("height"), bp::arg("modelIndex"), bp::arg("count"), bp::arg("speed") ) );
        
        }
        { //::CTempEnts::CSEjectBrass
        
            typedef void ( ::CTempEnts::*CSEjectBrass_function_type)( ::Vector const &,::QAngle const &,int,int,::C_BasePlayer * ) ;
            
            CTempEnts_exposer.def( 
                "CSEjectBrass"
                , CSEjectBrass_function_type( &::CTempEnts::CSEjectBrass )
                , ( bp::arg("vecPosition"), bp::arg("angAngles"), bp::arg("nType"), bp::arg("nShellType"), bp::arg("pShooter") ) );
        
        }
        { //::CTempEnts::Clear
        
            typedef void ( ::CTempEnts::*Clear_function_type)(  ) ;
            
            CTempEnts_exposer.def( 
                "Clear"
                , Clear_function_type( &::CTempEnts::Clear ) );
        
        }
        { //::CTempEnts::EjectBrass
        
            typedef void ( ::CTempEnts::*EjectBrass_function_type)( ::Vector const &,::QAngle const &,::QAngle const &,int ) ;
            
            CTempEnts_exposer.def( 
                "EjectBrass"
                , EjectBrass_function_type( &::CTempEnts::EjectBrass )
                , ( bp::arg("pos1"), bp::arg("angles"), bp::arg("gunAngles"), bp::arg("type") ) );
        
        }
        { //::CTempEnts::FizzEffect
        
            typedef void ( ::CTempEnts::*FizzEffect_function_type)( ::C_BaseEntity *,int,int,int ) ;
            
            CTempEnts_exposer.def( 
                "FizzEffect"
                , FizzEffect_function_type( &::CTempEnts::FizzEffect )
                , ( bp::arg("pent"), bp::arg("modelIndex"), bp::arg("density"), bp::arg("current") ) );
        
        }
        { //::CTempEnts::HL1EjectBrass
        
            typedef void ( ::CTempEnts::*HL1EjectBrass_function_type)( ::Vector const &,::QAngle const &,::Vector const &,int ) ;
            
            CTempEnts_exposer.def( 
                "HL1EjectBrass"
                , HL1EjectBrass_function_type( &::CTempEnts::HL1EjectBrass )
                , ( bp::arg("vecPosition"), bp::arg("angAngles"), bp::arg("vecVelocity"), bp::arg("nType") ) );
        
        }
        { //::CTempEnts::Init
        
            typedef void ( ::CTempEnts::*Init_function_type)(  ) ;
            
            CTempEnts_exposer.def( 
                "Init"
                , Init_function_type( &::CTempEnts::Init ) );
        
        }
        { //::CTempEnts::KillAttachedTents
        
            typedef void ( ::CTempEnts::*KillAttachedTents_function_type)( int ) ;
            
            CTempEnts_exposer.def( 
                "KillAttachedTents"
                , KillAttachedTents_function_type( &::CTempEnts::KillAttachedTents )
                , ( bp::arg("client") ) );
        
        }
        { //::CTempEnts::LevelInit
        
            typedef void ( ::CTempEnts::*LevelInit_function_type)(  ) ;
            
            CTempEnts_exposer.def( 
                "LevelInit"
                , LevelInit_function_type( &::CTempEnts::LevelInit ) );
        
        }
        { //::CTempEnts::LevelShutdown
        
            typedef void ( ::CTempEnts::*LevelShutdown_function_type)(  ) ;
            
            CTempEnts_exposer.def( 
                "LevelShutdown"
                , LevelShutdown_function_type( &::CTempEnts::LevelShutdown ) );
        
        }
        { //::CTempEnts::MuzzleFlash
        
            typedef void ( ::CTempEnts::*MuzzleFlash_function_type)( int,::ClientEntityHandle_t,int,bool ) ;
            
            CTempEnts_exposer.def( 
                "MuzzleFlash"
                , MuzzleFlash_function_type( &::CTempEnts::MuzzleFlash )
                , ( bp::arg("type"), bp::arg("hEntity"), bp::arg("attachmentIndex"), bp::arg("firstPerson") ) );
        
        }
        { //::CTempEnts::MuzzleFlash
        
            typedef void ( ::CTempEnts::*MuzzleFlash_function_type)( ::Vector const &,::QAngle const &,int,::ClientEntityHandle_t,bool ) ;
            
            CTempEnts_exposer.def( 
                "MuzzleFlash"
                , MuzzleFlash_function_type( &::CTempEnts::MuzzleFlash )
                , ( bp::arg("pos1"), bp::arg("angles"), bp::arg("type"), bp::arg("hEntity"), bp::arg("firstPerson")=(bool)(false) ) );
        
        }
        { //::CTempEnts::PhysicsProp
        
            typedef void ( ::CTempEnts::*PhysicsProp_function_type)( int,int,::Vector const &,::QAngle const &,::Vector const &,int,int ) ;
            
            CTempEnts_exposer.def( 
                "PhysicsProp"
                , PhysicsProp_function_type( &::CTempEnts::PhysicsProp )
                , ( bp::arg("modelindex"), bp::arg("skin"), bp::arg("pos"), bp::arg("angles"), bp::arg("vel"), bp::arg("flags"), bp::arg("effects")=(int)(0) ) );
        
        }
        { //::CTempEnts::RocketFlare
        
            typedef void ( ::CTempEnts::*RocketFlare_function_type)( ::Vector const & ) ;
            
            CTempEnts_exposer.def( 
                "RocketFlare"
                , RocketFlare_function_type( &::CTempEnts::RocketFlare )
                , ( bp::arg("pos") ) );
        
        }
        { //::CTempEnts::Shutdown
        
            typedef void ( ::CTempEnts::*Shutdown_function_type)(  ) ;
            
            CTempEnts_exposer.def( 
                "Shutdown"
                , Shutdown_function_type( &::CTempEnts::Shutdown ) );
        
        }
        { //::CTempEnts::Sprite_Spray
        
            typedef void ( ::CTempEnts::*Sprite_Spray_function_type)( ::Vector const &,::Vector const &,int,int,int,int ) ;
            
            CTempEnts_exposer.def( 
                "Sprite_Spray"
                , Sprite_Spray_function_type( &::CTempEnts::Sprite_Spray )
                , ( bp::arg("pos"), bp::arg("dir"), bp::arg("modelIndex"), bp::arg("count"), bp::arg("speed"), bp::arg("iRand") ) );
        
        }
        { //::CTempEnts::Sprite_Trail
        
            typedef void ( ::CTempEnts::*Sprite_Trail_function_type)( ::Vector const &,::Vector const &,int,int,float,float,float,int,float ) ;
            
            CTempEnts_exposer.def( 
                "Sprite_Trail"
                , Sprite_Trail_function_type( &::CTempEnts::Sprite_Trail )
                , ( bp::arg("vecStart"), bp::arg("vecEnd"), bp::arg("modelIndex"), bp::arg("nCount"), bp::arg("flLife"), bp::arg("flSize"), bp::arg("flAmplitude"), bp::arg("nRenderamt"), bp::arg("flSpeed") ) );
        
        }
        { //::CTempEnts::Update
        
            typedef void ( ::CTempEnts::*Update_function_type)(  ) ;
            
            CTempEnts_exposer.def( 
                "Update"
                , Update_function_type( &::CTempEnts::Update ) );
        
        }
    }

    bp::class_< C_EnvelopeFX_wrapper, boost::noncopyable >( "C_EnvelopeFX", bp::init< >() )    
        .def( 
            "EffectInit"
            , (void ( ::C_EnvelopeFX::* )( int,int ))( &::C_EnvelopeFX::EffectInit )
            , ( bp::arg("entityIndex"), bp::arg("attachment") ) )    
        .def( 
            "EffectShutdown"
            , (void ( ::C_EnvelopeFX::* )(  ))( &::C_EnvelopeFX::EffectShutdown ) )    
        .def( 
            "GetRenderAngles"
            , (::QAngle const & ( ::C_EnvelopeFX::* )(  ))( &::C_EnvelopeFX::GetRenderAngles )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetRenderOrigin"
            , (::Vector const & ( ::C_EnvelopeFX::* )(  ))( &::C_EnvelopeFX::GetRenderOrigin )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "IsActive"
            , (bool ( ::C_EnvelopeFX::* )(  )const)( &::C_EnvelopeFX::IsActive ) )    
        .def( 
            "IsTransparent"
            , (bool ( ::C_EnvelopeFX::* )(  ))( &::C_EnvelopeFX::IsTransparent ) )    
        .def( 
            "LimitTime"
            , (void ( ::C_EnvelopeFX::* )( float ))( &::C_EnvelopeFX::LimitTime )
            , ( bp::arg("tmax") ) )    
        .def( 
            "RemoveRenderable"
            , (void ( C_EnvelopeFX_wrapper::* )(  ))(&C_EnvelopeFX_wrapper::RemoveRenderable) )    
        .def( 
            "RenderableToWorldTransform"
            , (::matrix3x4_t const & ( ::C_EnvelopeFX::* )(  ))( &::C_EnvelopeFX::RenderableToWorldTransform )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "SetActive"
            , (void ( ::C_EnvelopeFX::* )( bool ))( &::C_EnvelopeFX::SetActive )
            , ( bp::arg("state")=(bool)(true) ) )    
        .def( 
            "SetRenderOrigin"
            , (void ( ::C_EnvelopeFX::* )( ::Vector const & ))( &::C_EnvelopeFX::SetRenderOrigin )
            , ( bp::arg("origin") ) )    
        .def( 
            "SetTime"
            , (void ( ::C_EnvelopeFX::* )( float ))( &::C_EnvelopeFX::SetTime )
            , ( bp::arg("t") ) )    
        .def( 
            "ShouldDraw"
            , (bool ( ::C_EnvelopeFX::* )(  ))( &::C_EnvelopeFX::ShouldDraw ) )    
        .def( 
            "ShouldReceiveProjectedTextures"
            , (bool ( ::C_EnvelopeFX::* )( int ))( &::C_EnvelopeFX::ShouldReceiveProjectedTextures )
            , ( bp::arg("flags") ) )    
        .def( 
            "Update"
            , (void ( ::C_EnvelopeFX::* )(  ))( &::C_EnvelopeFX::Update ) )    
        .def( 
            "GetRenderBounds"
            , bp::pure_virtual( (void ( ::IClientRenderable::* )( ::Vector &,::Vector & ))(&::IClientRenderable::GetRenderBounds) )
            , ( bp::arg("mins"), bp::arg("maxs") ) );

    bp::class_< ITempEntsSystem, boost::noncopyable >( "ITempEntsSystem", bp::no_init )    
        .def( 
            "ArmorRicochet"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::Vector const * ))( &::ITempEntsSystem::ArmorRicochet )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("dir") ) )    
        .def( 
            "BSPDecal"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,int,int ))( &::ITempEntsSystem::BSPDecal )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("entity"), bp::arg("index") ) )    
        .def( 
            "BeamEntPoint"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,int,::Vector const *,int,::Vector const *,int,int,int,int,float,float,float,int,float,int,int,int,int,int ))( &::ITempEntsSystem::BeamEntPoint )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("nStartEntity"), bp::arg("start"), bp::arg("nEndEntity"), bp::arg("end"), bp::arg("modelindex"), bp::arg("haloindex"), bp::arg("startframe"), bp::arg("framerate"), bp::arg("life"), bp::arg("width"), bp::arg("endWidth"), bp::arg("fadeLength"), bp::arg("amplitude"), bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("a"), bp::arg("speed") ) )    
        .def( 
            "BeamEnts"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,int,int,int,int,int,int,float,float,float,int,float,int,int,int,int,int ))( &::ITempEntsSystem::BeamEnts )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("start"), bp::arg("end"), bp::arg("modelindex"), bp::arg("haloindex"), bp::arg("startframe"), bp::arg("framerate"), bp::arg("life"), bp::arg("width"), bp::arg("endWidth"), bp::arg("fadeLength"), bp::arg("amplitude"), bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("a"), bp::arg("speed") ) )    
        .def( 
            "BeamFollow"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,int,int,int,float,float,float,float,float,float,float,float ))( &::ITempEntsSystem::BeamFollow )
            , ( bp::arg("filter"), bp::arg("delay"), bp::arg("iEntIndex"), bp::arg("modelIndex"), bp::arg("haloIndex"), bp::arg("life"), bp::arg("width"), bp::arg("endWidth"), bp::arg("fadeLength"), bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("a") ) )    
        .def( 
            "BeamLaser"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,int,int,int,int,int,int,float,float,float,int,float,int,int,int,int,int ))( &::ITempEntsSystem::BeamLaser )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("start"), bp::arg("end"), bp::arg("modelindex"), bp::arg("haloindex"), bp::arg("startframe"), bp::arg("framerate"), bp::arg("life"), bp::arg("width"), bp::arg("endWidth"), bp::arg("fadeLength"), bp::arg("amplitude"), bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("a"), bp::arg("speed") ) )    
        .def( 
            "BeamPoints"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::Vector const *,int,int,int,int,float,float,float,int,float,int,int,int,int,int ))( &::ITempEntsSystem::BeamPoints )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("start"), bp::arg("end"), bp::arg("modelindex"), bp::arg("haloindex"), bp::arg("startframe"), bp::arg("framerate"), bp::arg("life"), bp::arg("width"), bp::arg("endWidth"), bp::arg("fadeLength"), bp::arg("amplitude"), bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("a"), bp::arg("speed") ) )    
        .def( 
            "BeamRing"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,int,int,int,int,int,int,float,float,int,float,int,int,int,int,int,int ))( &::ITempEntsSystem::BeamRing )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("start"), bp::arg("end"), bp::arg("modelindex"), bp::arg("haloindex"), bp::arg("startframe"), bp::arg("framerate"), bp::arg("life"), bp::arg("width"), bp::arg("spread"), bp::arg("amplitude"), bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("a"), bp::arg("speed"), bp::arg("flags")=(int)(0) ) )    
        .def( 
            "BeamRingPoint"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const &,float,float,int,int,int,int,float,float,int,float,int,int,int,int,int,int ))( &::ITempEntsSystem::BeamRingPoint )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("center"), bp::arg("start_radius"), bp::arg("end_radius"), bp::arg("modelindex"), bp::arg("haloindex"), bp::arg("startframe"), bp::arg("framerate"), bp::arg("life"), bp::arg("width"), bp::arg("spread"), bp::arg("amplitude"), bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("a"), bp::arg("speed"), bp::arg("flags")=(int)(0) ) )    
        .def( 
            "BeamSpline"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,int,::Vector * ))( &::ITempEntsSystem::BeamSpline )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("points"), bp::arg("rgPoints") ) )    
        .def( 
            "BloodSprite"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::Vector const *,int,int,int,int,int ))( &::ITempEntsSystem::BloodSprite )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("org"), bp::arg("dir"), bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("a"), bp::arg("size") ) )    
        .def( 
            "BloodStream"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::Vector const *,int,int,int,int,int ))( &::ITempEntsSystem::BloodStream )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("org"), bp::arg("dir"), bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("a"), bp::arg("amount") ) )    
        .def( 
            "BreakModel"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const &,::QAngle const &,::Vector const &,::Vector const &,int,int,int,float,int ))( &::ITempEntsSystem::BreakModel )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("angle"), bp::arg("size"), bp::arg("vel"), bp::arg("modelindex"), bp::arg("randomization"), bp::arg("count"), bp::arg("time"), bp::arg("flags") ) )    
        .def( 
            "BubbleTrail"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::Vector const *,float,int,int,float ))( &::ITempEntsSystem::BubbleTrail )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("mins"), bp::arg("maxs"), bp::arg("height"), bp::arg("modelindex"), bp::arg("count"), bp::arg("speed") ) )    
        .def( 
            "Bubbles"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::Vector const *,float,int,int,float ))( &::ITempEntsSystem::Bubbles )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("mins"), bp::arg("maxs"), bp::arg("height"), bp::arg("modelindex"), bp::arg("count"), bp::arg("speed") ) )    
        .def( 
            "ClientProjectile"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::Vector const *,int,int,::C_BaseEntity * ))( &::ITempEntsSystem::ClientProjectile )
            , ( bp::arg("filter"), bp::arg("delay"), bp::arg("vecOrigin"), bp::arg("vecVelocity"), bp::arg("modelindex"), bp::arg("lifetime"), bp::arg("pOwner") ) )    
        .def( 
            "Decal"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::Vector const *,int,int,int ))( &::ITempEntsSystem::Decal )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("start"), bp::arg("entity"), bp::arg("hitbox"), bp::arg("index") ) )    
        .def( 
            "DispatchEffect"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const &,char const *,::CEffectData const & ))( &::ITempEntsSystem::DispatchEffect )
            , ( bp::arg("filter"), bp::arg("delay"), bp::arg("pos"), bp::arg("pName"), bp::arg("data") ) )    
        .def( 
            "Dust"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const &,::Vector const &,float,float ))( &::ITempEntsSystem::Dust )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("dir"), bp::arg("size"), bp::arg("speed") ) )    
        .def( 
            "DynamicLight"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,int,int,int,int,float,float,float ))( &::ITempEntsSystem::DynamicLight )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("org"), bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("exponent"), bp::arg("radius"), bp::arg("time"), bp::arg("decay") ) )    
        .def( 
            "EnergySplash"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::Vector const *,bool ))( &::ITempEntsSystem::EnergySplash )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("dir"), bp::arg("bExplosive") ) )    
        .def( 
            "Explosion"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,int,float,int,int,int,int,::Vector const *,unsigned char ))( &::ITempEntsSystem::Explosion )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("modelindex"), bp::arg("scale"), bp::arg("framerate"), bp::arg("flags"), bp::arg("radius"), bp::arg("magnitude"), bp::arg("normal")=bp::object(), bp::arg("materialType")=(unsigned char)('C') ) )    
        .def( 
            "Fizz"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::C_BaseEntity const *,int,int,int ))( &::ITempEntsSystem::Fizz )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("ed"), bp::arg("modelindex"), bp::arg("density"), bp::arg("current") ) )    
        .def( 
            "FootprintDecal"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::Vector const *,int,int,unsigned char ))( &::ITempEntsSystem::FootprintDecal )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("origin"), bp::arg("right"), bp::arg("entity"), bp::arg("index"), bp::arg("materialType") ) )    
        .def( 
            "GaussExplosion"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const &,::Vector const &,int ))( &::ITempEntsSystem::GaussExplosion )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("dir"), bp::arg("type") ) )    
        .def( 
            "GlowSprite"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,int,float,float,int ))( &::ITempEntsSystem::GlowSprite )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("modelindex"), bp::arg("life"), bp::arg("size"), bp::arg("brightness") ) )    
        .def( 
            "KillPlayerAttachments"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,int ))( &::ITempEntsSystem::KillPlayerAttachments )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("player") ) )    
        .def( 
            "LargeFunnel"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,int,int ))( &::ITempEntsSystem::LargeFunnel )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("modelindex"), bp::arg("reversed") ) )    
        .def( 
            "MetalSparks"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::Vector const * ))( &::ITempEntsSystem::MetalSparks )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("dir") ) )    
        .def( 
            "MuzzleFlash"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const &,::QAngle const &,float,int ))( &::ITempEntsSystem::MuzzleFlash )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("start"), bp::arg("angles"), bp::arg("scale"), bp::arg("type") ) )    
        .def( 
            "PhysicsProp"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,int,int,::Vector const &,::QAngle const &,::Vector const &,int,int ))( &::ITempEntsSystem::PhysicsProp )
            , ( bp::arg("filter"), bp::arg("delay"), bp::arg("modelindex"), bp::arg("skin"), bp::arg("pos"), bp::arg("angles"), bp::arg("vel"), bp::arg("flags"), bp::arg("effects") ) )    
        .def( 
            "PlayerDecal"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,int,int ))( &::ITempEntsSystem::PlayerDecal )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("player"), bp::arg("entity") ) )    
        .def( 
            "ProjectDecal"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::QAngle const *,float,int ))( &::ITempEntsSystem::ProjectDecal )
            , ( bp::arg("filter"), bp::arg("delay"), bp::arg("pos"), bp::arg("angles"), bp::arg("distance"), bp::arg("index") ) )    
        .def( 
            "ShatterSurface"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::QAngle const *,::Vector const *,::Vector const *,float,float,float,::ShatterSurface_t,int,int,int,int,int,int ))( &::ITempEntsSystem::ShatterSurface )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("angle"), bp::arg("vForce"), bp::arg("vForcePos"), bp::arg("width"), bp::arg("height"), bp::arg("shardsize"), bp::arg("surfacetype"), bp::arg("front_r"), bp::arg("front_g"), bp::arg("front_b"), bp::arg("back_r"), bp::arg("back_g"), bp::arg("back_b") ) )    
        .def( 
            "ShowLine"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::Vector const * ))( &::ITempEntsSystem::ShowLine )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("start"), bp::arg("end") ) )    
        .def( 
            "Smoke"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,int,float,int ))( &::ITempEntsSystem::Smoke )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("modelindex"), bp::arg("scale"), bp::arg("framerate") ) )    
        .def( 
            "Sparks"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,int,int,::Vector const * ))( &::ITempEntsSystem::Sparks )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("nMagnitude"), bp::arg("nTrailLength"), bp::arg("pDir") ) )    
        .def( 
            "Sprite"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,int,float,int ))( &::ITempEntsSystem::Sprite )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("modelindex"), bp::arg("size"), bp::arg("brightness") ) )    
        .def( 
            "SpriteSpray"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::Vector const *,int,int,float,int ))( &::ITempEntsSystem::SpriteSpray )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("dir"), bp::arg("modelindex"), bp::arg("speed"), bp::arg("noise"), bp::arg("count") ) )    
        .def( 
            "TriggerTempEntity"
            , (void ( ::ITempEntsSystem::* )( ::KeyValues * ))( &::ITempEntsSystem::TriggerTempEntity )
            , ( bp::arg("pKeyValues") ) )    
        .def( 
            "WorldDecal"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,int ))( &::ITempEntsSystem::WorldDecal )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("index") ) );

    bp::class_< PyClientEffectRegistration >( "ClientEffectRegistration", bp::init< char const *, bp::api::object >(( bp::arg("pEffectName"), bp::arg("method") )) );

    { //::PyClientSideEffect
        typedef bp::class_< PyClientSideEffect_wrapper, boost::noncopyable > ClientSideEffect_exposer_t;
        ClientSideEffect_exposer_t ClientSideEffect_exposer = ClientSideEffect_exposer_t( "ClientSideEffect", bp::init< char const * >(( bp::arg("name") )) );
        bp::scope ClientSideEffect_scope( ClientSideEffect_exposer );
        bp::implicitly_convertible< char const *, PyClientSideEffect >();
        { //::PyClientSideEffect::AddMeshBuilder
        
            typedef void ( ::PyClientSideEffect::*AddMeshBuilder_function_type)( ::boost::python::api::object ) ;
            
            ClientSideEffect_exposer.def( 
                "AddMeshBuilder"
                , AddMeshBuilder_function_type( &::PyClientSideEffect::AddMeshBuilder )
                , ( bp::arg("meshbuilder") ) );
        
        }
        { //::PyClientSideEffect::ClearMeshBuilders
        
            typedef void ( ::PyClientSideEffect::*ClearMeshBuilders_function_type)(  ) ;
            
            ClientSideEffect_exposer.def( 
                "ClearMeshBuilders"
                , ClearMeshBuilders_function_type( &::PyClientSideEffect::ClearMeshBuilders ) );
        
        }
        { //::PyClientSideEffect::Destroy
        
            typedef void ( ::PyClientSideEffect::*Destroy_function_type)(  ) ;
            
            ClientSideEffect_exposer.def( 
                "Destroy"
                , Destroy_function_type( &::PyClientSideEffect::Destroy ) );
        
        }
        { //::PyClientSideEffect::Draw
        
            typedef void ( ::PyClientSideEffect::*Draw_function_type)( double ) ;
            typedef void ( PyClientSideEffect_wrapper::*default_Draw_function_type)( double ) ;
            
            ClientSideEffect_exposer.def( 
                "Draw"
                , Draw_function_type(&::PyClientSideEffect::Draw)
                , default_Draw_function_type(&PyClientSideEffect_wrapper::default_Draw)
                , ( bp::arg("frametime") ) );
        
        }
        { //::PyClientSideEffect::IsActive
        
            typedef bool ( ::PyClientSideEffect::*IsActive_function_type)(  ) ;
            
            ClientSideEffect_exposer.def( 
                "IsActive"
                , IsActive_function_type( &::PyClientSideEffect::IsActive ) );
        
        }
        { //::PyClientSideEffect::RemoveMeshBuilder
        
            typedef void ( ::PyClientSideEffect::*RemoveMeshBuilder_function_type)( ::boost::python::api::object ) ;
            
            ClientSideEffect_exposer.def( 
                "RemoveMeshBuilder"
                , RemoveMeshBuilder_function_type( &::PyClientSideEffect::RemoveMeshBuilder )
                , ( bp::arg("meshbuilder") ) );
        
        }
    }

    { //::PyMeshBuilder
        typedef bp::class_< PyMeshBuilder_wrapper, boost::noncopyable > MeshBuilder_exposer_t;
        MeshBuilder_exposer_t MeshBuilder_exposer = MeshBuilder_exposer_t( "MeshBuilder", bp::init< char const *, bp::optional< MaterialPrimitiveType_t > >(( bp::arg("pMaterialName"), bp::arg("type")=::MaterialPrimitiveType_t::MATERIAL_POINTS )) );
        bp::scope MeshBuilder_scope( MeshBuilder_exposer );
        bp::implicitly_convertible< char const *, PyMeshBuilder >();
        { //::PyMeshBuilder::AddVertex
        
            typedef void ( ::PyMeshBuilder::*AddVertex_function_type)( ::PyMeshVertex & ) ;
            
            MeshBuilder_exposer.def( 
                "AddVertex"
                , AddVertex_function_type( &::PyMeshBuilder::AddVertex )
                , ( bp::arg("vertex") ) );
        
        }
        { //::PyMeshBuilder::Draw
        
            typedef void ( ::PyMeshBuilder::*Draw_function_type)( double ) ;
            
            MeshBuilder_exposer.def( 
                "Draw"
                , Draw_function_type( &::PyMeshBuilder::Draw )
                , ( bp::arg("frametime") ) );
        
        }
        { //::PyMeshBuilder::GetNumPrimitives
        
            typedef int ( PyMeshBuilder_wrapper::*GetNumPrimitives_function_type)(  ) ;
            
            MeshBuilder_exposer.def( 
                "GetNumPrimitives"
                , GetNumPrimitives_function_type( &PyMeshBuilder_wrapper::GetNumPrimitives ) );
        
        }
        { //::PyMeshBuilder::SetMaterial
        
            typedef void ( ::PyMeshBuilder::*SetMaterial_function_type)( char const * ) ;
            
            MeshBuilder_exposer.def( 
                "SetMaterial"
                , SetMaterial_function_type( &::PyMeshBuilder::SetMaterial )
                , ( bp::arg("pMaterialName") ) );
        
        }
    }

    { //::PyMeshRallyLine
        typedef bp::class_< PyMeshRallyLine_wrapper, bp::bases< PyMeshBuilder >, boost::noncopyable > MeshRallyLine_exposer_t;
        MeshRallyLine_exposer_t MeshRallyLine_exposer = MeshRallyLine_exposer_t( "MeshRallyLine", bp::init< char const * >(( bp::arg("pMaterialName") )) );
        bp::scope MeshRallyLine_scope( MeshRallyLine_exposer );
        bp::implicitly_convertible< char const *, PyMeshRallyLine >();
        { //::PyMeshRallyLine::Draw
        
            typedef void ( ::PyMeshRallyLine::*Draw_function_type)( double ) ;
            
            MeshRallyLine_exposer.def( 
                "Draw"
                , Draw_function_type( &::PyMeshRallyLine::Draw )
                , ( bp::arg("frametime") ) );
        
        }
        { //::PyMeshRallyLine::Init
        
            typedef void ( ::PyMeshRallyLine::*Init_function_type)(  ) ;
            
            MeshRallyLine_exposer.def( 
                "Init"
                , Init_function_type( &::PyMeshRallyLine::Init ) );
        
        }
        MeshRallyLine_exposer.def_readwrite( "color", &PyMeshRallyLine::color );
        MeshRallyLine_exposer.def_readwrite( "point1", &PyMeshRallyLine::point1 );
        MeshRallyLine_exposer.def_readwrite( "point2", &PyMeshRallyLine::point2 );
        MeshRallyLine_exposer.def_readwrite( "size", &PyMeshRallyLine::size );
        MeshRallyLine_exposer.def_readwrite( "texturex", &PyMeshRallyLine::texturex );
        MeshRallyLine_exposer.def_readwrite( "texturexscale", &PyMeshRallyLine::texturexscale );
        MeshRallyLine_exposer.def_readwrite( "texturey", &PyMeshRallyLine::texturey );
        MeshRallyLine_exposer.def_readwrite( "textureyscale", &PyMeshRallyLine::textureyscale );
        { //::PyMeshBuilder::GetNumPrimitives
        
            typedef int ( PyMeshRallyLine_wrapper::*GetNumPrimitives_function_type)(  ) ;
            
            MeshRallyLine_exposer.def( 
                "GetNumPrimitives"
                , GetNumPrimitives_function_type( &PyMeshRallyLine_wrapper::GetNumPrimitives ) );
        
        }
        { //property "ent1"[fget=::PyMeshRallyLine::GetEnt1, fset=::PyMeshRallyLine::SetEnt1]
        
            typedef ::C_BaseEntity * ( ::PyMeshRallyLine::*fget)(  ) ;
            typedef void ( ::PyMeshRallyLine::*fset)( ::C_BaseEntity * ) ;
            
            MeshRallyLine_exposer.add_property( 
                "ent1"
                , bp::make_function( 
                      fget( &::PyMeshRallyLine::GetEnt1 )
                    , bp::return_value_policy< bp::return_by_value >() ) 
                , fset( &::PyMeshRallyLine::SetEnt1 ) );
        
        }
        { //property "ent2"[fget=::PyMeshRallyLine::GetEnt2, fset=::PyMeshRallyLine::SetEnt2]
        
            typedef ::C_BaseEntity * ( ::PyMeshRallyLine::*fget)(  ) ;
            typedef void ( ::PyMeshRallyLine::*fset)( ::C_BaseEntity * ) ;
            
            MeshRallyLine_exposer.add_property( 
                "ent2"
                , bp::make_function( 
                      fget( &::PyMeshRallyLine::GetEnt2 )
                    , bp::return_value_policy< bp::return_by_value >() ) 
                , fset( &::PyMeshRallyLine::SetEnt2 ) );
        
        }
    }

    { //::PyMeshVertex
        typedef bp::class_< PyMeshVertex_wrapper > MeshVertex_exposer_t;
        MeshVertex_exposer_t MeshVertex_exposer = MeshVertex_exposer_t( "MeshVertex", bp::init< >() );
        bp::scope MeshVertex_scope( MeshVertex_exposer );
        { //::PyMeshVertex::Draw
        
            typedef void ( ::PyMeshVertex::*Draw_function_type)( ::CMeshBuilder & ) ;
            typedef void ( PyMeshVertex_wrapper::*default_Draw_function_type)( ::CMeshBuilder & ) ;
            
            MeshVertex_exposer.def( 
                "Draw"
                , Draw_function_type(&::PyMeshVertex::Draw)
                , default_Draw_function_type(&PyMeshVertex_wrapper::default_Draw)
                , ( bp::arg("builder") ) );
        
        }
        MeshVertex_exposer.def_readwrite( "color", &PyMeshVertex::color );
        MeshVertex_exposer.def_readwrite( "normal", &PyMeshVertex::normal );
        MeshVertex_exposer.def_readwrite( "position", &PyMeshVertex::position );
        MeshVertex_exposer.def_readwrite( "s", &PyMeshVertex::s );
        MeshVertex_exposer.def_readwrite( "stage", &PyMeshVertex::stage );
        MeshVertex_exposer.def_readwrite( "t", &PyMeshVertex::t );
        { //property "ent"[fget=::PyMeshVertex::GetEnt, fset=::PyMeshVertex::SetEnt]
        
            typedef ::C_BaseEntity * ( ::PyMeshVertex::*fget)(  ) ;
            typedef void ( ::PyMeshVertex::*fset)( ::C_BaseEntity * ) ;
            
            MeshVertex_exposer.add_property( 
                "ent"
                , bp::make_function( 
                      fget( &::PyMeshVertex::GetEnt )
                    , bp::return_value_policy< bp::return_by_value >() ) 
                , fset( &::PyMeshVertex::SetEnt ) );
        
        }
    }

    { //::AddToClientEffectList
    
        typedef void ( *AddToClientEffectList_function_type )( ::boost::python::api::object );
        
        bp::def( 
            "AddToClientEffectList"
            , AddToClientEffectList_function_type( &::AddToClientEffectList )
            , ( bp::arg("effect") ) );
    
    }

    { //::DispatchEffect
    
        typedef void ( *DispatchEffect_function_type )( char const *,::CEffectData const & );
        
        bp::def( 
            "DispatchEffect"
            , DispatchEffect_function_type( &::DispatchEffect )
            , ( bp::arg("pName"), bp::arg("data") ) );
    
    }

    { //::FX_AddQuad
    
        typedef void ( *FX_AddQuad_function_type )( ::FXQuadData_t const & );
        
        bp::def( 
            "FX_AddQuad"
            , FX_AddQuad_function_type( &::FX_AddQuad )
            , ( bp::arg("data") ) );
    
    }

    { //::FX_AddQuad
    
        typedef void ( *FX_AddQuad_function_type )( ::Vector const &,::Vector const &,float,float,float,float,float,float,float,float,::Vector const &,float,char const *,unsigned int );
        
        bp::def( 
            "FX_AddQuad"
            , FX_AddQuad_function_type( &::FX_AddQuad )
            , ( bp::arg("origin"), bp::arg("normal"), bp::arg("startSize"), bp::arg("endSize"), bp::arg("sizeBias"), bp::arg("startAlpha"), bp::arg("endAlpha"), bp::arg("alphaBias"), bp::arg("yaw"), bp::arg("deltaYaw"), bp::arg("color"), bp::arg("lifeTime"), bp::arg("shader"), bp::arg("flags") ) );
    
    }

    { //::FX_AntlionImpact
    
        typedef void ( *FX_AntlionImpact_function_type )( ::Vector const &,::trace_t * );
        
        bp::def( 
            "FX_AntlionImpact"
            , FX_AntlionImpact_function_type( &::FX_AntlionImpact )
            , ( bp::arg("pos"), bp::arg("tr") ) );
    
    }

    { //::FX_Blood
    
        typedef void ( *FX_Blood_function_type )( ::Vector &,::Vector &,float,float,float,float );
        
        bp::def( 
            "FX_Blood"
            , FX_Blood_function_type( &::FX_Blood )
            , ( bp::arg("pos"), bp::arg("dir"), bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("a") ) );
    
    }

    { //::FX_BugBlood
    
        typedef void ( *FX_BugBlood_function_type )( ::Vector &,::Vector &,::Vector &,::Vector & );
        
        bp::def( 
            "FX_BugBlood"
            , FX_BugBlood_function_type( &::FX_BugBlood )
            , ( bp::arg("pos"), bp::arg("dir"), bp::arg("vWorldMins"), bp::arg("vWorldMaxs") ) );
    
    }

    { //::FX_ConcussiveExplosion
    
        typedef void ( *FX_ConcussiveExplosion_function_type )( ::Vector &,::Vector & );
        
        bp::def( 
            "FX_ConcussiveExplosion"
            , FX_ConcussiveExplosion_function_type( &::FX_ConcussiveExplosion )
            , ( bp::arg("origin"), bp::arg("normal") ) );
    
    }

    { //::FX_DebrisFlecks
    
        typedef void ( *FX_DebrisFlecks_function_type )( ::Vector const &,::trace_t *,char,int,bool );
        
        bp::def( 
            "FX_DebrisFlecks"
            , FX_DebrisFlecks_function_type( &::FX_DebrisFlecks )
            , ( bp::arg("origin"), bp::arg("trace"), bp::arg("materialType"), bp::arg("iScale"), bp::arg("bNoFlecks")=(bool)(false) ) );
    
    }

    { //::FX_Dust
    
        typedef void ( *FX_Dust_function_type )( ::Vector const &,::Vector const &,float,float );
        
        bp::def( 
            "FX_Dust"
            , FX_Dust_function_type( &::FX_Dust )
            , ( bp::arg("vecOrigin"), bp::arg("vecDirection"), bp::arg("flSize"), bp::arg("flSpeed") ) );
    
    }

    { //::FX_DustImpact
    
        typedef void ( *FX_DustImpact_function_type )( ::Vector const &,::trace_t *,int );
        
        bp::def( 
            "FX_DustImpact"
            , FX_DustImpact_function_type( &::FX_DustImpact )
            , ( bp::arg("origin"), bp::arg("tr"), bp::arg("iScale") ) );
    
    }

    { //::FX_DustImpact
    
        typedef void ( *FX_DustImpact_function_type )( ::Vector const &,::trace_t *,float );
        
        bp::def( 
            "FX_DustImpact"
            , FX_DustImpact_function_type( &::FX_DustImpact )
            , ( bp::arg("origin"), bp::arg("tr"), bp::arg("flScale") ) );
    
    }

    { //::FX_ElectricSpark
    
        typedef void ( *FX_ElectricSpark_function_type )( ::Vector const &,int,int,::Vector const * );
        
        bp::def( 
            "FX_ElectricSpark"
            , FX_ElectricSpark_function_type( &::FX_ElectricSpark )
            , ( bp::arg("pos"), bp::arg("nMagnitude"), bp::arg("nTrailLength"), bp::arg("vecDir") ) );
    
    }

    { //::FX_EnergySplash
    
        typedef void ( *FX_EnergySplash_function_type )( ::Vector const &,::Vector const &,int );
        
        bp::def( 
            "FX_EnergySplash"
            , FX_EnergySplash_function_type( &::FX_EnergySplash )
            , ( bp::arg("pos"), bp::arg("normal"), bp::arg("nFlags")=int(::FX_ENERGYSPLASH_DEFAULT) ) );
    
    }

    { //::FX_Explosion
    
        typedef void ( *FX_Explosion_function_type )( ::Vector &,::Vector &,char );
        
        bp::def( 
            "FX_Explosion"
            , FX_Explosion_function_type( &::FX_Explosion )
            , ( bp::arg("origin"), bp::arg("normal"), bp::arg("materialType") ) );
    
    }

    { //::FX_GaussTracer
    
        typedef void ( *FX_GaussTracer_function_type )( ::Vector &,::Vector &,int,bool );
        
        bp::def( 
            "FX_GaussTracer"
            , FX_GaussTracer_function_type( &::FX_GaussTracer )
            , ( bp::arg("start"), bp::arg("end"), bp::arg("velocity"), bp::arg("makeWhiz")=(bool)(true) ) );
    
    }

    { //::FX_GunshipMuzzleEffect
    
        typedef void ( *FX_GunshipMuzzleEffect_function_type )( ::Vector const &,::QAngle const &,float,::ClientEntityHandle_t,unsigned char * );
        
        bp::def( 
            "FX_GunshipMuzzleEffect"
            , FX_GunshipMuzzleEffect_function_type( &::FX_GunshipMuzzleEffect )
            , ( bp::arg("origin"), bp::arg("angles"), bp::arg("scale"), bp::arg("hEntity"), bp::arg("pFlashColor")=bp::object() ) );
    
    }

    { //::FX_GunshipTracer
    
        typedef void ( *FX_GunshipTracer_function_type )( ::Vector &,::Vector &,int,bool );
        
        bp::def( 
            "FX_GunshipTracer"
            , FX_GunshipTracer_function_type( &::FX_GunshipTracer )
            , ( bp::arg("start"), bp::arg("end"), bp::arg("velocity"), bp::arg("makeWhiz")=(bool)(true) ) );
    
    }

    { //::FX_HunterTracer
    
        typedef void ( *FX_HunterTracer_function_type )( ::Vector &,::Vector &,int,bool );
        
        bp::def( 
            "FX_HunterTracer"
            , FX_HunterTracer_function_type( &::FX_HunterTracer )
            , ( bp::arg("start"), bp::arg("end"), bp::arg("velocity"), bp::arg("makeWhiz")=(bool)(true) ) );
    
    }

    { //::FX_MetalScrape
    
        typedef void ( *FX_MetalScrape_function_type )( ::Vector &,::Vector & );
        
        bp::def( 
            "FX_MetalScrape"
            , FX_MetalScrape_function_type( &::FX_MetalScrape )
            , ( bp::arg("position"), bp::arg("normal") ) );
    
    }

    { //::FX_MetalSpark
    
        typedef void ( *FX_MetalSpark_function_type )( ::Vector const &,::Vector const &,::Vector const &,int );
        
        bp::def( 
            "FX_MetalSpark"
            , FX_MetalSpark_function_type( &::FX_MetalSpark )
            , ( bp::arg("position"), bp::arg("direction"), bp::arg("surfaceNormal"), bp::arg("iScale")=(int)(1) ) );
    
    }

    { //::FX_MicroExplosion
    
        typedef void ( *FX_MicroExplosion_function_type )( ::Vector &,::Vector & );
        
        bp::def( 
            "FX_MicroExplosion"
            , FX_MicroExplosion_function_type( &::FX_MicroExplosion )
            , ( bp::arg("position"), bp::arg("normal") ) );
    
    }

    { //::FX_MuzzleEffect
    
        typedef void ( *FX_MuzzleEffect_function_type )( ::Vector const &,::QAngle const &,float,::ClientEntityHandle_t,unsigned char *,bool );
        
        bp::def( 
            "FX_MuzzleEffect"
            , FX_MuzzleEffect_function_type( &::FX_MuzzleEffect )
            , ( bp::arg("origin"), bp::arg("angles"), bp::arg("scale"), bp::arg("hEntity"), bp::arg("pFlashColor")=bp::object(), bp::arg("bOneFrame")=(bool)(false) ) );
    
    }

    { //::FX_MuzzleEffectAttached
    
        typedef void ( *FX_MuzzleEffectAttached_function_type )( float,::ClientEntityHandle_t,int,unsigned char *,bool );
        
        bp::def( 
            "FX_MuzzleEffectAttached"
            , FX_MuzzleEffectAttached_function_type( &::FX_MuzzleEffectAttached )
            , ( bp::arg("scale"), bp::arg("hEntity"), bp::arg("attachmentIndex"), bp::arg("pFlashColor")=bp::object(), bp::arg("bOneFrame")=(bool)(false) ) );
    
    }

    { //::FX_PlayerTracer
    
        typedef void ( *FX_PlayerTracer_function_type )( ::Vector &,::Vector & );
        
        bp::def( 
            "FX_PlayerTracer"
            , FX_PlayerTracer_function_type( &::FX_PlayerTracer )
            , ( bp::arg("start"), bp::arg("end") ) );
    
    }

    { //::FX_RicochetSound
    
        typedef void ( *FX_RicochetSound_function_type )( ::Vector const & );
        
        bp::def( 
            "FX_RicochetSound"
            , FX_RicochetSound_function_type( &::FX_RicochetSound )
            , ( bp::arg("pos") ) );
    
    }

    { //::FX_Smoke
    
        typedef ::CSmartPtr< CSimpleEmitter, CRefCountAccessor > ( *FX_Smoke_function_type )( ::Vector const &,::Vector const &,float,int,float,unsigned char *,int,char const *,float,float );
        
        bp::def( 
            "FX_Smoke"
            , FX_Smoke_function_type( &::FX_Smoke )
            , ( bp::arg("origin"), bp::arg("velocity"), bp::arg("scale"), bp::arg("numParticles"), bp::arg("flDietime"), bp::arg("pColor"), bp::arg("iAlpha"), bp::arg("pMaterial"), bp::arg("flRoll"), bp::arg("flRollDelta") ) );
    
    }

    { //::FX_Smoke
    
        typedef void ( *FX_Smoke_function_type )( ::Vector const &,::QAngle const &,float,int,unsigned char *,int );
        
        bp::def( 
            "FX_Smoke"
            , FX_Smoke_function_type( &::FX_Smoke )
            , ( bp::arg("origin"), bp::arg("angles"), bp::arg("scale"), bp::arg("numParticles"), bp::arg("pColor")=bp::object(), bp::arg("iAlpha")=(int)(-1) ) );
    
    }

    { //::FX_Sparks
    
        typedef void ( *FX_Sparks_function_type )( ::Vector const &,int,int,::Vector const &,float,float,float,char * );
        
        bp::def( 
            "FX_Sparks"
            , FX_Sparks_function_type( &::FX_Sparks )
            , ( bp::arg("pos"), bp::arg("nMagnitude"), bp::arg("nTrailLength"), bp::arg("vecDir"), bp::arg("flWidth"), bp::arg("flMinSpeed"), bp::arg("flMaxSpeed"), bp::arg("pSparkMaterial")=bp::object() ) );
    
    }

    { //::FX_StriderMuzzleEffect
    
        typedef void ( *FX_StriderMuzzleEffect_function_type )( ::Vector const &,::QAngle const &,float,::ClientEntityHandle_t,unsigned char * );
        
        bp::def( 
            "FX_StriderMuzzleEffect"
            , FX_StriderMuzzleEffect_function_type( &::FX_StriderMuzzleEffect )
            , ( bp::arg("origin"), bp::arg("angles"), bp::arg("scale"), bp::arg("hEntity"), bp::arg("pFlashColor")=bp::object() ) );
    
    }

    { //::FX_StriderTracer
    
        typedef void ( *FX_StriderTracer_function_type )( ::Vector &,::Vector &,int,bool );
        
        bp::def( 
            "FX_StriderTracer"
            , FX_StriderTracer_function_type( &::FX_StriderTracer )
            , ( bp::arg("start"), bp::arg("end"), bp::arg("velocity"), bp::arg("makeWhiz")=(bool)(true) ) );
    
    }

    { //::FX_Tracer
    
        typedef void ( *FX_Tracer_function_type )( ::Vector &,::Vector &,int,bool );
        
        bp::def( 
            "FX_Tracer"
            , FX_Tracer_function_type( &::FX_Tracer )
            , ( bp::arg("start"), bp::arg("end"), bp::arg("velocity"), bp::arg("makeWhiz")=(bool)(true) ) );
    
    }

    bp::scope().attr( "te" ) = boost::ref(te);

    bp::scope().attr( "tempents" ) = boost::ref(tempents);

    bp::scope().attr( "FTENT_NONE" ) = (int)FTENT_NONE;

    bp::scope().attr( "FTENT_SINEWAVE" ) = (int)FTENT_SINEWAVE;

    bp::scope().attr( "FTENT_GRAVITY" ) = (int)FTENT_GRAVITY;

    bp::scope().attr( "FTENT_ROTATE" ) = (int)FTENT_ROTATE;

    bp::scope().attr( "FTENT_SLOWGRAVITY" ) = (int)FTENT_SLOWGRAVITY;

    bp::scope().attr( "FTENT_SMOKETRAIL" ) = (int)FTENT_SMOKETRAIL;

    bp::scope().attr( "FTENT_COLLIDEWORLD" ) = (int)FTENT_COLLIDEWORLD;

    bp::scope().attr( "FTENT_FLICKER" ) = (int)FTENT_FLICKER;

    bp::scope().attr( "FTENT_FADEOUT" ) = (int)FTENT_FADEOUT;

    bp::scope().attr( "FTENT_SPRANIMATE" ) = (int)FTENT_SPRANIMATE;

    bp::scope().attr( "FTENT_HITSOUND" ) = (int)FTENT_HITSOUND;

    bp::scope().attr( "FTENT_SPIRAL" ) = (int)FTENT_SPIRAL;

    bp::scope().attr( "FTENT_SPRCYCLE" ) = (int)FTENT_SPRCYCLE;

    bp::scope().attr( "FTENT_COLLIDEALL" ) = (int)FTENT_COLLIDEALL;

    bp::scope().attr( "FTENT_PERSIST" ) = (int)FTENT_PERSIST;

    bp::scope().attr( "FTENT_COLLIDEKILL" ) = (int)FTENT_COLLIDEKILL;

    bp::scope().attr( "FTENT_PLYRATTACHMENT" ) = (int)FTENT_PLYRATTACHMENT;

    bp::scope().attr( "FTENT_SPRANIMATELOOP" ) = (int)FTENT_SPRANIMATELOOP;

    bp::scope().attr( "FTENT_SMOKEGROWANDFADE" ) = (int)FTENT_SMOKEGROWANDFADE;

    bp::scope().attr( "FTENT_ATTACHTOTARGET" ) = (int)FTENT_ATTACHTOTARGET;

    bp::scope().attr( "FTENT_NOMODEL" ) = (int)FTENT_NOMODEL;

    bp::scope().attr( "FTENT_CLIENTCUSTOM" ) = (int)FTENT_CLIENTCUSTOM;

    bp::scope().attr( "FTENT_WINDBLOWN" ) = (int)FTENT_WINDBLOWN;

    bp::scope().attr( "FTENT_NEVERDIE" ) = (int)FTENT_NEVERDIE;

    bp::scope().attr( "FTENT_BEOCCLUDED" ) = (int)FTENT_BEOCCLUDED;

    bp::scope().attr( "FTENT_CHANGERENDERONCOLLIDE" ) = (int)FTENT_CHANGERENDERONCOLLIDE;

    bp::scope().attr( "FTENT_COLLISIONGROUP" ) = (int)FTENT_COLLISIONGROUP;

    bp::scope().attr( "FTENT_ALIGNTOMOTION" ) = (int)FTENT_ALIGNTOMOTION;

    bp::scope().attr( "FTENT_CLIENTSIDEPARTICLES" ) = (int)FTENT_CLIENTSIDEPARTICLES;

    bp::scope().attr( "FTENT_USEFASTCOLLISIONS" ) = (int)FTENT_USEFASTCOLLISIONS;

    { //::FX_TracerSound
    
        typedef void ( *FX_TracerSound_function_type )( ::Vector const &,::Vector const &,int );
        
        bp::def( 
            "FX_TracerSound"
            , FX_TracerSound_function_type( &::FX_TracerSound )
            , ( bp::arg("start"), bp::arg("end"), bp::arg("iTracerType") ) );
    
    }
}
#else
#include "cbase.h"

#include "effect_dispatch_data.h"

#include "srcpy_te.h"

#include "te_effect_dispatch.h"

#include "tier0/valve_minmax_off.h"

#include "srcpy.h"

#include "tier0/valve_minmax_on.h"

#include "tier0/memdbgon.h"

namespace bp = boost::python;

BOOST_PYTHON_MODULE(_te){
    bp::docstring_options doc_options( true, true, false );

    bp::class_< CEffectData >( "CEffectData", bp::init< >() )    
        .def( 
            "GetEffectNameIndex"
            , (int ( ::CEffectData::* )(  ))( &::CEffectData::GetEffectNameIndex ) )    
        .def_readwrite( "m_ControlPoint1", &CEffectData::m_ControlPoint1 )    
        .def_readwrite( "m_CustomColors", &CEffectData::m_CustomColors )    
        .def_readwrite( "m_bControlPoint1", &CEffectData::m_bControlPoint1 )    
        .def_readwrite( "m_bCustomColors", &CEffectData::m_bCustomColors )    
        .def_readwrite( "flags", &CEffectData::m_fFlags )    
        .def_readwrite( "magnitude", &CEffectData::m_flMagnitude )    
        .def_readwrite( "radius", &CEffectData::m_flRadius )    
        .def_readwrite( "scale", &CEffectData::m_flScale )    
        .def_readwrite( "m_iEffectName", &CEffectData::m_iEffectName )    
        .def_readwrite( "attachmentindex", &CEffectData::m_nAttachmentIndex )    
        .def_readwrite( "color", &CEffectData::m_nColor )    
        .def_readwrite( "damagetype", &CEffectData::m_nDamageType )    
        .def_readwrite( "hitbox", &CEffectData::m_nHitBox )    
        .def_readwrite( "material", &CEffectData::m_nMaterial )    
        .def_readwrite( "surfaceprop", &CEffectData::m_nSurfaceProp )    
        .def_readwrite( "angles", &CEffectData::m_vAngles )    
        .def_readwrite( "normal", &CEffectData::m_vNormal )    
        .def_readwrite( "origin", &CEffectData::m_vOrigin )    
        .def_readwrite( "start", &CEffectData::m_vStart );

    bp::class_< ITempEntsSystem, boost::noncopyable >( "ITempEntsSystem", bp::no_init )    
        .def( 
            "ArmorRicochet"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::Vector const * ))( &::ITempEntsSystem::ArmorRicochet )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("dir") ) )    
        .def( 
            "BSPDecal"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,int,int ))( &::ITempEntsSystem::BSPDecal )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("entity"), bp::arg("index") ) )    
        .def( 
            "BeamEntPoint"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,int,::Vector const *,int,::Vector const *,int,int,int,int,float,float,float,int,float,int,int,int,int,int ))( &::ITempEntsSystem::BeamEntPoint )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("nStartEntity"), bp::arg("start"), bp::arg("nEndEntity"), bp::arg("end"), bp::arg("modelindex"), bp::arg("haloindex"), bp::arg("startframe"), bp::arg("framerate"), bp::arg("life"), bp::arg("width"), bp::arg("endWidth"), bp::arg("fadeLength"), bp::arg("amplitude"), bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("a"), bp::arg("speed") ) )    
        .def( 
            "BeamEnts"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,int,int,int,int,int,int,float,float,float,int,float,int,int,int,int,int ))( &::ITempEntsSystem::BeamEnts )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("start"), bp::arg("end"), bp::arg("modelindex"), bp::arg("haloindex"), bp::arg("startframe"), bp::arg("framerate"), bp::arg("life"), bp::arg("width"), bp::arg("endWidth"), bp::arg("fadeLength"), bp::arg("amplitude"), bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("a"), bp::arg("speed") ) )    
        .def( 
            "BeamFollow"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,int,int,int,float,float,float,float,float,float,float,float ))( &::ITempEntsSystem::BeamFollow )
            , ( bp::arg("filter"), bp::arg("delay"), bp::arg("iEntIndex"), bp::arg("modelIndex"), bp::arg("haloIndex"), bp::arg("life"), bp::arg("width"), bp::arg("endWidth"), bp::arg("fadeLength"), bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("a") ) )    
        .def( 
            "BeamLaser"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,int,int,int,int,int,int,float,float,float,int,float,int,int,int,int,int ))( &::ITempEntsSystem::BeamLaser )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("start"), bp::arg("end"), bp::arg("modelindex"), bp::arg("haloindex"), bp::arg("startframe"), bp::arg("framerate"), bp::arg("life"), bp::arg("width"), bp::arg("endWidth"), bp::arg("fadeLength"), bp::arg("amplitude"), bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("a"), bp::arg("speed") ) )    
        .def( 
            "BeamPoints"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::Vector const *,int,int,int,int,float,float,float,int,float,int,int,int,int,int ))( &::ITempEntsSystem::BeamPoints )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("start"), bp::arg("end"), bp::arg("modelindex"), bp::arg("haloindex"), bp::arg("startframe"), bp::arg("framerate"), bp::arg("life"), bp::arg("width"), bp::arg("endWidth"), bp::arg("fadeLength"), bp::arg("amplitude"), bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("a"), bp::arg("speed") ) )    
        .def( 
            "BeamRing"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,int,int,int,int,int,int,float,float,int,float,int,int,int,int,int,int ))( &::ITempEntsSystem::BeamRing )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("start"), bp::arg("end"), bp::arg("modelindex"), bp::arg("haloindex"), bp::arg("startframe"), bp::arg("framerate"), bp::arg("life"), bp::arg("width"), bp::arg("spread"), bp::arg("amplitude"), bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("a"), bp::arg("speed"), bp::arg("flags")=(int)(0) ) )    
        .def( 
            "BeamRingPoint"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const &,float,float,int,int,int,int,float,float,int,float,int,int,int,int,int,int ))( &::ITempEntsSystem::BeamRingPoint )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("center"), bp::arg("start_radius"), bp::arg("end_radius"), bp::arg("modelindex"), bp::arg("haloindex"), bp::arg("startframe"), bp::arg("framerate"), bp::arg("life"), bp::arg("width"), bp::arg("spread"), bp::arg("amplitude"), bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("a"), bp::arg("speed"), bp::arg("flags")=(int)(0) ) )    
        .def( 
            "BeamSpline"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,int,::Vector * ))( &::ITempEntsSystem::BeamSpline )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("points"), bp::arg("rgPoints") ) )    
        .def( 
            "BloodSprite"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::Vector const *,int,int,int,int,int ))( &::ITempEntsSystem::BloodSprite )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("org"), bp::arg("dir"), bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("a"), bp::arg("size") ) )    
        .def( 
            "BloodStream"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::Vector const *,int,int,int,int,int ))( &::ITempEntsSystem::BloodStream )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("org"), bp::arg("dir"), bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("a"), bp::arg("amount") ) )    
        .def( 
            "BreakModel"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const &,::QAngle const &,::Vector const &,::Vector const &,int,int,int,float,int ))( &::ITempEntsSystem::BreakModel )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("angle"), bp::arg("size"), bp::arg("vel"), bp::arg("modelindex"), bp::arg("randomization"), bp::arg("count"), bp::arg("time"), bp::arg("flags") ) )    
        .def( 
            "BubbleTrail"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::Vector const *,float,int,int,float ))( &::ITempEntsSystem::BubbleTrail )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("mins"), bp::arg("maxs"), bp::arg("height"), bp::arg("modelindex"), bp::arg("count"), bp::arg("speed") ) )    
        .def( 
            "Bubbles"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::Vector const *,float,int,int,float ))( &::ITempEntsSystem::Bubbles )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("mins"), bp::arg("maxs"), bp::arg("height"), bp::arg("modelindex"), bp::arg("count"), bp::arg("speed") ) )    
        .def( 
            "ClientProjectile"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::Vector const *,int,int,::CBaseEntity * ))( &::ITempEntsSystem::ClientProjectile )
            , ( bp::arg("filter"), bp::arg("delay"), bp::arg("vecOrigin"), bp::arg("vecVelocity"), bp::arg("modelindex"), bp::arg("lifetime"), bp::arg("pOwner") ) )    
        .def( 
            "Decal"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::Vector const *,int,int,int ))( &::ITempEntsSystem::Decal )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("start"), bp::arg("entity"), bp::arg("hitbox"), bp::arg("index") ) )    
        .def( 
            "DispatchEffect"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const &,char const *,::CEffectData const & ))( &::ITempEntsSystem::DispatchEffect )
            , ( bp::arg("filter"), bp::arg("delay"), bp::arg("pos"), bp::arg("pName"), bp::arg("data") ) )    
        .def( 
            "Dust"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const &,::Vector const &,float,float ))( &::ITempEntsSystem::Dust )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("dir"), bp::arg("size"), bp::arg("speed") ) )    
        .def( 
            "DynamicLight"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,int,int,int,int,float,float,float ))( &::ITempEntsSystem::DynamicLight )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("org"), bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("exponent"), bp::arg("radius"), bp::arg("time"), bp::arg("decay") ) )    
        .def( 
            "EnergySplash"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::Vector const *,bool ))( &::ITempEntsSystem::EnergySplash )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("dir"), bp::arg("bExplosive") ) )    
        .def( 
            "Explosion"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,int,float,int,int,int,int,::Vector const *,unsigned char ))( &::ITempEntsSystem::Explosion )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("modelindex"), bp::arg("scale"), bp::arg("framerate"), bp::arg("flags"), bp::arg("radius"), bp::arg("magnitude"), bp::arg("normal")=bp::object(), bp::arg("materialType")=(unsigned char)('C') ) )    
        .def( 
            "Fizz"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::CBaseEntity const *,int,int,int ))( &::ITempEntsSystem::Fizz )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("ed"), bp::arg("modelindex"), bp::arg("density"), bp::arg("current") ) )    
        .def( 
            "FootprintDecal"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::Vector const *,int,int,unsigned char ))( &::ITempEntsSystem::FootprintDecal )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("origin"), bp::arg("right"), bp::arg("entity"), bp::arg("index"), bp::arg("materialType") ) )    
        .def( 
            "GaussExplosion"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const &,::Vector const &,int ))( &::ITempEntsSystem::GaussExplosion )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("dir"), bp::arg("type") ) )    
        .def( 
            "GlowSprite"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,int,float,float,int ))( &::ITempEntsSystem::GlowSprite )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("modelindex"), bp::arg("life"), bp::arg("size"), bp::arg("brightness") ) )    
        .def( 
            "KillPlayerAttachments"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,int ))( &::ITempEntsSystem::KillPlayerAttachments )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("player") ) )    
        .def( 
            "LargeFunnel"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,int,int ))( &::ITempEntsSystem::LargeFunnel )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("modelindex"), bp::arg("reversed") ) )    
        .def( 
            "MetalSparks"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::Vector const * ))( &::ITempEntsSystem::MetalSparks )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("dir") ) )    
        .def( 
            "MuzzleFlash"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const &,::QAngle const &,float,int ))( &::ITempEntsSystem::MuzzleFlash )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("start"), bp::arg("angles"), bp::arg("scale"), bp::arg("type") ) )    
        .def( 
            "PhysicsProp"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,int,int,::Vector const &,::QAngle const &,::Vector const &,int,int ))( &::ITempEntsSystem::PhysicsProp )
            , ( bp::arg("filter"), bp::arg("delay"), bp::arg("modelindex"), bp::arg("skin"), bp::arg("pos"), bp::arg("angles"), bp::arg("vel"), bp::arg("flags"), bp::arg("effects") ) )    
        .def( 
            "PlayerDecal"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,int,int ))( &::ITempEntsSystem::PlayerDecal )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("player"), bp::arg("entity") ) )    
        .def( 
            "ProjectDecal"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::QAngle const *,float,int ))( &::ITempEntsSystem::ProjectDecal )
            , ( bp::arg("filter"), bp::arg("delay"), bp::arg("pos"), bp::arg("angles"), bp::arg("distance"), bp::arg("index") ) )    
        .def( 
            "ShatterSurface"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::QAngle const *,::Vector const *,::Vector const *,float,float,float,::ShatterSurface_t,int,int,int,int,int,int ))( &::ITempEntsSystem::ShatterSurface )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("angle"), bp::arg("vForce"), bp::arg("vForcePos"), bp::arg("width"), bp::arg("height"), bp::arg("shardsize"), bp::arg("surfacetype"), bp::arg("front_r"), bp::arg("front_g"), bp::arg("front_b"), bp::arg("back_r"), bp::arg("back_g"), bp::arg("back_b") ) )    
        .def( 
            "ShowLine"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::Vector const * ))( &::ITempEntsSystem::ShowLine )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("start"), bp::arg("end") ) )    
        .def( 
            "Smoke"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,int,float,int ))( &::ITempEntsSystem::Smoke )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("modelindex"), bp::arg("scale"), bp::arg("framerate") ) )    
        .def( 
            "Sparks"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,int,int,::Vector const * ))( &::ITempEntsSystem::Sparks )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("nMagnitude"), bp::arg("nTrailLength"), bp::arg("pDir") ) )    
        .def( 
            "Sprite"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,int,float,int ))( &::ITempEntsSystem::Sprite )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("modelindex"), bp::arg("size"), bp::arg("brightness") ) )    
        .def( 
            "SpriteSpray"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,::Vector const *,int,int,float,int ))( &::ITempEntsSystem::SpriteSpray )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("dir"), bp::arg("modelindex"), bp::arg("speed"), bp::arg("noise"), bp::arg("count") ) )    
        .def( 
            "TriggerTempEntity"
            , (void ( ::ITempEntsSystem::* )( ::KeyValues * ))( &::ITempEntsSystem::TriggerTempEntity )
            , ( bp::arg("pKeyValues") ) )    
        .def( 
            "WorldDecal"
            , (void ( ::ITempEntsSystem::* )( ::IRecipientFilter &,float,::Vector const *,int ))( &::ITempEntsSystem::WorldDecal )
            , ( bp::arg("filer"), bp::arg("delay"), bp::arg("pos"), bp::arg("index") ) );

    { //::CreateConcussiveBlast
    
        typedef void ( *CreateConcussiveBlast_function_type )( ::Vector const &,::Vector const &,::CBaseEntity *,float );
        
        bp::def( 
            "CreateConcussiveBlast"
            , CreateConcussiveBlast_function_type( &::CreateConcussiveBlast )
            , ( bp::arg("origin"), bp::arg("surfaceNormal"), bp::arg("pOwner"), bp::arg("magnitude") ) );
    
    }

    { //::DispatchEffect
    
        typedef void ( *DispatchEffect_function_type )( char const *,::CEffectData const & );
        
        bp::def( 
            "DispatchEffect"
            , DispatchEffect_function_type( &::DispatchEffect )
            , ( bp::arg("pName"), bp::arg("data") ) );
    
    }

    bp::scope().attr( "te" ) = boost::ref(te);

    { //::DispatchEffect
    
        typedef void ( *DispatchEffect_function_type )( char const *,::CEffectData const &,::CRecipientFilter & );
        
        bp::def( 
            "DispatchEffect"
            , DispatchEffect_function_type( &::DispatchEffect )
            , ( bp::arg("pName"), bp::arg("data"), bp::arg("filter") ) );
    
    }
}
#endif

