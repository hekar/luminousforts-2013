// This file has been generated by Py++.

#include "cbase.h"



#include "cbase.h"

#include "tier0/dbg.h"

#include "srcpy_base.h"

#include "igamemovement.h"

#include "in_buttons.h"

#include "coordsize.h"

#include "srcpy.h"

#include "tier0/memdbgon.h"

namespace bp = boost::python;

BOOST_PYTHON_MODULE(_srcbase){
    bp::docstring_options doc_options( true, true, false );

    { //::PyUtlFlags
        typedef bp::class_< PyUtlFlags > UtlFlags_exposer_t;
        UtlFlags_exposer_t UtlFlags_exposer = UtlFlags_exposer_t( "UtlFlags", bp::init< bp::optional< int > >(( bp::arg("nInitialFlags")=(int)(0) )) );
        bp::scope UtlFlags_scope( UtlFlags_exposer );
        bp::implicitly_convertible< int, PyUtlFlags >();
        { //::PyUtlFlags::ClearAllFlags
        
            typedef void ( ::PyUtlFlags::*ClearAllFlags_function_type)(  ) ;
            
            UtlFlags_exposer.def( 
                "ClearAllFlags"
                , ClearAllFlags_function_type( &::PyUtlFlags::ClearAllFlags ) );
        
        }
        { //::PyUtlFlags::ClearFlag
        
            typedef void ( ::PyUtlFlags::*ClearFlag_function_type)( int ) ;
            
            UtlFlags_exposer.def( 
                "ClearFlag"
                , ClearFlag_function_type( &::PyUtlFlags::ClearFlag )
                , ( bp::arg("nFlagMask") ) );
        
        }
        { //::PyUtlFlags::IsAnyFlagSet
        
            typedef bool ( ::PyUtlFlags::*IsAnyFlagSet_function_type)(  ) const;
            
            UtlFlags_exposer.def( 
                "IsAnyFlagSet"
                , IsAnyFlagSet_function_type( &::PyUtlFlags::IsAnyFlagSet ) );
        
        }
        { //::PyUtlFlags::IsFlagSet
        
            typedef bool ( ::PyUtlFlags::*IsFlagSet_function_type)( int ) const;
            
            UtlFlags_exposer.def( 
                "IsFlagSet"
                , IsFlagSet_function_type( &::PyUtlFlags::IsFlagSet )
                , ( bp::arg("nFlagMask") ) );
        
        }
        { //::PyUtlFlags::SetFlag
        
            typedef void ( ::PyUtlFlags::*SetFlag_function_type)( int ) ;
            
            UtlFlags_exposer.def( 
                "SetFlag"
                , SetFlag_function_type( &::PyUtlFlags::SetFlag )
                , ( bp::arg("nFlagMask") ) );
        
        }
        { //::PyUtlFlags::SetFlag
        
            typedef void ( ::PyUtlFlags::*SetFlag_function_type)( int,bool ) ;
            
            UtlFlags_exposer.def( 
                "SetFlag"
                , SetFlag_function_type( &::PyUtlFlags::SetFlag )
                , ( bp::arg("nFlagMask"), bp::arg("bEnable") ) );
        
        }
    }

    bp::scope().attr( "MAX_PLAYERS" ) = MAX_PLAYERS;

    bp::scope().attr( "TEAM_INVALID" ) = TEAM_INVALID;

    bp::scope().attr( "TEAM_UNASSIGNED" ) = TEAM_UNASSIGNED;

    bp::scope().attr( "TEAM_SPECTATOR" ) = TEAM_SPECTATOR;

    bp::scope().attr( "FIRST_GAME_TEAM" ) = FIRST_GAME_TEAM;

    bp::scope().attr( "MASK_ALL" ) = MASK_ALL;

    bp::scope().attr( "MASK_SOLID" ) = MASK_SOLID;

    bp::scope().attr( "MASK_PLAYERSOLID" ) = MASK_PLAYERSOLID;

    bp::scope().attr( "MASK_NPCSOLID" ) = MASK_NPCSOLID;

    bp::scope().attr( "MASK_WATER" ) = MASK_WATER;

    bp::scope().attr( "MASK_OPAQUE" ) = MASK_OPAQUE;

    bp::scope().attr( "MASK_OPAQUE_AND_NPCS" ) = MASK_OPAQUE_AND_NPCS;

    bp::scope().attr( "MASK_BLOCKLOS" ) = MASK_BLOCKLOS;

    bp::scope().attr( "MASK_BLOCKLOS_AND_NPCS" ) = MASK_BLOCKLOS_AND_NPCS;

    bp::scope().attr( "MASK_VISIBLE" ) = MASK_VISIBLE;

    bp::scope().attr( "MASK_VISIBLE_AND_NPCS" ) = MASK_VISIBLE_AND_NPCS;

    bp::scope().attr( "MASK_SHOT" ) = MASK_SHOT;

    bp::scope().attr( "MASK_SHOT_HULL" ) = MASK_SHOT_HULL;

    bp::scope().attr( "MASK_SHOT_PORTAL" ) = MASK_SHOT_PORTAL;

    bp::scope().attr( "MASK_SOLID_BRUSHONLY" ) = MASK_SOLID_BRUSHONLY;

    bp::scope().attr( "MASK_PLAYERSOLID_BRUSHONLY" ) = MASK_PLAYERSOLID_BRUSHONLY;

    bp::scope().attr( "MASK_NPCSOLID_BRUSHONLY" ) = MASK_NPCSOLID_BRUSHONLY;

    bp::scope().attr( "MASK_NPCWORLDSTATIC" ) = MASK_NPCWORLDSTATIC;

    bp::scope().attr( "MASK_SPLITAREAPORTAL" ) = MASK_SPLITAREAPORTAL;

    bp::scope().attr( "MASK_CURRENT" ) = MASK_CURRENT;

    bp::scope().attr( "FL_ONGROUND" ) = FL_ONGROUND;

    bp::scope().attr( "FL_DUCKING" ) = FL_DUCKING;

    bp::scope().attr( "FL_WATERJUMP" ) = FL_WATERJUMP;

    bp::scope().attr( "FL_ONTRAIN" ) = FL_ONTRAIN;

    bp::scope().attr( "FL_INRAIN" ) = FL_INRAIN;

    bp::scope().attr( "FL_FROZEN" ) = FL_FROZEN;

    bp::scope().attr( "FL_ATCONTROLS" ) = FL_ATCONTROLS;

    bp::scope().attr( "FL_CLIENT" ) = FL_CLIENT;

    bp::scope().attr( "FL_FAKECLIENT" ) = FL_FAKECLIENT;

    bp::scope().attr( "FL_INWATER" ) = FL_INWATER;

    bp::scope().attr( "FL_FLY" ) = FL_FLY;

    bp::scope().attr( "FL_SWIM" ) = FL_SWIM;

    bp::scope().attr( "FL_CONVEYOR" ) = FL_CONVEYOR;

    bp::scope().attr( "FL_NPC" ) = FL_NPC;

    bp::scope().attr( "FL_GODMODE" ) = FL_GODMODE;

    bp::scope().attr( "FL_NOTARGET" ) = FL_NOTARGET;

    bp::scope().attr( "FL_AIMTARGET" ) = FL_AIMTARGET;

    bp::scope().attr( "FL_PARTIALGROUND" ) = FL_PARTIALGROUND;

    bp::scope().attr( "FL_STATICPROP" ) = FL_STATICPROP;

    bp::scope().attr( "FL_GRAPHED" ) = FL_GRAPHED;

    bp::scope().attr( "FL_GRENADE" ) = FL_GRENADE;

    bp::scope().attr( "FL_STEPMOVEMENT" ) = FL_STEPMOVEMENT;

    bp::scope().attr( "FL_DONTTOUCH" ) = FL_DONTTOUCH;

    bp::scope().attr( "FL_BASEVELOCITY" ) = FL_BASEVELOCITY;

    bp::scope().attr( "FL_WORLDBRUSH" ) = FL_WORLDBRUSH;

    bp::scope().attr( "FL_OBJECT" ) = FL_OBJECT;

    bp::scope().attr( "FL_KILLME" ) = FL_KILLME;

    bp::scope().attr( "FL_ONFIRE" ) = FL_ONFIRE;

    bp::scope().attr( "FL_DISSOLVING" ) = FL_DISSOLVING;

    bp::scope().attr( "FL_TRANSRAGDOLL" ) = FL_TRANSRAGDOLL;

    bp::scope().attr( "FL_UNBLOCKABLE_BY_PLAYER" ) = FL_UNBLOCKABLE_BY_PLAYER;

    bp::scope().attr( "LIFE_ALIVE" ) = LIFE_ALIVE;

    bp::scope().attr( "LIFE_DYING" ) = LIFE_DYING;

    bp::scope().attr( "LIFE_DEAD" ) = LIFE_DEAD;

    bp::scope().attr( "LIFE_RESPAWNABLE" ) = LIFE_RESPAWNABLE;

    bp::scope().attr( "LIFE_DISCARDBODY" ) = LIFE_DISCARDBODY;

    bp::scope().attr( "DAMAGE_NO" ) = DAMAGE_NO;

    bp::scope().attr( "DAMAGE_EVENTS_ONLY" ) = DAMAGE_EVENTS_ONLY;

    bp::scope().attr( "DAMAGE_YES" ) = DAMAGE_YES;

    bp::scope().attr( "DAMAGE_AIM" ) = DAMAGE_AIM;

    bp::scope().attr( "DMG_GENERIC" ) = DMG_GENERIC;

    bp::scope().attr( "DMG_CRUSH" ) = DMG_CRUSH;

    bp::scope().attr( "DMG_BULLET" ) = DMG_BULLET;

    bp::scope().attr( "DMG_SLASH" ) = DMG_SLASH;

    bp::scope().attr( "DMG_BURN" ) = DMG_BURN;

    bp::scope().attr( "DMG_VEHICLE" ) = DMG_VEHICLE;

    bp::scope().attr( "DMG_FALL" ) = DMG_FALL;

    bp::scope().attr( "DMG_BLAST" ) = DMG_BLAST;

    bp::scope().attr( "DMG_CLUB" ) = DMG_CLUB;

    bp::scope().attr( "DMG_SHOCK" ) = DMG_SHOCK;

    bp::scope().attr( "DMG_SONIC" ) = DMG_SONIC;

    bp::scope().attr( "DMG_ENERGYBEAM" ) = DMG_ENERGYBEAM;

    bp::scope().attr( "DMG_PREVENT_PHYSICS_FORCE" ) = DMG_PREVENT_PHYSICS_FORCE;

    bp::scope().attr( "DMG_NEVERGIB" ) = DMG_NEVERGIB;

    bp::scope().attr( "DMG_ALWAYSGIB" ) = DMG_ALWAYSGIB;

    bp::scope().attr( "DMG_DROWN" ) = DMG_DROWN;

    bp::scope().attr( "DMG_PARALYZE" ) = DMG_PARALYZE;

    bp::scope().attr( "DMG_NERVEGAS" ) = DMG_NERVEGAS;

    bp::scope().attr( "DMG_POISON" ) = DMG_POISON;

    bp::scope().attr( "DMG_RADIATION" ) = DMG_RADIATION;

    bp::scope().attr( "DMG_DROWNRECOVER" ) = DMG_DROWNRECOVER;

    bp::scope().attr( "DMG_ACID" ) = DMG_ACID;

    bp::scope().attr( "DMG_SLOWBURN" ) = DMG_SLOWBURN;

    bp::scope().attr( "DMG_REMOVENORAGDOLL" ) = DMG_REMOVENORAGDOLL;

    bp::scope().attr( "DMG_PHYSGUN" ) = DMG_PHYSGUN;

    bp::scope().attr( "DMG_PLASMA" ) = DMG_PLASMA;

    bp::scope().attr( "DMG_AIRBOAT" ) = DMG_AIRBOAT;

    bp::scope().attr( "DMG_DISSOLVE" ) = DMG_DISSOLVE;

    bp::scope().attr( "DMG_BLAST_SURFACE" ) = DMG_BLAST_SURFACE;

    bp::scope().attr( "DMG_DIRECT" ) = DMG_DIRECT;

    bp::scope().attr( "DMG_BUCKSHOT" ) = DMG_BUCKSHOT;

    bp::scope().attr( "DMG_LASTGENERICFLAG" ) = DMG_LASTGENERICFLAG;

    bp::scope().attr( "EF_BONEMERGE" ) = (int)EF_BONEMERGE;

    bp::scope().attr( "EF_BRIGHTLIGHT" ) = (int)EF_BRIGHTLIGHT;

    bp::scope().attr( "EF_DIMLIGHT" ) = (int)EF_DIMLIGHT;

    bp::scope().attr( "EF_NOINTERP" ) = (int)EF_NOINTERP;

    bp::scope().attr( "EF_NOSHADOW" ) = (int)EF_NOSHADOW;

    bp::scope().attr( "EF_NODRAW" ) = (int)EF_NODRAW;

    bp::scope().attr( "EF_NORECEIVESHADOW" ) = (int)EF_NORECEIVESHADOW;

    bp::scope().attr( "EF_BONEMERGE_FASTCULL" ) = (int)EF_BONEMERGE_FASTCULL;

    bp::scope().attr( "EF_ITEM_BLINK" ) = (int)EF_ITEM_BLINK;

    bp::scope().attr( "EF_PARENT_ANIMATES" ) = (int)EF_PARENT_ANIMATES;

    bp::scope().attr( "EF_MAX_BITS" ) = (int)EF_MAX_BITS;

    bp::scope().attr( "COORD_INTEGER_BITS" ) = (int)COORD_INTEGER_BITS;

    bp::scope().attr( "COORD_FRACTIONAL_BITS" ) = (int)COORD_FRACTIONAL_BITS;

    bp::scope().attr( "COORD_DENOMINATOR" ) = (int)COORD_DENOMINATOR;

    bp::scope().attr( "COORD_RESOLUTION" ) = (int)COORD_RESOLUTION;

    bp::scope().attr( "COORD_INTEGER_BITS_MP" ) = (int)COORD_INTEGER_BITS_MP;

    bp::scope().attr( "COORD_FRACTIONAL_BITS_MP_LOWPRECISION" ) = (int)COORD_FRACTIONAL_BITS_MP_LOWPRECISION;

    bp::scope().attr( "COORD_DENOMINATOR_LOWPRECISION" ) = (int)COORD_DENOMINATOR_LOWPRECISION;

    bp::scope().attr( "COORD_RESOLUTION_LOWPRECISION" ) = (int)COORD_RESOLUTION_LOWPRECISION;

    bp::scope().attr( "NORMAL_FRACTIONAL_BITS" ) = (int)NORMAL_FRACTIONAL_BITS;

    bp::scope().attr( "NORMAL_DENOMINATOR" ) = (int)NORMAL_DENOMINATOR;

    bp::scope().attr( "NORMAL_RESOLUTION" ) = (int)NORMAL_RESOLUTION;

    bp::scope().attr( "DIST_EPSILON" ) = (int)DIST_EPSILON;

    bp::scope().attr( "MAX_COORD_INTEGER" ) = (int)MAX_COORD_INTEGER;

    bp::scope().attr( "MIN_COORD_INTEGER" ) = (int)MIN_COORD_INTEGER;

    bp::scope().attr( "MAX_COORD_FRACTION" ) = (float)MAX_COORD_FRACTION;

    bp::scope().attr( "MIN_COORD_FRACTION" ) = (float)MIN_COORD_FRACTION;

    bp::scope().attr( "MAX_COORD_FLOAT" ) = (float)MAX_COORD_FLOAT;

    bp::scope().attr( "MIN_COORD_FLOAT" ) = (float)MIN_COORD_FLOAT;

    bp::scope().attr( "COORD_EXTENT" ) = (float)COORD_EXTENT;

    bp::scope().attr( "MAX_TRACE_LENGTH" ) = (float)MAX_TRACE_LENGTH;

    bp::scope().attr( "MAX_COORD_RANGE" ) = (float)MAX_COORD_RANGE;

    bp::scope().attr( "IN_ATTACK" ) = (int)IN_ATTACK;

    bp::scope().attr( "IN_JUMP" ) = (int)IN_JUMP;

    bp::scope().attr( "IN_DUCK" ) = (int)IN_DUCK;

    bp::scope().attr( "IN_FORWARD" ) = (int)IN_FORWARD;

    bp::scope().attr( "IN_BACK" ) = (int)IN_BACK;

    bp::scope().attr( "IN_USE" ) = (int)IN_USE;

    bp::scope().attr( "IN_CANCEL" ) = (int)IN_CANCEL;

    bp::scope().attr( "IN_LEFT" ) = (int)IN_LEFT;

    bp::scope().attr( "IN_RIGHT" ) = (int)IN_RIGHT;

    bp::scope().attr( "IN_MOVELEFT" ) = (int)IN_MOVELEFT;

    bp::scope().attr( "IN_MOVERIGHT" ) = (int)IN_MOVERIGHT;

    bp::scope().attr( "IN_ATTACK2" ) = (int)IN_ATTACK2;

    bp::scope().attr( "IN_RUN" ) = (int)IN_RUN;

    bp::scope().attr( "IN_RELOAD" ) = (int)IN_RELOAD;

    bp::scope().attr( "IN_ALT1" ) = (int)IN_ALT1;

    bp::scope().attr( "IN_ALT2" ) = (int)IN_ALT2;

    bp::scope().attr( "IN_SCORE" ) = (int)IN_SCORE;

    bp::scope().attr( "IN_SPEED" ) = (int)IN_SPEED;

    bp::scope().attr( "IN_WALK" ) = (int)IN_WALK;

    bp::scope().attr( "IN_ZOOM" ) = (int)IN_ZOOM;

    bp::scope().attr( "IN_WEAPON1" ) = (int)IN_WEAPON1;

    bp::scope().attr( "IN_WEAPON2" ) = (int)IN_WEAPON2;

    bp::scope().attr( "IN_BULLRUSH" ) = (int)IN_BULLRUSH;

    bp::scope().attr( "IN_GRENADE1" ) = (int)IN_GRENADE1;

    bp::scope().attr( "IN_GRENADE2" ) = (int)IN_GRENADE2;

    bp::scope().attr( "CONTENTS_EMPTY" ) = (int)CONTENTS_EMPTY;

    bp::scope().attr( "CONTENTS_SOLID" ) = (int)CONTENTS_SOLID;

    bp::scope().attr( "CONTENTS_WINDOW" ) = (int)CONTENTS_WINDOW;

    bp::scope().attr( "CONTENTS_AUX" ) = (int)CONTENTS_AUX;

    bp::scope().attr( "CONTENTS_GRATE" ) = (int)CONTENTS_GRATE;

    bp::scope().attr( "CONTENTS_SLIME" ) = (int)CONTENTS_SLIME;

    bp::scope().attr( "CONTENTS_WATER" ) = (int)CONTENTS_WATER;

    bp::scope().attr( "CONTENTS_BLOCKLOS" ) = (int)CONTENTS_BLOCKLOS;

    bp::scope().attr( "CONTENTS_OPAQUE" ) = (int)CONTENTS_OPAQUE;

    bp::scope().attr( "LAST_VISIBLE_CONTENTS" ) = (int)LAST_VISIBLE_CONTENTS;

    bp::scope().attr( "ALL_VISIBLE_CONTENTS" ) = (int)ALL_VISIBLE_CONTENTS;

    bp::scope().attr( "CONTENTS_TESTFOGVOLUME" ) = (int)CONTENTS_TESTFOGVOLUME;

    bp::scope().attr( "CONTENTS_TEAM1" ) = (int)CONTENTS_TEAM1;

    bp::scope().attr( "CONTENTS_TEAM2" ) = (int)CONTENTS_TEAM2;

    bp::scope().attr( "CONTENTS_IGNORE_NODRAW_OPAQUE" ) = (int)CONTENTS_IGNORE_NODRAW_OPAQUE;

    bp::scope().attr( "CONTENTS_MOVEABLE" ) = (int)CONTENTS_MOVEABLE;

    bp::scope().attr( "CONTENTS_AREAPORTAL" ) = (int)CONTENTS_AREAPORTAL;

    bp::scope().attr( "CONTENTS_PLAYERCLIP" ) = (int)CONTENTS_PLAYERCLIP;

    bp::scope().attr( "CONTENTS_MONSTERCLIP" ) = (int)CONTENTS_MONSTERCLIP;

    bp::scope().attr( "CONTENTS_CURRENT_0" ) = (int)CONTENTS_CURRENT_0;

    bp::scope().attr( "CONTENTS_CURRENT_90" ) = (int)CONTENTS_CURRENT_90;

    bp::scope().attr( "CONTENTS_CURRENT_180" ) = (int)CONTENTS_CURRENT_180;

    bp::scope().attr( "CONTENTS_CURRENT_270" ) = (int)CONTENTS_CURRENT_270;

    bp::scope().attr( "CONTENTS_CURRENT_UP" ) = (int)CONTENTS_CURRENT_UP;

    bp::scope().attr( "CONTENTS_CURRENT_DOWN" ) = (int)CONTENTS_CURRENT_DOWN;

    bp::scope().attr( "CONTENTS_ORIGIN" ) = (int)CONTENTS_ORIGIN;

    bp::scope().attr( "CONTENTS_MONSTER" ) = (int)CONTENTS_MONSTER;

    bp::scope().attr( "CONTENTS_DEBRIS" ) = (int)CONTENTS_DEBRIS;

    bp::scope().attr( "CONTENTS_DETAIL" ) = (int)CONTENTS_DETAIL;

    bp::scope().attr( "CONTENTS_TRANSLUCENT" ) = (int)CONTENTS_TRANSLUCENT;

    bp::scope().attr( "CONTENTS_LADDER" ) = (int)CONTENTS_LADDER;

    bp::scope().attr( "CONTENTS_HITBOX" ) = (int)CONTENTS_HITBOX;

    bp::scope().attr( "SURF_LIGHT" ) = (int)SURF_LIGHT;

    bp::scope().attr( "SURF_SKY2D" ) = (int)SURF_SKY2D;

    bp::scope().attr( "SURF_SKY" ) = (int)SURF_SKY;

    bp::scope().attr( "SURF_WARP" ) = (int)SURF_WARP;

    bp::scope().attr( "SURF_TRANS" ) = (int)SURF_TRANS;

    bp::scope().attr( "SURF_NOPORTAL" ) = (int)SURF_NOPORTAL;

    bp::scope().attr( "SURF_TRIGGER" ) = (int)SURF_TRIGGER;

    bp::scope().attr( "SURF_NODRAW" ) = (int)SURF_NODRAW;

    bp::scope().attr( "SURF_HINT" ) = (int)SURF_HINT;

    bp::scope().attr( "SURF_SKIP" ) = (int)SURF_SKIP;

    bp::scope().attr( "SURF_NOLIGHT" ) = (int)SURF_NOLIGHT;

    bp::scope().attr( "SURF_BUMPLIGHT" ) = (int)SURF_BUMPLIGHT;

    bp::scope().attr( "SURF_NOSHADOWS" ) = (int)SURF_NOSHADOWS;

    bp::scope().attr( "SURF_NODECALS" ) = (int)SURF_NODECALS;

    bp::scope().attr( "SURF_NOCHOP" ) = (int)SURF_NOCHOP;

    bp::scope().attr( "SURF_HITBOX" ) = (int)SURF_HITBOX;

    bp::scope().attr( "TICK_NEVER_THINK" ) = (int)TICK_NEVER_THINK;

    bp::scope().attr( "DONT_BLEED" ) = (int)DONT_BLEED;

    bp::scope().attr( "BLOOD_COLOR_RED" ) = (int)BLOOD_COLOR_RED;

    bp::scope().attr( "BLOOD_COLOR_YELLOW" ) = (int)BLOOD_COLOR_YELLOW;

    bp::scope().attr( "BLOOD_COLOR_GREEN" ) = (int)BLOOD_COLOR_GREEN;

    bp::scope().attr( "BLOOD_COLOR_MECH" ) = (int)BLOOD_COLOR_MECH;

    bp::scope().attr( "HIDEHUD_WEAPONSELECTION" ) = (int)HIDEHUD_WEAPONSELECTION;

    bp::scope().attr( "HIDEHUD_FLASHLIGHT" ) = (int)HIDEHUD_FLASHLIGHT;

    bp::scope().attr( "HIDEHUD_ALL" ) = (int)HIDEHUD_ALL;

    bp::scope().attr( "HIDEHUD_HEALTH" ) = (int)HIDEHUD_HEALTH;

    bp::scope().attr( "HIDEHUD_PLAYERDEAD" ) = (int)HIDEHUD_PLAYERDEAD;

    bp::scope().attr( "HIDEHUD_NEEDSUIT" ) = (int)HIDEHUD_NEEDSUIT;

    bp::scope().attr( "HIDEHUD_MISCSTATUS" ) = (int)HIDEHUD_MISCSTATUS;

    bp::scope().attr( "HIDEHUD_CHAT" ) = (int)HIDEHUD_CHAT;

    bp::scope().attr( "HIDEHUD_CROSSHAIR" ) = (int)HIDEHUD_CROSSHAIR;

    bp::scope().attr( "HIDEHUD_VEHICLE_CROSSHAIR" ) = (int)HIDEHUD_VEHICLE_CROSSHAIR;

    bp::scope().attr( "HIDEHUD_INVEHICLE" ) = (int)HIDEHUD_INVEHICLE;

    bp::scope().attr( "HIDEHUD_BONUS_PROGRESS" ) = (int)HIDEHUD_BONUS_PROGRESS;

    bp::scope().attr( "HIDEHUD_BITCOUNT" ) = (int)HIDEHUD_BITCOUNT;

    { //::PyUtlRBTree
        typedef bp::class_< PyUtlRBTree > UtlRBTree_exposer_t;
        UtlRBTree_exposer_t UtlRBTree_exposer = UtlRBTree_exposer_t( "UtlRBTree", bp::init< bp::optional< int, int, bp::api::object > >(( bp::arg("growSize")=(int)(0), bp::arg("initSize")=(int)(0), bp::arg("lessfunc")=boost::python::object() )) );
        bp::scope UtlRBTree_scope( UtlRBTree_exposer );
        bp::implicitly_convertible< int, PyUtlRBTree >();
        UtlRBTree_exposer.def( bp::init< bp::api::object >(( bp::arg("lessfunc") )) );
        bp::implicitly_convertible< bp::api::object, PyUtlRBTree >();
        UtlRBTree_exposer.def( bp::init< PyUtlRBTree const & >(( bp::arg("tree") )) );
        { //::PyUtlRBTree::Count
        
            typedef unsigned int ( ::PyUtlRBTree::*Count_function_type)(  ) const;
            
            UtlRBTree_exposer.def( 
                "Count"
                , Count_function_type( &::PyUtlRBTree::Count ) );
        
        }
        { //::PyUtlRBTree::Element
        
            typedef ::boost::python::api::object ( ::PyUtlRBTree::*Element_function_type)( int ) ;
            
            UtlRBTree_exposer.def( 
                "Element"
                , Element_function_type( &::PyUtlRBTree::Element )
                , ( bp::arg("i") ) );
        
        }
        { //::PyUtlRBTree::Find
        
            typedef int ( ::PyUtlRBTree::*Find_function_type)( ::boost::python::api::object ) const;
            
            UtlRBTree_exposer.def( 
                "Find"
                , Find_function_type( &::PyUtlRBTree::Find )
                , ( bp::arg("search") ) );
        
        }
        { //::PyUtlRBTree::FindInsertionPosition
        
            typedef void ( ::PyUtlRBTree::*FindInsertionPosition_function_type)( ::boost::python::api::object const &,int &,bool & ) ;
            
            UtlRBTree_exposer.def( 
                "FindInsertionPosition"
                , FindInsertionPosition_function_type( &::PyUtlRBTree::FindInsertionPosition )
                , ( bp::arg("insert"), bp::arg("parent"), bp::arg("leftchild") ) );
        
        }
        { //::PyUtlRBTree::FirstInorder
        
            typedef int ( ::PyUtlRBTree::*FirstInorder_function_type)(  ) const;
            
            UtlRBTree_exposer.def( 
                "FirstInorder"
                , FirstInorder_function_type( &::PyUtlRBTree::FirstInorder ) );
        
        }
        { //::PyUtlRBTree::FirstPostorder
        
            typedef int ( ::PyUtlRBTree::*FirstPostorder_function_type)(  ) const;
            
            UtlRBTree_exposer.def( 
                "FirstPostorder"
                , FirstPostorder_function_type( &::PyUtlRBTree::FirstPostorder ) );
        
        }
        { //::PyUtlRBTree::FirstPreorder
        
            typedef int ( ::PyUtlRBTree::*FirstPreorder_function_type)(  ) const;
            
            UtlRBTree_exposer.def( 
                "FirstPreorder"
                , FirstPreorder_function_type( &::PyUtlRBTree::FirstPreorder ) );
        
        }
        { //::PyUtlRBTree::Insert
        
            typedef int ( ::PyUtlRBTree::*Insert_function_type)( ::boost::python::api::object ) ;
            
            UtlRBTree_exposer.def( 
                "Insert"
                , Insert_function_type( &::PyUtlRBTree::Insert )
                , ( bp::arg("insert") ) );
        
        }
        { //::PyUtlRBTree::InsertAt
        
            typedef int ( ::PyUtlRBTree::*InsertAt_function_type)( int,bool ) ;
            
            UtlRBTree_exposer.def( 
                "InsertAt"
                , InsertAt_function_type( &::PyUtlRBTree::InsertAt )
                , ( bp::arg("parent"), bp::arg("leftchild") ) );
        
        }
        { //::PyUtlRBTree::InsertIfNotFound
        
            typedef int ( ::PyUtlRBTree::*InsertIfNotFound_function_type)( ::boost::python::api::object ) ;
            
            UtlRBTree_exposer.def( 
                "InsertIfNotFound"
                , InsertIfNotFound_function_type( &::PyUtlRBTree::InsertIfNotFound )
                , ( bp::arg("insert") ) );
        
        }
        { //::PyUtlRBTree::LastInorder
        
            typedef int ( ::PyUtlRBTree::*LastInorder_function_type)(  ) const;
            
            UtlRBTree_exposer.def( 
                "LastInorder"
                , LastInorder_function_type( &::PyUtlRBTree::LastInorder ) );
        
        }
        { //::PyUtlRBTree::LastPreorder
        
            typedef int ( ::PyUtlRBTree::*LastPreorder_function_type)(  ) const;
            
            UtlRBTree_exposer.def( 
                "LastPreorder"
                , LastPreorder_function_type( &::PyUtlRBTree::LastPreorder ) );
        
        }
        { //::PyUtlRBTree::NextInorder
        
            typedef int ( ::PyUtlRBTree::*NextInorder_function_type)( int ) const;
            
            UtlRBTree_exposer.def( 
                "NextInorder"
                , NextInorder_function_type( &::PyUtlRBTree::NextInorder )
                , ( bp::arg("i") ) );
        
        }
        { //::PyUtlRBTree::NextPostorder
        
            typedef int ( ::PyUtlRBTree::*NextPostorder_function_type)( int ) const;
            
            UtlRBTree_exposer.def( 
                "NextPostorder"
                , NextPostorder_function_type( &::PyUtlRBTree::NextPostorder )
                , ( bp::arg("i") ) );
        
        }
        { //::PyUtlRBTree::NextPreorder
        
            typedef int ( ::PyUtlRBTree::*NextPreorder_function_type)( int ) const;
            
            UtlRBTree_exposer.def( 
                "NextPreorder"
                , NextPreorder_function_type( &::PyUtlRBTree::NextPreorder )
                , ( bp::arg("i") ) );
        
        }
        { //::PyUtlRBTree::PrevInorder
        
            typedef int ( ::PyUtlRBTree::*PrevInorder_function_type)( int ) const;
            
            UtlRBTree_exposer.def( 
                "PrevInorder"
                , PrevInorder_function_type( &::PyUtlRBTree::PrevInorder )
                , ( bp::arg("i") ) );
        
        }
        { //::PyUtlRBTree::PrevPreorder
        
            typedef int ( ::PyUtlRBTree::*PrevPreorder_function_type)( int ) const;
            
            UtlRBTree_exposer.def( 
                "PrevPreorder"
                , PrevPreorder_function_type( &::PyUtlRBTree::PrevPreorder )
                , ( bp::arg("i") ) );
        
        }
        { //::PyUtlRBTree::Purge
        
            typedef void ( ::PyUtlRBTree::*Purge_function_type)(  ) ;
            
            UtlRBTree_exposer.def( 
                "Purge"
                , Purge_function_type( &::PyUtlRBTree::Purge ) );
        
        }
        { //::PyUtlRBTree::Remove
        
            typedef bool ( ::PyUtlRBTree::*Remove_function_type)( ::boost::python::api::object ) ;
            
            UtlRBTree_exposer.def( 
                "Remove"
                , Remove_function_type( &::PyUtlRBTree::Remove )
                , ( bp::arg("remove") ) );
        
        }
        { //::PyUtlRBTree::RemoveAll
        
            typedef void ( ::PyUtlRBTree::*RemoveAll_function_type)(  ) ;
            
            UtlRBTree_exposer.def( 
                "RemoveAll"
                , RemoveAll_function_type( &::PyUtlRBTree::RemoveAll ) );
        
        }
        { //::PyUtlRBTree::RemoveAt
        
            typedef void ( ::PyUtlRBTree::*RemoveAt_function_type)( int ) ;
            
            UtlRBTree_exposer.def( 
                "RemoveAt"
                , RemoveAt_function_type( &::PyUtlRBTree::RemoveAt )
                , ( bp::arg("i") ) );
        
        }
        { //::PyUtlRBTree::Root
        
            typedef int ( ::PyUtlRBTree::*Root_function_type)(  ) const;
            
            UtlRBTree_exposer.def( 
                "Root"
                , Root_function_type( &::PyUtlRBTree::Root ) );
        
        }
        { //::PyUtlRBTree::SetLessFunc
        
            typedef void ( ::PyUtlRBTree::*SetLessFunc_function_type)( ::boost::python::api::object ) ;
            
            UtlRBTree_exposer.def( 
                "SetLessFunc"
                , SetLessFunc_function_type( &::PyUtlRBTree::SetLessFunc )
                , ( bp::arg("func") ) );
        
        }
        { //::PyUtlRBTree::operator[]
        
            typedef ::boost::python::api::object ( ::PyUtlRBTree::*__getitem___function_type)( int ) ;
            
            UtlRBTree_exposer.def( 
                "__getitem__"
                , __getitem___function_type( &::PyUtlRBTree::operator[] )
                , ( bp::arg("i") ) );
        
        }
    }
}
