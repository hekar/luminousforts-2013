// This file has been generated by Py++.

#include "cbase.h"
#ifdef CLIENT_DLL
#include "__array_1.pypp.hpp"

#include "__convenience.pypp.hpp"

#include "__call_policies.pypp.hpp"

#include "cbase.h"

#include "steam/steam_api.h"

#include "steam/isteamfriends.h"

#include "steam/isteamutils.h"

#include "steam/isteamuser.h"

#include "steam/steamclientpublic.h"

#include "steam/isteamuserstats.h"

#include "srcpy_steam.h"

#include "tier0/valve_minmax_off.h"

#include "srcpy.h"

#include "tier0/valve_minmax_on.h"

#include "tier0/memdbgon.h"

namespace bp = boost::python;

struct FriendsEnumerateFollowingList_t_wrapper : FriendsEnumerateFollowingList_t, bp::wrapper< FriendsEnumerateFollowingList_t > {

    FriendsEnumerateFollowingList_t_wrapper()
    : FriendsEnumerateFollowingList_t()
      , bp::wrapper< FriendsEnumerateFollowingList_t >(){
        // null constructor
        
    }

    static pyplusplus::containers::static_sized::array_1_t< ::CSteamID, 50>
    pyplusplus_m_rgSteamID_wrapper( ::FriendsEnumerateFollowingList_t & inst ){
        return pyplusplus::containers::static_sized::array_1_t< ::CSteamID, 50>( inst.m_rgSteamID );
    }

};

struct GameRichPresenceJoinRequested_t_wrapper : GameRichPresenceJoinRequested_t, bp::wrapper< GameRichPresenceJoinRequested_t > {

    GameRichPresenceJoinRequested_t_wrapper()
    : GameRichPresenceJoinRequested_t()
      , bp::wrapper< GameRichPresenceJoinRequested_t >(){
        // null constructor
        
    }

    static pyplusplus::containers::static_sized::array_1_t< char, 256>
    pyplusplus_m_rgchConnect_wrapper( ::GameRichPresenceJoinRequested_t & inst ){
        return pyplusplus::containers::static_sized::array_1_t< char, 256>( inst.m_rgchConnect );
    }

};

struct GameServerChangeRequested_t_wrapper : GameServerChangeRequested_t, bp::wrapper< GameServerChangeRequested_t > {

    GameServerChangeRequested_t_wrapper()
    : GameServerChangeRequested_t()
      , bp::wrapper< GameServerChangeRequested_t >(){
        // null constructor
        
    }

    static pyplusplus::containers::static_sized::array_1_t< char, 64>
    pyplusplus_m_rgchPassword_wrapper( ::GameServerChangeRequested_t & inst ){
        return pyplusplus::containers::static_sized::array_1_t< char, 64>( inst.m_rgchPassword );
    }

    static pyplusplus::containers::static_sized::array_1_t< char, 64>
    pyplusplus_m_rgchServer_wrapper( ::GameServerChangeRequested_t & inst ){
        return pyplusplus::containers::static_sized::array_1_t< char, 64>( inst.m_rgchServer );
    }

};

static boost::python::tuple GetLobbyGameServer_e3badaaa69eb32a59ea528ba9e97e8ee( ::ISteamMatchmaking & inst, ::CSteamID steamIDLobby ){
    unsigned int punGameServerIP2;
    short unsigned int punGameServerPort2;
    CSteamID psteamIDGameServer2;
    bool result = inst.GetLobbyGameServer(steamIDLobby, &punGameServerIP2, &punGameServerPort2, &psteamIDGameServer2);
    return bp::make_tuple( result
                            , punGameServerIP2
                            , punGameServerPort2
                            , psteamIDGameServer2 );
}

struct PySteamMatchmakingPingResponse_wrapper : PySteamMatchmakingPingResponse, bp::wrapper< PySteamMatchmakingPingResponse > {

    PySteamMatchmakingPingResponse_wrapper(PySteamMatchmakingPingResponse const & arg )
    : PySteamMatchmakingPingResponse( arg )
      , bp::wrapper< PySteamMatchmakingPingResponse >(){
        // copy constructor
        
    }

    PySteamMatchmakingPingResponse_wrapper()
    : PySteamMatchmakingPingResponse()
      , bp::wrapper< PySteamMatchmakingPingResponse >(){
        // null constructor
        
    }

    virtual void ServerFailedToRespond(  ) {
        PY_OVERRIDE_CHECK( PySteamMatchmakingPingResponse, ServerFailedToRespond )
        PY_OVERRIDE_LOG( _steam, PySteamMatchmakingPingResponse, ServerFailedToRespond )
        bp::override func_ServerFailedToRespond = this->get_override( "ServerFailedToRespond" );
        if( func_ServerFailedToRespond.ptr() != Py_None )
            try {
                func_ServerFailedToRespond(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PySteamMatchmakingPingResponse::ServerFailedToRespond(  );
            }
        else
            this->PySteamMatchmakingPingResponse::ServerFailedToRespond(  );
    }
    
    void default_ServerFailedToRespond(  ) {
        PySteamMatchmakingPingResponse::ServerFailedToRespond( );
    }

    virtual void ServerResponded( ::gameserveritem_t & server ) {
        PY_OVERRIDE_CHECK( PySteamMatchmakingPingResponse, ServerResponded )
        PY_OVERRIDE_LOG( _steam, PySteamMatchmakingPingResponse, ServerResponded )
        bp::override func_ServerResponded = this->get_override( "ServerResponded" );
        if( func_ServerResponded.ptr() != Py_None )
            try {
                func_ServerResponded( boost::ref(server) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PySteamMatchmakingPingResponse::ServerResponded( server );
            }
        else
            this->PySteamMatchmakingPingResponse::ServerResponded( server );
    }
    
    void default_ServerResponded( ::gameserveritem_t & server ) {
        PySteamMatchmakingPingResponse::ServerResponded( server );
    }

};

struct PySteamMatchmakingPlayersResponse_wrapper : PySteamMatchmakingPlayersResponse, bp::wrapper< PySteamMatchmakingPlayersResponse > {

    PySteamMatchmakingPlayersResponse_wrapper(PySteamMatchmakingPlayersResponse const & arg )
    : PySteamMatchmakingPlayersResponse( arg )
      , bp::wrapper< PySteamMatchmakingPlayersResponse >(){
        // copy constructor
        
    }

    PySteamMatchmakingPlayersResponse_wrapper()
    : PySteamMatchmakingPlayersResponse()
      , bp::wrapper< PySteamMatchmakingPlayersResponse >(){
        // null constructor
        
    }

    virtual void AddPlayerToList( char const * pchName, int nScore, float flTimePlayed ) {
        PY_OVERRIDE_CHECK( PySteamMatchmakingPlayersResponse, AddPlayerToList )
        PY_OVERRIDE_LOG( _steam, PySteamMatchmakingPlayersResponse, AddPlayerToList )
        bp::override func_AddPlayerToList = this->get_override( "AddPlayerToList" );
        if( func_AddPlayerToList.ptr() != Py_None )
            try {
                func_AddPlayerToList( pchName, nScore, flTimePlayed );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PySteamMatchmakingPlayersResponse::AddPlayerToList( pchName, nScore, flTimePlayed );
            }
        else
            this->PySteamMatchmakingPlayersResponse::AddPlayerToList( pchName, nScore, flTimePlayed );
    }
    
    void default_AddPlayerToList( char const * pchName, int nScore, float flTimePlayed ) {
        PySteamMatchmakingPlayersResponse::AddPlayerToList( pchName, nScore, flTimePlayed );
    }

    virtual void PlayersFailedToRespond(  ) {
        PY_OVERRIDE_CHECK( PySteamMatchmakingPlayersResponse, PlayersFailedToRespond )
        PY_OVERRIDE_LOG( _steam, PySteamMatchmakingPlayersResponse, PlayersFailedToRespond )
        bp::override func_PlayersFailedToRespond = this->get_override( "PlayersFailedToRespond" );
        if( func_PlayersFailedToRespond.ptr() != Py_None )
            try {
                func_PlayersFailedToRespond(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PySteamMatchmakingPlayersResponse::PlayersFailedToRespond(  );
            }
        else
            this->PySteamMatchmakingPlayersResponse::PlayersFailedToRespond(  );
    }
    
    void default_PlayersFailedToRespond(  ) {
        PySteamMatchmakingPlayersResponse::PlayersFailedToRespond( );
    }

    virtual void PlayersRefreshComplete(  ) {
        PY_OVERRIDE_CHECK( PySteamMatchmakingPlayersResponse, PlayersRefreshComplete )
        PY_OVERRIDE_LOG( _steam, PySteamMatchmakingPlayersResponse, PlayersRefreshComplete )
        bp::override func_PlayersRefreshComplete = this->get_override( "PlayersRefreshComplete" );
        if( func_PlayersRefreshComplete.ptr() != Py_None )
            try {
                func_PlayersRefreshComplete(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PySteamMatchmakingPlayersResponse::PlayersRefreshComplete(  );
            }
        else
            this->PySteamMatchmakingPlayersResponse::PlayersRefreshComplete(  );
    }
    
    void default_PlayersRefreshComplete(  ) {
        PySteamMatchmakingPlayersResponse::PlayersRefreshComplete( );
    }

};

struct PySteamMatchmakingRulesResponse_wrapper : PySteamMatchmakingRulesResponse, bp::wrapper< PySteamMatchmakingRulesResponse > {

    PySteamMatchmakingRulesResponse_wrapper(PySteamMatchmakingRulesResponse const & arg )
    : PySteamMatchmakingRulesResponse( arg )
      , bp::wrapper< PySteamMatchmakingRulesResponse >(){
        // copy constructor
        
    }

    PySteamMatchmakingRulesResponse_wrapper()
    : PySteamMatchmakingRulesResponse()
      , bp::wrapper< PySteamMatchmakingRulesResponse >(){
        // null constructor
        
    }

    virtual void RulesFailedToRespond(  ) {
        PY_OVERRIDE_CHECK( PySteamMatchmakingRulesResponse, RulesFailedToRespond )
        PY_OVERRIDE_LOG( _steam, PySteamMatchmakingRulesResponse, RulesFailedToRespond )
        bp::override func_RulesFailedToRespond = this->get_override( "RulesFailedToRespond" );
        if( func_RulesFailedToRespond.ptr() != Py_None )
            try {
                func_RulesFailedToRespond(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PySteamMatchmakingRulesResponse::RulesFailedToRespond(  );
            }
        else
            this->PySteamMatchmakingRulesResponse::RulesFailedToRespond(  );
    }
    
    void default_RulesFailedToRespond(  ) {
        PySteamMatchmakingRulesResponse::RulesFailedToRespond( );
    }

    virtual void RulesRefreshComplete(  ) {
        PY_OVERRIDE_CHECK( PySteamMatchmakingRulesResponse, RulesRefreshComplete )
        PY_OVERRIDE_LOG( _steam, PySteamMatchmakingRulesResponse, RulesRefreshComplete )
        bp::override func_RulesRefreshComplete = this->get_override( "RulesRefreshComplete" );
        if( func_RulesRefreshComplete.ptr() != Py_None )
            try {
                func_RulesRefreshComplete(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PySteamMatchmakingRulesResponse::RulesRefreshComplete(  );
            }
        else
            this->PySteamMatchmakingRulesResponse::RulesRefreshComplete(  );
    }
    
    void default_RulesRefreshComplete(  ) {
        PySteamMatchmakingRulesResponse::RulesRefreshComplete( );
    }

    virtual void RulesResponded( char const * pchRule, char const * pchValue ) {
        PY_OVERRIDE_CHECK( PySteamMatchmakingRulesResponse, RulesResponded )
        PY_OVERRIDE_LOG( _steam, PySteamMatchmakingRulesResponse, RulesResponded )
        bp::override func_RulesResponded = this->get_override( "RulesResponded" );
        if( func_RulesResponded.ptr() != Py_None )
            try {
                func_RulesResponded( pchRule, pchValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PySteamMatchmakingRulesResponse::RulesResponded( pchRule, pchValue );
            }
        else
            this->PySteamMatchmakingRulesResponse::RulesResponded( pchRule, pchValue );
    }
    
    void default_RulesResponded( char const * pchRule, char const * pchValue ) {
        PySteamMatchmakingRulesResponse::RulesResponded( pchRule, pchValue );
    }

};

struct PySteamMatchmakingServerListResponse_wrapper : PySteamMatchmakingServerListResponse, bp::wrapper< PySteamMatchmakingServerListResponse > {

    PySteamMatchmakingServerListResponse_wrapper(PySteamMatchmakingServerListResponse const & arg )
    : PySteamMatchmakingServerListResponse( arg )
      , bp::wrapper< PySteamMatchmakingServerListResponse >(){
        // copy constructor
        
    }

    PySteamMatchmakingServerListResponse_wrapper()
    : PySteamMatchmakingServerListResponse()
      , bp::wrapper< PySteamMatchmakingServerListResponse >(){
        // null constructor
        
    }

    virtual void PyRefreshComplete( int hRequest, ::EMatchMakingServerResponse response ) {
        PY_OVERRIDE_CHECK( PySteamMatchmakingServerListResponse, PyRefreshComplete )
        PY_OVERRIDE_LOG( _steam, PySteamMatchmakingServerListResponse, PyRefreshComplete )
        bp::override func_RefreshComplete = this->get_override( "RefreshComplete" );
        if( func_RefreshComplete.ptr() != Py_None )
            try {
                func_RefreshComplete( hRequest, response );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PySteamMatchmakingServerListResponse::PyRefreshComplete( hRequest, response );
            }
        else
            this->PySteamMatchmakingServerListResponse::PyRefreshComplete( hRequest, response );
    }
    
    void default_RefreshComplete( int hRequest, ::EMatchMakingServerResponse response ) {
        PySteamMatchmakingServerListResponse::PyRefreshComplete( hRequest, response );
    }

    virtual void PyServerFailedToRespond( int hRequest, int iServer ) {
        PY_OVERRIDE_CHECK( PySteamMatchmakingServerListResponse, PyServerFailedToRespond )
        PY_OVERRIDE_LOG( _steam, PySteamMatchmakingServerListResponse, PyServerFailedToRespond )
        bp::override func_ServerFailedToRespond = this->get_override( "ServerFailedToRespond" );
        if( func_ServerFailedToRespond.ptr() != Py_None )
            try {
                func_ServerFailedToRespond( hRequest, iServer );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PySteamMatchmakingServerListResponse::PyServerFailedToRespond( hRequest, iServer );
            }
        else
            this->PySteamMatchmakingServerListResponse::PyServerFailedToRespond( hRequest, iServer );
    }
    
    void default_ServerFailedToRespond( int hRequest, int iServer ) {
        PySteamMatchmakingServerListResponse::PyServerFailedToRespond( hRequest, iServer );
    }

    virtual void PyServerResponded( int hRequest, int iServer ) {
        PY_OVERRIDE_CHECK( PySteamMatchmakingServerListResponse, PyServerResponded )
        PY_OVERRIDE_LOG( _steam, PySteamMatchmakingServerListResponse, PyServerResponded )
        bp::override func_ServerResponded = this->get_override( "ServerResponded" );
        if( func_ServerResponded.ptr() != Py_None )
            try {
                func_ServerResponded( hRequest, iServer );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PySteamMatchmakingServerListResponse::PyServerResponded( hRequest, iServer );
            }
        else
            this->PySteamMatchmakingServerListResponse::PyServerResponded( hRequest, iServer );
    }
    
    void default_ServerResponded( int hRequest, int iServer ) {
        PySteamMatchmakingServerListResponse::PyServerResponded( hRequest, iServer );
    }

};

static bp::tuple GetCurrentBetaName_44cfc773ce5b4e98b34b5a2219de76ad( ::ISteamApps & inst ){
    char buf[1024];
    bool rv = inst.GetCurrentBetaName( buf, sizeof(buf) );
    return bp::make_tuple( rv, bp::object( buf ) );
}

PY_STEAM_CALLBACK_WRAPPER( PersonaStateChange, PersonaStateChange_t );

struct PersonaStateChangeCallback_wrapper : PersonaStateChangeCallback, bp::wrapper< PersonaStateChangeCallback > {

    PersonaStateChangeCallback_wrapper()
    : PersonaStateChangeCallback()
      , bp::wrapper< PersonaStateChangeCallback >(){
        // constructor
    
    }

    virtual void OnPersonaStateChange( ::PersonaStateChange_t * pData ) {
        PY_OVERRIDE_CHECK( PersonaStateChangeCallback, OnPersonaStateChange )
        PY_OVERRIDE_LOG( _steam, PersonaStateChangeCallback, OnPersonaStateChange )
        bp::override func_OnPersonaStateChange = this->get_override( "OnPersonaStateChange" );
        if( func_OnPersonaStateChange.ptr() != Py_None )
            try {
                func_OnPersonaStateChange( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PersonaStateChangeCallback::OnPersonaStateChange( pData );
            }
        else
            this->PersonaStateChangeCallback::OnPersonaStateChange( pData );
    }
    
    void default_OnPersonaStateChange( ::PersonaStateChange_t * pData ) {
        PersonaStateChangeCallback::OnPersonaStateChange( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( GameOverlayActivated, GameOverlayActivated_t );

struct GameOverlayActivatedCallback_wrapper : GameOverlayActivatedCallback, bp::wrapper< GameOverlayActivatedCallback > {

    GameOverlayActivatedCallback_wrapper()
    : GameOverlayActivatedCallback()
      , bp::wrapper< GameOverlayActivatedCallback >(){
        // constructor
    
    }

    virtual void OnGameOverlayActivated( ::GameOverlayActivated_t * pData ) {
        PY_OVERRIDE_CHECK( GameOverlayActivatedCallback, OnGameOverlayActivated )
        PY_OVERRIDE_LOG( _steam, GameOverlayActivatedCallback, OnGameOverlayActivated )
        bp::override func_OnGameOverlayActivated = this->get_override( "OnGameOverlayActivated" );
        if( func_OnGameOverlayActivated.ptr() != Py_None )
            try {
                func_OnGameOverlayActivated( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->GameOverlayActivatedCallback::OnGameOverlayActivated( pData );
            }
        else
            this->GameOverlayActivatedCallback::OnGameOverlayActivated( pData );
    }
    
    void default_OnGameOverlayActivated( ::GameOverlayActivated_t * pData ) {
        GameOverlayActivatedCallback::OnGameOverlayActivated( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( GameServerChangeRequested, GameServerChangeRequested_t );

struct GameServerChangeRequestedCallback_wrapper : GameServerChangeRequestedCallback, bp::wrapper< GameServerChangeRequestedCallback > {

    GameServerChangeRequestedCallback_wrapper()
    : GameServerChangeRequestedCallback()
      , bp::wrapper< GameServerChangeRequestedCallback >(){
        // constructor
    
    }

    virtual void OnGameServerChangeRequested( ::GameServerChangeRequested_t * pData ) {
        PY_OVERRIDE_CHECK( GameServerChangeRequestedCallback, OnGameServerChangeRequested )
        PY_OVERRIDE_LOG( _steam, GameServerChangeRequestedCallback, OnGameServerChangeRequested )
        bp::override func_OnGameServerChangeRequested = this->get_override( "OnGameServerChangeRequested" );
        if( func_OnGameServerChangeRequested.ptr() != Py_None )
            try {
                func_OnGameServerChangeRequested( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->GameServerChangeRequestedCallback::OnGameServerChangeRequested( pData );
            }
        else
            this->GameServerChangeRequestedCallback::OnGameServerChangeRequested( pData );
    }
    
    void default_OnGameServerChangeRequested( ::GameServerChangeRequested_t * pData ) {
        GameServerChangeRequestedCallback::OnGameServerChangeRequested( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( GameLobbyJoinRequested, GameLobbyJoinRequested_t );

struct GameLobbyJoinRequestedCallback_wrapper : GameLobbyJoinRequestedCallback, bp::wrapper< GameLobbyJoinRequestedCallback > {

    GameLobbyJoinRequestedCallback_wrapper()
    : GameLobbyJoinRequestedCallback()
      , bp::wrapper< GameLobbyJoinRequestedCallback >(){
        // constructor
    
    }

    virtual void OnGameLobbyJoinRequested( ::GameLobbyJoinRequested_t * pData ) {
        PY_OVERRIDE_CHECK( GameLobbyJoinRequestedCallback, OnGameLobbyJoinRequested )
        PY_OVERRIDE_LOG( _steam, GameLobbyJoinRequestedCallback, OnGameLobbyJoinRequested )
        bp::override func_OnGameLobbyJoinRequested = this->get_override( "OnGameLobbyJoinRequested" );
        if( func_OnGameLobbyJoinRequested.ptr() != Py_None )
            try {
                func_OnGameLobbyJoinRequested( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->GameLobbyJoinRequestedCallback::OnGameLobbyJoinRequested( pData );
            }
        else
            this->GameLobbyJoinRequestedCallback::OnGameLobbyJoinRequested( pData );
    }
    
    void default_OnGameLobbyJoinRequested( ::GameLobbyJoinRequested_t * pData ) {
        GameLobbyJoinRequestedCallback::OnGameLobbyJoinRequested( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( AvatarImageLoaded, AvatarImageLoaded_t );

struct AvatarImageLoadedCallback_wrapper : AvatarImageLoadedCallback, bp::wrapper< AvatarImageLoadedCallback > {

    AvatarImageLoadedCallback_wrapper()
    : AvatarImageLoadedCallback()
      , bp::wrapper< AvatarImageLoadedCallback >(){
        // constructor
    
    }

    virtual void OnAvatarImageLoaded( ::AvatarImageLoaded_t * pData ) {
        PY_OVERRIDE_CHECK( AvatarImageLoadedCallback, OnAvatarImageLoaded )
        PY_OVERRIDE_LOG( _steam, AvatarImageLoadedCallback, OnAvatarImageLoaded )
        bp::override func_OnAvatarImageLoaded = this->get_override( "OnAvatarImageLoaded" );
        if( func_OnAvatarImageLoaded.ptr() != Py_None )
            try {
                func_OnAvatarImageLoaded( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->AvatarImageLoadedCallback::OnAvatarImageLoaded( pData );
            }
        else
            this->AvatarImageLoadedCallback::OnAvatarImageLoaded( pData );
    }
    
    void default_OnAvatarImageLoaded( ::AvatarImageLoaded_t * pData ) {
        AvatarImageLoadedCallback::OnAvatarImageLoaded( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( ClanOfficerListResponse, ClanOfficerListResponse_t );

struct ClanOfficerListResponseCallback_wrapper : ClanOfficerListResponseCallback, bp::wrapper< ClanOfficerListResponseCallback > {

    ClanOfficerListResponseCallback_wrapper()
    : ClanOfficerListResponseCallback()
      , bp::wrapper< ClanOfficerListResponseCallback >(){
        // constructor
    
    }

    virtual void OnClanOfficerListResponse( ::ClanOfficerListResponse_t * pData ) {
        PY_OVERRIDE_CHECK( ClanOfficerListResponseCallback, OnClanOfficerListResponse )
        PY_OVERRIDE_LOG( _steam, ClanOfficerListResponseCallback, OnClanOfficerListResponse )
        bp::override func_OnClanOfficerListResponse = this->get_override( "OnClanOfficerListResponse" );
        if( func_OnClanOfficerListResponse.ptr() != Py_None )
            try {
                func_OnClanOfficerListResponse( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->ClanOfficerListResponseCallback::OnClanOfficerListResponse( pData );
            }
        else
            this->ClanOfficerListResponseCallback::OnClanOfficerListResponse( pData );
    }
    
    void default_OnClanOfficerListResponse( ::ClanOfficerListResponse_t * pData ) {
        ClanOfficerListResponseCallback::OnClanOfficerListResponse( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( FriendRichPresenceUpdate, FriendRichPresenceUpdate_t );

struct FriendRichPresenceUpdateCallback_wrapper : FriendRichPresenceUpdateCallback, bp::wrapper< FriendRichPresenceUpdateCallback > {

    FriendRichPresenceUpdateCallback_wrapper()
    : FriendRichPresenceUpdateCallback()
      , bp::wrapper< FriendRichPresenceUpdateCallback >(){
        // constructor
    
    }

    virtual void OnFriendRichPresenceUpdate( ::FriendRichPresenceUpdate_t * pData ) {
        PY_OVERRIDE_CHECK( FriendRichPresenceUpdateCallback, OnFriendRichPresenceUpdate )
        PY_OVERRIDE_LOG( _steam, FriendRichPresenceUpdateCallback, OnFriendRichPresenceUpdate )
        bp::override func_OnFriendRichPresenceUpdate = this->get_override( "OnFriendRichPresenceUpdate" );
        if( func_OnFriendRichPresenceUpdate.ptr() != Py_None )
            try {
                func_OnFriendRichPresenceUpdate( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->FriendRichPresenceUpdateCallback::OnFriendRichPresenceUpdate( pData );
            }
        else
            this->FriendRichPresenceUpdateCallback::OnFriendRichPresenceUpdate( pData );
    }
    
    void default_OnFriendRichPresenceUpdate( ::FriendRichPresenceUpdate_t * pData ) {
        FriendRichPresenceUpdateCallback::OnFriendRichPresenceUpdate( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( GameRichPresenceJoinRequested, GameRichPresenceJoinRequested_t );

struct GameRichPresenceJoinRequestedCallback_wrapper : GameRichPresenceJoinRequestedCallback, bp::wrapper< GameRichPresenceJoinRequestedCallback > {

    GameRichPresenceJoinRequestedCallback_wrapper()
    : GameRichPresenceJoinRequestedCallback()
      , bp::wrapper< GameRichPresenceJoinRequestedCallback >(){
        // constructor
    
    }

    virtual void OnGameRichPresenceJoinRequested( ::GameRichPresenceJoinRequested_t * pData ) {
        PY_OVERRIDE_CHECK( GameRichPresenceJoinRequestedCallback, OnGameRichPresenceJoinRequested )
        PY_OVERRIDE_LOG( _steam, GameRichPresenceJoinRequestedCallback, OnGameRichPresenceJoinRequested )
        bp::override func_OnGameRichPresenceJoinRequested = this->get_override( "OnGameRichPresenceJoinRequested" );
        if( func_OnGameRichPresenceJoinRequested.ptr() != Py_None )
            try {
                func_OnGameRichPresenceJoinRequested( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->GameRichPresenceJoinRequestedCallback::OnGameRichPresenceJoinRequested( pData );
            }
        else
            this->GameRichPresenceJoinRequestedCallback::OnGameRichPresenceJoinRequested( pData );
    }
    
    void default_OnGameRichPresenceJoinRequested( ::GameRichPresenceJoinRequested_t * pData ) {
        GameRichPresenceJoinRequestedCallback::OnGameRichPresenceJoinRequested( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( GameConnectedClanChatMsg, GameConnectedClanChatMsg_t );

struct GameConnectedClanChatMsgCallback_wrapper : GameConnectedClanChatMsgCallback, bp::wrapper< GameConnectedClanChatMsgCallback > {

    GameConnectedClanChatMsgCallback_wrapper()
    : GameConnectedClanChatMsgCallback()
      , bp::wrapper< GameConnectedClanChatMsgCallback >(){
        // constructor
    
    }

    virtual void OnGameConnectedClanChatMsg( ::GameConnectedClanChatMsg_t * pData ) {
        PY_OVERRIDE_CHECK( GameConnectedClanChatMsgCallback, OnGameConnectedClanChatMsg )
        PY_OVERRIDE_LOG( _steam, GameConnectedClanChatMsgCallback, OnGameConnectedClanChatMsg )
        bp::override func_OnGameConnectedClanChatMsg = this->get_override( "OnGameConnectedClanChatMsg" );
        if( func_OnGameConnectedClanChatMsg.ptr() != Py_None )
            try {
                func_OnGameConnectedClanChatMsg( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->GameConnectedClanChatMsgCallback::OnGameConnectedClanChatMsg( pData );
            }
        else
            this->GameConnectedClanChatMsgCallback::OnGameConnectedClanChatMsg( pData );
    }
    
    void default_OnGameConnectedClanChatMsg( ::GameConnectedClanChatMsg_t * pData ) {
        GameConnectedClanChatMsgCallback::OnGameConnectedClanChatMsg( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( GameConnectedChatJoin, GameConnectedChatJoin_t );

struct GameConnectedChatJoinCallback_wrapper : GameConnectedChatJoinCallback, bp::wrapper< GameConnectedChatJoinCallback > {

    GameConnectedChatJoinCallback_wrapper()
    : GameConnectedChatJoinCallback()
      , bp::wrapper< GameConnectedChatJoinCallback >(){
        // constructor
    
    }

    virtual void OnGameConnectedChatJoin( ::GameConnectedChatJoin_t * pData ) {
        PY_OVERRIDE_CHECK( GameConnectedChatJoinCallback, OnGameConnectedChatJoin )
        PY_OVERRIDE_LOG( _steam, GameConnectedChatJoinCallback, OnGameConnectedChatJoin )
        bp::override func_OnGameConnectedChatJoin = this->get_override( "OnGameConnectedChatJoin" );
        if( func_OnGameConnectedChatJoin.ptr() != Py_None )
            try {
                func_OnGameConnectedChatJoin( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->GameConnectedChatJoinCallback::OnGameConnectedChatJoin( pData );
            }
        else
            this->GameConnectedChatJoinCallback::OnGameConnectedChatJoin( pData );
    }
    
    void default_OnGameConnectedChatJoin( ::GameConnectedChatJoin_t * pData ) {
        GameConnectedChatJoinCallback::OnGameConnectedChatJoin( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( GameConnectedChatLeave, GameConnectedChatLeave_t );

struct GameConnectedChatLeaveCallback_wrapper : GameConnectedChatLeaveCallback, bp::wrapper< GameConnectedChatLeaveCallback > {

    GameConnectedChatLeaveCallback_wrapper()
    : GameConnectedChatLeaveCallback()
      , bp::wrapper< GameConnectedChatLeaveCallback >(){
        // constructor
    
    }

    virtual void OnGameConnectedChatLeave( ::GameConnectedChatLeave_t * pData ) {
        PY_OVERRIDE_CHECK( GameConnectedChatLeaveCallback, OnGameConnectedChatLeave )
        PY_OVERRIDE_LOG( _steam, GameConnectedChatLeaveCallback, OnGameConnectedChatLeave )
        bp::override func_OnGameConnectedChatLeave = this->get_override( "OnGameConnectedChatLeave" );
        if( func_OnGameConnectedChatLeave.ptr() != Py_None )
            try {
                func_OnGameConnectedChatLeave( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->GameConnectedChatLeaveCallback::OnGameConnectedChatLeave( pData );
            }
        else
            this->GameConnectedChatLeaveCallback::OnGameConnectedChatLeave( pData );
    }
    
    void default_OnGameConnectedChatLeave( ::GameConnectedChatLeave_t * pData ) {
        GameConnectedChatLeaveCallback::OnGameConnectedChatLeave( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( DownloadClanActivityCountsResult, DownloadClanActivityCountsResult_t );

struct DownloadClanActivityCountsResultCallback_wrapper : DownloadClanActivityCountsResultCallback, bp::wrapper< DownloadClanActivityCountsResultCallback > {

    DownloadClanActivityCountsResultCallback_wrapper()
    : DownloadClanActivityCountsResultCallback()
      , bp::wrapper< DownloadClanActivityCountsResultCallback >(){
        // constructor
    
    }

    virtual void OnDownloadClanActivityCountsResult( ::DownloadClanActivityCountsResult_t * pData ) {
        PY_OVERRIDE_CHECK( DownloadClanActivityCountsResultCallback, OnDownloadClanActivityCountsResult )
        PY_OVERRIDE_LOG( _steam, DownloadClanActivityCountsResultCallback, OnDownloadClanActivityCountsResult )
        bp::override func_OnDownloadClanActivityCountsResult = this->get_override( "OnDownloadClanActivityCountsResult" );
        if( func_OnDownloadClanActivityCountsResult.ptr() != Py_None )
            try {
                func_OnDownloadClanActivityCountsResult( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->DownloadClanActivityCountsResultCallback::OnDownloadClanActivityCountsResult( pData );
            }
        else
            this->DownloadClanActivityCountsResultCallback::OnDownloadClanActivityCountsResult( pData );
    }
    
    void default_OnDownloadClanActivityCountsResult( ::DownloadClanActivityCountsResult_t * pData ) {
        DownloadClanActivityCountsResultCallback::OnDownloadClanActivityCountsResult( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( JoinClanChatRoomCompletionResult, JoinClanChatRoomCompletionResult_t );

struct JoinClanChatRoomCompletionResultCallback_wrapper : JoinClanChatRoomCompletionResultCallback, bp::wrapper< JoinClanChatRoomCompletionResultCallback > {

    JoinClanChatRoomCompletionResultCallback_wrapper()
    : JoinClanChatRoomCompletionResultCallback()
      , bp::wrapper< JoinClanChatRoomCompletionResultCallback >(){
        // constructor
    
    }

    virtual void OnJoinClanChatRoomCompletionResult( ::JoinClanChatRoomCompletionResult_t * pData ) {
        PY_OVERRIDE_CHECK( JoinClanChatRoomCompletionResultCallback, OnJoinClanChatRoomCompletionResult )
        PY_OVERRIDE_LOG( _steam, JoinClanChatRoomCompletionResultCallback, OnJoinClanChatRoomCompletionResult )
        bp::override func_OnJoinClanChatRoomCompletionResult = this->get_override( "OnJoinClanChatRoomCompletionResult" );
        if( func_OnJoinClanChatRoomCompletionResult.ptr() != Py_None )
            try {
                func_OnJoinClanChatRoomCompletionResult( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->JoinClanChatRoomCompletionResultCallback::OnJoinClanChatRoomCompletionResult( pData );
            }
        else
            this->JoinClanChatRoomCompletionResultCallback::OnJoinClanChatRoomCompletionResult( pData );
    }
    
    void default_OnJoinClanChatRoomCompletionResult( ::JoinClanChatRoomCompletionResult_t * pData ) {
        JoinClanChatRoomCompletionResultCallback::OnJoinClanChatRoomCompletionResult( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( GameConnectedFriendChatMsg, GameConnectedFriendChatMsg_t );

struct GameConnectedFriendChatMsgCallback_wrapper : GameConnectedFriendChatMsgCallback, bp::wrapper< GameConnectedFriendChatMsgCallback > {

    GameConnectedFriendChatMsgCallback_wrapper()
    : GameConnectedFriendChatMsgCallback()
      , bp::wrapper< GameConnectedFriendChatMsgCallback >(){
        // constructor
    
    }

    virtual void OnGameConnectedFriendChatMsg( ::GameConnectedFriendChatMsg_t * pData ) {
        PY_OVERRIDE_CHECK( GameConnectedFriendChatMsgCallback, OnGameConnectedFriendChatMsg )
        PY_OVERRIDE_LOG( _steam, GameConnectedFriendChatMsgCallback, OnGameConnectedFriendChatMsg )
        bp::override func_OnGameConnectedFriendChatMsg = this->get_override( "OnGameConnectedFriendChatMsg" );
        if( func_OnGameConnectedFriendChatMsg.ptr() != Py_None )
            try {
                func_OnGameConnectedFriendChatMsg( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->GameConnectedFriendChatMsgCallback::OnGameConnectedFriendChatMsg( pData );
            }
        else
            this->GameConnectedFriendChatMsgCallback::OnGameConnectedFriendChatMsg( pData );
    }
    
    void default_OnGameConnectedFriendChatMsg( ::GameConnectedFriendChatMsg_t * pData ) {
        GameConnectedFriendChatMsgCallback::OnGameConnectedFriendChatMsg( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( FriendsGetFollowerCount, FriendsGetFollowerCount_t );

struct FriendsGetFollowerCountCallback_wrapper : FriendsGetFollowerCountCallback, bp::wrapper< FriendsGetFollowerCountCallback > {

    FriendsGetFollowerCountCallback_wrapper()
    : FriendsGetFollowerCountCallback()
      , bp::wrapper< FriendsGetFollowerCountCallback >(){
        // constructor
    
    }

    virtual void OnFriendsGetFollowerCount( ::FriendsGetFollowerCount_t * pData ) {
        PY_OVERRIDE_CHECK( FriendsGetFollowerCountCallback, OnFriendsGetFollowerCount )
        PY_OVERRIDE_LOG( _steam, FriendsGetFollowerCountCallback, OnFriendsGetFollowerCount )
        bp::override func_OnFriendsGetFollowerCount = this->get_override( "OnFriendsGetFollowerCount" );
        if( func_OnFriendsGetFollowerCount.ptr() != Py_None )
            try {
                func_OnFriendsGetFollowerCount( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->FriendsGetFollowerCountCallback::OnFriendsGetFollowerCount( pData );
            }
        else
            this->FriendsGetFollowerCountCallback::OnFriendsGetFollowerCount( pData );
    }
    
    void default_OnFriendsGetFollowerCount( ::FriendsGetFollowerCount_t * pData ) {
        FriendsGetFollowerCountCallback::OnFriendsGetFollowerCount( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( FriendsIsFollowing, FriendsIsFollowing_t );

struct FriendsIsFollowingCallback_wrapper : FriendsIsFollowingCallback, bp::wrapper< FriendsIsFollowingCallback > {

    FriendsIsFollowingCallback_wrapper()
    : FriendsIsFollowingCallback()
      , bp::wrapper< FriendsIsFollowingCallback >(){
        // constructor
    
    }

    virtual void OnFriendsIsFollowing( ::FriendsIsFollowing_t * pData ) {
        PY_OVERRIDE_CHECK( FriendsIsFollowingCallback, OnFriendsIsFollowing )
        PY_OVERRIDE_LOG( _steam, FriendsIsFollowingCallback, OnFriendsIsFollowing )
        bp::override func_OnFriendsIsFollowing = this->get_override( "OnFriendsIsFollowing" );
        if( func_OnFriendsIsFollowing.ptr() != Py_None )
            try {
                func_OnFriendsIsFollowing( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->FriendsIsFollowingCallback::OnFriendsIsFollowing( pData );
            }
        else
            this->FriendsIsFollowingCallback::OnFriendsIsFollowing( pData );
    }
    
    void default_OnFriendsIsFollowing( ::FriendsIsFollowing_t * pData ) {
        FriendsIsFollowingCallback::OnFriendsIsFollowing( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( FriendsEnumerateFollowingList, FriendsEnumerateFollowingList_t );

struct FriendsEnumerateFollowingListCallback_wrapper : FriendsEnumerateFollowingListCallback, bp::wrapper< FriendsEnumerateFollowingListCallback > {

    FriendsEnumerateFollowingListCallback_wrapper()
    : FriendsEnumerateFollowingListCallback()
      , bp::wrapper< FriendsEnumerateFollowingListCallback >(){
        // constructor
    
    }

    virtual void OnFriendsEnumerateFollowingList( ::FriendsEnumerateFollowingList_t * pData ) {
        PY_OVERRIDE_CHECK( FriendsEnumerateFollowingListCallback, OnFriendsEnumerateFollowingList )
        PY_OVERRIDE_LOG( _steam, FriendsEnumerateFollowingListCallback, OnFriendsEnumerateFollowingList )
        bp::override func_OnFriendsEnumerateFollowingList = this->get_override( "OnFriendsEnumerateFollowingList" );
        if( func_OnFriendsEnumerateFollowingList.ptr() != Py_None )
            try {
                func_OnFriendsEnumerateFollowingList( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->FriendsEnumerateFollowingListCallback::OnFriendsEnumerateFollowingList( pData );
            }
        else
            this->FriendsEnumerateFollowingListCallback::OnFriendsEnumerateFollowingList( pData );
    }
    
    void default_OnFriendsEnumerateFollowingList( ::FriendsEnumerateFollowingList_t * pData ) {
        FriendsEnumerateFollowingListCallback::OnFriendsEnumerateFollowingList( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( SetPersonaNameResponse, SetPersonaNameResponse_t );

struct SetPersonaNameResponseCallback_wrapper : SetPersonaNameResponseCallback, bp::wrapper< SetPersonaNameResponseCallback > {

    SetPersonaNameResponseCallback_wrapper()
    : SetPersonaNameResponseCallback()
      , bp::wrapper< SetPersonaNameResponseCallback >(){
        // constructor
    
    }

    virtual void OnSetPersonaNameResponse( ::SetPersonaNameResponse_t * pData ) {
        PY_OVERRIDE_CHECK( SetPersonaNameResponseCallback, OnSetPersonaNameResponse )
        PY_OVERRIDE_LOG( _steam, SetPersonaNameResponseCallback, OnSetPersonaNameResponse )
        bp::override func_OnSetPersonaNameResponse = this->get_override( "OnSetPersonaNameResponse" );
        if( func_OnSetPersonaNameResponse.ptr() != Py_None )
            try {
                func_OnSetPersonaNameResponse( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->SetPersonaNameResponseCallback::OnSetPersonaNameResponse( pData );
            }
        else
            this->SetPersonaNameResponseCallback::OnSetPersonaNameResponse( pData );
    }
    
    void default_OnSetPersonaNameResponse( ::SetPersonaNameResponse_t * pData ) {
        SetPersonaNameResponseCallback::OnSetPersonaNameResponse( pData );
    }
};

PY_STEAM_CALLRESULT_WRAPPER( LobbyMatchList, LobbyMatchList_t );

struct LobbyMatchListCallResult_wrapper : LobbyMatchListCallResult, bp::wrapper< LobbyMatchListCallResult > {

    LobbyMatchListCallResult_wrapper(::SteamAPICall_t steamapicall )
    : LobbyMatchListCallResult( steamapicall )
      , bp::wrapper< LobbyMatchListCallResult >(){
        // constructor
    }

    virtual void OnLobbyMatchList( ::LobbyMatchList_t * pData, bool bIOFailure ) {
        PY_OVERRIDE_CHECK( LobbyMatchListCallResult, OnLobbyMatchList )
        PY_OVERRIDE_LOG( _steam, LobbyMatchListCallResult, OnLobbyMatchList )
        bp::override func_OnLobbyMatchList = this->get_override( "OnLobbyMatchList" );
        if( func_OnLobbyMatchList.ptr() != Py_None )
            try {
                func_OnLobbyMatchList( boost::python::ptr(pData), bIOFailure );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->LobbyMatchListCallResult::OnLobbyMatchList( pData, bIOFailure );
            }
        else
            this->LobbyMatchListCallResult::OnLobbyMatchList( pData, bIOFailure );
    }
    
    void default_OnLobbyMatchList( ::LobbyMatchList_t * pData, bool bIOFailure ) {
        LobbyMatchListCallResult::OnLobbyMatchList( pData, bIOFailure );
    }
};

PY_STEAM_CALLRESULT_WRAPPER( LobbyGameCreated, LobbyGameCreated_t );

struct LobbyGameCreatedCallResult_wrapper : LobbyGameCreatedCallResult, bp::wrapper< LobbyGameCreatedCallResult > {

    LobbyGameCreatedCallResult_wrapper(::SteamAPICall_t steamapicall )
    : LobbyGameCreatedCallResult( steamapicall )
      , bp::wrapper< LobbyGameCreatedCallResult >(){
        // constructor
    }

    virtual void OnLobbyGameCreated( ::LobbyGameCreated_t * pData, bool bIOFailure ) {
        PY_OVERRIDE_CHECK( LobbyGameCreatedCallResult, OnLobbyGameCreated )
        PY_OVERRIDE_LOG( _steam, LobbyGameCreatedCallResult, OnLobbyGameCreated )
        bp::override func_OnLobbyGameCreated = this->get_override( "OnLobbyGameCreated" );
        if( func_OnLobbyGameCreated.ptr() != Py_None )
            try {
                func_OnLobbyGameCreated( boost::python::ptr(pData), bIOFailure );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->LobbyGameCreatedCallResult::OnLobbyGameCreated( pData, bIOFailure );
            }
        else
            this->LobbyGameCreatedCallResult::OnLobbyGameCreated( pData, bIOFailure );
    }
    
    void default_OnLobbyGameCreated( ::LobbyGameCreated_t * pData, bool bIOFailure ) {
        LobbyGameCreatedCallResult::OnLobbyGameCreated( pData, bIOFailure );
    }
};

PY_STEAM_CALLRESULT_WRAPPER( LobbyCreated, LobbyCreated_t );

struct LobbyCreatedCallResult_wrapper : LobbyCreatedCallResult, bp::wrapper< LobbyCreatedCallResult > {

    LobbyCreatedCallResult_wrapper(::SteamAPICall_t steamapicall )
    : LobbyCreatedCallResult( steamapicall )
      , bp::wrapper< LobbyCreatedCallResult >(){
        // constructor
    }

    virtual void OnLobbyCreated( ::LobbyCreated_t * pData, bool bIOFailure ) {
        PY_OVERRIDE_CHECK( LobbyCreatedCallResult, OnLobbyCreated )
        PY_OVERRIDE_LOG( _steam, LobbyCreatedCallResult, OnLobbyCreated )
        bp::override func_OnLobbyCreated = this->get_override( "OnLobbyCreated" );
        if( func_OnLobbyCreated.ptr() != Py_None )
            try {
                func_OnLobbyCreated( boost::python::ptr(pData), bIOFailure );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->LobbyCreatedCallResult::OnLobbyCreated( pData, bIOFailure );
            }
        else
            this->LobbyCreatedCallResult::OnLobbyCreated( pData, bIOFailure );
    }
    
    void default_OnLobbyCreated( ::LobbyCreated_t * pData, bool bIOFailure ) {
        LobbyCreatedCallResult::OnLobbyCreated( pData, bIOFailure );
    }
};

PY_STEAM_CALLRESULT_WRAPPER( LobbyEnter, LobbyEnter_t );

struct LobbyEnterCallResult_wrapper : LobbyEnterCallResult, bp::wrapper< LobbyEnterCallResult > {

    LobbyEnterCallResult_wrapper(::SteamAPICall_t steamapicall )
    : LobbyEnterCallResult( steamapicall )
      , bp::wrapper< LobbyEnterCallResult >(){
        // constructor
    }

    virtual void OnLobbyEnter( ::LobbyEnter_t * pData, bool bIOFailure ) {
        PY_OVERRIDE_CHECK( LobbyEnterCallResult, OnLobbyEnter )
        PY_OVERRIDE_LOG( _steam, LobbyEnterCallResult, OnLobbyEnter )
        bp::override func_OnLobbyEnter = this->get_override( "OnLobbyEnter" );
        if( func_OnLobbyEnter.ptr() != Py_None )
            try {
                func_OnLobbyEnter( boost::python::ptr(pData), bIOFailure );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->LobbyEnterCallResult::OnLobbyEnter( pData, bIOFailure );
            }
        else
            this->LobbyEnterCallResult::OnLobbyEnter( pData, bIOFailure );
    }
    
    void default_OnLobbyEnter( ::LobbyEnter_t * pData, bool bIOFailure ) {
        LobbyEnterCallResult::OnLobbyEnter( pData, bIOFailure );
    }
};

PY_STEAM_CALLBACK_WRAPPER( LobbyChatUpdate, LobbyChatUpdate_t );

struct LobbyChatUpdateCallback_wrapper : LobbyChatUpdateCallback, bp::wrapper< LobbyChatUpdateCallback > {

    LobbyChatUpdateCallback_wrapper()
    : LobbyChatUpdateCallback()
      , bp::wrapper< LobbyChatUpdateCallback >(){
        // constructor
    
    }

    virtual void OnLobbyChatUpdate( ::LobbyChatUpdate_t * pData ) {
        PY_OVERRIDE_CHECK( LobbyChatUpdateCallback, OnLobbyChatUpdate )
        PY_OVERRIDE_LOG( _steam, LobbyChatUpdateCallback, OnLobbyChatUpdate )
        bp::override func_OnLobbyChatUpdate = this->get_override( "OnLobbyChatUpdate" );
        if( func_OnLobbyChatUpdate.ptr() != Py_None )
            try {
                func_OnLobbyChatUpdate( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->LobbyChatUpdateCallback::OnLobbyChatUpdate( pData );
            }
        else
            this->LobbyChatUpdateCallback::OnLobbyChatUpdate( pData );
    }
    
    void default_OnLobbyChatUpdate( ::LobbyChatUpdate_t * pData ) {
        LobbyChatUpdateCallback::OnLobbyChatUpdate( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( LobbyChatMsg, LobbyChatMsg_t );

struct LobbyChatMsgCallback_wrapper : LobbyChatMsgCallback, bp::wrapper< LobbyChatMsgCallback > {

    LobbyChatMsgCallback_wrapper()
    : LobbyChatMsgCallback()
      , bp::wrapper< LobbyChatMsgCallback >(){
        // constructor
    
    }

    virtual void OnLobbyChatMsg( ::LobbyChatMsg_t * pData ) {
        PY_OVERRIDE_CHECK( LobbyChatMsgCallback, OnLobbyChatMsg )
        PY_OVERRIDE_LOG( _steam, LobbyChatMsgCallback, OnLobbyChatMsg )
        bp::override func_OnLobbyChatMsg = this->get_override( "OnLobbyChatMsg" );
        if( func_OnLobbyChatMsg.ptr() != Py_None )
            try {
                func_OnLobbyChatMsg( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->LobbyChatMsgCallback::OnLobbyChatMsg( pData );
            }
        else
            this->LobbyChatMsgCallback::OnLobbyChatMsg( pData );
    }
    
    void default_OnLobbyChatMsg( ::LobbyChatMsg_t * pData ) {
        LobbyChatMsgCallback::OnLobbyChatMsg( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( LobbyDataUpdate, LobbyDataUpdate_t );

struct LobbyDataUpdateCallback_wrapper : LobbyDataUpdateCallback, bp::wrapper< LobbyDataUpdateCallback > {

    LobbyDataUpdateCallback_wrapper()
    : LobbyDataUpdateCallback()
      , bp::wrapper< LobbyDataUpdateCallback >(){
        // constructor
    
    }

    virtual void OnLobbyDataUpdate( ::LobbyDataUpdate_t * pData ) {
        PY_OVERRIDE_CHECK( LobbyDataUpdateCallback, OnLobbyDataUpdate )
        PY_OVERRIDE_LOG( _steam, LobbyDataUpdateCallback, OnLobbyDataUpdate )
        bp::override func_OnLobbyDataUpdate = this->get_override( "OnLobbyDataUpdate" );
        if( func_OnLobbyDataUpdate.ptr() != Py_None )
            try {
                func_OnLobbyDataUpdate( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->LobbyDataUpdateCallback::OnLobbyDataUpdate( pData );
            }
        else
            this->LobbyDataUpdateCallback::OnLobbyDataUpdate( pData );
    }
    
    void default_OnLobbyDataUpdate( ::LobbyDataUpdate_t * pData ) {
        LobbyDataUpdateCallback::OnLobbyDataUpdate( pData );
    }
};

PY_STEAM_CALLRESULT_WRAPPER( NumberOfCurrentPlayers, NumberOfCurrentPlayers_t );

struct NumberOfCurrentPlayersCallResult_wrapper : NumberOfCurrentPlayersCallResult, bp::wrapper< NumberOfCurrentPlayersCallResult > {

    NumberOfCurrentPlayersCallResult_wrapper(::SteamAPICall_t steamapicall )
    : NumberOfCurrentPlayersCallResult( steamapicall )
      , bp::wrapper< NumberOfCurrentPlayersCallResult >(){
        // constructor
    }

    virtual void OnNumberOfCurrentPlayers( ::NumberOfCurrentPlayers_t * pData, bool bIOFailure ) {
        PY_OVERRIDE_CHECK( NumberOfCurrentPlayersCallResult, OnNumberOfCurrentPlayers )
        PY_OVERRIDE_LOG( _steam, NumberOfCurrentPlayersCallResult, OnNumberOfCurrentPlayers )
        bp::override func_OnNumberOfCurrentPlayers = this->get_override( "OnNumberOfCurrentPlayers" );
        if( func_OnNumberOfCurrentPlayers.ptr() != Py_None )
            try {
                func_OnNumberOfCurrentPlayers( boost::python::ptr(pData), bIOFailure );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->NumberOfCurrentPlayersCallResult::OnNumberOfCurrentPlayers( pData, bIOFailure );
            }
        else
            this->NumberOfCurrentPlayersCallResult::OnNumberOfCurrentPlayers( pData, bIOFailure );
    }
    
    void default_OnNumberOfCurrentPlayers( ::NumberOfCurrentPlayers_t * pData, bool bIOFailure ) {
        NumberOfCurrentPlayersCallResult::OnNumberOfCurrentPlayers( pData, bIOFailure );
    }
};

BOOST_PYTHON_MODULE(_steam){
    bp::docstring_options doc_options( true, true, false );

    bp::enum_< EAccountType>("EAccountType")
        .value("k_EAccountTypeInvalid", k_EAccountTypeInvalid)
        .value("k_EAccountTypeIndividual", k_EAccountTypeIndividual)
        .value("k_EAccountTypeMultiseat", k_EAccountTypeMultiseat)
        .value("k_EAccountTypeGameServer", k_EAccountTypeGameServer)
        .value("k_EAccountTypeAnonGameServer", k_EAccountTypeAnonGameServer)
        .value("k_EAccountTypePending", k_EAccountTypePending)
        .value("k_EAccountTypeContentServer", k_EAccountTypeContentServer)
        .value("k_EAccountTypeClan", k_EAccountTypeClan)
        .value("k_EAccountTypeChat", k_EAccountTypeChat)
        .value("k_EAccountTypeConsoleUser", k_EAccountTypeConsoleUser)
        .value("k_EAccountTypeAnonUser", k_EAccountTypeAnonUser)
        .value("k_EAccountTypeMax", k_EAccountTypeMax)
        .export_values()
        ;

    bp::enum_< EChatEntryType>("EChatEntryType")
        .value("k_EChatEntryTypeInvalid", k_EChatEntryTypeInvalid)
        .value("k_EChatEntryTypeChatMsg", k_EChatEntryTypeChatMsg)
        .value("k_EChatEntryTypeTyping", k_EChatEntryTypeTyping)
        .value("k_EChatEntryTypeInviteGame", k_EChatEntryTypeInviteGame)
        .value("k_EChatEntryTypeEmote", k_EChatEntryTypeEmote)
        .value("k_EChatEntryTypeLeftConversation", k_EChatEntryTypeLeftConversation)
        .value("k_EChatEntryTypeEntered", k_EChatEntryTypeEntered)
        .value("k_EChatEntryTypeWasKicked", k_EChatEntryTypeWasKicked)
        .value("k_EChatEntryTypeWasBanned", k_EChatEntryTypeWasBanned)
        .value("k_EChatEntryTypeDisconnected", k_EChatEntryTypeDisconnected)
        .value("k_EChatEntryTypeHistoricalChat", k_EChatEntryTypeHistoricalChat)
        .value("k_EChatEntryTypeReserved1", k_EChatEntryTypeReserved1)
        .value("k_EChatEntryTypeReserved2", k_EChatEntryTypeReserved2)
        .value("k_EChatEntryTypeLinkBlocked", k_EChatEntryTypeLinkBlocked)
        .export_values()
        ;

    bp::enum_< EChatMemberStateChange>("EChatMemberStateChange")
        .value("k_EChatMemberStateChangeEntered", k_EChatMemberStateChangeEntered)
        .value("k_EChatMemberStateChangeLeft", k_EChatMemberStateChangeLeft)
        .value("k_EChatMemberStateChangeDisconnected", k_EChatMemberStateChangeDisconnected)
        .value("k_EChatMemberStateChangeKicked", k_EChatMemberStateChangeKicked)
        .value("k_EChatMemberStateChangeBanned", k_EChatMemberStateChangeBanned)
        .export_values()
        ;

    bp::enum_< EChatRoomEnterResponse>("EChatRoomEnterResponse")
        .value("k_EChatRoomEnterResponseSuccess", k_EChatRoomEnterResponseSuccess)
        .value("k_EChatRoomEnterResponseDoesntExist", k_EChatRoomEnterResponseDoesntExist)
        .value("k_EChatRoomEnterResponseNotAllowed", k_EChatRoomEnterResponseNotAllowed)
        .value("k_EChatRoomEnterResponseFull", k_EChatRoomEnterResponseFull)
        .value("k_EChatRoomEnterResponseError", k_EChatRoomEnterResponseError)
        .value("k_EChatRoomEnterResponseBanned", k_EChatRoomEnterResponseBanned)
        .value("k_EChatRoomEnterResponseLimited", k_EChatRoomEnterResponseLimited)
        .value("k_EChatRoomEnterResponseClanDisabled", k_EChatRoomEnterResponseClanDisabled)
        .value("k_EChatRoomEnterResponseCommunityBan", k_EChatRoomEnterResponseCommunityBan)
        .value("k_EChatRoomEnterResponseMemberBlockedYou", k_EChatRoomEnterResponseMemberBlockedYou)
        .value("k_EChatRoomEnterResponseYouBlockedMember", k_EChatRoomEnterResponseYouBlockedMember)
        .export_values()
        ;

    bp::enum_< EDenyReason>("EDenyReason")
        .value("k_EDenyInvalid", k_EDenyInvalid)
        .value("k_EDenyInvalidVersion", k_EDenyInvalidVersion)
        .value("k_EDenyGeneric", k_EDenyGeneric)
        .value("k_EDenyNotLoggedOn", k_EDenyNotLoggedOn)
        .value("k_EDenyNoLicense", k_EDenyNoLicense)
        .value("k_EDenyCheater", k_EDenyCheater)
        .value("k_EDenyLoggedInElseWhere", k_EDenyLoggedInElseWhere)
        .value("k_EDenyUnknownText", k_EDenyUnknownText)
        .value("k_EDenyIncompatibleAnticheat", k_EDenyIncompatibleAnticheat)
        .value("k_EDenyMemoryCorruption", k_EDenyMemoryCorruption)
        .value("k_EDenyIncompatibleSoftware", k_EDenyIncompatibleSoftware)
        .value("k_EDenySteamConnectionLost", k_EDenySteamConnectionLost)
        .value("k_EDenySteamConnectionError", k_EDenySteamConnectionError)
        .value("k_EDenySteamResponseTimedOut", k_EDenySteamResponseTimedOut)
        .value("k_EDenySteamValidationStalled", k_EDenySteamValidationStalled)
        .value("k_EDenySteamOwnerLeftGuestUser", k_EDenySteamOwnerLeftGuestUser)
        .export_values()
        ;

    bp::enum_< EFriendRelationship>("EFriendRelationship")
        .value("k_EFriendRelationshipNone", k_EFriendRelationshipNone)
        .value("k_EFriendRelationshipBlocked", k_EFriendRelationshipBlocked)
        .value("k_EFriendRelationshipRequestRecipient", k_EFriendRelationshipRequestRecipient)
        .value("k_EFriendRelationshipFriend", k_EFriendRelationshipFriend)
        .value("k_EFriendRelationshipRequestInitiator", k_EFriendRelationshipRequestInitiator)
        .value("k_EFriendRelationshipIgnored", k_EFriendRelationshipIgnored)
        .value("k_EFriendRelationshipIgnoredFriend", k_EFriendRelationshipIgnoredFriend)
        .value("k_EFriendRelationshipSuggested", k_EFriendRelationshipSuggested)
        .value("k_EFriendRelationshipMax", k_EFriendRelationshipMax)
        .export_values()
        ;

    bp::enum_< ELobbyComparison>("ELobbyComparison")
        .value("k_ELobbyComparisonEqualToOrLessThan", k_ELobbyComparisonEqualToOrLessThan)
        .value("k_ELobbyComparisonLessThan", k_ELobbyComparisonLessThan)
        .value("k_ELobbyComparisonEqual", k_ELobbyComparisonEqual)
        .value("k_ELobbyComparisonGreaterThan", k_ELobbyComparisonGreaterThan)
        .value("k_ELobbyComparisonEqualToOrGreaterThan", k_ELobbyComparisonEqualToOrGreaterThan)
        .value("k_ELobbyComparisonNotEqual", k_ELobbyComparisonNotEqual)
        .export_values()
        ;

    bp::enum_< ELobbyDistanceFilter>("ELobbyDistanceFilter")
        .value("k_ELobbyDistanceFilterClose", k_ELobbyDistanceFilterClose)
        .value("k_ELobbyDistanceFilterDefault", k_ELobbyDistanceFilterDefault)
        .value("k_ELobbyDistanceFilterFar", k_ELobbyDistanceFilterFar)
        .value("k_ELobbyDistanceFilterWorldwide", k_ELobbyDistanceFilterWorldwide)
        .export_values()
        ;

    bp::enum_< ELobbyType>("ELobbyType")
        .value("k_ELobbyTypePrivate", k_ELobbyTypePrivate)
        .value("k_ELobbyTypeFriendsOnly", k_ELobbyTypeFriendsOnly)
        .value("k_ELobbyTypePublic", k_ELobbyTypePublic)
        .value("k_ELobbyTypeInvisible", k_ELobbyTypeInvisible)
        .export_values()
        ;

    bp::enum_< EMatchMakingServerResponse>("EMatchMakingServerResponse")
        .value("eServerResponded", eServerResponded)
        .value("eServerFailedToRespond", eServerFailedToRespond)
        .value("eNoServersListedOnMasterServer", eNoServersListedOnMasterServer)
        .export_values()
        ;

    bp::enum_< EPersonaChange>("EPersonaChange")
        .value("k_EPersonaChangeName", k_EPersonaChangeName)
        .value("k_EPersonaChangeStatus", k_EPersonaChangeStatus)
        .value("k_EPersonaChangeComeOnline", k_EPersonaChangeComeOnline)
        .value("k_EPersonaChangeGoneOffline", k_EPersonaChangeGoneOffline)
        .value("k_EPersonaChangeGamePlayed", k_EPersonaChangeGamePlayed)
        .value("k_EPersonaChangeGameServer", k_EPersonaChangeGameServer)
        .value("k_EPersonaChangeAvatar", k_EPersonaChangeAvatar)
        .value("k_EPersonaChangeJoinedSource", k_EPersonaChangeJoinedSource)
        .value("k_EPersonaChangeLeftSource", k_EPersonaChangeLeftSource)
        .value("k_EPersonaChangeRelationshipChanged", k_EPersonaChangeRelationshipChanged)
        .value("k_EPersonaChangeNameFirstSet", k_EPersonaChangeNameFirstSet)
        .value("k_EPersonaChangeFacebookInfo", k_EPersonaChangeFacebookInfo)
        .value("k_EPersonaChangeNickname", k_EPersonaChangeNickname)
        .value("k_EPersonaChangeSteamLevel", k_EPersonaChangeSteamLevel)
        .export_values()
        ;

    bp::enum_< EPersonaState>("EPersonaState")
        .value("k_EPersonaStateOffline", k_EPersonaStateOffline)
        .value("k_EPersonaStateOnline", k_EPersonaStateOnline)
        .value("k_EPersonaStateBusy", k_EPersonaStateBusy)
        .value("k_EPersonaStateAway", k_EPersonaStateAway)
        .value("k_EPersonaStateSnooze", k_EPersonaStateSnooze)
        .value("k_EPersonaStateLookingToTrade", k_EPersonaStateLookingToTrade)
        .value("k_EPersonaStateLookingToPlay", k_EPersonaStateLookingToPlay)
        .value("k_EPersonaStateMax", k_EPersonaStateMax)
        .export_values()
        ;

    bp::enum_< EResult>("EResult")
        .value("k_EResultOK", k_EResultOK)
        .value("k_EResultFail", k_EResultFail)
        .value("k_EResultNoConnection", k_EResultNoConnection)
        .value("k_EResultInvalidPassword", k_EResultInvalidPassword)
        .value("k_EResultLoggedInElsewhere", k_EResultLoggedInElsewhere)
        .value("k_EResultInvalidProtocolVer", k_EResultInvalidProtocolVer)
        .value("k_EResultInvalidParam", k_EResultInvalidParam)
        .value("k_EResultFileNotFound", k_EResultFileNotFound)
        .value("k_EResultBusy", k_EResultBusy)
        .value("k_EResultInvalidState", k_EResultInvalidState)
        .value("k_EResultInvalidName", k_EResultInvalidName)
        .value("k_EResultInvalidEmail", k_EResultInvalidEmail)
        .value("k_EResultDuplicateName", k_EResultDuplicateName)
        .value("k_EResultAccessDenied", k_EResultAccessDenied)
        .value("k_EResultTimeout", k_EResultTimeout)
        .value("k_EResultBanned", k_EResultBanned)
        .value("k_EResultAccountNotFound", k_EResultAccountNotFound)
        .value("k_EResultInvalidSteamID", k_EResultInvalidSteamID)
        .value("k_EResultServiceUnavailable", k_EResultServiceUnavailable)
        .value("k_EResultNotLoggedOn", k_EResultNotLoggedOn)
        .value("k_EResultPending", k_EResultPending)
        .value("k_EResultEncryptionFailure", k_EResultEncryptionFailure)
        .value("k_EResultInsufficientPrivilege", k_EResultInsufficientPrivilege)
        .value("k_EResultLimitExceeded", k_EResultLimitExceeded)
        .value("k_EResultRevoked", k_EResultRevoked)
        .value("k_EResultExpired", k_EResultExpired)
        .value("k_EResultAlreadyRedeemed", k_EResultAlreadyRedeemed)
        .value("k_EResultDuplicateRequest", k_EResultDuplicateRequest)
        .value("k_EResultAlreadyOwned", k_EResultAlreadyOwned)
        .value("k_EResultIPNotFound", k_EResultIPNotFound)
        .value("k_EResultPersistFailed", k_EResultPersistFailed)
        .value("k_EResultLockingFailed", k_EResultLockingFailed)
        .value("k_EResultLogonSessionReplaced", k_EResultLogonSessionReplaced)
        .value("k_EResultConnectFailed", k_EResultConnectFailed)
        .value("k_EResultHandshakeFailed", k_EResultHandshakeFailed)
        .value("k_EResultIOFailure", k_EResultIOFailure)
        .value("k_EResultRemoteDisconnect", k_EResultRemoteDisconnect)
        .value("k_EResultShoppingCartNotFound", k_EResultShoppingCartNotFound)
        .value("k_EResultBlocked", k_EResultBlocked)
        .value("k_EResultIgnored", k_EResultIgnored)
        .value("k_EResultNoMatch", k_EResultNoMatch)
        .value("k_EResultAccountDisabled", k_EResultAccountDisabled)
        .value("k_EResultServiceReadOnly", k_EResultServiceReadOnly)
        .value("k_EResultAccountNotFeatured", k_EResultAccountNotFeatured)
        .value("k_EResultAdministratorOK", k_EResultAdministratorOK)
        .value("k_EResultContentVersion", k_EResultContentVersion)
        .value("k_EResultTryAnotherCM", k_EResultTryAnotherCM)
        .value("k_EResultPasswordRequiredToKickSession", k_EResultPasswordRequiredToKickSession)
        .value("k_EResultAlreadyLoggedInElsewhere", k_EResultAlreadyLoggedInElsewhere)
        .value("k_EResultSuspended", k_EResultSuspended)
        .value("k_EResultCancelled", k_EResultCancelled)
        .value("k_EResultDataCorruption", k_EResultDataCorruption)
        .value("k_EResultDiskFull", k_EResultDiskFull)
        .value("k_EResultRemoteCallFailed", k_EResultRemoteCallFailed)
        .value("k_EResultPasswordUnset", k_EResultPasswordUnset)
        .value("k_EResultExternalAccountUnlinked", k_EResultExternalAccountUnlinked)
        .value("k_EResultPSNTicketInvalid", k_EResultPSNTicketInvalid)
        .value("k_EResultExternalAccountAlreadyLinked", k_EResultExternalAccountAlreadyLinked)
        .value("k_EResultRemoteFileConflict", k_EResultRemoteFileConflict)
        .value("k_EResultIllegalPassword", k_EResultIllegalPassword)
        .value("k_EResultSameAsPreviousValue", k_EResultSameAsPreviousValue)
        .value("k_EResultAccountLogonDenied", k_EResultAccountLogonDenied)
        .value("k_EResultCannotUseOldPassword", k_EResultCannotUseOldPassword)
        .value("k_EResultInvalidLoginAuthCode", k_EResultInvalidLoginAuthCode)
        .value("k_EResultAccountLogonDeniedNoMail", k_EResultAccountLogonDeniedNoMail)
        .value("k_EResultHardwareNotCapableOfIPT", k_EResultHardwareNotCapableOfIPT)
        .value("k_EResultIPTInitError", k_EResultIPTInitError)
        .value("k_EResultParentalControlRestricted", k_EResultParentalControlRestricted)
        .value("k_EResultFacebookQueryError", k_EResultFacebookQueryError)
        .value("k_EResultExpiredLoginAuthCode", k_EResultExpiredLoginAuthCode)
        .value("k_EResultIPLoginRestrictionFailed", k_EResultIPLoginRestrictionFailed)
        .value("k_EResultAccountLockedDown", k_EResultAccountLockedDown)
        .value("k_EResultAccountLogonDeniedVerifiedEmailRequired", k_EResultAccountLogonDeniedVerifiedEmailRequired)
        .value("k_EResultNoMatchingURL", k_EResultNoMatchingURL)
        .value("k_EResultBadResponse", k_EResultBadResponse)
        .value("k_EResultRequirePasswordReEntry", k_EResultRequirePasswordReEntry)
        .value("k_EResultValueOutOfRange", k_EResultValueOutOfRange)
        .value("k_EResultUnexpectedError", k_EResultUnexpectedError)
        .value("k_EResultDisabled", k_EResultDisabled)
        .value("k_EResultInvalidCEGSubmission", k_EResultInvalidCEGSubmission)
        .value("k_EResultRestrictedDevice", k_EResultRestrictedDevice)
        .value("k_EResultRegionLocked", k_EResultRegionLocked)
        .value("k_EResultRateLimitExceeded", k_EResultRateLimitExceeded)
        .value("k_EResultAccountLoginDeniedNeedTwoFactor", k_EResultAccountLoginDeniedNeedTwoFactor)
        .value("k_EResultItemDeleted", k_EResultItemDeleted)
        .value("k_EResultAccountLoginDeniedThrottle", k_EResultAccountLoginDeniedThrottle)
        .value("k_EResultTwoFactorCodeMismatch", k_EResultTwoFactorCodeMismatch)
        .value("k_EResultTwoFactorActivationCodeMismatch", k_EResultTwoFactorActivationCodeMismatch)
        .value("k_EResultAccountAssociatedToMultiplePartners", k_EResultAccountAssociatedToMultiplePartners)
        .value("k_EResultNotModified", k_EResultNotModified)
        .value("k_EResultNoMobileDevice", k_EResultNoMobileDevice)
        .value("k_EResultTimeNotSynced", k_EResultTimeNotSynced)
        .value("k_EResultSmsCodeFailed", k_EResultSmsCodeFailed)
        .value("k_EResultAccountLimitExceeded", k_EResultAccountLimitExceeded)
        .value("k_EResultAccountActivityLimitExceeded", k_EResultAccountActivityLimitExceeded)
        .value("k_EResultPhoneActivityLimitExceeded", k_EResultPhoneActivityLimitExceeded)
        .value("k_EResultRefundToWallet", k_EResultRefundToWallet)
        .value("k_EResultEmailSendFailure", k_EResultEmailSendFailure)
        .value("k_EResultNotSettled", k_EResultNotSettled)
        .export_values()
        ;

    bp::enum_< ESteamUserStatType>("ESteamUserStatType")
        .value("k_ESteamUserStatTypeINVALID", k_ESteamUserStatTypeINVALID)
        .value("k_ESteamUserStatTypeINT", k_ESteamUserStatTypeINT)
        .value("k_ESteamUserStatTypeFLOAT", k_ESteamUserStatTypeFLOAT)
        .value("k_ESteamUserStatTypeAVGRATE", k_ESteamUserStatTypeAVGRATE)
        .value("k_ESteamUserStatTypeACHIEVEMENTS", k_ESteamUserStatTypeACHIEVEMENTS)
        .value("k_ESteamUserStatTypeGROUPACHIEVEMENTS", k_ESteamUserStatTypeGROUPACHIEVEMENTS)
        .value("k_ESteamUserStatTypeMAX", k_ESteamUserStatTypeMAX)
        .export_values()
        ;

    bp::enum_< EUniverse>("EUniverse")
        .value("k_EUniverseInvalid", k_EUniverseInvalid)
        .value("k_EUniversePublic", k_EUniversePublic)
        .value("k_EUniverseBeta", k_EUniverseBeta)
        .value("k_EUniverseInternal", k_EUniverseInternal)
        .value("k_EUniverseDev", k_EUniverseDev)
        .value("k_EUniverseMax", k_EUniverseMax)
        .export_values()
        ;

    { //::AvatarImageLoaded_t
        typedef bp::class_< AvatarImageLoaded_t, boost::noncopyable > AvatarImageLoaded_t_exposer_t;
        AvatarImageLoaded_t_exposer_t AvatarImageLoaded_t_exposer = AvatarImageLoaded_t_exposer_t( "AvatarImageLoaded_t", bp::no_init );
        bp::scope AvatarImageLoaded_t_scope( AvatarImageLoaded_t_exposer );
        bp::scope().attr("k_iCallback") = (int)AvatarImageLoaded_t::k_iCallback;
        AvatarImageLoaded_t_exposer.def_readwrite( "image", &AvatarImageLoaded_t::m_iImage );
        AvatarImageLoaded_t_exposer.def_readwrite( "tall", &AvatarImageLoaded_t::m_iTall );
        AvatarImageLoaded_t_exposer.def_readwrite( "wide", &AvatarImageLoaded_t::m_iWide );
        AvatarImageLoaded_t_exposer.def_readwrite( "steamid", &AvatarImageLoaded_t::m_steamID );
    }

    bp::class_< CSteamAPIContext, boost::noncopyable >( "CSteamAPIContext", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "SteamApps"
            , (::ISteamApps * ( ::CSteamAPIContext::* )(  ))( &::CSteamAPIContext::SteamApps )
            , bp::return_internal_reference< >() )    
        .def( 
            "SteamFriends"
            , (::ISteamFriends * ( ::CSteamAPIContext::* )(  ))( &::CSteamAPIContext::SteamFriends )
            , bp::return_internal_reference< >() )    
        .def( 
            "SteamMatchmaking"
            , (::ISteamMatchmaking * ( ::CSteamAPIContext::* )(  ))( &::CSteamAPIContext::SteamMatchmaking )
            , bp::return_internal_reference< >() )    
        .def( 
            "SteamUser"
            , (::ISteamUser * ( ::CSteamAPIContext::* )(  ))( &::CSteamAPIContext::SteamUser )
            , bp::return_internal_reference< >() )    
        .def( 
            "SteamUserStats"
            , (::ISteamUserStats * ( ::CSteamAPIContext::* )(  ))( &::CSteamAPIContext::SteamUserStats )
            , bp::return_internal_reference< >() )    
        .def( 
            "SteamUtils"
            , (::ISteamUtils * ( ::CSteamAPIContext::* )(  ))( &::CSteamAPIContext::SteamUtils )
            , bp::return_internal_reference< >() );

    { //::CSteamID
        typedef bp::class_< CSteamID > CSteamID_exposer_t;
        CSteamID_exposer_t CSteamID_exposer = CSteamID_exposer_t( "CSteamID", bp::init< >() );
        bp::scope CSteamID_scope( CSteamID_exposer );
        CSteamID_exposer.def( bp::init< uint32, EUniverse, EAccountType >(( bp::arg("unAccountID"), bp::arg("eUniverse"), bp::arg("eAccountType") )) );
        CSteamID_exposer.def( bp::init< uint32, unsigned int, EUniverse, EAccountType >(( bp::arg("unAccountID"), bp::arg("unAccountInstance"), bp::arg("eUniverse"), bp::arg("eAccountType") )) );
        CSteamID_exposer.def( bp::init< uint64 >(( bp::arg("ulSteamID") )) );
        bp::implicitly_convertible< uint64, CSteamID >();
        { //::CSteamID::BAnonAccount
        
            typedef bool ( ::CSteamID::*BAnonAccount_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "BAnonAccount"
                , BAnonAccount_function_type( &::CSteamID::BAnonAccount ) );
        
        }
        { //::CSteamID::BAnonGameServerAccount
        
            typedef bool ( ::CSteamID::*BAnonGameServerAccount_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "BAnonGameServerAccount"
                , BAnonGameServerAccount_function_type( &::CSteamID::BAnonGameServerAccount ) );
        
        }
        { //::CSteamID::BAnonUserAccount
        
            typedef bool ( ::CSteamID::*BAnonUserAccount_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "BAnonUserAccount"
                , BAnonUserAccount_function_type( &::CSteamID::BAnonUserAccount ) );
        
        }
        { //::CSteamID::BBlankAnonAccount
        
            typedef bool ( ::CSteamID::*BBlankAnonAccount_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "BBlankAnonAccount"
                , BBlankAnonAccount_function_type( &::CSteamID::BBlankAnonAccount ) );
        
        }
        { //::CSteamID::BChatAccount
        
            typedef bool ( ::CSteamID::*BChatAccount_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "BChatAccount"
                , BChatAccount_function_type( &::CSteamID::BChatAccount ) );
        
        }
        { //::CSteamID::BClanAccount
        
            typedef bool ( ::CSteamID::*BClanAccount_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "BClanAccount"
                , BClanAccount_function_type( &::CSteamID::BClanAccount ) );
        
        }
        { //::CSteamID::BConsoleUserAccount
        
            typedef bool ( ::CSteamID::*BConsoleUserAccount_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "BConsoleUserAccount"
                , BConsoleUserAccount_function_type( &::CSteamID::BConsoleUserAccount ) );
        
        }
        { //::CSteamID::BContentServerAccount
        
            typedef bool ( ::CSteamID::*BContentServerAccount_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "BContentServerAccount"
                , BContentServerAccount_function_type( &::CSteamID::BContentServerAccount ) );
        
        }
        { //::CSteamID::BGameServerAccount
        
            typedef bool ( ::CSteamID::*BGameServerAccount_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "BGameServerAccount"
                , BGameServerAccount_function_type( &::CSteamID::BGameServerAccount ) );
        
        }
        { //::CSteamID::BIndividualAccount
        
            typedef bool ( ::CSteamID::*BIndividualAccount_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "BIndividualAccount"
                , BIndividualAccount_function_type( &::CSteamID::BIndividualAccount ) );
        
        }
        { //::CSteamID::BPersistentGameServerAccount
        
            typedef bool ( ::CSteamID::*BPersistentGameServerAccount_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "BPersistentGameServerAccount"
                , BPersistentGameServerAccount_function_type( &::CSteamID::BPersistentGameServerAccount ) );
        
        }
        { //::CSteamID::Clear
        
            typedef void ( ::CSteamID::*Clear_function_type)(  ) ;
            
            CSteamID_exposer.def( 
                "Clear"
                , Clear_function_type( &::CSteamID::Clear ) );
        
        }
        { //::CSteamID::ClearIndividualInstance
        
            typedef void ( ::CSteamID::*ClearIndividualInstance_function_type)(  ) ;
            
            CSteamID_exposer.def( 
                "ClearIndividualInstance"
                , ClearIndividualInstance_function_type( &::CSteamID::ClearIndividualInstance ) );
        
        }
        { //::CSteamID::ConvertToUint64
        
            typedef ::uint64 ( ::CSteamID::*ConvertToUint64_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "ConvertToUint64"
                , ConvertToUint64_function_type( &::CSteamID::ConvertToUint64 ) );
        
        }
        { //::CSteamID::CreateBlankAnonLogon
        
            typedef void ( ::CSteamID::*CreateBlankAnonLogon_function_type)( ::EUniverse ) ;
            
            CSteamID_exposer.def( 
                "CreateBlankAnonLogon"
                , CreateBlankAnonLogon_function_type( &::CSteamID::CreateBlankAnonLogon )
                , ( bp::arg("eUniverse") ) );
        
        }
        { //::CSteamID::CreateBlankAnonUserLogon
        
            typedef void ( ::CSteamID::*CreateBlankAnonUserLogon_function_type)( ::EUniverse ) ;
            
            CSteamID_exposer.def( 
                "CreateBlankAnonUserLogon"
                , CreateBlankAnonUserLogon_function_type( &::CSteamID::CreateBlankAnonUserLogon )
                , ( bp::arg("eUniverse") ) );
        
        }
        { //::CSteamID::FullSet
        
            typedef void ( ::CSteamID::*FullSet_function_type)( ::uint64,::EUniverse,::EAccountType ) ;
            
            CSteamID_exposer.def( 
                "FullSet"
                , FullSet_function_type( &::CSteamID::FullSet )
                , ( bp::arg("ulIdentifier"), bp::arg("eUniverse"), bp::arg("eAccountType") ) );
        
        }
        { //::CSteamID::GetAccountID
        
            typedef ::AccountID_t ( ::CSteamID::*GetAccountID_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "GetAccountID"
                , GetAccountID_function_type( &::CSteamID::GetAccountID ) );
        
        }
        { //::CSteamID::GetEAccountType
        
            typedef ::EAccountType ( ::CSteamID::*GetEAccountType_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "GetEAccountType"
                , GetEAccountType_function_type( &::CSteamID::GetEAccountType ) );
        
        }
        { //::CSteamID::GetEUniverse
        
            typedef ::EUniverse ( ::CSteamID::*GetEUniverse_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "GetEUniverse"
                , GetEUniverse_function_type( &::CSteamID::GetEUniverse ) );
        
        }
        { //::CSteamID::GetStaticAccountKey
        
            typedef ::uint64 ( ::CSteamID::*GetStaticAccountKey_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "GetStaticAccountKey"
                , GetStaticAccountKey_function_type( &::CSteamID::GetStaticAccountKey ) );
        
        }
        { //::CSteamID::GetUnAccountInstance
        
            typedef ::uint32 ( ::CSteamID::*GetUnAccountInstance_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "GetUnAccountInstance"
                , GetUnAccountInstance_function_type( &::CSteamID::GetUnAccountInstance ) );
        
        }
        { //::CSteamID::HasNoIndividualInstance
        
            typedef bool ( ::CSteamID::*HasNoIndividualInstance_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "HasNoIndividualInstance"
                , HasNoIndividualInstance_function_type( &::CSteamID::HasNoIndividualInstance ) );
        
        }
        { //::CSteamID::InstancedSet
        
            typedef void ( ::CSteamID::*InstancedSet_function_type)( ::uint32,::uint32,::EUniverse,::EAccountType ) ;
            
            CSteamID_exposer.def( 
                "InstancedSet"
                , InstancedSet_function_type( &::CSteamID::InstancedSet )
                , ( bp::arg("unAccountID"), bp::arg("unInstance"), bp::arg("eUniverse"), bp::arg("eAccountType") ) );
        
        }
        { //::CSteamID::IsLobby
        
            typedef bool ( ::CSteamID::*IsLobby_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "IsLobby"
                , IsLobby_function_type( &::CSteamID::IsLobby ) );
        
        }
        { //::CSteamID::IsValid
        
            typedef bool ( ::CSteamID::*IsValid_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "IsValid"
                , IsValid_function_type( &::CSteamID::IsValid ) );
        
        }
        { //::CSteamID::Set
        
            typedef void ( ::CSteamID::*Set_function_type)( ::uint32,::EUniverse,::EAccountType ) ;
            
            CSteamID_exposer.def( 
                "Set"
                , Set_function_type( &::CSteamID::Set )
                , ( bp::arg("unAccountID"), bp::arg("eUniverse"), bp::arg("eAccountType") ) );
        
        }
        { //::CSteamID::SetAccountID
        
            typedef void ( ::CSteamID::*SetAccountID_function_type)( ::uint32 ) ;
            
            CSteamID_exposer.def( 
                "SetAccountID"
                , SetAccountID_function_type( &::CSteamID::SetAccountID )
                , ( bp::arg("unAccountID") ) );
        
        }
        { //::CSteamID::SetAccountInstance
        
            typedef void ( ::CSteamID::*SetAccountInstance_function_type)( ::uint32 ) ;
            
            CSteamID_exposer.def( 
                "SetAccountInstance"
                , SetAccountInstance_function_type( &::CSteamID::SetAccountInstance )
                , ( bp::arg("unInstance") ) );
        
        }
        { //::CSteamID::SetEUniverse
        
            typedef void ( ::CSteamID::*SetEUniverse_function_type)( ::EUniverse ) ;
            
            CSteamID_exposer.def( 
                "SetEUniverse"
                , SetEUniverse_function_type( &::CSteamID::SetEUniverse )
                , ( bp::arg("eUniverse") ) );
        
        }
        { //::CSteamID::SetFromUint64
        
            typedef void ( ::CSteamID::*SetFromUint64_function_type)( ::uint64 ) ;
            
            CSteamID_exposer.def( 
                "SetFromUint64"
                , SetFromUint64_function_type( &::CSteamID::SetFromUint64 )
                , ( bp::arg("ulSteamID") ) );
        
        }
        CSteamID_exposer.def( bp::self != bp::self );
        CSteamID_exposer.def( bp::self < bp::self );
        CSteamID_exposer.def( bp::self == bp::self );
        CSteamID_exposer.def( bp::self > bp::self );
    }

    { //::ClanOfficerListResponse_t
        typedef bp::class_< ClanOfficerListResponse_t, boost::noncopyable > ClanOfficerListResponse_t_exposer_t;
        ClanOfficerListResponse_t_exposer_t ClanOfficerListResponse_t_exposer = ClanOfficerListResponse_t_exposer_t( "ClanOfficerListResponse_t", bp::no_init );
        bp::scope ClanOfficerListResponse_t_scope( ClanOfficerListResponse_t_exposer );
        bp::scope().attr("k_iCallback") = (int)ClanOfficerListResponse_t::k_iCallback;
        ClanOfficerListResponse_t_exposer.def_readwrite( "success", &ClanOfficerListResponse_t::m_bSuccess );
        ClanOfficerListResponse_t_exposer.def_readwrite( "officers", &ClanOfficerListResponse_t::m_cOfficers );
        ClanOfficerListResponse_t_exposer.def_readwrite( "steamidclan", &ClanOfficerListResponse_t::m_steamIDClan );
    }

    { //::DownloadClanActivityCountsResult_t
        typedef bp::class_< DownloadClanActivityCountsResult_t, boost::noncopyable > DownloadClanActivityCountsResult_t_exposer_t;
        DownloadClanActivityCountsResult_t_exposer_t DownloadClanActivityCountsResult_t_exposer = DownloadClanActivityCountsResult_t_exposer_t( "DownloadClanActivityCountsResult_t", bp::no_init );
        bp::scope DownloadClanActivityCountsResult_t_scope( DownloadClanActivityCountsResult_t_exposer );
        bp::scope().attr("k_iCallback") = (int)DownloadClanActivityCountsResult_t::k_iCallback;
        DownloadClanActivityCountsResult_t_exposer.def_readwrite( "success", &DownloadClanActivityCountsResult_t::m_bSuccess );
    }

    { //::FriendRichPresenceUpdate_t
        typedef bp::class_< FriendRichPresenceUpdate_t, boost::noncopyable > FriendRichPresenceUpdate_t_exposer_t;
        FriendRichPresenceUpdate_t_exposer_t FriendRichPresenceUpdate_t_exposer = FriendRichPresenceUpdate_t_exposer_t( "FriendRichPresenceUpdate_t", bp::no_init );
        bp::scope FriendRichPresenceUpdate_t_scope( FriendRichPresenceUpdate_t_exposer );
        bp::scope().attr("k_iCallback") = (int)FriendRichPresenceUpdate_t::k_iCallback;
        FriendRichPresenceUpdate_t_exposer.def_readwrite( "appid", &FriendRichPresenceUpdate_t::m_nAppID );
        FriendRichPresenceUpdate_t_exposer.def_readwrite( "steamidfriend", &FriendRichPresenceUpdate_t::m_steamIDFriend );
    }

    { //::FriendsEnumerateFollowingList_t
        typedef bp::class_< FriendsEnumerateFollowingList_t_wrapper, boost::noncopyable > FriendsEnumerateFollowingList_t_exposer_t;
        FriendsEnumerateFollowingList_t_exposer_t FriendsEnumerateFollowingList_t_exposer = FriendsEnumerateFollowingList_t_exposer_t( "FriendsEnumerateFollowingList_t", bp::no_init );
        bp::scope FriendsEnumerateFollowingList_t_scope( FriendsEnumerateFollowingList_t_exposer );
        bp::scope().attr("k_iCallback") = (int)FriendsEnumerateFollowingList_t::k_iCallback;
        FriendsEnumerateFollowingList_t_exposer.def_readwrite( "result", &FriendsEnumerateFollowingList_t::m_eResult );
        FriendsEnumerateFollowingList_t_exposer.def_readwrite( "resultsreturned", &FriendsEnumerateFollowingList_t::m_nResultsReturned );
        FriendsEnumerateFollowingList_t_exposer.def_readwrite( "totalresultcount", &FriendsEnumerateFollowingList_t::m_nTotalResultCount );
        pyplusplus::containers::static_sized::register_array_1< ::CSteamID, 50, bp::return_internal_reference< > >( "__array_1__scope_CSteamID_50" );
        { //FriendsEnumerateFollowingList_t::m_rgSteamID [variable], type=CSteamID [50]
        
            typedef pyplusplus::containers::static_sized::array_1_t< ::CSteamID, 50> ( *array_wrapper_creator )( ::FriendsEnumerateFollowingList_t & );
            
            FriendsEnumerateFollowingList_t_exposer.add_property( "rgsteamid"
                , bp::make_function( array_wrapper_creator(&FriendsEnumerateFollowingList_t_wrapper::pyplusplus_m_rgSteamID_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
    }

    { //::FriendsGetFollowerCount_t
        typedef bp::class_< FriendsGetFollowerCount_t, boost::noncopyable > FriendsGetFollowerCount_t_exposer_t;
        FriendsGetFollowerCount_t_exposer_t FriendsGetFollowerCount_t_exposer = FriendsGetFollowerCount_t_exposer_t( "FriendsGetFollowerCount_t", bp::no_init );
        bp::scope FriendsGetFollowerCount_t_scope( FriendsGetFollowerCount_t_exposer );
        bp::scope().attr("k_iCallback") = (int)FriendsGetFollowerCount_t::k_iCallback;
        FriendsGetFollowerCount_t_exposer.def_readwrite( "result", &FriendsGetFollowerCount_t::m_eResult );
        FriendsGetFollowerCount_t_exposer.def_readwrite( "count", &FriendsGetFollowerCount_t::m_nCount );
        FriendsGetFollowerCount_t_exposer.def_readwrite( "steamid", &FriendsGetFollowerCount_t::m_steamID );
    }

    { //::FriendsIsFollowing_t
        typedef bp::class_< FriendsIsFollowing_t, boost::noncopyable > FriendsIsFollowing_t_exposer_t;
        FriendsIsFollowing_t_exposer_t FriendsIsFollowing_t_exposer = FriendsIsFollowing_t_exposer_t( "FriendsIsFollowing_t", bp::no_init );
        bp::scope FriendsIsFollowing_t_scope( FriendsIsFollowing_t_exposer );
        bp::scope().attr("k_iCallback") = (int)FriendsIsFollowing_t::k_iCallback;
        FriendsIsFollowing_t_exposer.def_readwrite( "isfollowing", &FriendsIsFollowing_t::m_bIsFollowing );
        FriendsIsFollowing_t_exposer.def_readwrite( "result", &FriendsIsFollowing_t::m_eResult );
        FriendsIsFollowing_t_exposer.def_readwrite( "steamid", &FriendsIsFollowing_t::m_steamID );
    }

    { //::GameConnectedChatJoin_t
        typedef bp::class_< GameConnectedChatJoin_t, boost::noncopyable > GameConnectedChatJoin_t_exposer_t;
        GameConnectedChatJoin_t_exposer_t GameConnectedChatJoin_t_exposer = GameConnectedChatJoin_t_exposer_t( "GameConnectedChatJoin_t", bp::no_init );
        bp::scope GameConnectedChatJoin_t_scope( GameConnectedChatJoin_t_exposer );
        bp::scope().attr("k_iCallback") = (int)GameConnectedChatJoin_t::k_iCallback;
        GameConnectedChatJoin_t_exposer.def_readwrite( "steamidclanchat", &GameConnectedChatJoin_t::m_steamIDClanChat );
        GameConnectedChatJoin_t_exposer.def_readwrite( "steamiduser", &GameConnectedChatJoin_t::m_steamIDUser );
    }

    { //::GameConnectedChatLeave_t
        typedef bp::class_< GameConnectedChatLeave_t, boost::noncopyable > GameConnectedChatLeave_t_exposer_t;
        GameConnectedChatLeave_t_exposer_t GameConnectedChatLeave_t_exposer = GameConnectedChatLeave_t_exposer_t( "GameConnectedChatLeave_t", bp::no_init );
        bp::scope GameConnectedChatLeave_t_scope( GameConnectedChatLeave_t_exposer );
        bp::scope().attr("k_iCallback") = (int)GameConnectedChatLeave_t::k_iCallback;
        GameConnectedChatLeave_t_exposer.def_readwrite( "dropped", &GameConnectedChatLeave_t::m_bDropped );
        GameConnectedChatLeave_t_exposer.def_readwrite( "kicked", &GameConnectedChatLeave_t::m_bKicked );
        GameConnectedChatLeave_t_exposer.def_readwrite( "steamidclanchat", &GameConnectedChatLeave_t::m_steamIDClanChat );
        GameConnectedChatLeave_t_exposer.def_readwrite( "steamiduser", &GameConnectedChatLeave_t::m_steamIDUser );
    }

    { //::GameConnectedClanChatMsg_t
        typedef bp::class_< GameConnectedClanChatMsg_t, boost::noncopyable > GameConnectedClanChatMsg_t_exposer_t;
        GameConnectedClanChatMsg_t_exposer_t GameConnectedClanChatMsg_t_exposer = GameConnectedClanChatMsg_t_exposer_t( "GameConnectedClanChatMsg_t", bp::no_init );
        bp::scope GameConnectedClanChatMsg_t_scope( GameConnectedClanChatMsg_t_exposer );
        bp::scope().attr("k_iCallback") = (int)GameConnectedClanChatMsg_t::k_iCallback;
        GameConnectedClanChatMsg_t_exposer.def_readwrite( "messageid", &GameConnectedClanChatMsg_t::m_iMessageID );
        GameConnectedClanChatMsg_t_exposer.def_readwrite( "steamidclanchat", &GameConnectedClanChatMsg_t::m_steamIDClanChat );
        GameConnectedClanChatMsg_t_exposer.def_readwrite( "steamiduser", &GameConnectedClanChatMsg_t::m_steamIDUser );
    }

    { //::GameConnectedFriendChatMsg_t
        typedef bp::class_< GameConnectedFriendChatMsg_t, boost::noncopyable > GameConnectedFriendChatMsg_t_exposer_t;
        GameConnectedFriendChatMsg_t_exposer_t GameConnectedFriendChatMsg_t_exposer = GameConnectedFriendChatMsg_t_exposer_t( "GameConnectedFriendChatMsg_t", bp::no_init );
        bp::scope GameConnectedFriendChatMsg_t_scope( GameConnectedFriendChatMsg_t_exposer );
        bp::scope().attr("k_iCallback") = (int)GameConnectedFriendChatMsg_t::k_iCallback;
        GameConnectedFriendChatMsg_t_exposer.def_readwrite( "messageid", &GameConnectedFriendChatMsg_t::m_iMessageID );
        GameConnectedFriendChatMsg_t_exposer.def_readwrite( "steamiduser", &GameConnectedFriendChatMsg_t::m_steamIDUser );
    }

    { //::GameLobbyJoinRequested_t
        typedef bp::class_< GameLobbyJoinRequested_t, boost::noncopyable > GameLobbyJoinRequested_t_exposer_t;
        GameLobbyJoinRequested_t_exposer_t GameLobbyJoinRequested_t_exposer = GameLobbyJoinRequested_t_exposer_t( "GameLobbyJoinRequested_t", bp::no_init );
        bp::scope GameLobbyJoinRequested_t_scope( GameLobbyJoinRequested_t_exposer );
        bp::scope().attr("k_iCallback") = (int)GameLobbyJoinRequested_t::k_iCallback;
        GameLobbyJoinRequested_t_exposer.def_readwrite( "steamidfriend", &GameLobbyJoinRequested_t::m_steamIDFriend );
        GameLobbyJoinRequested_t_exposer.def_readwrite( "steamidlobby", &GameLobbyJoinRequested_t::m_steamIDLobby );
    }

    { //::GameOverlayActivated_t
        typedef bp::class_< GameOverlayActivated_t, boost::noncopyable > GameOverlayActivated_t_exposer_t;
        GameOverlayActivated_t_exposer_t GameOverlayActivated_t_exposer = GameOverlayActivated_t_exposer_t( "GameOverlayActivated_t", bp::no_init );
        bp::scope GameOverlayActivated_t_scope( GameOverlayActivated_t_exposer );
        bp::scope().attr("k_iCallback") = (int)GameOverlayActivated_t::k_iCallback;
        GameOverlayActivated_t_exposer.def_readwrite( "active", &GameOverlayActivated_t::m_bActive );
    }

    { //::GameRichPresenceJoinRequested_t
        typedef bp::class_< GameRichPresenceJoinRequested_t_wrapper, boost::noncopyable > GameRichPresenceJoinRequested_t_exposer_t;
        GameRichPresenceJoinRequested_t_exposer_t GameRichPresenceJoinRequested_t_exposer = GameRichPresenceJoinRequested_t_exposer_t( "GameRichPresenceJoinRequested_t", bp::no_init );
        bp::scope GameRichPresenceJoinRequested_t_scope( GameRichPresenceJoinRequested_t_exposer );
        bp::scope().attr("k_iCallback") = (int)GameRichPresenceJoinRequested_t::k_iCallback;
        pyplusplus::containers::static_sized::register_array_1< char, 256 >( "__array_1_char_256" );
        { //GameRichPresenceJoinRequested_t::m_rgchConnect [variable], type=char [256]
        
            typedef pyplusplus::containers::static_sized::array_1_t< char, 256> ( *array_wrapper_creator )( ::GameRichPresenceJoinRequested_t & );
            
            GameRichPresenceJoinRequested_t_exposer.add_property( "rgchconnect"
                , bp::make_function( array_wrapper_creator(&GameRichPresenceJoinRequested_t_wrapper::pyplusplus_m_rgchConnect_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        GameRichPresenceJoinRequested_t_exposer.def_readwrite( "steamidfriend", &GameRichPresenceJoinRequested_t::m_steamIDFriend );
    }

    { //::GameServerChangeRequested_t
        typedef bp::class_< GameServerChangeRequested_t_wrapper, boost::noncopyable > GameServerChangeRequested_t_exposer_t;
        GameServerChangeRequested_t_exposer_t GameServerChangeRequested_t_exposer = GameServerChangeRequested_t_exposer_t( "GameServerChangeRequested_t", bp::no_init );
        bp::scope GameServerChangeRequested_t_scope( GameServerChangeRequested_t_exposer );
        bp::scope().attr("k_iCallback") = (int)GameServerChangeRequested_t::k_iCallback;
        pyplusplus::containers::static_sized::register_array_1< char, 64 >( "__array_1_char_64" );
        { //GameServerChangeRequested_t::m_rgchPassword [variable], type=char [64]
        
            typedef pyplusplus::containers::static_sized::array_1_t< char, 64> ( *array_wrapper_creator )( ::GameServerChangeRequested_t & );
            
            GameServerChangeRequested_t_exposer.add_property( "rgchpassword"
                , bp::make_function( array_wrapper_creator(&GameServerChangeRequested_t_wrapper::pyplusplus_m_rgchPassword_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //GameServerChangeRequested_t::m_rgchServer [variable], type=char [64]
        
            typedef pyplusplus::containers::static_sized::array_1_t< char, 64> ( *array_wrapper_creator )( ::GameServerChangeRequested_t & );
            
            GameServerChangeRequested_t_exposer.add_property( "rgchserver"
                , bp::make_function( array_wrapper_creator(&GameServerChangeRequested_t_wrapper::pyplusplus_m_rgchServer_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
    }

    bp::class_< ISteamApps, boost::noncopyable >( "ISteamApps", bp::no_init )    
        .def( 
            "BGetDLCDataByIndex"
            , (bool ( ::ISteamApps::* )( int,::AppId_t *,bool *,char *,int ))( &::ISteamApps::BGetDLCDataByIndex )
            , ( bp::arg("iDLC"), bp::arg("pAppID"), bp::arg("pbAvailable"), bp::arg("pchName"), bp::arg("cchNameBufferSize") ) )    
        .def( 
            "BIsAppInstalled"
            , (bool ( ::ISteamApps::* )( ::AppId_t ))( &::ISteamApps::BIsAppInstalled )
            , ( bp::arg("appID") ) )    
        .def( 
            "BIsCybercafe"
            , (bool ( ::ISteamApps::* )(  ))( &::ISteamApps::BIsCybercafe ) )    
        .def( 
            "BIsDlcInstalled"
            , (bool ( ::ISteamApps::* )( ::AppId_t ))( &::ISteamApps::BIsDlcInstalled )
            , ( bp::arg("appID") ) )    
        .def( 
            "BIsLowViolence"
            , (bool ( ::ISteamApps::* )(  ))( &::ISteamApps::BIsLowViolence ) )    
        .def( 
            "BIsSubscribed"
            , (bool ( ::ISteamApps::* )(  ))( &::ISteamApps::BIsSubscribed ) )    
        .def( 
            "BIsSubscribedApp"
            , (bool ( ::ISteamApps::* )( ::AppId_t ))( &::ISteamApps::BIsSubscribedApp )
            , ( bp::arg("appID") ) )    
        .def( 
            "BIsSubscribedFromFreeWeekend"
            , (bool ( ::ISteamApps::* )(  ))( &::ISteamApps::BIsSubscribedFromFreeWeekend ) )    
        .def( 
            "BIsVACBanned"
            , (bool ( ::ISteamApps::* )(  ))( &::ISteamApps::BIsVACBanned ) )    
        .def( 
            "GetAppBuildId"
            , (int ( ::ISteamApps::* )(  ))( &::ISteamApps::GetAppBuildId ) )    
        .def( 
            "GetAppInstallDir"
            , (::uint32 ( ::ISteamApps::* )( ::AppId_t,char *,::uint32 ))( &::ISteamApps::GetAppInstallDir )
            , ( bp::arg("appID"), bp::arg("pchFolder"), bp::arg("cchFolderBufferSize") ) )    
        .def( 
            "GetAppOwner"
            , (::CSteamID ( ::ISteamApps::* )(  ))( &::ISteamApps::GetAppOwner ) )    
        .def( 
            "GetAvailableGameLanguages"
            , (char const * ( ::ISteamApps::* )(  ))( &::ISteamApps::GetAvailableGameLanguages ) )    
        .def( 
            "GetCurrentGameLanguage"
            , (char const * ( ::ISteamApps::* )(  ))( &::ISteamApps::GetCurrentGameLanguage ) )    
        .def( 
            "GetDLCCount"
            , (int ( ::ISteamApps::* )(  ))( &::ISteamApps::GetDLCCount ) )    
        .def( 
            "GetDlcDownloadProgress"
            , (bool ( ::ISteamApps::* )( ::AppId_t,::uint64 *,::uint64 * ))( &::ISteamApps::GetDlcDownloadProgress )
            , ( bp::arg("nAppID"), bp::arg("punBytesDownloaded"), bp::arg("punBytesTotal") ) )    
        .def( 
            "GetEarliestPurchaseUnixTime"
            , (::uint32 ( ::ISteamApps::* )( ::AppId_t ))( &::ISteamApps::GetEarliestPurchaseUnixTime )
            , ( bp::arg("nAppID") ) )    
        .def( 
            "GetInstalledDepots"
            , (::uint32 ( ::ISteamApps::* )( ::AppId_t,::DepotId_t *,::uint32 ))( &::ISteamApps::GetInstalledDepots )
            , ( bp::arg("appID"), bp::arg("pvecDepots"), bp::arg("cMaxDepots") ) )    
        .def( 
            "GetLaunchQueryParam"
            , (char const * ( ::ISteamApps::* )( char const * ))( &::ISteamApps::GetLaunchQueryParam )
            , ( bp::arg("pchKey") ) )    
        .def( 
            "InstallDLC"
            , (void ( ::ISteamApps::* )( ::AppId_t ))( &::ISteamApps::InstallDLC )
            , ( bp::arg("nAppID") ) )    
        .def( 
            "MarkContentCorrupt"
            , (bool ( ::ISteamApps::* )( bool ))( &::ISteamApps::MarkContentCorrupt )
            , ( bp::arg("bMissingFilesOnly") ) )    
        .def( 
            "RequestAppProofOfPurchaseKey"
            , (void ( ::ISteamApps::* )( ::AppId_t ))( &::ISteamApps::RequestAppProofOfPurchaseKey )
            , ( bp::arg("nAppID") ) )    
        .def( 
            "UninstallDLC"
            , (void ( ::ISteamApps::* )( ::AppId_t ))( &::ISteamApps::UninstallDLC )
            , ( bp::arg("nAppID") ) )    
        .def( 
                    "GetCurrentBetaName"
                    , (bp::tuple (*)( ::ISteamApps & ) )( &GetCurrentBetaName_44cfc773ce5b4e98b34b5a2219de76ad )
                    , ( bp::arg("inst") ) );

    bp::class_< ISteamFriends, boost::noncopyable >( "ISteamFriends", bp::no_init )    
        .def( 
            "ActivateGameOverlay"
            , (void ( ::ISteamFriends::* )( char const * ))( &::ISteamFriends::ActivateGameOverlay )
            , ( bp::arg("pchDialog") ) )    
        .def( 
            "ActivateGameOverlayInviteDialog"
            , (void ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::ActivateGameOverlayInviteDialog )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "ActivateGameOverlayToStore"
            , (void ( ::ISteamFriends::* )( ::AppId_t,::EOverlayToStoreFlag ))( &::ISteamFriends::ActivateGameOverlayToStore )
            , ( bp::arg("nAppID"), bp::arg("eFlag") ) )    
        .def( 
            "ActivateGameOverlayToUser"
            , (void ( ::ISteamFriends::* )( char const *,::CSteamID ))( &::ISteamFriends::ActivateGameOverlayToUser )
            , ( bp::arg("pchDialog"), bp::arg("steamID") ) )    
        .def( 
            "ActivateGameOverlayToWebPage"
            , (void ( ::ISteamFriends::* )( char const * ))( &::ISteamFriends::ActivateGameOverlayToWebPage )
            , ( bp::arg("pchURL") ) )    
        .def( 
            "ClearRichPresence"
            , (void ( ::ISteamFriends::* )(  ))( &::ISteamFriends::ClearRichPresence ) )    
        .def( 
            "CloseClanChatWindowInSteam"
            , (bool ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::CloseClanChatWindowInSteam )
            , ( bp::arg("steamIDClanChat") ) )    
        .def( 
            "DownloadClanActivityCounts"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( ::CSteamID *,int ))( &::ISteamFriends::DownloadClanActivityCounts )
            , ( bp::arg("psteamIDClans"), bp::arg("cClansToRequest") ) )    
        .def( 
            "EnumerateFollowingList"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( ::uint32 ))( &::ISteamFriends::EnumerateFollowingList )
            , ( bp::arg("unStartIndex") ) )    
        .def( 
            "GetChatMemberByIndex"
            , (::CSteamID ( ::ISteamFriends::* )( ::CSteamID,int ))( &::ISteamFriends::GetChatMemberByIndex )
            , ( bp::arg("steamIDClan"), bp::arg("iUser") ) )    
        .def( 
            "GetClanActivityCounts"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,int *,int *,int * ))( &::ISteamFriends::GetClanActivityCounts )
            , ( bp::arg("steamIDClan"), bp::arg("pnOnline"), bp::arg("pnInGame"), bp::arg("pnChatting") ) )    
        .def( 
            "GetClanByIndex"
            , (::CSteamID ( ::ISteamFriends::* )( int ))( &::ISteamFriends::GetClanByIndex )
            , ( bp::arg("iClan") ) )    
        .def( 
            "GetClanChatMemberCount"
            , (int ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetClanChatMemberCount )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "GetClanCount"
            , (int ( ::ISteamFriends::* )(  ))( &::ISteamFriends::GetClanCount ) )    
        .def( 
            "GetClanName"
            , (char const * ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetClanName )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "GetClanOfficerByIndex"
            , (::CSteamID ( ::ISteamFriends::* )( ::CSteamID,int ))( &::ISteamFriends::GetClanOfficerByIndex )
            , ( bp::arg("steamIDClan"), bp::arg("iOfficer") ) )    
        .def( 
            "GetClanOfficerCount"
            , (int ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetClanOfficerCount )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "GetClanOwner"
            , (::CSteamID ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetClanOwner )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "GetClanTag"
            , (char const * ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetClanTag )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "GetCoplayFriend"
            , (::CSteamID ( ::ISteamFriends::* )( int ))( &::ISteamFriends::GetCoplayFriend )
            , ( bp::arg("iCoplayFriend") ) )    
        .def( 
            "GetCoplayFriendCount"
            , (int ( ::ISteamFriends::* )(  ))( &::ISteamFriends::GetCoplayFriendCount ) )    
        .def( 
            "GetFollowerCount"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetFollowerCount )
            , ( bp::arg("steamID") ) )    
        .def( 
            "GetFriendByIndex"
            , (::CSteamID ( ::ISteamFriends::* )( int,int ))( &::ISteamFriends::GetFriendByIndex )
            , ( bp::arg("iFriend"), bp::arg("iFriendFlags") ) )    
        .def( 
            "GetFriendCoplayGame"
            , (::AppId_t ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetFriendCoplayGame )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetFriendCoplayTime"
            , (int ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetFriendCoplayTime )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetFriendCount"
            , (int ( ::ISteamFriends::* )( int ))( &::ISteamFriends::GetFriendCount )
            , ( bp::arg("iFriendFlags") ) )    
        .def( 
            "GetFriendCountFromSource"
            , (int ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetFriendCountFromSource )
            , ( bp::arg("steamIDSource") ) )    
        .def( 
            "GetFriendFromSourceByIndex"
            , (::CSteamID ( ::ISteamFriends::* )( ::CSteamID,int ))( &::ISteamFriends::GetFriendFromSourceByIndex )
            , ( bp::arg("steamIDSource"), bp::arg("iFriend") ) )    
        .def( 
            "GetFriendPersonaName"
            , (char const * ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetFriendPersonaName )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetFriendPersonaNameHistory"
            , (char const * ( ::ISteamFriends::* )( ::CSteamID,int ))( &::ISteamFriends::GetFriendPersonaNameHistory )
            , ( bp::arg("steamIDFriend"), bp::arg("iPersonaName") ) )    
        .def( 
            "GetFriendPersonaState"
            , (::EPersonaState ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetFriendPersonaState )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetFriendRelationship"
            , (::EFriendRelationship ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetFriendRelationship )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetFriendRichPresence"
            , (char const * ( ::ISteamFriends::* )( ::CSteamID,char const * ))( &::ISteamFriends::GetFriendRichPresence )
            , ( bp::arg("steamIDFriend"), bp::arg("pchKey") ) )    
        .def( 
            "GetFriendRichPresenceKeyByIndex"
            , (char const * ( ::ISteamFriends::* )( ::CSteamID,int ))( &::ISteamFriends::GetFriendRichPresenceKeyByIndex )
            , ( bp::arg("steamIDFriend"), bp::arg("iKey") ) )    
        .def( 
            "GetFriendRichPresenceKeyCount"
            , (int ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetFriendRichPresenceKeyCount )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetFriendSteamLevel"
            , (int ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetFriendSteamLevel )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetFriendsGroupCount"
            , (int ( ::ISteamFriends::* )(  ))( &::ISteamFriends::GetFriendsGroupCount ) )    
        .def( 
            "GetFriendsGroupIDByIndex"
            , (::FriendsGroupID_t ( ::ISteamFriends::* )( int ))( &::ISteamFriends::GetFriendsGroupIDByIndex )
            , ( bp::arg("iFG") ) )    
        .def( 
            "GetFriendsGroupMembersCount"
            , (int ( ::ISteamFriends::* )( ::FriendsGroupID_t ))( &::ISteamFriends::GetFriendsGroupMembersCount )
            , ( bp::arg("friendsGroupID") ) )    
        .def( 
            "GetFriendsGroupMembersList"
            , (void ( ::ISteamFriends::* )( ::FriendsGroupID_t,::CSteamID *,int ))( &::ISteamFriends::GetFriendsGroupMembersList )
            , ( bp::arg("friendsGroupID"), bp::arg("pOutSteamIDMembers"), bp::arg("nMembersCount") ) )    
        .def( 
            "GetFriendsGroupName"
            , (char const * ( ::ISteamFriends::* )( ::FriendsGroupID_t ))( &::ISteamFriends::GetFriendsGroupName )
            , ( bp::arg("friendsGroupID") ) )    
        .def( 
            "GetLargeFriendAvatar"
            , (int ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetLargeFriendAvatar )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetMediumFriendAvatar"
            , (int ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetMediumFriendAvatar )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetPersonaName"
            , (char const * ( ::ISteamFriends::* )(  ))( &::ISteamFriends::GetPersonaName ) )    
        .def( 
            "GetPersonaState"
            , (::EPersonaState ( ::ISteamFriends::* )(  ))( &::ISteamFriends::GetPersonaState ) )    
        .def( 
            "GetPlayerNickname"
            , (char const * ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetPlayerNickname )
            , ( bp::arg("steamIDPlayer") ) )    
        .def( 
            "GetSmallFriendAvatar"
            , (int ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetSmallFriendAvatar )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetUserRestrictions"
            , (::uint32 ( ::ISteamFriends::* )(  ))( &::ISteamFriends::GetUserRestrictions ) )    
        .def( 
            "HasFriend"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,int ))( &::ISteamFriends::HasFriend )
            , ( bp::arg("steamIDFriend"), bp::arg("iFriendFlags") ) )    
        .def( 
            "InviteUserToGame"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,char const * ))( &::ISteamFriends::InviteUserToGame )
            , ( bp::arg("steamIDFriend"), bp::arg("pchConnectString") ) )    
        .def( 
            "IsClanChatAdmin"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,::CSteamID ))( &::ISteamFriends::IsClanChatAdmin )
            , ( bp::arg("steamIDClanChat"), bp::arg("steamIDUser") ) )    
        .def( 
            "IsClanChatWindowOpenInSteam"
            , (bool ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::IsClanChatWindowOpenInSteam )
            , ( bp::arg("steamIDClanChat") ) )    
        .def( 
            "IsFollowing"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::IsFollowing )
            , ( bp::arg("steamID") ) )    
        .def( 
            "IsUserInSource"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,::CSteamID ))( &::ISteamFriends::IsUserInSource )
            , ( bp::arg("steamIDUser"), bp::arg("steamIDSource") ) )    
        .def( 
            "JoinClanChatRoom"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::JoinClanChatRoom )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "LeaveClanChatRoom"
            , (bool ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::LeaveClanChatRoom )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "OpenClanChatWindowInSteam"
            , (bool ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::OpenClanChatWindowInSteam )
            , ( bp::arg("steamIDClanChat") ) )    
        .def( 
            "ReplyToFriendMessage"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,char const * ))( &::ISteamFriends::ReplyToFriendMessage )
            , ( bp::arg("steamIDFriend"), bp::arg("pchMsgToSend") ) )    
        .def( 
            "RequestClanOfficerList"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::RequestClanOfficerList )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "RequestFriendRichPresence"
            , (void ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::RequestFriendRichPresence )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "RequestUserInformation"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,bool ))( &::ISteamFriends::RequestUserInformation )
            , ( bp::arg("steamIDUser"), bp::arg("bRequireNameOnly") ) )    
        .def( 
            "SendClanChatMessage"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,char const * ))( &::ISteamFriends::SendClanChatMessage )
            , ( bp::arg("steamIDClanChat"), bp::arg("pchText") ) )    
        .def( 
            "SetInGameVoiceSpeaking"
            , (void ( ::ISteamFriends::* )( ::CSteamID,bool ))( &::ISteamFriends::SetInGameVoiceSpeaking )
            , ( bp::arg("steamIDUser"), bp::arg("bSpeaking") ) )    
        .def( 
            "SetListenForFriendsMessages"
            , (bool ( ::ISteamFriends::* )( bool ))( &::ISteamFriends::SetListenForFriendsMessages )
            , ( bp::arg("bInterceptEnabled") ) )    
        .def( 
            "SetPersonaName"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( char const * ))( &::ISteamFriends::SetPersonaName )
            , ( bp::arg("pchPersonaName") ) )    
        .def( 
            "SetPlayedWith"
            , (void ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::SetPlayedWith )
            , ( bp::arg("steamIDUserPlayedWith") ) )    
        .def( 
            "SetRichPresence"
            , (bool ( ::ISteamFriends::* )( char const *,char const * ))( &::ISteamFriends::SetRichPresence )
            , ( bp::arg("pchKey"), bp::arg("pchValue") ) );

    bp::class_< ISteamMatchmaking, boost::noncopyable >( "ISteamMatchmaking", bp::no_init )    
        .def( 
            "AddFavoriteGame"
            , (int ( ::ISteamMatchmaking::* )( ::AppId_t,::uint32,::uint16,::uint16,::uint32,::uint32 ))( &::ISteamMatchmaking::AddFavoriteGame )
            , ( bp::arg("nAppID"), bp::arg("nIP"), bp::arg("nConnPort"), bp::arg("nQueryPort"), bp::arg("unFlags"), bp::arg("rTime32LastPlayedOnServer") ) )    
        .def( 
            "AddRequestLobbyListCompatibleMembersFilter"
            , (void ( ::ISteamMatchmaking::* )( ::CSteamID ))( &::ISteamMatchmaking::AddRequestLobbyListCompatibleMembersFilter )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "AddRequestLobbyListDistanceFilter"
            , (void ( ::ISteamMatchmaking::* )( ::ELobbyDistanceFilter ))( &::ISteamMatchmaking::AddRequestLobbyListDistanceFilter )
            , ( bp::arg("eLobbyDistanceFilter") ) )    
        .def( 
            "AddRequestLobbyListFilterSlotsAvailable"
            , (void ( ::ISteamMatchmaking::* )( int ))( &::ISteamMatchmaking::AddRequestLobbyListFilterSlotsAvailable )
            , ( bp::arg("nSlotsAvailable") ) )    
        .def( 
            "AddRequestLobbyListNearValueFilter"
            , (void ( ::ISteamMatchmaking::* )( char const *,int ))( &::ISteamMatchmaking::AddRequestLobbyListNearValueFilter )
            , ( bp::arg("pchKeyToMatch"), bp::arg("nValueToBeCloseTo") ) )    
        .def( 
            "AddRequestLobbyListNumericalFilter"
            , (void ( ::ISteamMatchmaking::* )( char const *,int,::ELobbyComparison ))( &::ISteamMatchmaking::AddRequestLobbyListNumericalFilter )
            , ( bp::arg("pchKeyToMatch"), bp::arg("nValueToMatch"), bp::arg("eComparisonType") ) )    
        .def( 
            "AddRequestLobbyListResultCountFilter"
            , (void ( ::ISteamMatchmaking::* )( int ))( &::ISteamMatchmaking::AddRequestLobbyListResultCountFilter )
            , ( bp::arg("cMaxResults") ) )    
        .def( 
            "AddRequestLobbyListStringFilter"
            , (void ( ::ISteamMatchmaking::* )( char const *,char const *,::ELobbyComparison ))( &::ISteamMatchmaking::AddRequestLobbyListStringFilter )
            , ( bp::arg("pchKeyToMatch"), bp::arg("pchValueToMatch"), bp::arg("eComparisonType") ) )    
        .def( 
            "CreateLobby"
            , (::SteamAPICall_t ( ::ISteamMatchmaking::* )( ::ELobbyType,int ))( &::ISteamMatchmaking::CreateLobby )
            , ( bp::arg("eLobbyType"), bp::arg("cMaxMembers") ) )    
        .def( 
            "DeleteLobbyData"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,char const * ))( &::ISteamMatchmaking::DeleteLobbyData )
            , ( bp::arg("steamIDLobby"), bp::arg("pchKey") ) )    
        .def( 
            "GetFavoriteGame"
            , (bool ( ::ISteamMatchmaking::* )( int,::AppId_t *,::uint32 *,::uint16 *,::uint16 *,::uint32 *,::uint32 * ))( &::ISteamMatchmaking::GetFavoriteGame )
            , ( bp::arg("iGame"), bp::arg("pnAppID"), bp::arg("pnIP"), bp::arg("pnConnPort"), bp::arg("pnQueryPort"), bp::arg("punFlags"), bp::arg("pRTime32LastPlayedOnServer") ) )    
        .def( 
            "GetFavoriteGameCount"
            , (int ( ::ISteamMatchmaking::* )(  ))( &::ISteamMatchmaking::GetFavoriteGameCount ) )    
        .def( 
            "GetLobbyByIndex"
            , (::CSteamID ( ::ISteamMatchmaking::* )( int ))( &::ISteamMatchmaking::GetLobbyByIndex )
            , ( bp::arg("iLobby") ) )    
        .def( 
            "GetLobbyData"
            , (char const * ( ::ISteamMatchmaking::* )( ::CSteamID,char const * ))( &::ISteamMatchmaking::GetLobbyData )
            , ( bp::arg("steamIDLobby"), bp::arg("pchKey") ) )    
        .def( 
            "GetLobbyDataCount"
            , (int ( ::ISteamMatchmaking::* )( ::CSteamID ))( &::ISteamMatchmaking::GetLobbyDataCount )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "GetLobbyGameServer"
            , (boost::python::tuple (*)( ::ISteamMatchmaking &,::CSteamID ))( &GetLobbyGameServer_e3badaaa69eb32a59ea528ba9e97e8ee )
            , ( bp::arg("inst"), bp::arg("steamIDLobby") ) )    
        .def( 
            "GetLobbyMemberByIndex"
            , (::CSteamID ( ::ISteamMatchmaking::* )( ::CSteamID,int ))( &::ISteamMatchmaking::GetLobbyMemberByIndex )
            , ( bp::arg("steamIDLobby"), bp::arg("iMember") ) )    
        .def( 
            "GetLobbyMemberData"
            , (char const * ( ::ISteamMatchmaking::* )( ::CSteamID,::CSteamID,char const * ))( &::ISteamMatchmaking::GetLobbyMemberData )
            , ( bp::arg("steamIDLobby"), bp::arg("steamIDUser"), bp::arg("pchKey") ) )    
        .def( 
            "GetLobbyMemberLimit"
            , (int ( ::ISteamMatchmaking::* )( ::CSteamID ))( &::ISteamMatchmaking::GetLobbyMemberLimit )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "GetLobbyOwner"
            , (::CSteamID ( ::ISteamMatchmaking::* )( ::CSteamID ))( &::ISteamMatchmaking::GetLobbyOwner )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "GetNumLobbyMembers"
            , (int ( ::ISteamMatchmaking::* )( ::CSteamID ))( &::ISteamMatchmaking::GetNumLobbyMembers )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "InviteUserToLobby"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,::CSteamID ))( &::ISteamMatchmaking::InviteUserToLobby )
            , ( bp::arg("steamIDLobby"), bp::arg("steamIDInvitee") ) )    
        .def( 
            "JoinLobby"
            , (::SteamAPICall_t ( ::ISteamMatchmaking::* )( ::CSteamID ))( &::ISteamMatchmaking::JoinLobby )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "LeaveLobby"
            , (void ( ::ISteamMatchmaking::* )( ::CSteamID ))( &::ISteamMatchmaking::LeaveLobby )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "RemoveFavoriteGame"
            , (bool ( ::ISteamMatchmaking::* )( ::AppId_t,::uint32,::uint16,::uint16,::uint32 ))( &::ISteamMatchmaking::RemoveFavoriteGame )
            , ( bp::arg("nAppID"), bp::arg("nIP"), bp::arg("nConnPort"), bp::arg("nQueryPort"), bp::arg("unFlags") ) )    
        .def( 
            "RequestLobbyData"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID ))( &::ISteamMatchmaking::RequestLobbyData )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "RequestLobbyList"
            , (::SteamAPICall_t ( ::ISteamMatchmaking::* )(  ))( &::ISteamMatchmaking::RequestLobbyList ) )    
        .def( 
            "SetLinkedLobby"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,::CSteamID ))( &::ISteamMatchmaking::SetLinkedLobby )
            , ( bp::arg("steamIDLobby"), bp::arg("steamIDLobbyDependent") ) )    
        .def( 
            "SetLobbyData"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,char const *,char const * ))( &::ISteamMatchmaking::SetLobbyData )
            , ( bp::arg("steamIDLobby"), bp::arg("pchKey"), bp::arg("pchValue") ) )    
        .def( 
            "SetLobbyGameServer"
            , (void ( ::ISteamMatchmaking::* )( ::CSteamID,::uint32,::uint16,::CSteamID ))( &::ISteamMatchmaking::SetLobbyGameServer )
            , ( bp::arg("steamIDLobby"), bp::arg("unGameServerIP"), bp::arg("unGameServerPort"), bp::arg("steamIDGameServer") ) )    
        .def( 
            "SetLobbyJoinable"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,bool ))( &::ISteamMatchmaking::SetLobbyJoinable )
            , ( bp::arg("steamIDLobby"), bp::arg("bLobbyJoinable") ) )    
        .def( 
            "SetLobbyMemberData"
            , (void ( ::ISteamMatchmaking::* )( ::CSteamID,char const *,char const * ))( &::ISteamMatchmaking::SetLobbyMemberData )
            , ( bp::arg("steamIDLobby"), bp::arg("pchKey"), bp::arg("pchValue") ) )    
        .def( 
            "SetLobbyMemberLimit"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,int ))( &::ISteamMatchmaking::SetLobbyMemberLimit )
            , ( bp::arg("steamIDLobby"), bp::arg("cMaxMembers") ) )    
        .def( 
            "SetLobbyOwner"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,::CSteamID ))( &::ISteamMatchmaking::SetLobbyOwner )
            , ( bp::arg("steamIDLobby"), bp::arg("steamIDNewOwner") ) )    
        .def( 
            "SetLobbyType"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,::ELobbyType ))( &::ISteamMatchmaking::SetLobbyType )
            , ( bp::arg("steamIDLobby"), bp::arg("eLobbyType") ) );

    bp::class_< ISteamUser, boost::noncopyable >( "ISteamUser", bp::no_init )    
        .def( 
            "AdvertiseGame"
            , (void ( ::ISteamUser::* )( ::CSteamID,::uint32,::uint16 ))( &::ISteamUser::AdvertiseGame )
            , ( bp::arg("steamIDGameServer"), bp::arg("unIPServer"), bp::arg("usPortServer") ) )    
        .def( 
            "BIsBehindNAT"
            , (bool ( ::ISteamUser::* )(  ))( &::ISteamUser::BIsBehindNAT ) )    
        .def( 
            "BLoggedOn"
            , (bool ( ::ISteamUser::* )(  ))( &::ISteamUser::BLoggedOn ) )    
        .def( 
            "CancelAuthTicket"
            , (void ( ::ISteamUser::* )( ::HAuthTicket ))( &::ISteamUser::CancelAuthTicket )
            , ( bp::arg("hAuthTicket") ) )    
        .def( 
            "EndAuthSession"
            , (void ( ::ISteamUser::* )( ::CSteamID ))( &::ISteamUser::EndAuthSession )
            , ( bp::arg("steamID") ) )    
        .def( 
            "GetAvailableVoice"
            , (::EVoiceResult ( ::ISteamUser::* )( ::uint32 *,::uint32 *,::uint32 ))( &::ISteamUser::GetAvailableVoice )
            , ( bp::arg("pcbCompressed"), bp::arg("pcbUncompressed"), bp::arg("nUncompressedVoiceDesiredSampleRate") ) )    
        .def( 
            "GetGameBadgeLevel"
            , (int ( ::ISteamUser::* )( int,bool ))( &::ISteamUser::GetGameBadgeLevel )
            , ( bp::arg("nSeries"), bp::arg("bFoil") ) )    
        .def( 
            "GetHSteamUser"
            , (::HSteamUser ( ::ISteamUser::* )(  ))( &::ISteamUser::GetHSteamUser ) )    
        .def( 
            "GetPlayerSteamLevel"
            , (int ( ::ISteamUser::* )(  ))( &::ISteamUser::GetPlayerSteamLevel ) )    
        .def( 
            "GetSteamID"
            , (::CSteamID ( ::ISteamUser::* )(  ))( &::ISteamUser::GetSteamID ) )    
        .def( 
            "GetUserDataFolder"
            , (bool ( ::ISteamUser::* )( char *,int ))( &::ISteamUser::GetUserDataFolder )
            , ( bp::arg("pchBuffer"), bp::arg("cubBuffer") ) )    
        .def( 
            "GetVoiceOptimalSampleRate"
            , (::uint32 ( ::ISteamUser::* )(  ))( &::ISteamUser::GetVoiceOptimalSampleRate ) )    
        .def( 
            "RequestStoreAuthURL"
            , (::SteamAPICall_t ( ::ISteamUser::* )( char const * ))( &::ISteamUser::RequestStoreAuthURL )
            , ( bp::arg("pchRedirectURL") ) )    
        .def( 
            "StartVoiceRecording"
            , (void ( ::ISteamUser::* )(  ))( &::ISteamUser::StartVoiceRecording ) )    
        .def( 
            "StopVoiceRecording"
            , (void ( ::ISteamUser::* )(  ))( &::ISteamUser::StopVoiceRecording ) )    
        .def( 
            "TerminateGameConnection"
            , (void ( ::ISteamUser::* )( ::uint32,::uint16 ))( &::ISteamUser::TerminateGameConnection )
            , ( bp::arg("unIPServer"), bp::arg("usPortServer") ) )    
        .def( 
            "TrackAppUsageEvent"
            , (void ( ::ISteamUser::* )( ::CGameID,int,char const * ))( &::ISteamUser::TrackAppUsageEvent )
            , ( bp::arg("gameID"), bp::arg("eAppUsageEvent"), bp::arg("pchExtraInfo")="" ) )    
        .def( 
            "UserHasLicenseForApp"
            , (::EUserHasLicenseForAppResult ( ::ISteamUser::* )( ::CSteamID,::AppId_t ))( &::ISteamUser::UserHasLicenseForApp )
            , ( bp::arg("steamID"), bp::arg("appID") ) );

    bp::class_< ISteamUserStats, boost::noncopyable >( "ISteamUserStats", bp::no_init )    
        .def( 
            "AttachLeaderboardUGC"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( ::SteamLeaderboard_t,::UGCHandle_t ))( &::ISteamUserStats::AttachLeaderboardUGC )
            , ( bp::arg("hSteamLeaderboard"), bp::arg("hUGC") ) )    
        .def( 
            "ClearAchievement"
            , (bool ( ::ISteamUserStats::* )( char const * ))( &::ISteamUserStats::ClearAchievement )
            , ( bp::arg("pchName") ) )    
        .def( 
            "DownloadLeaderboardEntries"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( ::SteamLeaderboard_t,::ELeaderboardDataRequest,int,int ))( &::ISteamUserStats::DownloadLeaderboardEntries )
            , ( bp::arg("hSteamLeaderboard"), bp::arg("eLeaderboardDataRequest"), bp::arg("nRangeStart"), bp::arg("nRangeEnd") ) )    
        .def( 
            "DownloadLeaderboardEntriesForUsers"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( ::SteamLeaderboard_t,::CSteamID *,int ))( &::ISteamUserStats::DownloadLeaderboardEntriesForUsers )
            , ( bp::arg("hSteamLeaderboard"), bp::arg("prgUsers"), bp::arg("cUsers") ) )    
        .def( 
            "FindLeaderboard"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( char const * ))( &::ISteamUserStats::FindLeaderboard )
            , ( bp::arg("pchLeaderboardName") ) )    
        .def( 
            "FindOrCreateLeaderboard"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( char const *,::ELeaderboardSortMethod,::ELeaderboardDisplayType ))( &::ISteamUserStats::FindOrCreateLeaderboard )
            , ( bp::arg("pchLeaderboardName"), bp::arg("eLeaderboardSortMethod"), bp::arg("eLeaderboardDisplayType") ) )    
        .def( 
            "GetAchievement"
            , (bool ( ::ISteamUserStats::* )( char const *,bool * ))( &::ISteamUserStats::GetAchievement )
            , ( bp::arg("pchName"), bp::arg("pbAchieved") ) )    
        .def( 
            "GetAchievementAchievedPercent"
            , (bool ( ::ISteamUserStats::* )( char const *,float * ))( &::ISteamUserStats::GetAchievementAchievedPercent )
            , ( bp::arg("pchName"), bp::arg("pflPercent") ) )    
        .def( 
            "GetAchievementAndUnlockTime"
            , (bool ( ::ISteamUserStats::* )( char const *,bool *,::uint32 * ))( &::ISteamUserStats::GetAchievementAndUnlockTime )
            , ( bp::arg("pchName"), bp::arg("pbAchieved"), bp::arg("punUnlockTime") ) )    
        .def( 
            "GetAchievementDisplayAttribute"
            , (char const * ( ::ISteamUserStats::* )( char const *,char const * ))( &::ISteamUserStats::GetAchievementDisplayAttribute )
            , ( bp::arg("pchName"), bp::arg("pchKey") ) )    
        .def( 
            "GetAchievementIcon"
            , (int ( ::ISteamUserStats::* )( char const * ))( &::ISteamUserStats::GetAchievementIcon )
            , ( bp::arg("pchName") ) )    
        .def( 
            "GetAchievementName"
            , (char const * ( ::ISteamUserStats::* )( ::uint32 ))( &::ISteamUserStats::GetAchievementName )
            , ( bp::arg("iAchievement") ) )    
        .def( 
            "GetDownloadedLeaderboardEntry"
            , (bool ( ::ISteamUserStats::* )( ::SteamLeaderboardEntries_t,int,::LeaderboardEntry_t *,::int32 *,int ))( &::ISteamUserStats::GetDownloadedLeaderboardEntry )
            , ( bp::arg("hSteamLeaderboardEntries"), bp::arg("index"), bp::arg("pLeaderboardEntry"), bp::arg("pDetails"), bp::arg("cDetailsMax") ) )    
        .def( 
            "GetGlobalStat"
            , (bool ( ::ISteamUserStats::* )( char const *,::int64 * ))( &::ISteamUserStats::GetGlobalStat )
            , ( bp::arg("pchStatName"), bp::arg("pData") ) )    
        .def( 
            "GetGlobalStat"
            , (bool ( ::ISteamUserStats::* )( char const *,double * ))( &::ISteamUserStats::GetGlobalStat )
            , ( bp::arg("pchStatName"), bp::arg("pData") ) )    
        .def( 
            "GetGlobalStatHistory"
            , (::int32 ( ::ISteamUserStats::* )( char const *,::int64 *,::uint32 ))( &::ISteamUserStats::GetGlobalStatHistory )
            , ( bp::arg("pchStatName"), bp::arg("pData"), bp::arg("cubData") ) )    
        .def( 
            "GetGlobalStatHistory"
            , (::int32 ( ::ISteamUserStats::* )( char const *,double *,::uint32 ))( &::ISteamUserStats::GetGlobalStatHistory )
            , ( bp::arg("pchStatName"), bp::arg("pData"), bp::arg("cubData") ) )    
        .def( 
            "GetLeaderboardDisplayType"
            , (::ELeaderboardDisplayType ( ::ISteamUserStats::* )( ::SteamLeaderboard_t ))( &::ISteamUserStats::GetLeaderboardDisplayType )
            , ( bp::arg("hSteamLeaderboard") ) )    
        .def( 
            "GetLeaderboardEntryCount"
            , (int ( ::ISteamUserStats::* )( ::SteamLeaderboard_t ))( &::ISteamUserStats::GetLeaderboardEntryCount )
            , ( bp::arg("hSteamLeaderboard") ) )    
        .def( 
            "GetLeaderboardName"
            , (char const * ( ::ISteamUserStats::* )( ::SteamLeaderboard_t ))( &::ISteamUserStats::GetLeaderboardName )
            , ( bp::arg("hSteamLeaderboard") ) )    
        .def( 
            "GetLeaderboardSortMethod"
            , (::ELeaderboardSortMethod ( ::ISteamUserStats::* )( ::SteamLeaderboard_t ))( &::ISteamUserStats::GetLeaderboardSortMethod )
            , ( bp::arg("hSteamLeaderboard") ) )    
        .def( 
            "GetMostAchievedAchievementInfo"
            , (int ( ::ISteamUserStats::* )( char *,::uint32,float *,bool * ))( &::ISteamUserStats::GetMostAchievedAchievementInfo )
            , ( bp::arg("pchName"), bp::arg("unNameBufLen"), bp::arg("pflPercent"), bp::arg("pbAchieved") ) )    
        .def( 
            "GetNextMostAchievedAchievementInfo"
            , (int ( ::ISteamUserStats::* )( int,char *,::uint32,float *,bool * ))( &::ISteamUserStats::GetNextMostAchievedAchievementInfo )
            , ( bp::arg("iIteratorPrevious"), bp::arg("pchName"), bp::arg("unNameBufLen"), bp::arg("pflPercent"), bp::arg("pbAchieved") ) )    
        .def( 
            "GetNumAchievements"
            , (::uint32 ( ::ISteamUserStats::* )(  ))( &::ISteamUserStats::GetNumAchievements ) )    
        .def( 
            "GetNumberOfCurrentPlayers"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )(  ))( &::ISteamUserStats::GetNumberOfCurrentPlayers ) )    
        .def( 
            "GetStat"
            , (bool ( ::ISteamUserStats::* )( char const *,::int32 * ))( &::ISteamUserStats::GetStat )
            , ( bp::arg("pchName"), bp::arg("pData") ) )    
        .def( 
            "GetStat"
            , (bool ( ::ISteamUserStats::* )( char const *,float * ))( &::ISteamUserStats::GetStat )
            , ( bp::arg("pchName"), bp::arg("pData") ) )    
        .def( 
            "GetUserAchievement"
            , (bool ( ::ISteamUserStats::* )( ::CSteamID,char const *,bool * ))( &::ISteamUserStats::GetUserAchievement )
            , ( bp::arg("steamIDUser"), bp::arg("pchName"), bp::arg("pbAchieved") ) )    
        .def( 
            "GetUserAchievementAndUnlockTime"
            , (bool ( ::ISteamUserStats::* )( ::CSteamID,char const *,bool *,::uint32 * ))( &::ISteamUserStats::GetUserAchievementAndUnlockTime )
            , ( bp::arg("steamIDUser"), bp::arg("pchName"), bp::arg("pbAchieved"), bp::arg("punUnlockTime") ) )    
        .def( 
            "GetUserStat"
            , (bool ( ::ISteamUserStats::* )( ::CSteamID,char const *,::int32 * ))( &::ISteamUserStats::GetUserStat )
            , ( bp::arg("steamIDUser"), bp::arg("pchName"), bp::arg("pData") ) )    
        .def( 
            "GetUserStat"
            , (bool ( ::ISteamUserStats::* )( ::CSteamID,char const *,float * ))( &::ISteamUserStats::GetUserStat )
            , ( bp::arg("steamIDUser"), bp::arg("pchName"), bp::arg("pData") ) )    
        .def( 
            "IndicateAchievementProgress"
            , (bool ( ::ISteamUserStats::* )( char const *,::uint32,::uint32 ))( &::ISteamUserStats::IndicateAchievementProgress )
            , ( bp::arg("pchName"), bp::arg("nCurProgress"), bp::arg("nMaxProgress") ) )    
        .def( 
            "RequestCurrentStats"
            , (bool ( ::ISteamUserStats::* )(  ))( &::ISteamUserStats::RequestCurrentStats ) )    
        .def( 
            "RequestGlobalAchievementPercentages"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )(  ))( &::ISteamUserStats::RequestGlobalAchievementPercentages ) )    
        .def( 
            "RequestGlobalStats"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( int ))( &::ISteamUserStats::RequestGlobalStats )
            , ( bp::arg("nHistoryDays") ) )    
        .def( 
            "RequestUserStats"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( ::CSteamID ))( &::ISteamUserStats::RequestUserStats )
            , ( bp::arg("steamIDUser") ) )    
        .def( 
            "ResetAllStats"
            , (bool ( ::ISteamUserStats::* )( bool ))( &::ISteamUserStats::ResetAllStats )
            , ( bp::arg("bAchievementsToo") ) )    
        .def( 
            "SetAchievement"
            , (bool ( ::ISteamUserStats::* )( char const * ))( &::ISteamUserStats::SetAchievement )
            , ( bp::arg("pchName") ) )    
        .def( 
            "SetStat"
            , (bool ( ::ISteamUserStats::* )( char const *,::int32 ))( &::ISteamUserStats::SetStat )
            , ( bp::arg("pchName"), bp::arg("nData") ) )    
        .def( 
            "SetStat"
            , (bool ( ::ISteamUserStats::* )( char const *,float ))( &::ISteamUserStats::SetStat )
            , ( bp::arg("pchName"), bp::arg("fData") ) )    
        .def( 
            "StoreStats"
            , (bool ( ::ISteamUserStats::* )(  ))( &::ISteamUserStats::StoreStats ) )    
        .def( 
            "UpdateAvgRateStat"
            , (bool ( ::ISteamUserStats::* )( char const *,float,double ))( &::ISteamUserStats::UpdateAvgRateStat )
            , ( bp::arg("pchName"), bp::arg("flCountThisSession"), bp::arg("dSessionLength") ) )    
        .def( 
            "UploadLeaderboardScore"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( ::SteamLeaderboard_t,::ELeaderboardUploadScoreMethod,::int32,::int32 const *,int ))( &::ISteamUserStats::UploadLeaderboardScore )
            , ( bp::arg("hSteamLeaderboard"), bp::arg("eLeaderboardUploadScoreMethod"), bp::arg("nScore"), bp::arg("pScoreDetails"), bp::arg("cScoreDetailsCount") ) );

    bp::class_< ISteamUtils, boost::noncopyable >( "ISteamUtils", bp::no_init )    
        .def( 
            "BOverlayNeedsPresent"
            , (bool ( ::ISteamUtils::* )(  ))( &::ISteamUtils::BOverlayNeedsPresent ) )    
        .def( 
            "CheckFileSignature"
            , (::SteamAPICall_t ( ::ISteamUtils::* )( char const * ))( &::ISteamUtils::CheckFileSignature )
            , ( bp::arg("szFileName") ) )    
        .def( 
            "GetAPICallFailureReason"
            , (::ESteamAPICallFailure ( ::ISteamUtils::* )( ::SteamAPICall_t ))( &::ISteamUtils::GetAPICallFailureReason )
            , ( bp::arg("hSteamAPICall") ) )    
        .def( 
            "GetAppID"
            , (::uint32 ( ::ISteamUtils::* )(  ))( &::ISteamUtils::GetAppID ) )    
        .def( 
            "GetCSERIPPort"
            , (bool ( ::ISteamUtils::* )( ::uint32 *,::uint16 * ))( &::ISteamUtils::GetCSERIPPort )
            , ( bp::arg("unIP"), bp::arg("usPort") ) )    
        .def( 
            "GetConnectedUniverse"
            , (::EUniverse ( ::ISteamUtils::* )(  ))( &::ISteamUtils::GetConnectedUniverse ) )    
        .def( 
            "GetCurrentBatteryPower"
            , (::uint8 ( ::ISteamUtils::* )(  ))( &::ISteamUtils::GetCurrentBatteryPower ) )    
        .def( 
            "GetEnteredGamepadTextInput"
            , (bool ( ::ISteamUtils::* )( char *,::uint32 ))( &::ISteamUtils::GetEnteredGamepadTextInput )
            , ( bp::arg("pchText"), bp::arg("cchText") ) )    
        .def( 
            "GetEnteredGamepadTextLength"
            , (::uint32 ( ::ISteamUtils::* )(  ))( &::ISteamUtils::GetEnteredGamepadTextLength ) )    
        .def( 
            "GetIPCCallCount"
            , (::uint32 ( ::ISteamUtils::* )(  ))( &::ISteamUtils::GetIPCCallCount ) )    
        .def( 
            "GetIPCountry"
            , (char const * ( ::ISteamUtils::* )(  ))( &::ISteamUtils::GetIPCountry ) )    
        .def( 
            "GetSecondsSinceAppActive"
            , (::uint32 ( ::ISteamUtils::* )(  ))( &::ISteamUtils::GetSecondsSinceAppActive ) )    
        .def( 
            "GetSecondsSinceComputerActive"
            , (::uint32 ( ::ISteamUtils::* )(  ))( &::ISteamUtils::GetSecondsSinceComputerActive ) )    
        .def( 
            "GetServerRealTime"
            , (::uint32 ( ::ISteamUtils::* )(  ))( &::ISteamUtils::GetServerRealTime ) )    
        .def( 
            "GetSteamUILanguage"
            , (char const * ( ::ISteamUtils::* )(  ))( &::ISteamUtils::GetSteamUILanguage ) )    
        .def( 
            "IsAPICallCompleted"
            , (bool ( ::ISteamUtils::* )( ::SteamAPICall_t,bool * ))( &::ISteamUtils::IsAPICallCompleted )
            , ( bp::arg("hSteamAPICall"), bp::arg("pbFailed") ) )    
        .def( 
            "IsOverlayEnabled"
            , (bool ( ::ISteamUtils::* )(  ))( &::ISteamUtils::IsOverlayEnabled ) )    
        .def( 
            "IsSteamRunningInVR"
            , (bool ( ::ISteamUtils::* )(  ))( &::ISteamUtils::IsSteamRunningInVR ) )    
        .def( 
            "RunFrame"
            , (void ( ::ISteamUtils::* )(  ))( &::ISteamUtils::RunFrame ) )    
        .def( 
            "SetOverlayNotificationInset"
            , (void ( ::ISteamUtils::* )( int,int ))( &::ISteamUtils::SetOverlayNotificationInset )
            , ( bp::arg("nHorizontalInset"), bp::arg("nVerticalInset") ) )    
        .def( 
            "SetOverlayNotificationPosition"
            , (void ( ::ISteamUtils::* )( ::ENotificationPosition ))( &::ISteamUtils::SetOverlayNotificationPosition )
            , ( bp::arg("eNotificationPosition") ) )    
        .def( 
            "ShowGamepadTextInput"
            , (bool ( ::ISteamUtils::* )( ::EGamepadTextInputMode,::EGamepadTextInputLineMode,char const *,::uint32,char const * ))( &::ISteamUtils::ShowGamepadTextInput )
            , ( bp::arg("eInputMode"), bp::arg("eLineInputMode"), bp::arg("pchDescription"), bp::arg("unCharMax"), bp::arg("pchExistingText") ) );

    { //::JoinClanChatRoomCompletionResult_t
        typedef bp::class_< JoinClanChatRoomCompletionResult_t, boost::noncopyable > JoinClanChatRoomCompletionResult_t_exposer_t;
        JoinClanChatRoomCompletionResult_t_exposer_t JoinClanChatRoomCompletionResult_t_exposer = JoinClanChatRoomCompletionResult_t_exposer_t( "JoinClanChatRoomCompletionResult_t", bp::no_init );
        bp::scope JoinClanChatRoomCompletionResult_t_scope( JoinClanChatRoomCompletionResult_t_exposer );
        bp::scope().attr("k_iCallback") = (int)JoinClanChatRoomCompletionResult_t::k_iCallback;
        JoinClanChatRoomCompletionResult_t_exposer.def_readwrite( "chatroomenterresponse", &JoinClanChatRoomCompletionResult_t::m_eChatRoomEnterResponse );
        JoinClanChatRoomCompletionResult_t_exposer.def_readwrite( "steamidclanchat", &JoinClanChatRoomCompletionResult_t::m_steamIDClanChat );
    }

    { //::LobbyChatMsg_t
        typedef bp::class_< LobbyChatMsg_t, boost::noncopyable > LobbyChatMsg_t_exposer_t;
        LobbyChatMsg_t_exposer_t LobbyChatMsg_t_exposer = LobbyChatMsg_t_exposer_t( "LobbyChatMsg_t", bp::no_init );
        bp::scope LobbyChatMsg_t_scope( LobbyChatMsg_t_exposer );
        bp::scope().attr("k_iCallback") = (int)LobbyChatMsg_t::k_iCallback;
        LobbyChatMsg_t_exposer.def_readwrite( "chatentrytype", &LobbyChatMsg_t::m_eChatEntryType );
        LobbyChatMsg_t_exposer.def_readwrite( "chatid", &LobbyChatMsg_t::m_iChatID );
        LobbyChatMsg_t_exposer.def_readwrite( "steamidlobby", &LobbyChatMsg_t::m_ulSteamIDLobby );
        LobbyChatMsg_t_exposer.def_readwrite( "steamiduser", &LobbyChatMsg_t::m_ulSteamIDUser );
    }

    { //::LobbyChatUpdate_t
        typedef bp::class_< LobbyChatUpdate_t, boost::noncopyable > LobbyChatUpdate_t_exposer_t;
        LobbyChatUpdate_t_exposer_t LobbyChatUpdate_t_exposer = LobbyChatUpdate_t_exposer_t( "LobbyChatUpdate_t", bp::no_init );
        bp::scope LobbyChatUpdate_t_scope( LobbyChatUpdate_t_exposer );
        bp::scope().attr("k_iCallback") = (int)LobbyChatUpdate_t::k_iCallback;
        LobbyChatUpdate_t_exposer.def_readwrite( "chatmemberstatechange", &LobbyChatUpdate_t::m_rgfChatMemberStateChange );
        LobbyChatUpdate_t_exposer.def_readwrite( "steamidlobby", &LobbyChatUpdate_t::m_ulSteamIDLobby );
        LobbyChatUpdate_t_exposer.def_readwrite( "steamidmakingchange", &LobbyChatUpdate_t::m_ulSteamIDMakingChange );
        LobbyChatUpdate_t_exposer.def_readwrite( "steamiduserchanged", &LobbyChatUpdate_t::m_ulSteamIDUserChanged );
    }

    { //::LobbyCreated_t
        typedef bp::class_< LobbyCreated_t, boost::noncopyable > LobbyCreated_t_exposer_t;
        LobbyCreated_t_exposer_t LobbyCreated_t_exposer = LobbyCreated_t_exposer_t( "LobbyCreated_t", bp::no_init );
        bp::scope LobbyCreated_t_scope( LobbyCreated_t_exposer );
        bp::scope().attr("k_iCallback") = (int)LobbyCreated_t::k_iCallback;
        LobbyCreated_t_exposer.def_readwrite( "result", &LobbyCreated_t::m_eResult );
        LobbyCreated_t_exposer.def_readwrite( "steamidlobby", &LobbyCreated_t::m_ulSteamIDLobby );
    }

    { //::LobbyDataUpdate_t
        typedef bp::class_< LobbyDataUpdate_t, boost::noncopyable > LobbyDataUpdate_t_exposer_t;
        LobbyDataUpdate_t_exposer_t LobbyDataUpdate_t_exposer = LobbyDataUpdate_t_exposer_t( "LobbyDataUpdate_t", bp::no_init );
        bp::scope LobbyDataUpdate_t_scope( LobbyDataUpdate_t_exposer );
        bp::scope().attr("k_iCallback") = (int)LobbyDataUpdate_t::k_iCallback;
        LobbyDataUpdate_t_exposer.def_readwrite( "success", &LobbyDataUpdate_t::m_bSuccess );
        LobbyDataUpdate_t_exposer.def_readwrite( "steamidlobby", &LobbyDataUpdate_t::m_ulSteamIDLobby );
        LobbyDataUpdate_t_exposer.def_readwrite( "steamidmember", &LobbyDataUpdate_t::m_ulSteamIDMember );
    }

    { //::LobbyEnter_t
        typedef bp::class_< LobbyEnter_t, boost::noncopyable > LobbyEnter_t_exposer_t;
        LobbyEnter_t_exposer_t LobbyEnter_t_exposer = LobbyEnter_t_exposer_t( "LobbyEnter_t", bp::no_init );
        bp::scope LobbyEnter_t_scope( LobbyEnter_t_exposer );
        bp::scope().attr("k_iCallback") = (int)LobbyEnter_t::k_iCallback;
        LobbyEnter_t_exposer.def_readwrite( "chatroomenterresponse", &LobbyEnter_t::m_EChatRoomEnterResponse );
        LobbyEnter_t_exposer.def_readwrite( "locked", &LobbyEnter_t::m_bLocked );
        LobbyEnter_t_exposer.def_readwrite( "chatpermissions", &LobbyEnter_t::m_rgfChatPermissions );
        LobbyEnter_t_exposer.def_readwrite( "steamidlobby", &LobbyEnter_t::m_ulSteamIDLobby );
    }

    { //::LobbyGameCreated_t
        typedef bp::class_< LobbyGameCreated_t, boost::noncopyable > LobbyGameCreated_t_exposer_t;
        LobbyGameCreated_t_exposer_t LobbyGameCreated_t_exposer = LobbyGameCreated_t_exposer_t( "LobbyGameCreated_t", bp::no_init );
        bp::scope LobbyGameCreated_t_scope( LobbyGameCreated_t_exposer );
        bp::scope().attr("k_iCallback") = (int)LobbyGameCreated_t::k_iCallback;
        LobbyGameCreated_t_exposer.def_readwrite( "steamidgameserver", &LobbyGameCreated_t::m_ulSteamIDGameServer );
        LobbyGameCreated_t_exposer.def_readwrite( "steamidlobby", &LobbyGameCreated_t::m_ulSteamIDLobby );
        LobbyGameCreated_t_exposer.def_readwrite( "ip", &LobbyGameCreated_t::m_unIP );
        LobbyGameCreated_t_exposer.def_readwrite( "port", &LobbyGameCreated_t::m_usPort );
    }

    { //::LobbyMatchList_t
        typedef bp::class_< LobbyMatchList_t, boost::noncopyable > LobbyMatchList_t_exposer_t;
        LobbyMatchList_t_exposer_t LobbyMatchList_t_exposer = LobbyMatchList_t_exposer_t( "LobbyMatchList_t", bp::no_init );
        bp::scope LobbyMatchList_t_scope( LobbyMatchList_t_exposer );
        bp::scope().attr("k_iCallback") = (int)LobbyMatchList_t::k_iCallback;
        LobbyMatchList_t_exposer.def_readwrite( "lobbiesmatching", &LobbyMatchList_t::m_nLobbiesMatching );
    }

    { //::NumberOfCurrentPlayers_t
        typedef bp::class_< NumberOfCurrentPlayers_t, boost::noncopyable > NumberOfCurrentPlayers_t_exposer_t;
        NumberOfCurrentPlayers_t_exposer_t NumberOfCurrentPlayers_t_exposer = NumberOfCurrentPlayers_t_exposer_t( "NumberOfCurrentPlayers_t", bp::no_init );
        bp::scope NumberOfCurrentPlayers_t_scope( NumberOfCurrentPlayers_t_exposer );
        bp::scope().attr("k_iCallback") = (int)NumberOfCurrentPlayers_t::k_iCallback;
        NumberOfCurrentPlayers_t_exposer.def_readwrite( "success", &NumberOfCurrentPlayers_t::m_bSuccess );
        NumberOfCurrentPlayers_t_exposer.def_readwrite( "players", &NumberOfCurrentPlayers_t::m_cPlayers );
    }

    { //::PersonaStateChange_t
        typedef bp::class_< PersonaStateChange_t, boost::noncopyable > PersonaStateChange_t_exposer_t;
        PersonaStateChange_t_exposer_t PersonaStateChange_t_exposer = PersonaStateChange_t_exposer_t( "PersonaStateChange_t", bp::no_init );
        bp::scope PersonaStateChange_t_scope( PersonaStateChange_t_exposer );
        bp::scope().attr("k_iCallback") = (int)PersonaStateChange_t::k_iCallback;
        PersonaStateChange_t_exposer.def_readwrite( "changeflags", &PersonaStateChange_t::m_nChangeFlags );
        PersonaStateChange_t_exposer.def_readwrite( "steamid", &PersonaStateChange_t::m_ulSteamID );
    }

    bp::class_< PySteamMatchmakingPingResponse_wrapper >( "SteamMatchmakingPingResponse" )    
        .def( 
            "ServerFailedToRespond"
            , (void ( ::PySteamMatchmakingPingResponse::* )(  ))(&::PySteamMatchmakingPingResponse::ServerFailedToRespond)
            , (void ( PySteamMatchmakingPingResponse_wrapper::* )(  ))(&PySteamMatchmakingPingResponse_wrapper::default_ServerFailedToRespond) )    
        .def( 
            "ServerResponded"
            , (void ( ::PySteamMatchmakingPingResponse::* )( ::gameserveritem_t & ))(&::PySteamMatchmakingPingResponse::ServerResponded)
            , (void ( PySteamMatchmakingPingResponse_wrapper::* )( ::gameserveritem_t & ))(&PySteamMatchmakingPingResponse_wrapper::default_ServerResponded)
            , ( bp::arg("server") ) );

    bp::class_< PySteamMatchmakingPlayersResponse_wrapper >( "SteamMatchmakingPlayersResponse" )    
        .def( 
            "AddPlayerToList"
            , (void ( ::PySteamMatchmakingPlayersResponse::* )( char const *,int,float ))(&::PySteamMatchmakingPlayersResponse::AddPlayerToList)
            , (void ( PySteamMatchmakingPlayersResponse_wrapper::* )( char const *,int,float ))(&PySteamMatchmakingPlayersResponse_wrapper::default_AddPlayerToList)
            , ( bp::arg("pchName"), bp::arg("nScore"), bp::arg("flTimePlayed") ) )    
        .def( 
            "PlayersFailedToRespond"
            , (void ( ::PySteamMatchmakingPlayersResponse::* )(  ))(&::PySteamMatchmakingPlayersResponse::PlayersFailedToRespond)
            , (void ( PySteamMatchmakingPlayersResponse_wrapper::* )(  ))(&PySteamMatchmakingPlayersResponse_wrapper::default_PlayersFailedToRespond) )    
        .def( 
            "PlayersRefreshComplete"
            , (void ( ::PySteamMatchmakingPlayersResponse::* )(  ))(&::PySteamMatchmakingPlayersResponse::PlayersRefreshComplete)
            , (void ( PySteamMatchmakingPlayersResponse_wrapper::* )(  ))(&PySteamMatchmakingPlayersResponse_wrapper::default_PlayersRefreshComplete) );

    bp::class_< PySteamMatchmakingRulesResponse_wrapper >( "SteamMatchmakingRulesResponse" )    
        .def( 
            "RulesFailedToRespond"
            , (void ( ::PySteamMatchmakingRulesResponse::* )(  ))(&::PySteamMatchmakingRulesResponse::RulesFailedToRespond)
            , (void ( PySteamMatchmakingRulesResponse_wrapper::* )(  ))(&PySteamMatchmakingRulesResponse_wrapper::default_RulesFailedToRespond) )    
        .def( 
            "RulesRefreshComplete"
            , (void ( ::PySteamMatchmakingRulesResponse::* )(  ))(&::PySteamMatchmakingRulesResponse::RulesRefreshComplete)
            , (void ( PySteamMatchmakingRulesResponse_wrapper::* )(  ))(&PySteamMatchmakingRulesResponse_wrapper::default_RulesRefreshComplete) )    
        .def( 
            "RulesResponded"
            , (void ( ::PySteamMatchmakingRulesResponse::* )( char const *,char const * ))(&::PySteamMatchmakingRulesResponse::RulesResponded)
            , (void ( PySteamMatchmakingRulesResponse_wrapper::* )( char const *,char const * ))(&PySteamMatchmakingRulesResponse_wrapper::default_RulesResponded)
            , ( bp::arg("pchRule"), bp::arg("pchValue") ) );

    bp::class_< PySteamMatchmakingServerListResponse_wrapper >( "SteamMatchmakingServerListResponse" )    
        .def( 
            "RefreshComplete"
            , (void ( ::PySteamMatchmakingServerListResponse::* )( int,::EMatchMakingServerResponse ))(&::PySteamMatchmakingServerListResponse::PyRefreshComplete)
            , (void ( PySteamMatchmakingServerListResponse_wrapper::* )( int,::EMatchMakingServerResponse ))(&PySteamMatchmakingServerListResponse_wrapper::default_RefreshComplete)
            , ( bp::arg("hRequest"), bp::arg("response") ) )    
        .def( 
            "ServerFailedToRespond"
            , (void ( ::PySteamMatchmakingServerListResponse::* )( int,int ))(&::PySteamMatchmakingServerListResponse::PyServerFailedToRespond)
            , (void ( PySteamMatchmakingServerListResponse_wrapper::* )( int,int ))(&PySteamMatchmakingServerListResponse_wrapper::default_ServerFailedToRespond)
            , ( bp::arg("hRequest"), bp::arg("iServer") ) )    
        .def( 
            "ServerResponded"
            , (void ( ::PySteamMatchmakingServerListResponse::* )( int,int ))(&::PySteamMatchmakingServerListResponse::PyServerResponded)
            , (void ( PySteamMatchmakingServerListResponse_wrapper::* )( int,int ))(&PySteamMatchmakingServerListResponse_wrapper::default_ServerResponded)
            , ( bp::arg("hRequest"), bp::arg("iServer") ) );

    bp::class_< PySteamMatchmakingServers >( "SteamMatchmakingServers" )    
        .def( 
            "CancelServerQuery"
            , (void ( ::PySteamMatchmakingServers::* )( ::HServerQuery ))( &::PySteamMatchmakingServers::CancelServerQuery )
            , ( bp::arg("hServerQuery") ) )    
        .def( 
            "GetServerDetails"
            , (::pygameserveritem_t ( ::PySteamMatchmakingServers::* )( int,int ))( &::PySteamMatchmakingServers::GetServerDetails )
            , ( bp::arg("hRequest"), bp::arg("iServer") ) )    
        .def( 
            "PingServer"
            , (int ( ::PySteamMatchmakingServers::* )( ::uint32,::uint16,::PySteamMatchmakingPingResponse * ))( &::PySteamMatchmakingServers::PingServer )
            , ( bp::arg("unIP"), bp::arg("usPort"), bp::arg("pRequestServersResponse") ) )    
        .def( 
            "PlayerDetails"
            , (int ( ::PySteamMatchmakingServers::* )( ::uint32,::uint16,::PySteamMatchmakingPlayersResponse * ))( &::PySteamMatchmakingServers::PlayerDetails )
            , ( bp::arg("unIP"), bp::arg("usPort"), bp::arg("pRequestServersResponse") ) )    
        .def( 
            "ReleaseRequest"
            , (void ( ::PySteamMatchmakingServers::* )( int ))( &::PySteamMatchmakingServers::ReleaseRequest )
            , ( bp::arg("hServerListRequest") ) )    
        .def( 
            "RequestFavoritesServerList"
            , (int ( ::PySteamMatchmakingServers::* )( ::AppId_t,::boost::python::list,::ISteamMatchmakingServerListResponse * ))( &::PySteamMatchmakingServers::RequestFavoritesServerList )
            , ( bp::arg("iApp"), bp::arg("filters"), bp::arg("pRequestServersResponse") ) )    
        .def( 
            "RequestFriendsServerList"
            , (int ( ::PySteamMatchmakingServers::* )( ::AppId_t,::boost::python::list,::ISteamMatchmakingServerListResponse * ))( &::PySteamMatchmakingServers::RequestFriendsServerList )
            , ( bp::arg("iApp"), bp::arg("filters"), bp::arg("pRequestServersResponse") ) )    
        .def( 
            "RequestHistoryServerList"
            , (int ( ::PySteamMatchmakingServers::* )( ::AppId_t,::boost::python::list,::ISteamMatchmakingServerListResponse * ))( &::PySteamMatchmakingServers::RequestHistoryServerList )
            , ( bp::arg("iApp"), bp::arg("filters"), bp::arg("pRequestServersResponse") ) )    
        .def( 
            "RequestInternetServerList"
            , (int ( ::PySteamMatchmakingServers::* )( ::AppId_t,::boost::python::list,::PySteamMatchmakingServerListResponse * ))( &::PySteamMatchmakingServers::RequestInternetServerList )
            , ( bp::arg("iApp"), bp::arg("filters"), bp::arg("pRequestServersResponse") ) )    
        .def( 
            "RequestLANServerList"
            , (int ( ::PySteamMatchmakingServers::* )( ::AppId_t,::ISteamMatchmakingServerListResponse * ))( &::PySteamMatchmakingServers::RequestLANServerList )
            , ( bp::arg("iApp"), bp::arg("pRequestServersResponse") ) )    
        .def( 
            "RequestSpectatorServerList"
            , (int ( ::PySteamMatchmakingServers::* )( ::AppId_t,::boost::python::list,::ISteamMatchmakingServerListResponse * ))( &::PySteamMatchmakingServers::RequestSpectatorServerList )
            , ( bp::arg("iApp"), bp::arg("filters"), bp::arg("pRequestServersResponse") ) )    
        .def( 
            "ServerRules"
            , (::HServerQuery ( ::PySteamMatchmakingServers::* )( ::uint32,::uint16,::PySteamMatchmakingRulesResponse * ))( &::PySteamMatchmakingServers::ServerRules )
            , ( bp::arg("unIP"), bp::arg("usPort"), bp::arg("pRequestServersResponse") ) );

    { //::SetPersonaNameResponse_t
        typedef bp::class_< SetPersonaNameResponse_t, boost::noncopyable > SetPersonaNameResponse_t_exposer_t;
        SetPersonaNameResponse_t_exposer_t SetPersonaNameResponse_t_exposer = SetPersonaNameResponse_t_exposer_t( "SetPersonaNameResponse_t", bp::no_init );
        bp::scope SetPersonaNameResponse_t_scope( SetPersonaNameResponse_t_exposer );
        bp::scope().attr("k_iCallback") = (int)SetPersonaNameResponse_t::k_iCallback;
        SetPersonaNameResponse_t_exposer.def_readwrite( "localsuccess", &SetPersonaNameResponse_t::m_bLocalSuccess );
        SetPersonaNameResponse_t_exposer.def_readwrite( "success", &SetPersonaNameResponse_t::m_bSuccess );
        SetPersonaNameResponse_t_exposer.def_readwrite( "result", &SetPersonaNameResponse_t::m_result );
    }

    bp::class_< gameserveritem_t >( "gameserveritem_t", bp::init< >() )    
        .def( 
            "GetName"
            , (char const * ( ::gameserveritem_t::* )(  )const)( &::gameserveritem_t::GetName ) )    
        .def_readwrite( "netadr", &gameserveritem_t::m_NetAdr )    
        .def_readwrite( "donotrefresh", &gameserveritem_t::m_bDoNotRefresh )    
        .def_readwrite( "hadsuccessfulresponse", &gameserveritem_t::m_bHadSuccessfulResponse )    
        .def_readwrite( "password", &gameserveritem_t::m_bPassword )    
        .def_readwrite( "secure", &gameserveritem_t::m_bSecure )    
        .def_readwrite( "appid", &gameserveritem_t::m_nAppID )    
        .def_readwrite( "botplayers", &gameserveritem_t::m_nBotPlayers )    
        .def_readwrite( "maxplayers", &gameserveritem_t::m_nMaxPlayers )    
        .def_readwrite( "ping", &gameserveritem_t::m_nPing )    
        .def_readwrite( "players", &gameserveritem_t::m_nPlayers )    
        .def_readwrite( "serverversion", &gameserveritem_t::m_nServerVersion )    
        .def_readwrite( "steamid", &gameserveritem_t::m_steamID )    
        .def_readwrite( "timelastplayed", &gameserveritem_t::m_ulTimeLastPlayed );

    { //::pygameserveritem_t
        typedef bp::class_< pygameserveritem_t, bp::bases< gameserveritem_t > > pygameserveritem_t_exposer_t;
        pygameserveritem_t_exposer_t pygameserveritem_t_exposer = pygameserveritem_t_exposer_t( "pygameserveritem_t" );
        bp::scope pygameserveritem_t_scope( pygameserveritem_t_exposer );
        { //property "gamedir"[fget=::pygameserveritem_t::GetGameDir]
        
            typedef char const * ( ::pygameserveritem_t::*fget)(  ) ;
            
            pygameserveritem_t_exposer.add_property( 
                "gamedir"
                , fget( &::pygameserveritem_t::GetGameDir ) );
        
        }
        { //property "map"[fget=::pygameserveritem_t::GetMap]
        
            typedef char const * ( ::pygameserveritem_t::*fget)(  ) ;
            
            pygameserveritem_t_exposer.add_property( 
                "map"
                , fget( &::pygameserveritem_t::GetMap ) );
        
        }
        { //property "gamedescription"[fget=::pygameserveritem_t::GetGameDescription]
        
            typedef char const * ( ::pygameserveritem_t::*fget)(  ) ;
            
            pygameserveritem_t_exposer.add_property( 
                "gamedescription"
                , fget( &::pygameserveritem_t::GetGameDescription ) );
        
        }
        { //property "gametags"[fget=::pygameserveritem_t::GetGameTags]
        
            typedef char const * ( ::pygameserveritem_t::*fget)(  ) ;
            
            pygameserveritem_t_exposer.add_property( 
                "gametags"
                , fget( &::pygameserveritem_t::GetGameTags ) );
        
        }
    }

    { //::servernetadr_t
        typedef bp::class_< servernetadr_t > servernetadr_exposer_t;
        servernetadr_exposer_t servernetadr_exposer = servernetadr_exposer_t( "servernetadr", bp::init< >() );
        bp::scope servernetadr_scope( servernetadr_exposer );
        { //::servernetadr_t::GetConnectionAddressString
        
            typedef char const * ( ::servernetadr_t::*GetConnectionAddressString_function_type)(  ) const;
            
            servernetadr_exposer.def( 
                "GetConnectionAddressString"
                , GetConnectionAddressString_function_type( &::servernetadr_t::GetConnectionAddressString ) );
        
        }
        { //::servernetadr_t::GetConnectionPort
        
            typedef ::uint16 ( ::servernetadr_t::*GetConnectionPort_function_type)(  ) const;
            
            servernetadr_exposer.def( 
                "GetConnectionPort"
                , GetConnectionPort_function_type( &::servernetadr_t::GetConnectionPort ) );
        
        }
        { //::servernetadr_t::GetIP
        
            typedef ::uint32 ( ::servernetadr_t::*GetIP_function_type)(  ) const;
            
            servernetadr_exposer.def( 
                "GetIP"
                , GetIP_function_type( &::servernetadr_t::GetIP ) );
        
        }
        { //::servernetadr_t::GetQueryAddressString
        
            typedef char const * ( ::servernetadr_t::*GetQueryAddressString_function_type)(  ) const;
            
            servernetadr_exposer.def( 
                "GetQueryAddressString"
                , GetQueryAddressString_function_type( &::servernetadr_t::GetQueryAddressString ) );
        
        }
        { //::servernetadr_t::GetQueryPort
        
            typedef ::uint16 ( ::servernetadr_t::*GetQueryPort_function_type)(  ) const;
            
            servernetadr_exposer.def( 
                "GetQueryPort"
                , GetQueryPort_function_type( &::servernetadr_t::GetQueryPort ) );
        
        }
        { //::servernetadr_t::Init
        
            typedef void ( ::servernetadr_t::*Init_function_type)( unsigned int,::uint16,::uint16 ) ;
            
            servernetadr_exposer.def( 
                "Init"
                , Init_function_type( &::servernetadr_t::Init )
                , ( bp::arg("ip"), bp::arg("usQueryPort"), bp::arg("usConnectionPort") ) );
        
        }
        { //::servernetadr_t::SetConnectionPort
        
            typedef void ( ::servernetadr_t::*SetConnectionPort_function_type)( ::uint16 ) ;
            
            servernetadr_exposer.def( 
                "SetConnectionPort"
                , SetConnectionPort_function_type( &::servernetadr_t::SetConnectionPort )
                , ( bp::arg("usPort") ) );
        
        }
        { //::servernetadr_t::SetIP
        
            typedef void ( ::servernetadr_t::*SetIP_function_type)( ::uint32 ) ;
            
            servernetadr_exposer.def( 
                "SetIP"
                , SetIP_function_type( &::servernetadr_t::SetIP )
                , ( bp::arg("arg0") ) );
        
        }
        { //::servernetadr_t::SetQueryPort
        
            typedef void ( ::servernetadr_t::*SetQueryPort_function_type)( ::uint16 ) ;
            
            servernetadr_exposer.def( 
                "SetQueryPort"
                , SetQueryPort_function_type( &::servernetadr_t::SetQueryPort )
                , ( bp::arg("usPort") ) );
        
        }
        servernetadr_exposer.def( bp::self < bp::self );
        { //::servernetadr_t::operator=
        
            typedef void ( ::servernetadr_t::*assign_function_type)( ::servernetadr_t const & ) ;
            
            servernetadr_exposer.def( 
                "assign"
                , assign_function_type( &::servernetadr_t::operator= )
                , ( bp::arg("that") ) );
        
        }
    }

    { //::PyGetLobbyChatEntry
    
        typedef ::boost::python::tuple ( *PyGetLobbyChatEntry_function_type )( ::CSteamID,int,::CSteamID * );
        
        bp::def( 
            "PyGetLobbyChatEntry"
            , PyGetLobbyChatEntry_function_type( &::PyGetLobbyChatEntry )
            , ( bp::arg("steamIDLobby"), bp::arg("iChatID"), bp::arg("pSteamIDUser") ) );
    
    }

    { //::PyGetLobbyDataByIndex
    
        typedef ::boost::python::tuple ( *PyGetLobbyDataByIndex_function_type )( ::CSteamID,int );
        
        bp::def( 
            "PyGetLobbyDataByIndex"
            , PyGetLobbyDataByIndex_function_type( &::PyGetLobbyDataByIndex )
            , ( bp::arg("steamIDLobby"), bp::arg("iLobbyData") ) );
    
    }

    { //::PyGetStatFloat
    
        typedef ::boost::python::api::object ( *PyGetStatFloat_function_type )( char const * );
        
        bp::def( 
            "PyGetStatFloat"
            , PyGetStatFloat_function_type( &::PyGetStatFloat )
            , ( bp::arg("name") ) );
    
    }

    { //::PyGetStatInt
    
        typedef ::boost::python::api::object ( *PyGetStatInt_function_type )( char const * );
        
        bp::def( 
            "PyGetStatInt"
            , PyGetStatInt_function_type( &::PyGetStatInt )
            , ( bp::arg("name") ) );
    
    }

    { //::PySendLobbyChatMsg
    
        typedef bool ( *PySendLobbyChatMsg_function_type )( ::CSteamID,char const * );
        
        bp::def( 
            "PySendLobbyChatMsg"
            , PySendLobbyChatMsg_function_type( &::PySendLobbyChatMsg )
            , ( bp::arg("steamIDLobby"), bp::arg("pvMsgBody") ) );
    
    }

    { //::PySteamUser_GetAuthSessionTicket
    
        typedef ::boost::python::api::object ( *SteamUser_GetAuthSessionTicket_function_type )(  );
        
        bp::def( 
            "SteamUser_GetAuthSessionTicket"
            , SteamUser_GetAuthSessionTicket_function_type( &::PySteamUser_GetAuthSessionTicket ) );
    
    }

    { //::SteamAPI_RunCallbacks
    
        typedef void ( *SteamAPI_RunCallbacks_function_type )(  );
        
        bp::def( 
            "SteamAPI_RunCallbacks"
            , SteamAPI_RunCallbacks_function_type( &::SteamAPI_RunCallbacks ) );
    
    }

    bp::scope().attr( "steamapicontext" ) = boost::ref(steamapicontext);

    bp::scope().attr( "QUERY_PORT_NOT_INITIALIZED" ) = (int)QUERY_PORT_NOT_INITIALIZED;

    bp::scope().attr( "QUERY_PORT_ERROR" ) = (int)QUERY_PORT_ERROR;

    bp::scope().attr( "k_cchPersonaNameMax" ) = (int)k_cchPersonaNameMax;

    { //::PersonaStateChangeCallback
            typedef bp::class_< PersonaStateChangeCallback_wrapper, boost::noncopyable > PersonaStateChangeCallback_exposer_t;
            PersonaStateChangeCallback_exposer_t PersonaStateChangeCallback_exposer = PersonaStateChangeCallback_exposer_t( "PersonaStateChangeCallback", bp::init<>() );
            bp::scope PersonaStateChangeCallback_scope( PersonaStateChangeCallback_exposer );
            { //::PersonaStateChangeCallback::OnPersonaStateChange
            
                typedef void ( ::PersonaStateChangeCallback::*OnPersonaStateChange_function_type )( ::PersonaStateChange_t * ) ;
                typedef void ( PersonaStateChangeCallback_wrapper::*default_OnPersonaStateChange_function_type )( ::PersonaStateChange_t * ) ;
                
                PersonaStateChangeCallback_exposer.def( 
                    "OnPersonaStateChange"
                    , OnPersonaStateChange_function_type(&::PersonaStateChangeCallback::OnPersonaStateChange)
                    , default_OnPersonaStateChange_function_type(&PersonaStateChangeCallback_wrapper::default_OnPersonaStateChange)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::GameOverlayActivatedCallback
            typedef bp::class_< GameOverlayActivatedCallback_wrapper, boost::noncopyable > GameOverlayActivatedCallback_exposer_t;
            GameOverlayActivatedCallback_exposer_t GameOverlayActivatedCallback_exposer = GameOverlayActivatedCallback_exposer_t( "GameOverlayActivatedCallback", bp::init<>() );
            bp::scope GameOverlayActivatedCallback_scope( GameOverlayActivatedCallback_exposer );
            { //::GameOverlayActivatedCallback::OnGameOverlayActivated
            
                typedef void ( ::GameOverlayActivatedCallback::*OnGameOverlayActivated_function_type )( ::GameOverlayActivated_t * ) ;
                typedef void ( GameOverlayActivatedCallback_wrapper::*default_OnGameOverlayActivated_function_type )( ::GameOverlayActivated_t * ) ;
                
                GameOverlayActivatedCallback_exposer.def( 
                    "OnGameOverlayActivated"
                    , OnGameOverlayActivated_function_type(&::GameOverlayActivatedCallback::OnGameOverlayActivated)
                    , default_OnGameOverlayActivated_function_type(&GameOverlayActivatedCallback_wrapper::default_OnGameOverlayActivated)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::GameServerChangeRequestedCallback
            typedef bp::class_< GameServerChangeRequestedCallback_wrapper, boost::noncopyable > GameServerChangeRequestedCallback_exposer_t;
            GameServerChangeRequestedCallback_exposer_t GameServerChangeRequestedCallback_exposer = GameServerChangeRequestedCallback_exposer_t( "GameServerChangeRequestedCallback", bp::init<>() );
            bp::scope GameServerChangeRequestedCallback_scope( GameServerChangeRequestedCallback_exposer );
            { //::GameServerChangeRequestedCallback::OnGameServerChangeRequested
            
                typedef void ( ::GameServerChangeRequestedCallback::*OnGameServerChangeRequested_function_type )( ::GameServerChangeRequested_t * ) ;
                typedef void ( GameServerChangeRequestedCallback_wrapper::*default_OnGameServerChangeRequested_function_type )( ::GameServerChangeRequested_t * ) ;
                
                GameServerChangeRequestedCallback_exposer.def( 
                    "OnGameServerChangeRequested"
                    , OnGameServerChangeRequested_function_type(&::GameServerChangeRequestedCallback::OnGameServerChangeRequested)
                    , default_OnGameServerChangeRequested_function_type(&GameServerChangeRequestedCallback_wrapper::default_OnGameServerChangeRequested)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::GameLobbyJoinRequestedCallback
            typedef bp::class_< GameLobbyJoinRequestedCallback_wrapper, boost::noncopyable > GameLobbyJoinRequestedCallback_exposer_t;
            GameLobbyJoinRequestedCallback_exposer_t GameLobbyJoinRequestedCallback_exposer = GameLobbyJoinRequestedCallback_exposer_t( "GameLobbyJoinRequestedCallback", bp::init<>() );
            bp::scope GameLobbyJoinRequestedCallback_scope( GameLobbyJoinRequestedCallback_exposer );
            { //::GameLobbyJoinRequestedCallback::OnGameLobbyJoinRequested
            
                typedef void ( ::GameLobbyJoinRequestedCallback::*OnGameLobbyJoinRequested_function_type )( ::GameLobbyJoinRequested_t * ) ;
                typedef void ( GameLobbyJoinRequestedCallback_wrapper::*default_OnGameLobbyJoinRequested_function_type )( ::GameLobbyJoinRequested_t * ) ;
                
                GameLobbyJoinRequestedCallback_exposer.def( 
                    "OnGameLobbyJoinRequested"
                    , OnGameLobbyJoinRequested_function_type(&::GameLobbyJoinRequestedCallback::OnGameLobbyJoinRequested)
                    , default_OnGameLobbyJoinRequested_function_type(&GameLobbyJoinRequestedCallback_wrapper::default_OnGameLobbyJoinRequested)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::AvatarImageLoadedCallback
            typedef bp::class_< AvatarImageLoadedCallback_wrapper, boost::noncopyable > AvatarImageLoadedCallback_exposer_t;
            AvatarImageLoadedCallback_exposer_t AvatarImageLoadedCallback_exposer = AvatarImageLoadedCallback_exposer_t( "AvatarImageLoadedCallback", bp::init<>() );
            bp::scope AvatarImageLoadedCallback_scope( AvatarImageLoadedCallback_exposer );
            { //::AvatarImageLoadedCallback::OnAvatarImageLoaded
            
                typedef void ( ::AvatarImageLoadedCallback::*OnAvatarImageLoaded_function_type )( ::AvatarImageLoaded_t * ) ;
                typedef void ( AvatarImageLoadedCallback_wrapper::*default_OnAvatarImageLoaded_function_type )( ::AvatarImageLoaded_t * ) ;
                
                AvatarImageLoadedCallback_exposer.def( 
                    "OnAvatarImageLoaded"
                    , OnAvatarImageLoaded_function_type(&::AvatarImageLoadedCallback::OnAvatarImageLoaded)
                    , default_OnAvatarImageLoaded_function_type(&AvatarImageLoadedCallback_wrapper::default_OnAvatarImageLoaded)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::ClanOfficerListResponseCallback
            typedef bp::class_< ClanOfficerListResponseCallback_wrapper, boost::noncopyable > ClanOfficerListResponseCallback_exposer_t;
            ClanOfficerListResponseCallback_exposer_t ClanOfficerListResponseCallback_exposer = ClanOfficerListResponseCallback_exposer_t( "ClanOfficerListResponseCallback", bp::init<>() );
            bp::scope ClanOfficerListResponseCallback_scope( ClanOfficerListResponseCallback_exposer );
            { //::ClanOfficerListResponseCallback::OnClanOfficerListResponse
            
                typedef void ( ::ClanOfficerListResponseCallback::*OnClanOfficerListResponse_function_type )( ::ClanOfficerListResponse_t * ) ;
                typedef void ( ClanOfficerListResponseCallback_wrapper::*default_OnClanOfficerListResponse_function_type )( ::ClanOfficerListResponse_t * ) ;
                
                ClanOfficerListResponseCallback_exposer.def( 
                    "OnClanOfficerListResponse"
                    , OnClanOfficerListResponse_function_type(&::ClanOfficerListResponseCallback::OnClanOfficerListResponse)
                    , default_OnClanOfficerListResponse_function_type(&ClanOfficerListResponseCallback_wrapper::default_OnClanOfficerListResponse)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::FriendRichPresenceUpdateCallback
            typedef bp::class_< FriendRichPresenceUpdateCallback_wrapper, boost::noncopyable > FriendRichPresenceUpdateCallback_exposer_t;
            FriendRichPresenceUpdateCallback_exposer_t FriendRichPresenceUpdateCallback_exposer = FriendRichPresenceUpdateCallback_exposer_t( "FriendRichPresenceUpdateCallback", bp::init<>() );
            bp::scope FriendRichPresenceUpdateCallback_scope( FriendRichPresenceUpdateCallback_exposer );
            { //::FriendRichPresenceUpdateCallback::OnFriendRichPresenceUpdate
            
                typedef void ( ::FriendRichPresenceUpdateCallback::*OnFriendRichPresenceUpdate_function_type )( ::FriendRichPresenceUpdate_t * ) ;
                typedef void ( FriendRichPresenceUpdateCallback_wrapper::*default_OnFriendRichPresenceUpdate_function_type )( ::FriendRichPresenceUpdate_t * ) ;
                
                FriendRichPresenceUpdateCallback_exposer.def( 
                    "OnFriendRichPresenceUpdate"
                    , OnFriendRichPresenceUpdate_function_type(&::FriendRichPresenceUpdateCallback::OnFriendRichPresenceUpdate)
                    , default_OnFriendRichPresenceUpdate_function_type(&FriendRichPresenceUpdateCallback_wrapper::default_OnFriendRichPresenceUpdate)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::GameRichPresenceJoinRequestedCallback
            typedef bp::class_< GameRichPresenceJoinRequestedCallback_wrapper, boost::noncopyable > GameRichPresenceJoinRequestedCallback_exposer_t;
            GameRichPresenceJoinRequestedCallback_exposer_t GameRichPresenceJoinRequestedCallback_exposer = GameRichPresenceJoinRequestedCallback_exposer_t( "GameRichPresenceJoinRequestedCallback", bp::init<>() );
            bp::scope GameRichPresenceJoinRequestedCallback_scope( GameRichPresenceJoinRequestedCallback_exposer );
            { //::GameRichPresenceJoinRequestedCallback::OnGameRichPresenceJoinRequested
            
                typedef void ( ::GameRichPresenceJoinRequestedCallback::*OnGameRichPresenceJoinRequested_function_type )( ::GameRichPresenceJoinRequested_t * ) ;
                typedef void ( GameRichPresenceJoinRequestedCallback_wrapper::*default_OnGameRichPresenceJoinRequested_function_type )( ::GameRichPresenceJoinRequested_t * ) ;
                
                GameRichPresenceJoinRequestedCallback_exposer.def( 
                    "OnGameRichPresenceJoinRequested"
                    , OnGameRichPresenceJoinRequested_function_type(&::GameRichPresenceJoinRequestedCallback::OnGameRichPresenceJoinRequested)
                    , default_OnGameRichPresenceJoinRequested_function_type(&GameRichPresenceJoinRequestedCallback_wrapper::default_OnGameRichPresenceJoinRequested)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::GameConnectedClanChatMsgCallback
            typedef bp::class_< GameConnectedClanChatMsgCallback_wrapper, boost::noncopyable > GameConnectedClanChatMsgCallback_exposer_t;
            GameConnectedClanChatMsgCallback_exposer_t GameConnectedClanChatMsgCallback_exposer = GameConnectedClanChatMsgCallback_exposer_t( "GameConnectedClanChatMsgCallback", bp::init<>() );
            bp::scope GameConnectedClanChatMsgCallback_scope( GameConnectedClanChatMsgCallback_exposer );
            { //::GameConnectedClanChatMsgCallback::OnGameConnectedClanChatMsg
            
                typedef void ( ::GameConnectedClanChatMsgCallback::*OnGameConnectedClanChatMsg_function_type )( ::GameConnectedClanChatMsg_t * ) ;
                typedef void ( GameConnectedClanChatMsgCallback_wrapper::*default_OnGameConnectedClanChatMsg_function_type )( ::GameConnectedClanChatMsg_t * ) ;
                
                GameConnectedClanChatMsgCallback_exposer.def( 
                    "OnGameConnectedClanChatMsg"
                    , OnGameConnectedClanChatMsg_function_type(&::GameConnectedClanChatMsgCallback::OnGameConnectedClanChatMsg)
                    , default_OnGameConnectedClanChatMsg_function_type(&GameConnectedClanChatMsgCallback_wrapper::default_OnGameConnectedClanChatMsg)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::GameConnectedChatJoinCallback
            typedef bp::class_< GameConnectedChatJoinCallback_wrapper, boost::noncopyable > GameConnectedChatJoinCallback_exposer_t;
            GameConnectedChatJoinCallback_exposer_t GameConnectedChatJoinCallback_exposer = GameConnectedChatJoinCallback_exposer_t( "GameConnectedChatJoinCallback", bp::init<>() );
            bp::scope GameConnectedChatJoinCallback_scope( GameConnectedChatJoinCallback_exposer );
            { //::GameConnectedChatJoinCallback::OnGameConnectedChatJoin
            
                typedef void ( ::GameConnectedChatJoinCallback::*OnGameConnectedChatJoin_function_type )( ::GameConnectedChatJoin_t * ) ;
                typedef void ( GameConnectedChatJoinCallback_wrapper::*default_OnGameConnectedChatJoin_function_type )( ::GameConnectedChatJoin_t * ) ;
                
                GameConnectedChatJoinCallback_exposer.def( 
                    "OnGameConnectedChatJoin"
                    , OnGameConnectedChatJoin_function_type(&::GameConnectedChatJoinCallback::OnGameConnectedChatJoin)
                    , default_OnGameConnectedChatJoin_function_type(&GameConnectedChatJoinCallback_wrapper::default_OnGameConnectedChatJoin)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::GameConnectedChatLeaveCallback
            typedef bp::class_< GameConnectedChatLeaveCallback_wrapper, boost::noncopyable > GameConnectedChatLeaveCallback_exposer_t;
            GameConnectedChatLeaveCallback_exposer_t GameConnectedChatLeaveCallback_exposer = GameConnectedChatLeaveCallback_exposer_t( "GameConnectedChatLeaveCallback", bp::init<>() );
            bp::scope GameConnectedChatLeaveCallback_scope( GameConnectedChatLeaveCallback_exposer );
            { //::GameConnectedChatLeaveCallback::OnGameConnectedChatLeave
            
                typedef void ( ::GameConnectedChatLeaveCallback::*OnGameConnectedChatLeave_function_type )( ::GameConnectedChatLeave_t * ) ;
                typedef void ( GameConnectedChatLeaveCallback_wrapper::*default_OnGameConnectedChatLeave_function_type )( ::GameConnectedChatLeave_t * ) ;
                
                GameConnectedChatLeaveCallback_exposer.def( 
                    "OnGameConnectedChatLeave"
                    , OnGameConnectedChatLeave_function_type(&::GameConnectedChatLeaveCallback::OnGameConnectedChatLeave)
                    , default_OnGameConnectedChatLeave_function_type(&GameConnectedChatLeaveCallback_wrapper::default_OnGameConnectedChatLeave)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::DownloadClanActivityCountsResultCallback
            typedef bp::class_< DownloadClanActivityCountsResultCallback_wrapper, boost::noncopyable > DownloadClanActivityCountsResultCallback_exposer_t;
            DownloadClanActivityCountsResultCallback_exposer_t DownloadClanActivityCountsResultCallback_exposer = DownloadClanActivityCountsResultCallback_exposer_t( "DownloadClanActivityCountsResultCallback", bp::init<>() );
            bp::scope DownloadClanActivityCountsResultCallback_scope( DownloadClanActivityCountsResultCallback_exposer );
            { //::DownloadClanActivityCountsResultCallback::OnDownloadClanActivityCountsResult
            
                typedef void ( ::DownloadClanActivityCountsResultCallback::*OnDownloadClanActivityCountsResult_function_type )( ::DownloadClanActivityCountsResult_t * ) ;
                typedef void ( DownloadClanActivityCountsResultCallback_wrapper::*default_OnDownloadClanActivityCountsResult_function_type )( ::DownloadClanActivityCountsResult_t * ) ;
                
                DownloadClanActivityCountsResultCallback_exposer.def( 
                    "OnDownloadClanActivityCountsResult"
                    , OnDownloadClanActivityCountsResult_function_type(&::DownloadClanActivityCountsResultCallback::OnDownloadClanActivityCountsResult)
                    , default_OnDownloadClanActivityCountsResult_function_type(&DownloadClanActivityCountsResultCallback_wrapper::default_OnDownloadClanActivityCountsResult)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::JoinClanChatRoomCompletionResultCallback
            typedef bp::class_< JoinClanChatRoomCompletionResultCallback_wrapper, boost::noncopyable > JoinClanChatRoomCompletionResultCallback_exposer_t;
            JoinClanChatRoomCompletionResultCallback_exposer_t JoinClanChatRoomCompletionResultCallback_exposer = JoinClanChatRoomCompletionResultCallback_exposer_t( "JoinClanChatRoomCompletionResultCallback", bp::init<>() );
            bp::scope JoinClanChatRoomCompletionResultCallback_scope( JoinClanChatRoomCompletionResultCallback_exposer );
            { //::JoinClanChatRoomCompletionResultCallback::OnJoinClanChatRoomCompletionResult
            
                typedef void ( ::JoinClanChatRoomCompletionResultCallback::*OnJoinClanChatRoomCompletionResult_function_type )( ::JoinClanChatRoomCompletionResult_t * ) ;
                typedef void ( JoinClanChatRoomCompletionResultCallback_wrapper::*default_OnJoinClanChatRoomCompletionResult_function_type )( ::JoinClanChatRoomCompletionResult_t * ) ;
                
                JoinClanChatRoomCompletionResultCallback_exposer.def( 
                    "OnJoinClanChatRoomCompletionResult"
                    , OnJoinClanChatRoomCompletionResult_function_type(&::JoinClanChatRoomCompletionResultCallback::OnJoinClanChatRoomCompletionResult)
                    , default_OnJoinClanChatRoomCompletionResult_function_type(&JoinClanChatRoomCompletionResultCallback_wrapper::default_OnJoinClanChatRoomCompletionResult)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::GameConnectedFriendChatMsgCallback
            typedef bp::class_< GameConnectedFriendChatMsgCallback_wrapper, boost::noncopyable > GameConnectedFriendChatMsgCallback_exposer_t;
            GameConnectedFriendChatMsgCallback_exposer_t GameConnectedFriendChatMsgCallback_exposer = GameConnectedFriendChatMsgCallback_exposer_t( "GameConnectedFriendChatMsgCallback", bp::init<>() );
            bp::scope GameConnectedFriendChatMsgCallback_scope( GameConnectedFriendChatMsgCallback_exposer );
            { //::GameConnectedFriendChatMsgCallback::OnGameConnectedFriendChatMsg
            
                typedef void ( ::GameConnectedFriendChatMsgCallback::*OnGameConnectedFriendChatMsg_function_type )( ::GameConnectedFriendChatMsg_t * ) ;
                typedef void ( GameConnectedFriendChatMsgCallback_wrapper::*default_OnGameConnectedFriendChatMsg_function_type )( ::GameConnectedFriendChatMsg_t * ) ;
                
                GameConnectedFriendChatMsgCallback_exposer.def( 
                    "OnGameConnectedFriendChatMsg"
                    , OnGameConnectedFriendChatMsg_function_type(&::GameConnectedFriendChatMsgCallback::OnGameConnectedFriendChatMsg)
                    , default_OnGameConnectedFriendChatMsg_function_type(&GameConnectedFriendChatMsgCallback_wrapper::default_OnGameConnectedFriendChatMsg)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::FriendsGetFollowerCountCallback
            typedef bp::class_< FriendsGetFollowerCountCallback_wrapper, boost::noncopyable > FriendsGetFollowerCountCallback_exposer_t;
            FriendsGetFollowerCountCallback_exposer_t FriendsGetFollowerCountCallback_exposer = FriendsGetFollowerCountCallback_exposer_t( "FriendsGetFollowerCountCallback", bp::init<>() );
            bp::scope FriendsGetFollowerCountCallback_scope( FriendsGetFollowerCountCallback_exposer );
            { //::FriendsGetFollowerCountCallback::OnFriendsGetFollowerCount
            
                typedef void ( ::FriendsGetFollowerCountCallback::*OnFriendsGetFollowerCount_function_type )( ::FriendsGetFollowerCount_t * ) ;
                typedef void ( FriendsGetFollowerCountCallback_wrapper::*default_OnFriendsGetFollowerCount_function_type )( ::FriendsGetFollowerCount_t * ) ;
                
                FriendsGetFollowerCountCallback_exposer.def( 
                    "OnFriendsGetFollowerCount"
                    , OnFriendsGetFollowerCount_function_type(&::FriendsGetFollowerCountCallback::OnFriendsGetFollowerCount)
                    , default_OnFriendsGetFollowerCount_function_type(&FriendsGetFollowerCountCallback_wrapper::default_OnFriendsGetFollowerCount)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::FriendsIsFollowingCallback
            typedef bp::class_< FriendsIsFollowingCallback_wrapper, boost::noncopyable > FriendsIsFollowingCallback_exposer_t;
            FriendsIsFollowingCallback_exposer_t FriendsIsFollowingCallback_exposer = FriendsIsFollowingCallback_exposer_t( "FriendsIsFollowingCallback", bp::init<>() );
            bp::scope FriendsIsFollowingCallback_scope( FriendsIsFollowingCallback_exposer );
            { //::FriendsIsFollowingCallback::OnFriendsIsFollowing
            
                typedef void ( ::FriendsIsFollowingCallback::*OnFriendsIsFollowing_function_type )( ::FriendsIsFollowing_t * ) ;
                typedef void ( FriendsIsFollowingCallback_wrapper::*default_OnFriendsIsFollowing_function_type )( ::FriendsIsFollowing_t * ) ;
                
                FriendsIsFollowingCallback_exposer.def( 
                    "OnFriendsIsFollowing"
                    , OnFriendsIsFollowing_function_type(&::FriendsIsFollowingCallback::OnFriendsIsFollowing)
                    , default_OnFriendsIsFollowing_function_type(&FriendsIsFollowingCallback_wrapper::default_OnFriendsIsFollowing)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::FriendsEnumerateFollowingListCallback
            typedef bp::class_< FriendsEnumerateFollowingListCallback_wrapper, boost::noncopyable > FriendsEnumerateFollowingListCallback_exposer_t;
            FriendsEnumerateFollowingListCallback_exposer_t FriendsEnumerateFollowingListCallback_exposer = FriendsEnumerateFollowingListCallback_exposer_t( "FriendsEnumerateFollowingListCallback", bp::init<>() );
            bp::scope FriendsEnumerateFollowingListCallback_scope( FriendsEnumerateFollowingListCallback_exposer );
            { //::FriendsEnumerateFollowingListCallback::OnFriendsEnumerateFollowingList
            
                typedef void ( ::FriendsEnumerateFollowingListCallback::*OnFriendsEnumerateFollowingList_function_type )( ::FriendsEnumerateFollowingList_t * ) ;
                typedef void ( FriendsEnumerateFollowingListCallback_wrapper::*default_OnFriendsEnumerateFollowingList_function_type )( ::FriendsEnumerateFollowingList_t * ) ;
                
                FriendsEnumerateFollowingListCallback_exposer.def( 
                    "OnFriendsEnumerateFollowingList"
                    , OnFriendsEnumerateFollowingList_function_type(&::FriendsEnumerateFollowingListCallback::OnFriendsEnumerateFollowingList)
                    , default_OnFriendsEnumerateFollowingList_function_type(&FriendsEnumerateFollowingListCallback_wrapper::default_OnFriendsEnumerateFollowingList)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::SetPersonaNameResponseCallback
            typedef bp::class_< SetPersonaNameResponseCallback_wrapper, boost::noncopyable > SetPersonaNameResponseCallback_exposer_t;
            SetPersonaNameResponseCallback_exposer_t SetPersonaNameResponseCallback_exposer = SetPersonaNameResponseCallback_exposer_t( "SetPersonaNameResponseCallback", bp::init<>() );
            bp::scope SetPersonaNameResponseCallback_scope( SetPersonaNameResponseCallback_exposer );
            { //::SetPersonaNameResponseCallback::OnSetPersonaNameResponse
            
                typedef void ( ::SetPersonaNameResponseCallback::*OnSetPersonaNameResponse_function_type )( ::SetPersonaNameResponse_t * ) ;
                typedef void ( SetPersonaNameResponseCallback_wrapper::*default_OnSetPersonaNameResponse_function_type )( ::SetPersonaNameResponse_t * ) ;
                
                SetPersonaNameResponseCallback_exposer.def( 
                    "OnSetPersonaNameResponse"
                    , OnSetPersonaNameResponse_function_type(&::SetPersonaNameResponseCallback::OnSetPersonaNameResponse)
                    , default_OnSetPersonaNameResponse_function_type(&SetPersonaNameResponseCallback_wrapper::default_OnSetPersonaNameResponse)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::LobbyMatchListCallResult
            typedef bp::class_< LobbyMatchListCallResult_wrapper, boost::noncopyable > LobbyMatchListCallResult_exposer_t;
            LobbyMatchListCallResult_exposer_t LobbyMatchListCallResult_exposer = LobbyMatchListCallResult_exposer_t( "LobbyMatchListCallResult", bp::init< SteamAPICall_t >(( bp::arg("steamapicall") )) );
            bp::scope LobbyMatchListCallResult_scope( LobbyMatchListCallResult_exposer );
            bp::implicitly_convertible< SteamAPICall_t, LobbyMatchListCallResult >();
            { //::LobbyMatchListCallResult::OnLobbyMatchList
            
                typedef void ( ::LobbyMatchListCallResult::*OnLobbyMatchList_function_type )( ::LobbyMatchList_t *,bool ) ;
                typedef void ( LobbyMatchListCallResult_wrapper::*default_OnLobbyMatchList_function_type )( ::LobbyMatchList_t *,bool ) ;
                
                LobbyMatchListCallResult_exposer.def( 
                    "OnLobbyMatchList"
                    , OnLobbyMatchList_function_type(&::LobbyMatchListCallResult::OnLobbyMatchList)
                    , default_OnLobbyMatchList_function_type(&LobbyMatchListCallResult_wrapper::default_OnLobbyMatchList)
                    , ( bp::arg("data"), bp::arg("iofailure") ) );
            
            }
        }

    { //::LobbyGameCreatedCallResult
            typedef bp::class_< LobbyGameCreatedCallResult_wrapper, boost::noncopyable > LobbyGameCreatedCallResult_exposer_t;
            LobbyGameCreatedCallResult_exposer_t LobbyGameCreatedCallResult_exposer = LobbyGameCreatedCallResult_exposer_t( "LobbyGameCreatedCallResult", bp::init< SteamAPICall_t >(( bp::arg("steamapicall") )) );
            bp::scope LobbyGameCreatedCallResult_scope( LobbyGameCreatedCallResult_exposer );
            bp::implicitly_convertible< SteamAPICall_t, LobbyGameCreatedCallResult >();
            { //::LobbyGameCreatedCallResult::OnLobbyGameCreated
            
                typedef void ( ::LobbyGameCreatedCallResult::*OnLobbyGameCreated_function_type )( ::LobbyGameCreated_t *,bool ) ;
                typedef void ( LobbyGameCreatedCallResult_wrapper::*default_OnLobbyGameCreated_function_type )( ::LobbyGameCreated_t *,bool ) ;
                
                LobbyGameCreatedCallResult_exposer.def( 
                    "OnLobbyGameCreated"
                    , OnLobbyGameCreated_function_type(&::LobbyGameCreatedCallResult::OnLobbyGameCreated)
                    , default_OnLobbyGameCreated_function_type(&LobbyGameCreatedCallResult_wrapper::default_OnLobbyGameCreated)
                    , ( bp::arg("data"), bp::arg("iofailure") ) );
            
            }
        }

    { //::LobbyCreatedCallResult
            typedef bp::class_< LobbyCreatedCallResult_wrapper, boost::noncopyable > LobbyCreatedCallResult_exposer_t;
            LobbyCreatedCallResult_exposer_t LobbyCreatedCallResult_exposer = LobbyCreatedCallResult_exposer_t( "LobbyCreatedCallResult", bp::init< SteamAPICall_t >(( bp::arg("steamapicall") )) );
            bp::scope LobbyCreatedCallResult_scope( LobbyCreatedCallResult_exposer );
            bp::implicitly_convertible< SteamAPICall_t, LobbyCreatedCallResult >();
            { //::LobbyCreatedCallResult::OnLobbyCreated
            
                typedef void ( ::LobbyCreatedCallResult::*OnLobbyCreated_function_type )( ::LobbyCreated_t *,bool ) ;
                typedef void ( LobbyCreatedCallResult_wrapper::*default_OnLobbyCreated_function_type )( ::LobbyCreated_t *,bool ) ;
                
                LobbyCreatedCallResult_exposer.def( 
                    "OnLobbyCreated"
                    , OnLobbyCreated_function_type(&::LobbyCreatedCallResult::OnLobbyCreated)
                    , default_OnLobbyCreated_function_type(&LobbyCreatedCallResult_wrapper::default_OnLobbyCreated)
                    , ( bp::arg("data"), bp::arg("iofailure") ) );
            
            }
        }

    { //::LobbyEnterCallResult
            typedef bp::class_< LobbyEnterCallResult_wrapper, boost::noncopyable > LobbyEnterCallResult_exposer_t;
            LobbyEnterCallResult_exposer_t LobbyEnterCallResult_exposer = LobbyEnterCallResult_exposer_t( "LobbyEnterCallResult", bp::init< SteamAPICall_t >(( bp::arg("steamapicall") )) );
            bp::scope LobbyEnterCallResult_scope( LobbyEnterCallResult_exposer );
            bp::implicitly_convertible< SteamAPICall_t, LobbyEnterCallResult >();
            { //::LobbyEnterCallResult::OnLobbyEnter
            
                typedef void ( ::LobbyEnterCallResult::*OnLobbyEnter_function_type )( ::LobbyEnter_t *,bool ) ;
                typedef void ( LobbyEnterCallResult_wrapper::*default_OnLobbyEnter_function_type )( ::LobbyEnter_t *,bool ) ;
                
                LobbyEnterCallResult_exposer.def( 
                    "OnLobbyEnter"
                    , OnLobbyEnter_function_type(&::LobbyEnterCallResult::OnLobbyEnter)
                    , default_OnLobbyEnter_function_type(&LobbyEnterCallResult_wrapper::default_OnLobbyEnter)
                    , ( bp::arg("data"), bp::arg("iofailure") ) );
            
            }
        }

    { //::LobbyChatUpdateCallback
            typedef bp::class_< LobbyChatUpdateCallback_wrapper, boost::noncopyable > LobbyChatUpdateCallback_exposer_t;
            LobbyChatUpdateCallback_exposer_t LobbyChatUpdateCallback_exposer = LobbyChatUpdateCallback_exposer_t( "LobbyChatUpdateCallback", bp::init<>() );
            bp::scope LobbyChatUpdateCallback_scope( LobbyChatUpdateCallback_exposer );
            { //::LobbyChatUpdateCallback::OnLobbyChatUpdate
            
                typedef void ( ::LobbyChatUpdateCallback::*OnLobbyChatUpdate_function_type )( ::LobbyChatUpdate_t * ) ;
                typedef void ( LobbyChatUpdateCallback_wrapper::*default_OnLobbyChatUpdate_function_type )( ::LobbyChatUpdate_t * ) ;
                
                LobbyChatUpdateCallback_exposer.def( 
                    "OnLobbyChatUpdate"
                    , OnLobbyChatUpdate_function_type(&::LobbyChatUpdateCallback::OnLobbyChatUpdate)
                    , default_OnLobbyChatUpdate_function_type(&LobbyChatUpdateCallback_wrapper::default_OnLobbyChatUpdate)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::LobbyChatMsgCallback
            typedef bp::class_< LobbyChatMsgCallback_wrapper, boost::noncopyable > LobbyChatMsgCallback_exposer_t;
            LobbyChatMsgCallback_exposer_t LobbyChatMsgCallback_exposer = LobbyChatMsgCallback_exposer_t( "LobbyChatMsgCallback", bp::init<>() );
            bp::scope LobbyChatMsgCallback_scope( LobbyChatMsgCallback_exposer );
            { //::LobbyChatMsgCallback::OnLobbyChatMsg
            
                typedef void ( ::LobbyChatMsgCallback::*OnLobbyChatMsg_function_type )( ::LobbyChatMsg_t * ) ;
                typedef void ( LobbyChatMsgCallback_wrapper::*default_OnLobbyChatMsg_function_type )( ::LobbyChatMsg_t * ) ;
                
                LobbyChatMsgCallback_exposer.def( 
                    "OnLobbyChatMsg"
                    , OnLobbyChatMsg_function_type(&::LobbyChatMsgCallback::OnLobbyChatMsg)
                    , default_OnLobbyChatMsg_function_type(&LobbyChatMsgCallback_wrapper::default_OnLobbyChatMsg)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::LobbyDataUpdateCallback
            typedef bp::class_< LobbyDataUpdateCallback_wrapper, boost::noncopyable > LobbyDataUpdateCallback_exposer_t;
            LobbyDataUpdateCallback_exposer_t LobbyDataUpdateCallback_exposer = LobbyDataUpdateCallback_exposer_t( "LobbyDataUpdateCallback", bp::init<>() );
            bp::scope LobbyDataUpdateCallback_scope( LobbyDataUpdateCallback_exposer );
            { //::LobbyDataUpdateCallback::OnLobbyDataUpdate
            
                typedef void ( ::LobbyDataUpdateCallback::*OnLobbyDataUpdate_function_type )( ::LobbyDataUpdate_t * ) ;
                typedef void ( LobbyDataUpdateCallback_wrapper::*default_OnLobbyDataUpdate_function_type )( ::LobbyDataUpdate_t * ) ;
                
                LobbyDataUpdateCallback_exposer.def( 
                    "OnLobbyDataUpdate"
                    , OnLobbyDataUpdate_function_type(&::LobbyDataUpdateCallback::OnLobbyDataUpdate)
                    , default_OnLobbyDataUpdate_function_type(&LobbyDataUpdateCallback_wrapper::default_OnLobbyDataUpdate)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::NumberOfCurrentPlayersCallResult
            typedef bp::class_< NumberOfCurrentPlayersCallResult_wrapper, boost::noncopyable > NumberOfCurrentPlayersCallResult_exposer_t;
            NumberOfCurrentPlayersCallResult_exposer_t NumberOfCurrentPlayersCallResult_exposer = NumberOfCurrentPlayersCallResult_exposer_t( "NumberOfCurrentPlayersCallResult", bp::init< SteamAPICall_t >(( bp::arg("steamapicall") )) );
            bp::scope NumberOfCurrentPlayersCallResult_scope( NumberOfCurrentPlayersCallResult_exposer );
            bp::implicitly_convertible< SteamAPICall_t, NumberOfCurrentPlayersCallResult >();
            { //::NumberOfCurrentPlayersCallResult::OnNumberOfCurrentPlayers
            
                typedef void ( ::NumberOfCurrentPlayersCallResult::*OnNumberOfCurrentPlayers_function_type )( ::NumberOfCurrentPlayers_t *,bool ) ;
                typedef void ( NumberOfCurrentPlayersCallResult_wrapper::*default_OnNumberOfCurrentPlayers_function_type )( ::NumberOfCurrentPlayers_t *,bool ) ;
                
                NumberOfCurrentPlayersCallResult_exposer.def( 
                    "OnNumberOfCurrentPlayers"
                    , OnNumberOfCurrentPlayers_function_type(&::NumberOfCurrentPlayersCallResult::OnNumberOfCurrentPlayers)
                    , default_OnNumberOfCurrentPlayers_function_type(&NumberOfCurrentPlayersCallResult_wrapper::default_OnNumberOfCurrentPlayers)
                    , ( bp::arg("data"), bp::arg("iofailure") ) );
            
            }
        }

    bp::scope().attr("k_uAPICallInvalid") = k_uAPICallInvalid;
}
#else
#include "__array_1.pypp.hpp"

#include "__convenience.pypp.hpp"

#include "__call_policies.pypp.hpp"

#include "cbase.h"

#include "steam/steam_api.h"

#include "steam/isteamfriends.h"

#include "steam/isteamutils.h"

#include "steam/isteamuser.h"

#include "steam/steamclientpublic.h"

#include "steam/isteamuserstats.h"

#include "srcpy_steam.h"

#include "tier0/valve_minmax_off.h"

#include "srcpy.h"

#include "tier0/valve_minmax_on.h"

#include "tier0/memdbgon.h"

namespace bp = boost::python;

struct FriendsEnumerateFollowingList_t_wrapper : FriendsEnumerateFollowingList_t, bp::wrapper< FriendsEnumerateFollowingList_t > {

    FriendsEnumerateFollowingList_t_wrapper()
    : FriendsEnumerateFollowingList_t()
      , bp::wrapper< FriendsEnumerateFollowingList_t >(){
        // null constructor
        
    }

    static pyplusplus::containers::static_sized::array_1_t< ::CSteamID, 50>
    pyplusplus_m_rgSteamID_wrapper( ::FriendsEnumerateFollowingList_t & inst ){
        return pyplusplus::containers::static_sized::array_1_t< ::CSteamID, 50>( inst.m_rgSteamID );
    }

};

struct GameRichPresenceJoinRequested_t_wrapper : GameRichPresenceJoinRequested_t, bp::wrapper< GameRichPresenceJoinRequested_t > {

    GameRichPresenceJoinRequested_t_wrapper()
    : GameRichPresenceJoinRequested_t()
      , bp::wrapper< GameRichPresenceJoinRequested_t >(){
        // null constructor
        
    }

    static pyplusplus::containers::static_sized::array_1_t< char, 256>
    pyplusplus_m_rgchConnect_wrapper( ::GameRichPresenceJoinRequested_t & inst ){
        return pyplusplus::containers::static_sized::array_1_t< char, 256>( inst.m_rgchConnect );
    }

};

struct GameServerChangeRequested_t_wrapper : GameServerChangeRequested_t, bp::wrapper< GameServerChangeRequested_t > {

    GameServerChangeRequested_t_wrapper()
    : GameServerChangeRequested_t()
      , bp::wrapper< GameServerChangeRequested_t >(){
        // null constructor
        
    }

    static pyplusplus::containers::static_sized::array_1_t< char, 64>
    pyplusplus_m_rgchPassword_wrapper( ::GameServerChangeRequested_t & inst ){
        return pyplusplus::containers::static_sized::array_1_t< char, 64>( inst.m_rgchPassword );
    }

    static pyplusplus::containers::static_sized::array_1_t< char, 64>
    pyplusplus_m_rgchServer_wrapper( ::GameServerChangeRequested_t & inst ){
        return pyplusplus::containers::static_sized::array_1_t< char, 64>( inst.m_rgchServer );
    }

};

static boost::python::tuple GetLobbyGameServer_e3badaaa69eb32a59ea528ba9e97e8ee( ::ISteamMatchmaking & inst, ::CSteamID steamIDLobby ){
    unsigned int punGameServerIP2;
    short unsigned int punGameServerPort2;
    CSteamID psteamIDGameServer2;
    bool result = inst.GetLobbyGameServer(steamIDLobby, &punGameServerIP2, &punGameServerPort2, &psteamIDGameServer2);
    return bp::make_tuple( result
                            , punGameServerIP2
                            , punGameServerPort2
                            , psteamIDGameServer2 );
}

struct PySteamMatchmakingPingResponse_wrapper : PySteamMatchmakingPingResponse, bp::wrapper< PySteamMatchmakingPingResponse > {

    PySteamMatchmakingPingResponse_wrapper(PySteamMatchmakingPingResponse const & arg )
    : PySteamMatchmakingPingResponse( arg )
      , bp::wrapper< PySteamMatchmakingPingResponse >(){
        // copy constructor
        
    }

    PySteamMatchmakingPingResponse_wrapper()
    : PySteamMatchmakingPingResponse()
      , bp::wrapper< PySteamMatchmakingPingResponse >(){
        // null constructor
        
    }

    virtual void ServerFailedToRespond(  ) {
        PY_OVERRIDE_CHECK( PySteamMatchmakingPingResponse, ServerFailedToRespond )
        PY_OVERRIDE_LOG( _steam, PySteamMatchmakingPingResponse, ServerFailedToRespond )
        bp::override func_ServerFailedToRespond = this->get_override( "ServerFailedToRespond" );
        if( func_ServerFailedToRespond.ptr() != Py_None )
            try {
                func_ServerFailedToRespond(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PySteamMatchmakingPingResponse::ServerFailedToRespond(  );
            }
        else
            this->PySteamMatchmakingPingResponse::ServerFailedToRespond(  );
    }
    
    void default_ServerFailedToRespond(  ) {
        PySteamMatchmakingPingResponse::ServerFailedToRespond( );
    }

    virtual void ServerResponded( ::gameserveritem_t & server ) {
        PY_OVERRIDE_CHECK( PySteamMatchmakingPingResponse, ServerResponded )
        PY_OVERRIDE_LOG( _steam, PySteamMatchmakingPingResponse, ServerResponded )
        bp::override func_ServerResponded = this->get_override( "ServerResponded" );
        if( func_ServerResponded.ptr() != Py_None )
            try {
                func_ServerResponded( boost::ref(server) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PySteamMatchmakingPingResponse::ServerResponded( server );
            }
        else
            this->PySteamMatchmakingPingResponse::ServerResponded( server );
    }
    
    void default_ServerResponded( ::gameserveritem_t & server ) {
        PySteamMatchmakingPingResponse::ServerResponded( server );
    }

};

struct PySteamMatchmakingPlayersResponse_wrapper : PySteamMatchmakingPlayersResponse, bp::wrapper< PySteamMatchmakingPlayersResponse > {

    PySteamMatchmakingPlayersResponse_wrapper(PySteamMatchmakingPlayersResponse const & arg )
    : PySteamMatchmakingPlayersResponse( arg )
      , bp::wrapper< PySteamMatchmakingPlayersResponse >(){
        // copy constructor
        
    }

    PySteamMatchmakingPlayersResponse_wrapper()
    : PySteamMatchmakingPlayersResponse()
      , bp::wrapper< PySteamMatchmakingPlayersResponse >(){
        // null constructor
        
    }

    virtual void AddPlayerToList( char const * pchName, int nScore, float flTimePlayed ) {
        PY_OVERRIDE_CHECK( PySteamMatchmakingPlayersResponse, AddPlayerToList )
        PY_OVERRIDE_LOG( _steam, PySteamMatchmakingPlayersResponse, AddPlayerToList )
        bp::override func_AddPlayerToList = this->get_override( "AddPlayerToList" );
        if( func_AddPlayerToList.ptr() != Py_None )
            try {
                func_AddPlayerToList( pchName, nScore, flTimePlayed );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PySteamMatchmakingPlayersResponse::AddPlayerToList( pchName, nScore, flTimePlayed );
            }
        else
            this->PySteamMatchmakingPlayersResponse::AddPlayerToList( pchName, nScore, flTimePlayed );
    }
    
    void default_AddPlayerToList( char const * pchName, int nScore, float flTimePlayed ) {
        PySteamMatchmakingPlayersResponse::AddPlayerToList( pchName, nScore, flTimePlayed );
    }

    virtual void PlayersFailedToRespond(  ) {
        PY_OVERRIDE_CHECK( PySteamMatchmakingPlayersResponse, PlayersFailedToRespond )
        PY_OVERRIDE_LOG( _steam, PySteamMatchmakingPlayersResponse, PlayersFailedToRespond )
        bp::override func_PlayersFailedToRespond = this->get_override( "PlayersFailedToRespond" );
        if( func_PlayersFailedToRespond.ptr() != Py_None )
            try {
                func_PlayersFailedToRespond(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PySteamMatchmakingPlayersResponse::PlayersFailedToRespond(  );
            }
        else
            this->PySteamMatchmakingPlayersResponse::PlayersFailedToRespond(  );
    }
    
    void default_PlayersFailedToRespond(  ) {
        PySteamMatchmakingPlayersResponse::PlayersFailedToRespond( );
    }

    virtual void PlayersRefreshComplete(  ) {
        PY_OVERRIDE_CHECK( PySteamMatchmakingPlayersResponse, PlayersRefreshComplete )
        PY_OVERRIDE_LOG( _steam, PySteamMatchmakingPlayersResponse, PlayersRefreshComplete )
        bp::override func_PlayersRefreshComplete = this->get_override( "PlayersRefreshComplete" );
        if( func_PlayersRefreshComplete.ptr() != Py_None )
            try {
                func_PlayersRefreshComplete(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PySteamMatchmakingPlayersResponse::PlayersRefreshComplete(  );
            }
        else
            this->PySteamMatchmakingPlayersResponse::PlayersRefreshComplete(  );
    }
    
    void default_PlayersRefreshComplete(  ) {
        PySteamMatchmakingPlayersResponse::PlayersRefreshComplete( );
    }

};

struct PySteamMatchmakingRulesResponse_wrapper : PySteamMatchmakingRulesResponse, bp::wrapper< PySteamMatchmakingRulesResponse > {

    PySteamMatchmakingRulesResponse_wrapper(PySteamMatchmakingRulesResponse const & arg )
    : PySteamMatchmakingRulesResponse( arg )
      , bp::wrapper< PySteamMatchmakingRulesResponse >(){
        // copy constructor
        
    }

    PySteamMatchmakingRulesResponse_wrapper()
    : PySteamMatchmakingRulesResponse()
      , bp::wrapper< PySteamMatchmakingRulesResponse >(){
        // null constructor
        
    }

    virtual void RulesFailedToRespond(  ) {
        PY_OVERRIDE_CHECK( PySteamMatchmakingRulesResponse, RulesFailedToRespond )
        PY_OVERRIDE_LOG( _steam, PySteamMatchmakingRulesResponse, RulesFailedToRespond )
        bp::override func_RulesFailedToRespond = this->get_override( "RulesFailedToRespond" );
        if( func_RulesFailedToRespond.ptr() != Py_None )
            try {
                func_RulesFailedToRespond(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PySteamMatchmakingRulesResponse::RulesFailedToRespond(  );
            }
        else
            this->PySteamMatchmakingRulesResponse::RulesFailedToRespond(  );
    }
    
    void default_RulesFailedToRespond(  ) {
        PySteamMatchmakingRulesResponse::RulesFailedToRespond( );
    }

    virtual void RulesRefreshComplete(  ) {
        PY_OVERRIDE_CHECK( PySteamMatchmakingRulesResponse, RulesRefreshComplete )
        PY_OVERRIDE_LOG( _steam, PySteamMatchmakingRulesResponse, RulesRefreshComplete )
        bp::override func_RulesRefreshComplete = this->get_override( "RulesRefreshComplete" );
        if( func_RulesRefreshComplete.ptr() != Py_None )
            try {
                func_RulesRefreshComplete(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PySteamMatchmakingRulesResponse::RulesRefreshComplete(  );
            }
        else
            this->PySteamMatchmakingRulesResponse::RulesRefreshComplete(  );
    }
    
    void default_RulesRefreshComplete(  ) {
        PySteamMatchmakingRulesResponse::RulesRefreshComplete( );
    }

    virtual void RulesResponded( char const * pchRule, char const * pchValue ) {
        PY_OVERRIDE_CHECK( PySteamMatchmakingRulesResponse, RulesResponded )
        PY_OVERRIDE_LOG( _steam, PySteamMatchmakingRulesResponse, RulesResponded )
        bp::override func_RulesResponded = this->get_override( "RulesResponded" );
        if( func_RulesResponded.ptr() != Py_None )
            try {
                func_RulesResponded( pchRule, pchValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PySteamMatchmakingRulesResponse::RulesResponded( pchRule, pchValue );
            }
        else
            this->PySteamMatchmakingRulesResponse::RulesResponded( pchRule, pchValue );
    }
    
    void default_RulesResponded( char const * pchRule, char const * pchValue ) {
        PySteamMatchmakingRulesResponse::RulesResponded( pchRule, pchValue );
    }

};

struct PySteamMatchmakingServerListResponse_wrapper : PySteamMatchmakingServerListResponse, bp::wrapper< PySteamMatchmakingServerListResponse > {

    PySteamMatchmakingServerListResponse_wrapper(PySteamMatchmakingServerListResponse const & arg )
    : PySteamMatchmakingServerListResponse( arg )
      , bp::wrapper< PySteamMatchmakingServerListResponse >(){
        // copy constructor
        
    }

    PySteamMatchmakingServerListResponse_wrapper()
    : PySteamMatchmakingServerListResponse()
      , bp::wrapper< PySteamMatchmakingServerListResponse >(){
        // null constructor
        
    }

    virtual void PyRefreshComplete( int hRequest, ::EMatchMakingServerResponse response ) {
        PY_OVERRIDE_CHECK( PySteamMatchmakingServerListResponse, PyRefreshComplete )
        PY_OVERRIDE_LOG( _steam, PySteamMatchmakingServerListResponse, PyRefreshComplete )
        bp::override func_RefreshComplete = this->get_override( "RefreshComplete" );
        if( func_RefreshComplete.ptr() != Py_None )
            try {
                func_RefreshComplete( hRequest, response );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PySteamMatchmakingServerListResponse::PyRefreshComplete( hRequest, response );
            }
        else
            this->PySteamMatchmakingServerListResponse::PyRefreshComplete( hRequest, response );
    }
    
    void default_RefreshComplete( int hRequest, ::EMatchMakingServerResponse response ) {
        PySteamMatchmakingServerListResponse::PyRefreshComplete( hRequest, response );
    }

    virtual void PyServerFailedToRespond( int hRequest, int iServer ) {
        PY_OVERRIDE_CHECK( PySteamMatchmakingServerListResponse, PyServerFailedToRespond )
        PY_OVERRIDE_LOG( _steam, PySteamMatchmakingServerListResponse, PyServerFailedToRespond )
        bp::override func_ServerFailedToRespond = this->get_override( "ServerFailedToRespond" );
        if( func_ServerFailedToRespond.ptr() != Py_None )
            try {
                func_ServerFailedToRespond( hRequest, iServer );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PySteamMatchmakingServerListResponse::PyServerFailedToRespond( hRequest, iServer );
            }
        else
            this->PySteamMatchmakingServerListResponse::PyServerFailedToRespond( hRequest, iServer );
    }
    
    void default_ServerFailedToRespond( int hRequest, int iServer ) {
        PySteamMatchmakingServerListResponse::PyServerFailedToRespond( hRequest, iServer );
    }

    virtual void PyServerResponded( int hRequest, int iServer ) {
        PY_OVERRIDE_CHECK( PySteamMatchmakingServerListResponse, PyServerResponded )
        PY_OVERRIDE_LOG( _steam, PySteamMatchmakingServerListResponse, PyServerResponded )
        bp::override func_ServerResponded = this->get_override( "ServerResponded" );
        if( func_ServerResponded.ptr() != Py_None )
            try {
                func_ServerResponded( hRequest, iServer );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PySteamMatchmakingServerListResponse::PyServerResponded( hRequest, iServer );
            }
        else
            this->PySteamMatchmakingServerListResponse::PyServerResponded( hRequest, iServer );
    }
    
    void default_ServerResponded( int hRequest, int iServer ) {
        PySteamMatchmakingServerListResponse::PyServerResponded( hRequest, iServer );
    }

};

static bp::tuple GetCurrentBetaName_44cfc773ce5b4e98b34b5a2219de76ad( ::ISteamApps & inst ){
    char buf[1024];
    bool rv = inst.GetCurrentBetaName( buf, sizeof(buf) );
    return bp::make_tuple( rv, bp::object( buf ) );
}

PY_STEAM_CALLBACK_WRAPPER( PersonaStateChange, PersonaStateChange_t );

struct PersonaStateChangeCallback_wrapper : PersonaStateChangeCallback, bp::wrapper< PersonaStateChangeCallback > {

    PersonaStateChangeCallback_wrapper()
    : PersonaStateChangeCallback()
      , bp::wrapper< PersonaStateChangeCallback >(){
        // constructor
    
    }

    virtual void OnPersonaStateChange( ::PersonaStateChange_t * pData ) {
        PY_OVERRIDE_CHECK( PersonaStateChangeCallback, OnPersonaStateChange )
        PY_OVERRIDE_LOG( _steam, PersonaStateChangeCallback, OnPersonaStateChange )
        bp::override func_OnPersonaStateChange = this->get_override( "OnPersonaStateChange" );
        if( func_OnPersonaStateChange.ptr() != Py_None )
            try {
                func_OnPersonaStateChange( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->PersonaStateChangeCallback::OnPersonaStateChange( pData );
            }
        else
            this->PersonaStateChangeCallback::OnPersonaStateChange( pData );
    }
    
    void default_OnPersonaStateChange( ::PersonaStateChange_t * pData ) {
        PersonaStateChangeCallback::OnPersonaStateChange( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( GameOverlayActivated, GameOverlayActivated_t );

struct GameOverlayActivatedCallback_wrapper : GameOverlayActivatedCallback, bp::wrapper< GameOverlayActivatedCallback > {

    GameOverlayActivatedCallback_wrapper()
    : GameOverlayActivatedCallback()
      , bp::wrapper< GameOverlayActivatedCallback >(){
        // constructor
    
    }

    virtual void OnGameOverlayActivated( ::GameOverlayActivated_t * pData ) {
        PY_OVERRIDE_CHECK( GameOverlayActivatedCallback, OnGameOverlayActivated )
        PY_OVERRIDE_LOG( _steam, GameOverlayActivatedCallback, OnGameOverlayActivated )
        bp::override func_OnGameOverlayActivated = this->get_override( "OnGameOverlayActivated" );
        if( func_OnGameOverlayActivated.ptr() != Py_None )
            try {
                func_OnGameOverlayActivated( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->GameOverlayActivatedCallback::OnGameOverlayActivated( pData );
            }
        else
            this->GameOverlayActivatedCallback::OnGameOverlayActivated( pData );
    }
    
    void default_OnGameOverlayActivated( ::GameOverlayActivated_t * pData ) {
        GameOverlayActivatedCallback::OnGameOverlayActivated( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( GameServerChangeRequested, GameServerChangeRequested_t );

struct GameServerChangeRequestedCallback_wrapper : GameServerChangeRequestedCallback, bp::wrapper< GameServerChangeRequestedCallback > {

    GameServerChangeRequestedCallback_wrapper()
    : GameServerChangeRequestedCallback()
      , bp::wrapper< GameServerChangeRequestedCallback >(){
        // constructor
    
    }

    virtual void OnGameServerChangeRequested( ::GameServerChangeRequested_t * pData ) {
        PY_OVERRIDE_CHECK( GameServerChangeRequestedCallback, OnGameServerChangeRequested )
        PY_OVERRIDE_LOG( _steam, GameServerChangeRequestedCallback, OnGameServerChangeRequested )
        bp::override func_OnGameServerChangeRequested = this->get_override( "OnGameServerChangeRequested" );
        if( func_OnGameServerChangeRequested.ptr() != Py_None )
            try {
                func_OnGameServerChangeRequested( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->GameServerChangeRequestedCallback::OnGameServerChangeRequested( pData );
            }
        else
            this->GameServerChangeRequestedCallback::OnGameServerChangeRequested( pData );
    }
    
    void default_OnGameServerChangeRequested( ::GameServerChangeRequested_t * pData ) {
        GameServerChangeRequestedCallback::OnGameServerChangeRequested( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( GameLobbyJoinRequested, GameLobbyJoinRequested_t );

struct GameLobbyJoinRequestedCallback_wrapper : GameLobbyJoinRequestedCallback, bp::wrapper< GameLobbyJoinRequestedCallback > {

    GameLobbyJoinRequestedCallback_wrapper()
    : GameLobbyJoinRequestedCallback()
      , bp::wrapper< GameLobbyJoinRequestedCallback >(){
        // constructor
    
    }

    virtual void OnGameLobbyJoinRequested( ::GameLobbyJoinRequested_t * pData ) {
        PY_OVERRIDE_CHECK( GameLobbyJoinRequestedCallback, OnGameLobbyJoinRequested )
        PY_OVERRIDE_LOG( _steam, GameLobbyJoinRequestedCallback, OnGameLobbyJoinRequested )
        bp::override func_OnGameLobbyJoinRequested = this->get_override( "OnGameLobbyJoinRequested" );
        if( func_OnGameLobbyJoinRequested.ptr() != Py_None )
            try {
                func_OnGameLobbyJoinRequested( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->GameLobbyJoinRequestedCallback::OnGameLobbyJoinRequested( pData );
            }
        else
            this->GameLobbyJoinRequestedCallback::OnGameLobbyJoinRequested( pData );
    }
    
    void default_OnGameLobbyJoinRequested( ::GameLobbyJoinRequested_t * pData ) {
        GameLobbyJoinRequestedCallback::OnGameLobbyJoinRequested( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( AvatarImageLoaded, AvatarImageLoaded_t );

struct AvatarImageLoadedCallback_wrapper : AvatarImageLoadedCallback, bp::wrapper< AvatarImageLoadedCallback > {

    AvatarImageLoadedCallback_wrapper()
    : AvatarImageLoadedCallback()
      , bp::wrapper< AvatarImageLoadedCallback >(){
        // constructor
    
    }

    virtual void OnAvatarImageLoaded( ::AvatarImageLoaded_t * pData ) {
        PY_OVERRIDE_CHECK( AvatarImageLoadedCallback, OnAvatarImageLoaded )
        PY_OVERRIDE_LOG( _steam, AvatarImageLoadedCallback, OnAvatarImageLoaded )
        bp::override func_OnAvatarImageLoaded = this->get_override( "OnAvatarImageLoaded" );
        if( func_OnAvatarImageLoaded.ptr() != Py_None )
            try {
                func_OnAvatarImageLoaded( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->AvatarImageLoadedCallback::OnAvatarImageLoaded( pData );
            }
        else
            this->AvatarImageLoadedCallback::OnAvatarImageLoaded( pData );
    }
    
    void default_OnAvatarImageLoaded( ::AvatarImageLoaded_t * pData ) {
        AvatarImageLoadedCallback::OnAvatarImageLoaded( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( ClanOfficerListResponse, ClanOfficerListResponse_t );

struct ClanOfficerListResponseCallback_wrapper : ClanOfficerListResponseCallback, bp::wrapper< ClanOfficerListResponseCallback > {

    ClanOfficerListResponseCallback_wrapper()
    : ClanOfficerListResponseCallback()
      , bp::wrapper< ClanOfficerListResponseCallback >(){
        // constructor
    
    }

    virtual void OnClanOfficerListResponse( ::ClanOfficerListResponse_t * pData ) {
        PY_OVERRIDE_CHECK( ClanOfficerListResponseCallback, OnClanOfficerListResponse )
        PY_OVERRIDE_LOG( _steam, ClanOfficerListResponseCallback, OnClanOfficerListResponse )
        bp::override func_OnClanOfficerListResponse = this->get_override( "OnClanOfficerListResponse" );
        if( func_OnClanOfficerListResponse.ptr() != Py_None )
            try {
                func_OnClanOfficerListResponse( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->ClanOfficerListResponseCallback::OnClanOfficerListResponse( pData );
            }
        else
            this->ClanOfficerListResponseCallback::OnClanOfficerListResponse( pData );
    }
    
    void default_OnClanOfficerListResponse( ::ClanOfficerListResponse_t * pData ) {
        ClanOfficerListResponseCallback::OnClanOfficerListResponse( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( FriendRichPresenceUpdate, FriendRichPresenceUpdate_t );

struct FriendRichPresenceUpdateCallback_wrapper : FriendRichPresenceUpdateCallback, bp::wrapper< FriendRichPresenceUpdateCallback > {

    FriendRichPresenceUpdateCallback_wrapper()
    : FriendRichPresenceUpdateCallback()
      , bp::wrapper< FriendRichPresenceUpdateCallback >(){
        // constructor
    
    }

    virtual void OnFriendRichPresenceUpdate( ::FriendRichPresenceUpdate_t * pData ) {
        PY_OVERRIDE_CHECK( FriendRichPresenceUpdateCallback, OnFriendRichPresenceUpdate )
        PY_OVERRIDE_LOG( _steam, FriendRichPresenceUpdateCallback, OnFriendRichPresenceUpdate )
        bp::override func_OnFriendRichPresenceUpdate = this->get_override( "OnFriendRichPresenceUpdate" );
        if( func_OnFriendRichPresenceUpdate.ptr() != Py_None )
            try {
                func_OnFriendRichPresenceUpdate( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->FriendRichPresenceUpdateCallback::OnFriendRichPresenceUpdate( pData );
            }
        else
            this->FriendRichPresenceUpdateCallback::OnFriendRichPresenceUpdate( pData );
    }
    
    void default_OnFriendRichPresenceUpdate( ::FriendRichPresenceUpdate_t * pData ) {
        FriendRichPresenceUpdateCallback::OnFriendRichPresenceUpdate( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( GameRichPresenceJoinRequested, GameRichPresenceJoinRequested_t );

struct GameRichPresenceJoinRequestedCallback_wrapper : GameRichPresenceJoinRequestedCallback, bp::wrapper< GameRichPresenceJoinRequestedCallback > {

    GameRichPresenceJoinRequestedCallback_wrapper()
    : GameRichPresenceJoinRequestedCallback()
      , bp::wrapper< GameRichPresenceJoinRequestedCallback >(){
        // constructor
    
    }

    virtual void OnGameRichPresenceJoinRequested( ::GameRichPresenceJoinRequested_t * pData ) {
        PY_OVERRIDE_CHECK( GameRichPresenceJoinRequestedCallback, OnGameRichPresenceJoinRequested )
        PY_OVERRIDE_LOG( _steam, GameRichPresenceJoinRequestedCallback, OnGameRichPresenceJoinRequested )
        bp::override func_OnGameRichPresenceJoinRequested = this->get_override( "OnGameRichPresenceJoinRequested" );
        if( func_OnGameRichPresenceJoinRequested.ptr() != Py_None )
            try {
                func_OnGameRichPresenceJoinRequested( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->GameRichPresenceJoinRequestedCallback::OnGameRichPresenceJoinRequested( pData );
            }
        else
            this->GameRichPresenceJoinRequestedCallback::OnGameRichPresenceJoinRequested( pData );
    }
    
    void default_OnGameRichPresenceJoinRequested( ::GameRichPresenceJoinRequested_t * pData ) {
        GameRichPresenceJoinRequestedCallback::OnGameRichPresenceJoinRequested( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( GameConnectedClanChatMsg, GameConnectedClanChatMsg_t );

struct GameConnectedClanChatMsgCallback_wrapper : GameConnectedClanChatMsgCallback, bp::wrapper< GameConnectedClanChatMsgCallback > {

    GameConnectedClanChatMsgCallback_wrapper()
    : GameConnectedClanChatMsgCallback()
      , bp::wrapper< GameConnectedClanChatMsgCallback >(){
        // constructor
    
    }

    virtual void OnGameConnectedClanChatMsg( ::GameConnectedClanChatMsg_t * pData ) {
        PY_OVERRIDE_CHECK( GameConnectedClanChatMsgCallback, OnGameConnectedClanChatMsg )
        PY_OVERRIDE_LOG( _steam, GameConnectedClanChatMsgCallback, OnGameConnectedClanChatMsg )
        bp::override func_OnGameConnectedClanChatMsg = this->get_override( "OnGameConnectedClanChatMsg" );
        if( func_OnGameConnectedClanChatMsg.ptr() != Py_None )
            try {
                func_OnGameConnectedClanChatMsg( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->GameConnectedClanChatMsgCallback::OnGameConnectedClanChatMsg( pData );
            }
        else
            this->GameConnectedClanChatMsgCallback::OnGameConnectedClanChatMsg( pData );
    }
    
    void default_OnGameConnectedClanChatMsg( ::GameConnectedClanChatMsg_t * pData ) {
        GameConnectedClanChatMsgCallback::OnGameConnectedClanChatMsg( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( GameConnectedChatJoin, GameConnectedChatJoin_t );

struct GameConnectedChatJoinCallback_wrapper : GameConnectedChatJoinCallback, bp::wrapper< GameConnectedChatJoinCallback > {

    GameConnectedChatJoinCallback_wrapper()
    : GameConnectedChatJoinCallback()
      , bp::wrapper< GameConnectedChatJoinCallback >(){
        // constructor
    
    }

    virtual void OnGameConnectedChatJoin( ::GameConnectedChatJoin_t * pData ) {
        PY_OVERRIDE_CHECK( GameConnectedChatJoinCallback, OnGameConnectedChatJoin )
        PY_OVERRIDE_LOG( _steam, GameConnectedChatJoinCallback, OnGameConnectedChatJoin )
        bp::override func_OnGameConnectedChatJoin = this->get_override( "OnGameConnectedChatJoin" );
        if( func_OnGameConnectedChatJoin.ptr() != Py_None )
            try {
                func_OnGameConnectedChatJoin( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->GameConnectedChatJoinCallback::OnGameConnectedChatJoin( pData );
            }
        else
            this->GameConnectedChatJoinCallback::OnGameConnectedChatJoin( pData );
    }
    
    void default_OnGameConnectedChatJoin( ::GameConnectedChatJoin_t * pData ) {
        GameConnectedChatJoinCallback::OnGameConnectedChatJoin( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( GameConnectedChatLeave, GameConnectedChatLeave_t );

struct GameConnectedChatLeaveCallback_wrapper : GameConnectedChatLeaveCallback, bp::wrapper< GameConnectedChatLeaveCallback > {

    GameConnectedChatLeaveCallback_wrapper()
    : GameConnectedChatLeaveCallback()
      , bp::wrapper< GameConnectedChatLeaveCallback >(){
        // constructor
    
    }

    virtual void OnGameConnectedChatLeave( ::GameConnectedChatLeave_t * pData ) {
        PY_OVERRIDE_CHECK( GameConnectedChatLeaveCallback, OnGameConnectedChatLeave )
        PY_OVERRIDE_LOG( _steam, GameConnectedChatLeaveCallback, OnGameConnectedChatLeave )
        bp::override func_OnGameConnectedChatLeave = this->get_override( "OnGameConnectedChatLeave" );
        if( func_OnGameConnectedChatLeave.ptr() != Py_None )
            try {
                func_OnGameConnectedChatLeave( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->GameConnectedChatLeaveCallback::OnGameConnectedChatLeave( pData );
            }
        else
            this->GameConnectedChatLeaveCallback::OnGameConnectedChatLeave( pData );
    }
    
    void default_OnGameConnectedChatLeave( ::GameConnectedChatLeave_t * pData ) {
        GameConnectedChatLeaveCallback::OnGameConnectedChatLeave( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( DownloadClanActivityCountsResult, DownloadClanActivityCountsResult_t );

struct DownloadClanActivityCountsResultCallback_wrapper : DownloadClanActivityCountsResultCallback, bp::wrapper< DownloadClanActivityCountsResultCallback > {

    DownloadClanActivityCountsResultCallback_wrapper()
    : DownloadClanActivityCountsResultCallback()
      , bp::wrapper< DownloadClanActivityCountsResultCallback >(){
        // constructor
    
    }

    virtual void OnDownloadClanActivityCountsResult( ::DownloadClanActivityCountsResult_t * pData ) {
        PY_OVERRIDE_CHECK( DownloadClanActivityCountsResultCallback, OnDownloadClanActivityCountsResult )
        PY_OVERRIDE_LOG( _steam, DownloadClanActivityCountsResultCallback, OnDownloadClanActivityCountsResult )
        bp::override func_OnDownloadClanActivityCountsResult = this->get_override( "OnDownloadClanActivityCountsResult" );
        if( func_OnDownloadClanActivityCountsResult.ptr() != Py_None )
            try {
                func_OnDownloadClanActivityCountsResult( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->DownloadClanActivityCountsResultCallback::OnDownloadClanActivityCountsResult( pData );
            }
        else
            this->DownloadClanActivityCountsResultCallback::OnDownloadClanActivityCountsResult( pData );
    }
    
    void default_OnDownloadClanActivityCountsResult( ::DownloadClanActivityCountsResult_t * pData ) {
        DownloadClanActivityCountsResultCallback::OnDownloadClanActivityCountsResult( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( JoinClanChatRoomCompletionResult, JoinClanChatRoomCompletionResult_t );

struct JoinClanChatRoomCompletionResultCallback_wrapper : JoinClanChatRoomCompletionResultCallback, bp::wrapper< JoinClanChatRoomCompletionResultCallback > {

    JoinClanChatRoomCompletionResultCallback_wrapper()
    : JoinClanChatRoomCompletionResultCallback()
      , bp::wrapper< JoinClanChatRoomCompletionResultCallback >(){
        // constructor
    
    }

    virtual void OnJoinClanChatRoomCompletionResult( ::JoinClanChatRoomCompletionResult_t * pData ) {
        PY_OVERRIDE_CHECK( JoinClanChatRoomCompletionResultCallback, OnJoinClanChatRoomCompletionResult )
        PY_OVERRIDE_LOG( _steam, JoinClanChatRoomCompletionResultCallback, OnJoinClanChatRoomCompletionResult )
        bp::override func_OnJoinClanChatRoomCompletionResult = this->get_override( "OnJoinClanChatRoomCompletionResult" );
        if( func_OnJoinClanChatRoomCompletionResult.ptr() != Py_None )
            try {
                func_OnJoinClanChatRoomCompletionResult( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->JoinClanChatRoomCompletionResultCallback::OnJoinClanChatRoomCompletionResult( pData );
            }
        else
            this->JoinClanChatRoomCompletionResultCallback::OnJoinClanChatRoomCompletionResult( pData );
    }
    
    void default_OnJoinClanChatRoomCompletionResult( ::JoinClanChatRoomCompletionResult_t * pData ) {
        JoinClanChatRoomCompletionResultCallback::OnJoinClanChatRoomCompletionResult( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( GameConnectedFriendChatMsg, GameConnectedFriendChatMsg_t );

struct GameConnectedFriendChatMsgCallback_wrapper : GameConnectedFriendChatMsgCallback, bp::wrapper< GameConnectedFriendChatMsgCallback > {

    GameConnectedFriendChatMsgCallback_wrapper()
    : GameConnectedFriendChatMsgCallback()
      , bp::wrapper< GameConnectedFriendChatMsgCallback >(){
        // constructor
    
    }

    virtual void OnGameConnectedFriendChatMsg( ::GameConnectedFriendChatMsg_t * pData ) {
        PY_OVERRIDE_CHECK( GameConnectedFriendChatMsgCallback, OnGameConnectedFriendChatMsg )
        PY_OVERRIDE_LOG( _steam, GameConnectedFriendChatMsgCallback, OnGameConnectedFriendChatMsg )
        bp::override func_OnGameConnectedFriendChatMsg = this->get_override( "OnGameConnectedFriendChatMsg" );
        if( func_OnGameConnectedFriendChatMsg.ptr() != Py_None )
            try {
                func_OnGameConnectedFriendChatMsg( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->GameConnectedFriendChatMsgCallback::OnGameConnectedFriendChatMsg( pData );
            }
        else
            this->GameConnectedFriendChatMsgCallback::OnGameConnectedFriendChatMsg( pData );
    }
    
    void default_OnGameConnectedFriendChatMsg( ::GameConnectedFriendChatMsg_t * pData ) {
        GameConnectedFriendChatMsgCallback::OnGameConnectedFriendChatMsg( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( FriendsGetFollowerCount, FriendsGetFollowerCount_t );

struct FriendsGetFollowerCountCallback_wrapper : FriendsGetFollowerCountCallback, bp::wrapper< FriendsGetFollowerCountCallback > {

    FriendsGetFollowerCountCallback_wrapper()
    : FriendsGetFollowerCountCallback()
      , bp::wrapper< FriendsGetFollowerCountCallback >(){
        // constructor
    
    }

    virtual void OnFriendsGetFollowerCount( ::FriendsGetFollowerCount_t * pData ) {
        PY_OVERRIDE_CHECK( FriendsGetFollowerCountCallback, OnFriendsGetFollowerCount )
        PY_OVERRIDE_LOG( _steam, FriendsGetFollowerCountCallback, OnFriendsGetFollowerCount )
        bp::override func_OnFriendsGetFollowerCount = this->get_override( "OnFriendsGetFollowerCount" );
        if( func_OnFriendsGetFollowerCount.ptr() != Py_None )
            try {
                func_OnFriendsGetFollowerCount( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->FriendsGetFollowerCountCallback::OnFriendsGetFollowerCount( pData );
            }
        else
            this->FriendsGetFollowerCountCallback::OnFriendsGetFollowerCount( pData );
    }
    
    void default_OnFriendsGetFollowerCount( ::FriendsGetFollowerCount_t * pData ) {
        FriendsGetFollowerCountCallback::OnFriendsGetFollowerCount( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( FriendsIsFollowing, FriendsIsFollowing_t );

struct FriendsIsFollowingCallback_wrapper : FriendsIsFollowingCallback, bp::wrapper< FriendsIsFollowingCallback > {

    FriendsIsFollowingCallback_wrapper()
    : FriendsIsFollowingCallback()
      , bp::wrapper< FriendsIsFollowingCallback >(){
        // constructor
    
    }

    virtual void OnFriendsIsFollowing( ::FriendsIsFollowing_t * pData ) {
        PY_OVERRIDE_CHECK( FriendsIsFollowingCallback, OnFriendsIsFollowing )
        PY_OVERRIDE_LOG( _steam, FriendsIsFollowingCallback, OnFriendsIsFollowing )
        bp::override func_OnFriendsIsFollowing = this->get_override( "OnFriendsIsFollowing" );
        if( func_OnFriendsIsFollowing.ptr() != Py_None )
            try {
                func_OnFriendsIsFollowing( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->FriendsIsFollowingCallback::OnFriendsIsFollowing( pData );
            }
        else
            this->FriendsIsFollowingCallback::OnFriendsIsFollowing( pData );
    }
    
    void default_OnFriendsIsFollowing( ::FriendsIsFollowing_t * pData ) {
        FriendsIsFollowingCallback::OnFriendsIsFollowing( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( FriendsEnumerateFollowingList, FriendsEnumerateFollowingList_t );

struct FriendsEnumerateFollowingListCallback_wrapper : FriendsEnumerateFollowingListCallback, bp::wrapper< FriendsEnumerateFollowingListCallback > {

    FriendsEnumerateFollowingListCallback_wrapper()
    : FriendsEnumerateFollowingListCallback()
      , bp::wrapper< FriendsEnumerateFollowingListCallback >(){
        // constructor
    
    }

    virtual void OnFriendsEnumerateFollowingList( ::FriendsEnumerateFollowingList_t * pData ) {
        PY_OVERRIDE_CHECK( FriendsEnumerateFollowingListCallback, OnFriendsEnumerateFollowingList )
        PY_OVERRIDE_LOG( _steam, FriendsEnumerateFollowingListCallback, OnFriendsEnumerateFollowingList )
        bp::override func_OnFriendsEnumerateFollowingList = this->get_override( "OnFriendsEnumerateFollowingList" );
        if( func_OnFriendsEnumerateFollowingList.ptr() != Py_None )
            try {
                func_OnFriendsEnumerateFollowingList( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->FriendsEnumerateFollowingListCallback::OnFriendsEnumerateFollowingList( pData );
            }
        else
            this->FriendsEnumerateFollowingListCallback::OnFriendsEnumerateFollowingList( pData );
    }
    
    void default_OnFriendsEnumerateFollowingList( ::FriendsEnumerateFollowingList_t * pData ) {
        FriendsEnumerateFollowingListCallback::OnFriendsEnumerateFollowingList( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( SetPersonaNameResponse, SetPersonaNameResponse_t );

struct SetPersonaNameResponseCallback_wrapper : SetPersonaNameResponseCallback, bp::wrapper< SetPersonaNameResponseCallback > {

    SetPersonaNameResponseCallback_wrapper()
    : SetPersonaNameResponseCallback()
      , bp::wrapper< SetPersonaNameResponseCallback >(){
        // constructor
    
    }

    virtual void OnSetPersonaNameResponse( ::SetPersonaNameResponse_t * pData ) {
        PY_OVERRIDE_CHECK( SetPersonaNameResponseCallback, OnSetPersonaNameResponse )
        PY_OVERRIDE_LOG( _steam, SetPersonaNameResponseCallback, OnSetPersonaNameResponse )
        bp::override func_OnSetPersonaNameResponse = this->get_override( "OnSetPersonaNameResponse" );
        if( func_OnSetPersonaNameResponse.ptr() != Py_None )
            try {
                func_OnSetPersonaNameResponse( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->SetPersonaNameResponseCallback::OnSetPersonaNameResponse( pData );
            }
        else
            this->SetPersonaNameResponseCallback::OnSetPersonaNameResponse( pData );
    }
    
    void default_OnSetPersonaNameResponse( ::SetPersonaNameResponse_t * pData ) {
        SetPersonaNameResponseCallback::OnSetPersonaNameResponse( pData );
    }
};

PY_STEAM_CALLRESULT_WRAPPER( LobbyMatchList, LobbyMatchList_t );

struct LobbyMatchListCallResult_wrapper : LobbyMatchListCallResult, bp::wrapper< LobbyMatchListCallResult > {

    LobbyMatchListCallResult_wrapper(::SteamAPICall_t steamapicall )
    : LobbyMatchListCallResult( steamapicall )
      , bp::wrapper< LobbyMatchListCallResult >(){
        // constructor
    }

    virtual void OnLobbyMatchList( ::LobbyMatchList_t * pData, bool bIOFailure ) {
        PY_OVERRIDE_CHECK( LobbyMatchListCallResult, OnLobbyMatchList )
        PY_OVERRIDE_LOG( _steam, LobbyMatchListCallResult, OnLobbyMatchList )
        bp::override func_OnLobbyMatchList = this->get_override( "OnLobbyMatchList" );
        if( func_OnLobbyMatchList.ptr() != Py_None )
            try {
                func_OnLobbyMatchList( boost::python::ptr(pData), bIOFailure );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->LobbyMatchListCallResult::OnLobbyMatchList( pData, bIOFailure );
            }
        else
            this->LobbyMatchListCallResult::OnLobbyMatchList( pData, bIOFailure );
    }
    
    void default_OnLobbyMatchList( ::LobbyMatchList_t * pData, bool bIOFailure ) {
        LobbyMatchListCallResult::OnLobbyMatchList( pData, bIOFailure );
    }
};

PY_STEAM_CALLRESULT_WRAPPER( LobbyGameCreated, LobbyGameCreated_t );

struct LobbyGameCreatedCallResult_wrapper : LobbyGameCreatedCallResult, bp::wrapper< LobbyGameCreatedCallResult > {

    LobbyGameCreatedCallResult_wrapper(::SteamAPICall_t steamapicall )
    : LobbyGameCreatedCallResult( steamapicall )
      , bp::wrapper< LobbyGameCreatedCallResult >(){
        // constructor
    }

    virtual void OnLobbyGameCreated( ::LobbyGameCreated_t * pData, bool bIOFailure ) {
        PY_OVERRIDE_CHECK( LobbyGameCreatedCallResult, OnLobbyGameCreated )
        PY_OVERRIDE_LOG( _steam, LobbyGameCreatedCallResult, OnLobbyGameCreated )
        bp::override func_OnLobbyGameCreated = this->get_override( "OnLobbyGameCreated" );
        if( func_OnLobbyGameCreated.ptr() != Py_None )
            try {
                func_OnLobbyGameCreated( boost::python::ptr(pData), bIOFailure );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->LobbyGameCreatedCallResult::OnLobbyGameCreated( pData, bIOFailure );
            }
        else
            this->LobbyGameCreatedCallResult::OnLobbyGameCreated( pData, bIOFailure );
    }
    
    void default_OnLobbyGameCreated( ::LobbyGameCreated_t * pData, bool bIOFailure ) {
        LobbyGameCreatedCallResult::OnLobbyGameCreated( pData, bIOFailure );
    }
};

PY_STEAM_CALLRESULT_WRAPPER( LobbyCreated, LobbyCreated_t );

struct LobbyCreatedCallResult_wrapper : LobbyCreatedCallResult, bp::wrapper< LobbyCreatedCallResult > {

    LobbyCreatedCallResult_wrapper(::SteamAPICall_t steamapicall )
    : LobbyCreatedCallResult( steamapicall )
      , bp::wrapper< LobbyCreatedCallResult >(){
        // constructor
    }

    virtual void OnLobbyCreated( ::LobbyCreated_t * pData, bool bIOFailure ) {
        PY_OVERRIDE_CHECK( LobbyCreatedCallResult, OnLobbyCreated )
        PY_OVERRIDE_LOG( _steam, LobbyCreatedCallResult, OnLobbyCreated )
        bp::override func_OnLobbyCreated = this->get_override( "OnLobbyCreated" );
        if( func_OnLobbyCreated.ptr() != Py_None )
            try {
                func_OnLobbyCreated( boost::python::ptr(pData), bIOFailure );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->LobbyCreatedCallResult::OnLobbyCreated( pData, bIOFailure );
            }
        else
            this->LobbyCreatedCallResult::OnLobbyCreated( pData, bIOFailure );
    }
    
    void default_OnLobbyCreated( ::LobbyCreated_t * pData, bool bIOFailure ) {
        LobbyCreatedCallResult::OnLobbyCreated( pData, bIOFailure );
    }
};

PY_STEAM_CALLRESULT_WRAPPER( LobbyEnter, LobbyEnter_t );

struct LobbyEnterCallResult_wrapper : LobbyEnterCallResult, bp::wrapper< LobbyEnterCallResult > {

    LobbyEnterCallResult_wrapper(::SteamAPICall_t steamapicall )
    : LobbyEnterCallResult( steamapicall )
      , bp::wrapper< LobbyEnterCallResult >(){
        // constructor
    }

    virtual void OnLobbyEnter( ::LobbyEnter_t * pData, bool bIOFailure ) {
        PY_OVERRIDE_CHECK( LobbyEnterCallResult, OnLobbyEnter )
        PY_OVERRIDE_LOG( _steam, LobbyEnterCallResult, OnLobbyEnter )
        bp::override func_OnLobbyEnter = this->get_override( "OnLobbyEnter" );
        if( func_OnLobbyEnter.ptr() != Py_None )
            try {
                func_OnLobbyEnter( boost::python::ptr(pData), bIOFailure );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->LobbyEnterCallResult::OnLobbyEnter( pData, bIOFailure );
            }
        else
            this->LobbyEnterCallResult::OnLobbyEnter( pData, bIOFailure );
    }
    
    void default_OnLobbyEnter( ::LobbyEnter_t * pData, bool bIOFailure ) {
        LobbyEnterCallResult::OnLobbyEnter( pData, bIOFailure );
    }
};

PY_STEAM_CALLBACK_WRAPPER( LobbyChatUpdate, LobbyChatUpdate_t );

struct LobbyChatUpdateCallback_wrapper : LobbyChatUpdateCallback, bp::wrapper< LobbyChatUpdateCallback > {

    LobbyChatUpdateCallback_wrapper()
    : LobbyChatUpdateCallback()
      , bp::wrapper< LobbyChatUpdateCallback >(){
        // constructor
    
    }

    virtual void OnLobbyChatUpdate( ::LobbyChatUpdate_t * pData ) {
        PY_OVERRIDE_CHECK( LobbyChatUpdateCallback, OnLobbyChatUpdate )
        PY_OVERRIDE_LOG( _steam, LobbyChatUpdateCallback, OnLobbyChatUpdate )
        bp::override func_OnLobbyChatUpdate = this->get_override( "OnLobbyChatUpdate" );
        if( func_OnLobbyChatUpdate.ptr() != Py_None )
            try {
                func_OnLobbyChatUpdate( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->LobbyChatUpdateCallback::OnLobbyChatUpdate( pData );
            }
        else
            this->LobbyChatUpdateCallback::OnLobbyChatUpdate( pData );
    }
    
    void default_OnLobbyChatUpdate( ::LobbyChatUpdate_t * pData ) {
        LobbyChatUpdateCallback::OnLobbyChatUpdate( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( LobbyChatMsg, LobbyChatMsg_t );

struct LobbyChatMsgCallback_wrapper : LobbyChatMsgCallback, bp::wrapper< LobbyChatMsgCallback > {

    LobbyChatMsgCallback_wrapper()
    : LobbyChatMsgCallback()
      , bp::wrapper< LobbyChatMsgCallback >(){
        // constructor
    
    }

    virtual void OnLobbyChatMsg( ::LobbyChatMsg_t * pData ) {
        PY_OVERRIDE_CHECK( LobbyChatMsgCallback, OnLobbyChatMsg )
        PY_OVERRIDE_LOG( _steam, LobbyChatMsgCallback, OnLobbyChatMsg )
        bp::override func_OnLobbyChatMsg = this->get_override( "OnLobbyChatMsg" );
        if( func_OnLobbyChatMsg.ptr() != Py_None )
            try {
                func_OnLobbyChatMsg( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->LobbyChatMsgCallback::OnLobbyChatMsg( pData );
            }
        else
            this->LobbyChatMsgCallback::OnLobbyChatMsg( pData );
    }
    
    void default_OnLobbyChatMsg( ::LobbyChatMsg_t * pData ) {
        LobbyChatMsgCallback::OnLobbyChatMsg( pData );
    }
};

PY_STEAM_CALLBACK_WRAPPER( LobbyDataUpdate, LobbyDataUpdate_t );

struct LobbyDataUpdateCallback_wrapper : LobbyDataUpdateCallback, bp::wrapper< LobbyDataUpdateCallback > {

    LobbyDataUpdateCallback_wrapper()
    : LobbyDataUpdateCallback()
      , bp::wrapper< LobbyDataUpdateCallback >(){
        // constructor
    
    }

    virtual void OnLobbyDataUpdate( ::LobbyDataUpdate_t * pData ) {
        PY_OVERRIDE_CHECK( LobbyDataUpdateCallback, OnLobbyDataUpdate )
        PY_OVERRIDE_LOG( _steam, LobbyDataUpdateCallback, OnLobbyDataUpdate )
        bp::override func_OnLobbyDataUpdate = this->get_override( "OnLobbyDataUpdate" );
        if( func_OnLobbyDataUpdate.ptr() != Py_None )
            try {
                func_OnLobbyDataUpdate( boost::python::ptr(pData) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->LobbyDataUpdateCallback::OnLobbyDataUpdate( pData );
            }
        else
            this->LobbyDataUpdateCallback::OnLobbyDataUpdate( pData );
    }
    
    void default_OnLobbyDataUpdate( ::LobbyDataUpdate_t * pData ) {
        LobbyDataUpdateCallback::OnLobbyDataUpdate( pData );
    }
};

PY_STEAM_CALLRESULT_WRAPPER( NumberOfCurrentPlayers, NumberOfCurrentPlayers_t );

struct NumberOfCurrentPlayersCallResult_wrapper : NumberOfCurrentPlayersCallResult, bp::wrapper< NumberOfCurrentPlayersCallResult > {

    NumberOfCurrentPlayersCallResult_wrapper(::SteamAPICall_t steamapicall )
    : NumberOfCurrentPlayersCallResult( steamapicall )
      , bp::wrapper< NumberOfCurrentPlayersCallResult >(){
        // constructor
    }

    virtual void OnNumberOfCurrentPlayers( ::NumberOfCurrentPlayers_t * pData, bool bIOFailure ) {
        PY_OVERRIDE_CHECK( NumberOfCurrentPlayersCallResult, OnNumberOfCurrentPlayers )
        PY_OVERRIDE_LOG( _steam, NumberOfCurrentPlayersCallResult, OnNumberOfCurrentPlayers )
        bp::override func_OnNumberOfCurrentPlayers = this->get_override( "OnNumberOfCurrentPlayers" );
        if( func_OnNumberOfCurrentPlayers.ptr() != Py_None )
            try {
                func_OnNumberOfCurrentPlayers( boost::python::ptr(pData), bIOFailure );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->NumberOfCurrentPlayersCallResult::OnNumberOfCurrentPlayers( pData, bIOFailure );
            }
        else
            this->NumberOfCurrentPlayersCallResult::OnNumberOfCurrentPlayers( pData, bIOFailure );
    }
    
    void default_OnNumberOfCurrentPlayers( ::NumberOfCurrentPlayers_t * pData, bool bIOFailure ) {
        NumberOfCurrentPlayersCallResult::OnNumberOfCurrentPlayers( pData, bIOFailure );
    }
};

BOOST_PYTHON_MODULE(_steam){
    bp::docstring_options doc_options( true, true, false );

    bp::enum_< EAccountType>("EAccountType")
        .value("k_EAccountTypeInvalid", k_EAccountTypeInvalid)
        .value("k_EAccountTypeIndividual", k_EAccountTypeIndividual)
        .value("k_EAccountTypeMultiseat", k_EAccountTypeMultiseat)
        .value("k_EAccountTypeGameServer", k_EAccountTypeGameServer)
        .value("k_EAccountTypeAnonGameServer", k_EAccountTypeAnonGameServer)
        .value("k_EAccountTypePending", k_EAccountTypePending)
        .value("k_EAccountTypeContentServer", k_EAccountTypeContentServer)
        .value("k_EAccountTypeClan", k_EAccountTypeClan)
        .value("k_EAccountTypeChat", k_EAccountTypeChat)
        .value("k_EAccountTypeConsoleUser", k_EAccountTypeConsoleUser)
        .value("k_EAccountTypeAnonUser", k_EAccountTypeAnonUser)
        .value("k_EAccountTypeMax", k_EAccountTypeMax)
        .export_values()
        ;

    bp::enum_< EChatEntryType>("EChatEntryType")
        .value("k_EChatEntryTypeInvalid", k_EChatEntryTypeInvalid)
        .value("k_EChatEntryTypeChatMsg", k_EChatEntryTypeChatMsg)
        .value("k_EChatEntryTypeTyping", k_EChatEntryTypeTyping)
        .value("k_EChatEntryTypeInviteGame", k_EChatEntryTypeInviteGame)
        .value("k_EChatEntryTypeEmote", k_EChatEntryTypeEmote)
        .value("k_EChatEntryTypeLeftConversation", k_EChatEntryTypeLeftConversation)
        .value("k_EChatEntryTypeEntered", k_EChatEntryTypeEntered)
        .value("k_EChatEntryTypeWasKicked", k_EChatEntryTypeWasKicked)
        .value("k_EChatEntryTypeWasBanned", k_EChatEntryTypeWasBanned)
        .value("k_EChatEntryTypeDisconnected", k_EChatEntryTypeDisconnected)
        .value("k_EChatEntryTypeHistoricalChat", k_EChatEntryTypeHistoricalChat)
        .value("k_EChatEntryTypeReserved1", k_EChatEntryTypeReserved1)
        .value("k_EChatEntryTypeReserved2", k_EChatEntryTypeReserved2)
        .value("k_EChatEntryTypeLinkBlocked", k_EChatEntryTypeLinkBlocked)
        .export_values()
        ;

    bp::enum_< EChatMemberStateChange>("EChatMemberStateChange")
        .value("k_EChatMemberStateChangeEntered", k_EChatMemberStateChangeEntered)
        .value("k_EChatMemberStateChangeLeft", k_EChatMemberStateChangeLeft)
        .value("k_EChatMemberStateChangeDisconnected", k_EChatMemberStateChangeDisconnected)
        .value("k_EChatMemberStateChangeKicked", k_EChatMemberStateChangeKicked)
        .value("k_EChatMemberStateChangeBanned", k_EChatMemberStateChangeBanned)
        .export_values()
        ;

    bp::enum_< EChatRoomEnterResponse>("EChatRoomEnterResponse")
        .value("k_EChatRoomEnterResponseSuccess", k_EChatRoomEnterResponseSuccess)
        .value("k_EChatRoomEnterResponseDoesntExist", k_EChatRoomEnterResponseDoesntExist)
        .value("k_EChatRoomEnterResponseNotAllowed", k_EChatRoomEnterResponseNotAllowed)
        .value("k_EChatRoomEnterResponseFull", k_EChatRoomEnterResponseFull)
        .value("k_EChatRoomEnterResponseError", k_EChatRoomEnterResponseError)
        .value("k_EChatRoomEnterResponseBanned", k_EChatRoomEnterResponseBanned)
        .value("k_EChatRoomEnterResponseLimited", k_EChatRoomEnterResponseLimited)
        .value("k_EChatRoomEnterResponseClanDisabled", k_EChatRoomEnterResponseClanDisabled)
        .value("k_EChatRoomEnterResponseCommunityBan", k_EChatRoomEnterResponseCommunityBan)
        .value("k_EChatRoomEnterResponseMemberBlockedYou", k_EChatRoomEnterResponseMemberBlockedYou)
        .value("k_EChatRoomEnterResponseYouBlockedMember", k_EChatRoomEnterResponseYouBlockedMember)
        .export_values()
        ;

    bp::enum_< EDenyReason>("EDenyReason")
        .value("k_EDenyInvalid", k_EDenyInvalid)
        .value("k_EDenyInvalidVersion", k_EDenyInvalidVersion)
        .value("k_EDenyGeneric", k_EDenyGeneric)
        .value("k_EDenyNotLoggedOn", k_EDenyNotLoggedOn)
        .value("k_EDenyNoLicense", k_EDenyNoLicense)
        .value("k_EDenyCheater", k_EDenyCheater)
        .value("k_EDenyLoggedInElseWhere", k_EDenyLoggedInElseWhere)
        .value("k_EDenyUnknownText", k_EDenyUnknownText)
        .value("k_EDenyIncompatibleAnticheat", k_EDenyIncompatibleAnticheat)
        .value("k_EDenyMemoryCorruption", k_EDenyMemoryCorruption)
        .value("k_EDenyIncompatibleSoftware", k_EDenyIncompatibleSoftware)
        .value("k_EDenySteamConnectionLost", k_EDenySteamConnectionLost)
        .value("k_EDenySteamConnectionError", k_EDenySteamConnectionError)
        .value("k_EDenySteamResponseTimedOut", k_EDenySteamResponseTimedOut)
        .value("k_EDenySteamValidationStalled", k_EDenySteamValidationStalled)
        .value("k_EDenySteamOwnerLeftGuestUser", k_EDenySteamOwnerLeftGuestUser)
        .export_values()
        ;

    bp::enum_< EFriendRelationship>("EFriendRelationship")
        .value("k_EFriendRelationshipNone", k_EFriendRelationshipNone)
        .value("k_EFriendRelationshipBlocked", k_EFriendRelationshipBlocked)
        .value("k_EFriendRelationshipRequestRecipient", k_EFriendRelationshipRequestRecipient)
        .value("k_EFriendRelationshipFriend", k_EFriendRelationshipFriend)
        .value("k_EFriendRelationshipRequestInitiator", k_EFriendRelationshipRequestInitiator)
        .value("k_EFriendRelationshipIgnored", k_EFriendRelationshipIgnored)
        .value("k_EFriendRelationshipIgnoredFriend", k_EFriendRelationshipIgnoredFriend)
        .value("k_EFriendRelationshipSuggested", k_EFriendRelationshipSuggested)
        .value("k_EFriendRelationshipMax", k_EFriendRelationshipMax)
        .export_values()
        ;

    bp::enum_< ELobbyComparison>("ELobbyComparison")
        .value("k_ELobbyComparisonEqualToOrLessThan", k_ELobbyComparisonEqualToOrLessThan)
        .value("k_ELobbyComparisonLessThan", k_ELobbyComparisonLessThan)
        .value("k_ELobbyComparisonEqual", k_ELobbyComparisonEqual)
        .value("k_ELobbyComparisonGreaterThan", k_ELobbyComparisonGreaterThan)
        .value("k_ELobbyComparisonEqualToOrGreaterThan", k_ELobbyComparisonEqualToOrGreaterThan)
        .value("k_ELobbyComparisonNotEqual", k_ELobbyComparisonNotEqual)
        .export_values()
        ;

    bp::enum_< ELobbyDistanceFilter>("ELobbyDistanceFilter")
        .value("k_ELobbyDistanceFilterClose", k_ELobbyDistanceFilterClose)
        .value("k_ELobbyDistanceFilterDefault", k_ELobbyDistanceFilterDefault)
        .value("k_ELobbyDistanceFilterFar", k_ELobbyDistanceFilterFar)
        .value("k_ELobbyDistanceFilterWorldwide", k_ELobbyDistanceFilterWorldwide)
        .export_values()
        ;

    bp::enum_< ELobbyType>("ELobbyType")
        .value("k_ELobbyTypePrivate", k_ELobbyTypePrivate)
        .value("k_ELobbyTypeFriendsOnly", k_ELobbyTypeFriendsOnly)
        .value("k_ELobbyTypePublic", k_ELobbyTypePublic)
        .value("k_ELobbyTypeInvisible", k_ELobbyTypeInvisible)
        .export_values()
        ;

    bp::enum_< EMatchMakingServerResponse>("EMatchMakingServerResponse")
        .value("eServerResponded", eServerResponded)
        .value("eServerFailedToRespond", eServerFailedToRespond)
        .value("eNoServersListedOnMasterServer", eNoServersListedOnMasterServer)
        .export_values()
        ;

    bp::enum_< EPersonaChange>("EPersonaChange")
        .value("k_EPersonaChangeName", k_EPersonaChangeName)
        .value("k_EPersonaChangeStatus", k_EPersonaChangeStatus)
        .value("k_EPersonaChangeComeOnline", k_EPersonaChangeComeOnline)
        .value("k_EPersonaChangeGoneOffline", k_EPersonaChangeGoneOffline)
        .value("k_EPersonaChangeGamePlayed", k_EPersonaChangeGamePlayed)
        .value("k_EPersonaChangeGameServer", k_EPersonaChangeGameServer)
        .value("k_EPersonaChangeAvatar", k_EPersonaChangeAvatar)
        .value("k_EPersonaChangeJoinedSource", k_EPersonaChangeJoinedSource)
        .value("k_EPersonaChangeLeftSource", k_EPersonaChangeLeftSource)
        .value("k_EPersonaChangeRelationshipChanged", k_EPersonaChangeRelationshipChanged)
        .value("k_EPersonaChangeNameFirstSet", k_EPersonaChangeNameFirstSet)
        .value("k_EPersonaChangeFacebookInfo", k_EPersonaChangeFacebookInfo)
        .value("k_EPersonaChangeNickname", k_EPersonaChangeNickname)
        .value("k_EPersonaChangeSteamLevel", k_EPersonaChangeSteamLevel)
        .export_values()
        ;

    bp::enum_< EPersonaState>("EPersonaState")
        .value("k_EPersonaStateOffline", k_EPersonaStateOffline)
        .value("k_EPersonaStateOnline", k_EPersonaStateOnline)
        .value("k_EPersonaStateBusy", k_EPersonaStateBusy)
        .value("k_EPersonaStateAway", k_EPersonaStateAway)
        .value("k_EPersonaStateSnooze", k_EPersonaStateSnooze)
        .value("k_EPersonaStateLookingToTrade", k_EPersonaStateLookingToTrade)
        .value("k_EPersonaStateLookingToPlay", k_EPersonaStateLookingToPlay)
        .value("k_EPersonaStateMax", k_EPersonaStateMax)
        .export_values()
        ;

    bp::enum_< EResult>("EResult")
        .value("k_EResultOK", k_EResultOK)
        .value("k_EResultFail", k_EResultFail)
        .value("k_EResultNoConnection", k_EResultNoConnection)
        .value("k_EResultInvalidPassword", k_EResultInvalidPassword)
        .value("k_EResultLoggedInElsewhere", k_EResultLoggedInElsewhere)
        .value("k_EResultInvalidProtocolVer", k_EResultInvalidProtocolVer)
        .value("k_EResultInvalidParam", k_EResultInvalidParam)
        .value("k_EResultFileNotFound", k_EResultFileNotFound)
        .value("k_EResultBusy", k_EResultBusy)
        .value("k_EResultInvalidState", k_EResultInvalidState)
        .value("k_EResultInvalidName", k_EResultInvalidName)
        .value("k_EResultInvalidEmail", k_EResultInvalidEmail)
        .value("k_EResultDuplicateName", k_EResultDuplicateName)
        .value("k_EResultAccessDenied", k_EResultAccessDenied)
        .value("k_EResultTimeout", k_EResultTimeout)
        .value("k_EResultBanned", k_EResultBanned)
        .value("k_EResultAccountNotFound", k_EResultAccountNotFound)
        .value("k_EResultInvalidSteamID", k_EResultInvalidSteamID)
        .value("k_EResultServiceUnavailable", k_EResultServiceUnavailable)
        .value("k_EResultNotLoggedOn", k_EResultNotLoggedOn)
        .value("k_EResultPending", k_EResultPending)
        .value("k_EResultEncryptionFailure", k_EResultEncryptionFailure)
        .value("k_EResultInsufficientPrivilege", k_EResultInsufficientPrivilege)
        .value("k_EResultLimitExceeded", k_EResultLimitExceeded)
        .value("k_EResultRevoked", k_EResultRevoked)
        .value("k_EResultExpired", k_EResultExpired)
        .value("k_EResultAlreadyRedeemed", k_EResultAlreadyRedeemed)
        .value("k_EResultDuplicateRequest", k_EResultDuplicateRequest)
        .value("k_EResultAlreadyOwned", k_EResultAlreadyOwned)
        .value("k_EResultIPNotFound", k_EResultIPNotFound)
        .value("k_EResultPersistFailed", k_EResultPersistFailed)
        .value("k_EResultLockingFailed", k_EResultLockingFailed)
        .value("k_EResultLogonSessionReplaced", k_EResultLogonSessionReplaced)
        .value("k_EResultConnectFailed", k_EResultConnectFailed)
        .value("k_EResultHandshakeFailed", k_EResultHandshakeFailed)
        .value("k_EResultIOFailure", k_EResultIOFailure)
        .value("k_EResultRemoteDisconnect", k_EResultRemoteDisconnect)
        .value("k_EResultShoppingCartNotFound", k_EResultShoppingCartNotFound)
        .value("k_EResultBlocked", k_EResultBlocked)
        .value("k_EResultIgnored", k_EResultIgnored)
        .value("k_EResultNoMatch", k_EResultNoMatch)
        .value("k_EResultAccountDisabled", k_EResultAccountDisabled)
        .value("k_EResultServiceReadOnly", k_EResultServiceReadOnly)
        .value("k_EResultAccountNotFeatured", k_EResultAccountNotFeatured)
        .value("k_EResultAdministratorOK", k_EResultAdministratorOK)
        .value("k_EResultContentVersion", k_EResultContentVersion)
        .value("k_EResultTryAnotherCM", k_EResultTryAnotherCM)
        .value("k_EResultPasswordRequiredToKickSession", k_EResultPasswordRequiredToKickSession)
        .value("k_EResultAlreadyLoggedInElsewhere", k_EResultAlreadyLoggedInElsewhere)
        .value("k_EResultSuspended", k_EResultSuspended)
        .value("k_EResultCancelled", k_EResultCancelled)
        .value("k_EResultDataCorruption", k_EResultDataCorruption)
        .value("k_EResultDiskFull", k_EResultDiskFull)
        .value("k_EResultRemoteCallFailed", k_EResultRemoteCallFailed)
        .value("k_EResultPasswordUnset", k_EResultPasswordUnset)
        .value("k_EResultExternalAccountUnlinked", k_EResultExternalAccountUnlinked)
        .value("k_EResultPSNTicketInvalid", k_EResultPSNTicketInvalid)
        .value("k_EResultExternalAccountAlreadyLinked", k_EResultExternalAccountAlreadyLinked)
        .value("k_EResultRemoteFileConflict", k_EResultRemoteFileConflict)
        .value("k_EResultIllegalPassword", k_EResultIllegalPassword)
        .value("k_EResultSameAsPreviousValue", k_EResultSameAsPreviousValue)
        .value("k_EResultAccountLogonDenied", k_EResultAccountLogonDenied)
        .value("k_EResultCannotUseOldPassword", k_EResultCannotUseOldPassword)
        .value("k_EResultInvalidLoginAuthCode", k_EResultInvalidLoginAuthCode)
        .value("k_EResultAccountLogonDeniedNoMail", k_EResultAccountLogonDeniedNoMail)
        .value("k_EResultHardwareNotCapableOfIPT", k_EResultHardwareNotCapableOfIPT)
        .value("k_EResultIPTInitError", k_EResultIPTInitError)
        .value("k_EResultParentalControlRestricted", k_EResultParentalControlRestricted)
        .value("k_EResultFacebookQueryError", k_EResultFacebookQueryError)
        .value("k_EResultExpiredLoginAuthCode", k_EResultExpiredLoginAuthCode)
        .value("k_EResultIPLoginRestrictionFailed", k_EResultIPLoginRestrictionFailed)
        .value("k_EResultAccountLockedDown", k_EResultAccountLockedDown)
        .value("k_EResultAccountLogonDeniedVerifiedEmailRequired", k_EResultAccountLogonDeniedVerifiedEmailRequired)
        .value("k_EResultNoMatchingURL", k_EResultNoMatchingURL)
        .value("k_EResultBadResponse", k_EResultBadResponse)
        .value("k_EResultRequirePasswordReEntry", k_EResultRequirePasswordReEntry)
        .value("k_EResultValueOutOfRange", k_EResultValueOutOfRange)
        .value("k_EResultUnexpectedError", k_EResultUnexpectedError)
        .value("k_EResultDisabled", k_EResultDisabled)
        .value("k_EResultInvalidCEGSubmission", k_EResultInvalidCEGSubmission)
        .value("k_EResultRestrictedDevice", k_EResultRestrictedDevice)
        .value("k_EResultRegionLocked", k_EResultRegionLocked)
        .value("k_EResultRateLimitExceeded", k_EResultRateLimitExceeded)
        .value("k_EResultAccountLoginDeniedNeedTwoFactor", k_EResultAccountLoginDeniedNeedTwoFactor)
        .value("k_EResultItemDeleted", k_EResultItemDeleted)
        .value("k_EResultAccountLoginDeniedThrottle", k_EResultAccountLoginDeniedThrottle)
        .value("k_EResultTwoFactorCodeMismatch", k_EResultTwoFactorCodeMismatch)
        .value("k_EResultTwoFactorActivationCodeMismatch", k_EResultTwoFactorActivationCodeMismatch)
        .value("k_EResultAccountAssociatedToMultiplePartners", k_EResultAccountAssociatedToMultiplePartners)
        .value("k_EResultNotModified", k_EResultNotModified)
        .value("k_EResultNoMobileDevice", k_EResultNoMobileDevice)
        .value("k_EResultTimeNotSynced", k_EResultTimeNotSynced)
        .value("k_EResultSmsCodeFailed", k_EResultSmsCodeFailed)
        .value("k_EResultAccountLimitExceeded", k_EResultAccountLimitExceeded)
        .value("k_EResultAccountActivityLimitExceeded", k_EResultAccountActivityLimitExceeded)
        .value("k_EResultPhoneActivityLimitExceeded", k_EResultPhoneActivityLimitExceeded)
        .value("k_EResultRefundToWallet", k_EResultRefundToWallet)
        .value("k_EResultEmailSendFailure", k_EResultEmailSendFailure)
        .value("k_EResultNotSettled", k_EResultNotSettled)
        .export_values()
        ;

    bp::enum_< ESteamUserStatType>("ESteamUserStatType")
        .value("k_ESteamUserStatTypeINVALID", k_ESteamUserStatTypeINVALID)
        .value("k_ESteamUserStatTypeINT", k_ESteamUserStatTypeINT)
        .value("k_ESteamUserStatTypeFLOAT", k_ESteamUserStatTypeFLOAT)
        .value("k_ESteamUserStatTypeAVGRATE", k_ESteamUserStatTypeAVGRATE)
        .value("k_ESteamUserStatTypeACHIEVEMENTS", k_ESteamUserStatTypeACHIEVEMENTS)
        .value("k_ESteamUserStatTypeGROUPACHIEVEMENTS", k_ESteamUserStatTypeGROUPACHIEVEMENTS)
        .value("k_ESteamUserStatTypeMAX", k_ESteamUserStatTypeMAX)
        .export_values()
        ;

    bp::enum_< EUniverse>("EUniverse")
        .value("k_EUniverseInvalid", k_EUniverseInvalid)
        .value("k_EUniversePublic", k_EUniversePublic)
        .value("k_EUniverseBeta", k_EUniverseBeta)
        .value("k_EUniverseInternal", k_EUniverseInternal)
        .value("k_EUniverseDev", k_EUniverseDev)
        .value("k_EUniverseMax", k_EUniverseMax)
        .export_values()
        ;

    { //::AvatarImageLoaded_t
        typedef bp::class_< AvatarImageLoaded_t, boost::noncopyable > AvatarImageLoaded_t_exposer_t;
        AvatarImageLoaded_t_exposer_t AvatarImageLoaded_t_exposer = AvatarImageLoaded_t_exposer_t( "AvatarImageLoaded_t", bp::no_init );
        bp::scope AvatarImageLoaded_t_scope( AvatarImageLoaded_t_exposer );
        bp::scope().attr("k_iCallback") = (int)AvatarImageLoaded_t::k_iCallback;
        AvatarImageLoaded_t_exposer.def_readwrite( "image", &AvatarImageLoaded_t::m_iImage );
        AvatarImageLoaded_t_exposer.def_readwrite( "tall", &AvatarImageLoaded_t::m_iTall );
        AvatarImageLoaded_t_exposer.def_readwrite( "wide", &AvatarImageLoaded_t::m_iWide );
        AvatarImageLoaded_t_exposer.def_readwrite( "steamid", &AvatarImageLoaded_t::m_steamID );
    }

    bp::class_< CSteamAPIContext, boost::noncopyable >( "CSteamAPIContext", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "SteamApps"
            , (::ISteamApps * ( ::CSteamAPIContext::* )(  ))( &::CSteamAPIContext::SteamApps )
            , bp::return_internal_reference< >() )    
        .def( 
            "SteamFriends"
            , (::ISteamFriends * ( ::CSteamAPIContext::* )(  ))( &::CSteamAPIContext::SteamFriends )
            , bp::return_internal_reference< >() )    
        .def( 
            "SteamMatchmaking"
            , (::ISteamMatchmaking * ( ::CSteamAPIContext::* )(  ))( &::CSteamAPIContext::SteamMatchmaking )
            , bp::return_internal_reference< >() )    
        .def( 
            "SteamUser"
            , (::ISteamUser * ( ::CSteamAPIContext::* )(  ))( &::CSteamAPIContext::SteamUser )
            , bp::return_internal_reference< >() )    
        .def( 
            "SteamUserStats"
            , (::ISteamUserStats * ( ::CSteamAPIContext::* )(  ))( &::CSteamAPIContext::SteamUserStats )
            , bp::return_internal_reference< >() )    
        .def( 
            "SteamUtils"
            , (::ISteamUtils * ( ::CSteamAPIContext::* )(  ))( &::CSteamAPIContext::SteamUtils )
            , bp::return_internal_reference< >() );

    bp::class_< CSteamGameServerAPIContext, boost::noncopyable >( "CSteamGameServerAPIContext", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "SteamGameServer"
            , (::ISteamGameServer * ( ::CSteamGameServerAPIContext::* )(  ))( &::CSteamGameServerAPIContext::SteamGameServer )
            , bp::return_internal_reference< >() );

    { //::CSteamID
        typedef bp::class_< CSteamID > CSteamID_exposer_t;
        CSteamID_exposer_t CSteamID_exposer = CSteamID_exposer_t( "CSteamID", bp::init< >() );
        bp::scope CSteamID_scope( CSteamID_exposer );
        CSteamID_exposer.def( bp::init< uint32, EUniverse, EAccountType >(( bp::arg("unAccountID"), bp::arg("eUniverse"), bp::arg("eAccountType") )) );
        CSteamID_exposer.def( bp::init< uint32, unsigned int, EUniverse, EAccountType >(( bp::arg("unAccountID"), bp::arg("unAccountInstance"), bp::arg("eUniverse"), bp::arg("eAccountType") )) );
        CSteamID_exposer.def( bp::init< uint64 >(( bp::arg("ulSteamID") )) );
        bp::implicitly_convertible< uint64, CSteamID >();
        { //::CSteamID::BAnonAccount
        
            typedef bool ( ::CSteamID::*BAnonAccount_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "BAnonAccount"
                , BAnonAccount_function_type( &::CSteamID::BAnonAccount ) );
        
        }
        { //::CSteamID::BAnonGameServerAccount
        
            typedef bool ( ::CSteamID::*BAnonGameServerAccount_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "BAnonGameServerAccount"
                , BAnonGameServerAccount_function_type( &::CSteamID::BAnonGameServerAccount ) );
        
        }
        { //::CSteamID::BAnonUserAccount
        
            typedef bool ( ::CSteamID::*BAnonUserAccount_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "BAnonUserAccount"
                , BAnonUserAccount_function_type( &::CSteamID::BAnonUserAccount ) );
        
        }
        { //::CSteamID::BBlankAnonAccount
        
            typedef bool ( ::CSteamID::*BBlankAnonAccount_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "BBlankAnonAccount"
                , BBlankAnonAccount_function_type( &::CSteamID::BBlankAnonAccount ) );
        
        }
        { //::CSteamID::BChatAccount
        
            typedef bool ( ::CSteamID::*BChatAccount_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "BChatAccount"
                , BChatAccount_function_type( &::CSteamID::BChatAccount ) );
        
        }
        { //::CSteamID::BClanAccount
        
            typedef bool ( ::CSteamID::*BClanAccount_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "BClanAccount"
                , BClanAccount_function_type( &::CSteamID::BClanAccount ) );
        
        }
        { //::CSteamID::BConsoleUserAccount
        
            typedef bool ( ::CSteamID::*BConsoleUserAccount_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "BConsoleUserAccount"
                , BConsoleUserAccount_function_type( &::CSteamID::BConsoleUserAccount ) );
        
        }
        { //::CSteamID::BContentServerAccount
        
            typedef bool ( ::CSteamID::*BContentServerAccount_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "BContentServerAccount"
                , BContentServerAccount_function_type( &::CSteamID::BContentServerAccount ) );
        
        }
        { //::CSteamID::BGameServerAccount
        
            typedef bool ( ::CSteamID::*BGameServerAccount_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "BGameServerAccount"
                , BGameServerAccount_function_type( &::CSteamID::BGameServerAccount ) );
        
        }
        { //::CSteamID::BIndividualAccount
        
            typedef bool ( ::CSteamID::*BIndividualAccount_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "BIndividualAccount"
                , BIndividualAccount_function_type( &::CSteamID::BIndividualAccount ) );
        
        }
        { //::CSteamID::BPersistentGameServerAccount
        
            typedef bool ( ::CSteamID::*BPersistentGameServerAccount_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "BPersistentGameServerAccount"
                , BPersistentGameServerAccount_function_type( &::CSteamID::BPersistentGameServerAccount ) );
        
        }
        { //::CSteamID::Clear
        
            typedef void ( ::CSteamID::*Clear_function_type)(  ) ;
            
            CSteamID_exposer.def( 
                "Clear"
                , Clear_function_type( &::CSteamID::Clear ) );
        
        }
        { //::CSteamID::ClearIndividualInstance
        
            typedef void ( ::CSteamID::*ClearIndividualInstance_function_type)(  ) ;
            
            CSteamID_exposer.def( 
                "ClearIndividualInstance"
                , ClearIndividualInstance_function_type( &::CSteamID::ClearIndividualInstance ) );
        
        }
        { //::CSteamID::ConvertToUint64
        
            typedef ::uint64 ( ::CSteamID::*ConvertToUint64_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "ConvertToUint64"
                , ConvertToUint64_function_type( &::CSteamID::ConvertToUint64 ) );
        
        }
        { //::CSteamID::CreateBlankAnonLogon
        
            typedef void ( ::CSteamID::*CreateBlankAnonLogon_function_type)( ::EUniverse ) ;
            
            CSteamID_exposer.def( 
                "CreateBlankAnonLogon"
                , CreateBlankAnonLogon_function_type( &::CSteamID::CreateBlankAnonLogon )
                , ( bp::arg("eUniverse") ) );
        
        }
        { //::CSteamID::CreateBlankAnonUserLogon
        
            typedef void ( ::CSteamID::*CreateBlankAnonUserLogon_function_type)( ::EUniverse ) ;
            
            CSteamID_exposer.def( 
                "CreateBlankAnonUserLogon"
                , CreateBlankAnonUserLogon_function_type( &::CSteamID::CreateBlankAnonUserLogon )
                , ( bp::arg("eUniverse") ) );
        
        }
        { //::CSteamID::FullSet
        
            typedef void ( ::CSteamID::*FullSet_function_type)( ::uint64,::EUniverse,::EAccountType ) ;
            
            CSteamID_exposer.def( 
                "FullSet"
                , FullSet_function_type( &::CSteamID::FullSet )
                , ( bp::arg("ulIdentifier"), bp::arg("eUniverse"), bp::arg("eAccountType") ) );
        
        }
        { //::CSteamID::GetAccountID
        
            typedef ::AccountID_t ( ::CSteamID::*GetAccountID_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "GetAccountID"
                , GetAccountID_function_type( &::CSteamID::GetAccountID ) );
        
        }
        { //::CSteamID::GetEAccountType
        
            typedef ::EAccountType ( ::CSteamID::*GetEAccountType_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "GetEAccountType"
                , GetEAccountType_function_type( &::CSteamID::GetEAccountType ) );
        
        }
        { //::CSteamID::GetEUniverse
        
            typedef ::EUniverse ( ::CSteamID::*GetEUniverse_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "GetEUniverse"
                , GetEUniverse_function_type( &::CSteamID::GetEUniverse ) );
        
        }
        { //::CSteamID::GetStaticAccountKey
        
            typedef ::uint64 ( ::CSteamID::*GetStaticAccountKey_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "GetStaticAccountKey"
                , GetStaticAccountKey_function_type( &::CSteamID::GetStaticAccountKey ) );
        
        }
        { //::CSteamID::GetUnAccountInstance
        
            typedef ::uint32 ( ::CSteamID::*GetUnAccountInstance_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "GetUnAccountInstance"
                , GetUnAccountInstance_function_type( &::CSteamID::GetUnAccountInstance ) );
        
        }
        { //::CSteamID::HasNoIndividualInstance
        
            typedef bool ( ::CSteamID::*HasNoIndividualInstance_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "HasNoIndividualInstance"
                , HasNoIndividualInstance_function_type( &::CSteamID::HasNoIndividualInstance ) );
        
        }
        { //::CSteamID::InstancedSet
        
            typedef void ( ::CSteamID::*InstancedSet_function_type)( ::uint32,::uint32,::EUniverse,::EAccountType ) ;
            
            CSteamID_exposer.def( 
                "InstancedSet"
                , InstancedSet_function_type( &::CSteamID::InstancedSet )
                , ( bp::arg("unAccountID"), bp::arg("unInstance"), bp::arg("eUniverse"), bp::arg("eAccountType") ) );
        
        }
        { //::CSteamID::IsLobby
        
            typedef bool ( ::CSteamID::*IsLobby_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "IsLobby"
                , IsLobby_function_type( &::CSteamID::IsLobby ) );
        
        }
        { //::CSteamID::IsValid
        
            typedef bool ( ::CSteamID::*IsValid_function_type)(  ) const;
            
            CSteamID_exposer.def( 
                "IsValid"
                , IsValid_function_type( &::CSteamID::IsValid ) );
        
        }
        { //::CSteamID::Set
        
            typedef void ( ::CSteamID::*Set_function_type)( ::uint32,::EUniverse,::EAccountType ) ;
            
            CSteamID_exposer.def( 
                "Set"
                , Set_function_type( &::CSteamID::Set )
                , ( bp::arg("unAccountID"), bp::arg("eUniverse"), bp::arg("eAccountType") ) );
        
        }
        { //::CSteamID::SetAccountID
        
            typedef void ( ::CSteamID::*SetAccountID_function_type)( ::uint32 ) ;
            
            CSteamID_exposer.def( 
                "SetAccountID"
                , SetAccountID_function_type( &::CSteamID::SetAccountID )
                , ( bp::arg("unAccountID") ) );
        
        }
        { //::CSteamID::SetAccountInstance
        
            typedef void ( ::CSteamID::*SetAccountInstance_function_type)( ::uint32 ) ;
            
            CSteamID_exposer.def( 
                "SetAccountInstance"
                , SetAccountInstance_function_type( &::CSteamID::SetAccountInstance )
                , ( bp::arg("unInstance") ) );
        
        }
        { //::CSteamID::SetEUniverse
        
            typedef void ( ::CSteamID::*SetEUniverse_function_type)( ::EUniverse ) ;
            
            CSteamID_exposer.def( 
                "SetEUniverse"
                , SetEUniverse_function_type( &::CSteamID::SetEUniverse )
                , ( bp::arg("eUniverse") ) );
        
        }
        { //::CSteamID::SetFromUint64
        
            typedef void ( ::CSteamID::*SetFromUint64_function_type)( ::uint64 ) ;
            
            CSteamID_exposer.def( 
                "SetFromUint64"
                , SetFromUint64_function_type( &::CSteamID::SetFromUint64 )
                , ( bp::arg("ulSteamID") ) );
        
        }
        CSteamID_exposer.def( bp::self != bp::self );
        CSteamID_exposer.def( bp::self < bp::self );
        CSteamID_exposer.def( bp::self == bp::self );
        CSteamID_exposer.def( bp::self > bp::self );
    }

    { //::ClanOfficerListResponse_t
        typedef bp::class_< ClanOfficerListResponse_t, boost::noncopyable > ClanOfficerListResponse_t_exposer_t;
        ClanOfficerListResponse_t_exposer_t ClanOfficerListResponse_t_exposer = ClanOfficerListResponse_t_exposer_t( "ClanOfficerListResponse_t", bp::no_init );
        bp::scope ClanOfficerListResponse_t_scope( ClanOfficerListResponse_t_exposer );
        bp::scope().attr("k_iCallback") = (int)ClanOfficerListResponse_t::k_iCallback;
        ClanOfficerListResponse_t_exposer.def_readwrite( "success", &ClanOfficerListResponse_t::m_bSuccess );
        ClanOfficerListResponse_t_exposer.def_readwrite( "officers", &ClanOfficerListResponse_t::m_cOfficers );
        ClanOfficerListResponse_t_exposer.def_readwrite( "steamidclan", &ClanOfficerListResponse_t::m_steamIDClan );
    }

    { //::DownloadClanActivityCountsResult_t
        typedef bp::class_< DownloadClanActivityCountsResult_t, boost::noncopyable > DownloadClanActivityCountsResult_t_exposer_t;
        DownloadClanActivityCountsResult_t_exposer_t DownloadClanActivityCountsResult_t_exposer = DownloadClanActivityCountsResult_t_exposer_t( "DownloadClanActivityCountsResult_t", bp::no_init );
        bp::scope DownloadClanActivityCountsResult_t_scope( DownloadClanActivityCountsResult_t_exposer );
        bp::scope().attr("k_iCallback") = (int)DownloadClanActivityCountsResult_t::k_iCallback;
        DownloadClanActivityCountsResult_t_exposer.def_readwrite( "success", &DownloadClanActivityCountsResult_t::m_bSuccess );
    }

    { //::FriendRichPresenceUpdate_t
        typedef bp::class_< FriendRichPresenceUpdate_t, boost::noncopyable > FriendRichPresenceUpdate_t_exposer_t;
        FriendRichPresenceUpdate_t_exposer_t FriendRichPresenceUpdate_t_exposer = FriendRichPresenceUpdate_t_exposer_t( "FriendRichPresenceUpdate_t", bp::no_init );
        bp::scope FriendRichPresenceUpdate_t_scope( FriendRichPresenceUpdate_t_exposer );
        bp::scope().attr("k_iCallback") = (int)FriendRichPresenceUpdate_t::k_iCallback;
        FriendRichPresenceUpdate_t_exposer.def_readwrite( "appid", &FriendRichPresenceUpdate_t::m_nAppID );
        FriendRichPresenceUpdate_t_exposer.def_readwrite( "steamidfriend", &FriendRichPresenceUpdate_t::m_steamIDFriend );
    }

    { //::FriendsEnumerateFollowingList_t
        typedef bp::class_< FriendsEnumerateFollowingList_t_wrapper, boost::noncopyable > FriendsEnumerateFollowingList_t_exposer_t;
        FriendsEnumerateFollowingList_t_exposer_t FriendsEnumerateFollowingList_t_exposer = FriendsEnumerateFollowingList_t_exposer_t( "FriendsEnumerateFollowingList_t", bp::no_init );
        bp::scope FriendsEnumerateFollowingList_t_scope( FriendsEnumerateFollowingList_t_exposer );
        bp::scope().attr("k_iCallback") = (int)FriendsEnumerateFollowingList_t::k_iCallback;
        FriendsEnumerateFollowingList_t_exposer.def_readwrite( "result", &FriendsEnumerateFollowingList_t::m_eResult );
        FriendsEnumerateFollowingList_t_exposer.def_readwrite( "resultsreturned", &FriendsEnumerateFollowingList_t::m_nResultsReturned );
        FriendsEnumerateFollowingList_t_exposer.def_readwrite( "totalresultcount", &FriendsEnumerateFollowingList_t::m_nTotalResultCount );
        pyplusplus::containers::static_sized::register_array_1< ::CSteamID, 50, bp::return_internal_reference< > >( "__array_1__scope_CSteamID_50" );
        { //FriendsEnumerateFollowingList_t::m_rgSteamID [variable], type=CSteamID [50]
        
            typedef pyplusplus::containers::static_sized::array_1_t< ::CSteamID, 50> ( *array_wrapper_creator )( ::FriendsEnumerateFollowingList_t & );
            
            FriendsEnumerateFollowingList_t_exposer.add_property( "rgsteamid"
                , bp::make_function( array_wrapper_creator(&FriendsEnumerateFollowingList_t_wrapper::pyplusplus_m_rgSteamID_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
    }

    { //::FriendsGetFollowerCount_t
        typedef bp::class_< FriendsGetFollowerCount_t, boost::noncopyable > FriendsGetFollowerCount_t_exposer_t;
        FriendsGetFollowerCount_t_exposer_t FriendsGetFollowerCount_t_exposer = FriendsGetFollowerCount_t_exposer_t( "FriendsGetFollowerCount_t", bp::no_init );
        bp::scope FriendsGetFollowerCount_t_scope( FriendsGetFollowerCount_t_exposer );
        bp::scope().attr("k_iCallback") = (int)FriendsGetFollowerCount_t::k_iCallback;
        FriendsGetFollowerCount_t_exposer.def_readwrite( "result", &FriendsGetFollowerCount_t::m_eResult );
        FriendsGetFollowerCount_t_exposer.def_readwrite( "count", &FriendsGetFollowerCount_t::m_nCount );
        FriendsGetFollowerCount_t_exposer.def_readwrite( "steamid", &FriendsGetFollowerCount_t::m_steamID );
    }

    { //::FriendsIsFollowing_t
        typedef bp::class_< FriendsIsFollowing_t, boost::noncopyable > FriendsIsFollowing_t_exposer_t;
        FriendsIsFollowing_t_exposer_t FriendsIsFollowing_t_exposer = FriendsIsFollowing_t_exposer_t( "FriendsIsFollowing_t", bp::no_init );
        bp::scope FriendsIsFollowing_t_scope( FriendsIsFollowing_t_exposer );
        bp::scope().attr("k_iCallback") = (int)FriendsIsFollowing_t::k_iCallback;
        FriendsIsFollowing_t_exposer.def_readwrite( "isfollowing", &FriendsIsFollowing_t::m_bIsFollowing );
        FriendsIsFollowing_t_exposer.def_readwrite( "result", &FriendsIsFollowing_t::m_eResult );
        FriendsIsFollowing_t_exposer.def_readwrite( "steamid", &FriendsIsFollowing_t::m_steamID );
    }

    { //::GameConnectedChatJoin_t
        typedef bp::class_< GameConnectedChatJoin_t, boost::noncopyable > GameConnectedChatJoin_t_exposer_t;
        GameConnectedChatJoin_t_exposer_t GameConnectedChatJoin_t_exposer = GameConnectedChatJoin_t_exposer_t( "GameConnectedChatJoin_t", bp::no_init );
        bp::scope GameConnectedChatJoin_t_scope( GameConnectedChatJoin_t_exposer );
        bp::scope().attr("k_iCallback") = (int)GameConnectedChatJoin_t::k_iCallback;
        GameConnectedChatJoin_t_exposer.def_readwrite( "steamidclanchat", &GameConnectedChatJoin_t::m_steamIDClanChat );
        GameConnectedChatJoin_t_exposer.def_readwrite( "steamiduser", &GameConnectedChatJoin_t::m_steamIDUser );
    }

    { //::GameConnectedChatLeave_t
        typedef bp::class_< GameConnectedChatLeave_t, boost::noncopyable > GameConnectedChatLeave_t_exposer_t;
        GameConnectedChatLeave_t_exposer_t GameConnectedChatLeave_t_exposer = GameConnectedChatLeave_t_exposer_t( "GameConnectedChatLeave_t", bp::no_init );
        bp::scope GameConnectedChatLeave_t_scope( GameConnectedChatLeave_t_exposer );
        bp::scope().attr("k_iCallback") = (int)GameConnectedChatLeave_t::k_iCallback;
        GameConnectedChatLeave_t_exposer.def_readwrite( "dropped", &GameConnectedChatLeave_t::m_bDropped );
        GameConnectedChatLeave_t_exposer.def_readwrite( "kicked", &GameConnectedChatLeave_t::m_bKicked );
        GameConnectedChatLeave_t_exposer.def_readwrite( "steamidclanchat", &GameConnectedChatLeave_t::m_steamIDClanChat );
        GameConnectedChatLeave_t_exposer.def_readwrite( "steamiduser", &GameConnectedChatLeave_t::m_steamIDUser );
    }

    { //::GameConnectedClanChatMsg_t
        typedef bp::class_< GameConnectedClanChatMsg_t, boost::noncopyable > GameConnectedClanChatMsg_t_exposer_t;
        GameConnectedClanChatMsg_t_exposer_t GameConnectedClanChatMsg_t_exposer = GameConnectedClanChatMsg_t_exposer_t( "GameConnectedClanChatMsg_t", bp::no_init );
        bp::scope GameConnectedClanChatMsg_t_scope( GameConnectedClanChatMsg_t_exposer );
        bp::scope().attr("k_iCallback") = (int)GameConnectedClanChatMsg_t::k_iCallback;
        GameConnectedClanChatMsg_t_exposer.def_readwrite( "messageid", &GameConnectedClanChatMsg_t::m_iMessageID );
        GameConnectedClanChatMsg_t_exposer.def_readwrite( "steamidclanchat", &GameConnectedClanChatMsg_t::m_steamIDClanChat );
        GameConnectedClanChatMsg_t_exposer.def_readwrite( "steamiduser", &GameConnectedClanChatMsg_t::m_steamIDUser );
    }

    { //::GameConnectedFriendChatMsg_t
        typedef bp::class_< GameConnectedFriendChatMsg_t, boost::noncopyable > GameConnectedFriendChatMsg_t_exposer_t;
        GameConnectedFriendChatMsg_t_exposer_t GameConnectedFriendChatMsg_t_exposer = GameConnectedFriendChatMsg_t_exposer_t( "GameConnectedFriendChatMsg_t", bp::no_init );
        bp::scope GameConnectedFriendChatMsg_t_scope( GameConnectedFriendChatMsg_t_exposer );
        bp::scope().attr("k_iCallback") = (int)GameConnectedFriendChatMsg_t::k_iCallback;
        GameConnectedFriendChatMsg_t_exposer.def_readwrite( "messageid", &GameConnectedFriendChatMsg_t::m_iMessageID );
        GameConnectedFriendChatMsg_t_exposer.def_readwrite( "steamiduser", &GameConnectedFriendChatMsg_t::m_steamIDUser );
    }

    { //::GameLobbyJoinRequested_t
        typedef bp::class_< GameLobbyJoinRequested_t, boost::noncopyable > GameLobbyJoinRequested_t_exposer_t;
        GameLobbyJoinRequested_t_exposer_t GameLobbyJoinRequested_t_exposer = GameLobbyJoinRequested_t_exposer_t( "GameLobbyJoinRequested_t", bp::no_init );
        bp::scope GameLobbyJoinRequested_t_scope( GameLobbyJoinRequested_t_exposer );
        bp::scope().attr("k_iCallback") = (int)GameLobbyJoinRequested_t::k_iCallback;
        GameLobbyJoinRequested_t_exposer.def_readwrite( "steamidfriend", &GameLobbyJoinRequested_t::m_steamIDFriend );
        GameLobbyJoinRequested_t_exposer.def_readwrite( "steamidlobby", &GameLobbyJoinRequested_t::m_steamIDLobby );
    }

    { //::GameOverlayActivated_t
        typedef bp::class_< GameOverlayActivated_t, boost::noncopyable > GameOverlayActivated_t_exposer_t;
        GameOverlayActivated_t_exposer_t GameOverlayActivated_t_exposer = GameOverlayActivated_t_exposer_t( "GameOverlayActivated_t", bp::no_init );
        bp::scope GameOverlayActivated_t_scope( GameOverlayActivated_t_exposer );
        bp::scope().attr("k_iCallback") = (int)GameOverlayActivated_t::k_iCallback;
        GameOverlayActivated_t_exposer.def_readwrite( "active", &GameOverlayActivated_t::m_bActive );
    }

    { //::GameRichPresenceJoinRequested_t
        typedef bp::class_< GameRichPresenceJoinRequested_t_wrapper, boost::noncopyable > GameRichPresenceJoinRequested_t_exposer_t;
        GameRichPresenceJoinRequested_t_exposer_t GameRichPresenceJoinRequested_t_exposer = GameRichPresenceJoinRequested_t_exposer_t( "GameRichPresenceJoinRequested_t", bp::no_init );
        bp::scope GameRichPresenceJoinRequested_t_scope( GameRichPresenceJoinRequested_t_exposer );
        bp::scope().attr("k_iCallback") = (int)GameRichPresenceJoinRequested_t::k_iCallback;
        pyplusplus::containers::static_sized::register_array_1< char, 256 >( "__array_1_char_256" );
        { //GameRichPresenceJoinRequested_t::m_rgchConnect [variable], type=char [256]
        
            typedef pyplusplus::containers::static_sized::array_1_t< char, 256> ( *array_wrapper_creator )( ::GameRichPresenceJoinRequested_t & );
            
            GameRichPresenceJoinRequested_t_exposer.add_property( "rgchconnect"
                , bp::make_function( array_wrapper_creator(&GameRichPresenceJoinRequested_t_wrapper::pyplusplus_m_rgchConnect_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        GameRichPresenceJoinRequested_t_exposer.def_readwrite( "steamidfriend", &GameRichPresenceJoinRequested_t::m_steamIDFriend );
    }

    { //::GameServerChangeRequested_t
        typedef bp::class_< GameServerChangeRequested_t_wrapper, boost::noncopyable > GameServerChangeRequested_t_exposer_t;
        GameServerChangeRequested_t_exposer_t GameServerChangeRequested_t_exposer = GameServerChangeRequested_t_exposer_t( "GameServerChangeRequested_t", bp::no_init );
        bp::scope GameServerChangeRequested_t_scope( GameServerChangeRequested_t_exposer );
        bp::scope().attr("k_iCallback") = (int)GameServerChangeRequested_t::k_iCallback;
        pyplusplus::containers::static_sized::register_array_1< char, 64 >( "__array_1_char_64" );
        { //GameServerChangeRequested_t::m_rgchPassword [variable], type=char [64]
        
            typedef pyplusplus::containers::static_sized::array_1_t< char, 64> ( *array_wrapper_creator )( ::GameServerChangeRequested_t & );
            
            GameServerChangeRequested_t_exposer.add_property( "rgchpassword"
                , bp::make_function( array_wrapper_creator(&GameServerChangeRequested_t_wrapper::pyplusplus_m_rgchPassword_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        { //GameServerChangeRequested_t::m_rgchServer [variable], type=char [64]
        
            typedef pyplusplus::containers::static_sized::array_1_t< char, 64> ( *array_wrapper_creator )( ::GameServerChangeRequested_t & );
            
            GameServerChangeRequested_t_exposer.add_property( "rgchserver"
                , bp::make_function( array_wrapper_creator(&GameServerChangeRequested_t_wrapper::pyplusplus_m_rgchServer_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
    }

    bp::class_< ISteamApps, boost::noncopyable >( "ISteamApps", bp::no_init )    
        .def( 
            "BGetDLCDataByIndex"
            , (bool ( ::ISteamApps::* )( int,::AppId_t *,bool *,char *,int ))( &::ISteamApps::BGetDLCDataByIndex )
            , ( bp::arg("iDLC"), bp::arg("pAppID"), bp::arg("pbAvailable"), bp::arg("pchName"), bp::arg("cchNameBufferSize") ) )    
        .def( 
            "BIsAppInstalled"
            , (bool ( ::ISteamApps::* )( ::AppId_t ))( &::ISteamApps::BIsAppInstalled )
            , ( bp::arg("appID") ) )    
        .def( 
            "BIsCybercafe"
            , (bool ( ::ISteamApps::* )(  ))( &::ISteamApps::BIsCybercafe ) )    
        .def( 
            "BIsDlcInstalled"
            , (bool ( ::ISteamApps::* )( ::AppId_t ))( &::ISteamApps::BIsDlcInstalled )
            , ( bp::arg("appID") ) )    
        .def( 
            "BIsLowViolence"
            , (bool ( ::ISteamApps::* )(  ))( &::ISteamApps::BIsLowViolence ) )    
        .def( 
            "BIsSubscribed"
            , (bool ( ::ISteamApps::* )(  ))( &::ISteamApps::BIsSubscribed ) )    
        .def( 
            "BIsSubscribedApp"
            , (bool ( ::ISteamApps::* )( ::AppId_t ))( &::ISteamApps::BIsSubscribedApp )
            , ( bp::arg("appID") ) )    
        .def( 
            "BIsSubscribedFromFreeWeekend"
            , (bool ( ::ISteamApps::* )(  ))( &::ISteamApps::BIsSubscribedFromFreeWeekend ) )    
        .def( 
            "BIsVACBanned"
            , (bool ( ::ISteamApps::* )(  ))( &::ISteamApps::BIsVACBanned ) )    
        .def( 
            "GetAppBuildId"
            , (int ( ::ISteamApps::* )(  ))( &::ISteamApps::GetAppBuildId ) )    
        .def( 
            "GetAppInstallDir"
            , (::uint32 ( ::ISteamApps::* )( ::AppId_t,char *,::uint32 ))( &::ISteamApps::GetAppInstallDir )
            , ( bp::arg("appID"), bp::arg("pchFolder"), bp::arg("cchFolderBufferSize") ) )    
        .def( 
            "GetAppOwner"
            , (::CSteamID ( ::ISteamApps::* )(  ))( &::ISteamApps::GetAppOwner ) )    
        .def( 
            "GetAvailableGameLanguages"
            , (char const * ( ::ISteamApps::* )(  ))( &::ISteamApps::GetAvailableGameLanguages ) )    
        .def( 
            "GetCurrentGameLanguage"
            , (char const * ( ::ISteamApps::* )(  ))( &::ISteamApps::GetCurrentGameLanguage ) )    
        .def( 
            "GetDLCCount"
            , (int ( ::ISteamApps::* )(  ))( &::ISteamApps::GetDLCCount ) )    
        .def( 
            "GetDlcDownloadProgress"
            , (bool ( ::ISteamApps::* )( ::AppId_t,::uint64 *,::uint64 * ))( &::ISteamApps::GetDlcDownloadProgress )
            , ( bp::arg("nAppID"), bp::arg("punBytesDownloaded"), bp::arg("punBytesTotal") ) )    
        .def( 
            "GetEarliestPurchaseUnixTime"
            , (::uint32 ( ::ISteamApps::* )( ::AppId_t ))( &::ISteamApps::GetEarliestPurchaseUnixTime )
            , ( bp::arg("nAppID") ) )    
        .def( 
            "GetInstalledDepots"
            , (::uint32 ( ::ISteamApps::* )( ::AppId_t,::DepotId_t *,::uint32 ))( &::ISteamApps::GetInstalledDepots )
            , ( bp::arg("appID"), bp::arg("pvecDepots"), bp::arg("cMaxDepots") ) )    
        .def( 
            "GetLaunchQueryParam"
            , (char const * ( ::ISteamApps::* )( char const * ))( &::ISteamApps::GetLaunchQueryParam )
            , ( bp::arg("pchKey") ) )    
        .def( 
            "InstallDLC"
            , (void ( ::ISteamApps::* )( ::AppId_t ))( &::ISteamApps::InstallDLC )
            , ( bp::arg("nAppID") ) )    
        .def( 
            "MarkContentCorrupt"
            , (bool ( ::ISteamApps::* )( bool ))( &::ISteamApps::MarkContentCorrupt )
            , ( bp::arg("bMissingFilesOnly") ) )    
        .def( 
            "RequestAppProofOfPurchaseKey"
            , (void ( ::ISteamApps::* )( ::AppId_t ))( &::ISteamApps::RequestAppProofOfPurchaseKey )
            , ( bp::arg("nAppID") ) )    
        .def( 
            "UninstallDLC"
            , (void ( ::ISteamApps::* )( ::AppId_t ))( &::ISteamApps::UninstallDLC )
            , ( bp::arg("nAppID") ) )    
        .def( 
                    "GetCurrentBetaName"
                    , (bp::tuple (*)( ::ISteamApps & ) )( &GetCurrentBetaName_44cfc773ce5b4e98b34b5a2219de76ad )
                    , ( bp::arg("inst") ) );

    bp::class_< ISteamFriends, boost::noncopyable >( "ISteamFriends", bp::no_init )    
        .def( 
            "ActivateGameOverlay"
            , (void ( ::ISteamFriends::* )( char const * ))( &::ISteamFriends::ActivateGameOverlay )
            , ( bp::arg("pchDialog") ) )    
        .def( 
            "ActivateGameOverlayInviteDialog"
            , (void ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::ActivateGameOverlayInviteDialog )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "ActivateGameOverlayToStore"
            , (void ( ::ISteamFriends::* )( ::AppId_t,::EOverlayToStoreFlag ))( &::ISteamFriends::ActivateGameOverlayToStore )
            , ( bp::arg("nAppID"), bp::arg("eFlag") ) )    
        .def( 
            "ActivateGameOverlayToUser"
            , (void ( ::ISteamFriends::* )( char const *,::CSteamID ))( &::ISteamFriends::ActivateGameOverlayToUser )
            , ( bp::arg("pchDialog"), bp::arg("steamID") ) )    
        .def( 
            "ActivateGameOverlayToWebPage"
            , (void ( ::ISteamFriends::* )( char const * ))( &::ISteamFriends::ActivateGameOverlayToWebPage )
            , ( bp::arg("pchURL") ) )    
        .def( 
            "ClearRichPresence"
            , (void ( ::ISteamFriends::* )(  ))( &::ISteamFriends::ClearRichPresence ) )    
        .def( 
            "CloseClanChatWindowInSteam"
            , (bool ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::CloseClanChatWindowInSteam )
            , ( bp::arg("steamIDClanChat") ) )    
        .def( 
            "DownloadClanActivityCounts"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( ::CSteamID *,int ))( &::ISteamFriends::DownloadClanActivityCounts )
            , ( bp::arg("psteamIDClans"), bp::arg("cClansToRequest") ) )    
        .def( 
            "EnumerateFollowingList"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( ::uint32 ))( &::ISteamFriends::EnumerateFollowingList )
            , ( bp::arg("unStartIndex") ) )    
        .def( 
            "GetChatMemberByIndex"
            , (::CSteamID ( ::ISteamFriends::* )( ::CSteamID,int ))( &::ISteamFriends::GetChatMemberByIndex )
            , ( bp::arg("steamIDClan"), bp::arg("iUser") ) )    
        .def( 
            "GetClanActivityCounts"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,int *,int *,int * ))( &::ISteamFriends::GetClanActivityCounts )
            , ( bp::arg("steamIDClan"), bp::arg("pnOnline"), bp::arg("pnInGame"), bp::arg("pnChatting") ) )    
        .def( 
            "GetClanByIndex"
            , (::CSteamID ( ::ISteamFriends::* )( int ))( &::ISteamFriends::GetClanByIndex )
            , ( bp::arg("iClan") ) )    
        .def( 
            "GetClanChatMemberCount"
            , (int ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetClanChatMemberCount )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "GetClanCount"
            , (int ( ::ISteamFriends::* )(  ))( &::ISteamFriends::GetClanCount ) )    
        .def( 
            "GetClanName"
            , (char const * ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetClanName )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "GetClanOfficerByIndex"
            , (::CSteamID ( ::ISteamFriends::* )( ::CSteamID,int ))( &::ISteamFriends::GetClanOfficerByIndex )
            , ( bp::arg("steamIDClan"), bp::arg("iOfficer") ) )    
        .def( 
            "GetClanOfficerCount"
            , (int ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetClanOfficerCount )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "GetClanOwner"
            , (::CSteamID ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetClanOwner )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "GetClanTag"
            , (char const * ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetClanTag )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "GetCoplayFriend"
            , (::CSteamID ( ::ISteamFriends::* )( int ))( &::ISteamFriends::GetCoplayFriend )
            , ( bp::arg("iCoplayFriend") ) )    
        .def( 
            "GetCoplayFriendCount"
            , (int ( ::ISteamFriends::* )(  ))( &::ISteamFriends::GetCoplayFriendCount ) )    
        .def( 
            "GetFollowerCount"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetFollowerCount )
            , ( bp::arg("steamID") ) )    
        .def( 
            "GetFriendByIndex"
            , (::CSteamID ( ::ISteamFriends::* )( int,int ))( &::ISteamFriends::GetFriendByIndex )
            , ( bp::arg("iFriend"), bp::arg("iFriendFlags") ) )    
        .def( 
            "GetFriendCoplayGame"
            , (::AppId_t ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetFriendCoplayGame )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetFriendCoplayTime"
            , (int ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetFriendCoplayTime )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetFriendCount"
            , (int ( ::ISteamFriends::* )( int ))( &::ISteamFriends::GetFriendCount )
            , ( bp::arg("iFriendFlags") ) )    
        .def( 
            "GetFriendCountFromSource"
            , (int ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetFriendCountFromSource )
            , ( bp::arg("steamIDSource") ) )    
        .def( 
            "GetFriendFromSourceByIndex"
            , (::CSteamID ( ::ISteamFriends::* )( ::CSteamID,int ))( &::ISteamFriends::GetFriendFromSourceByIndex )
            , ( bp::arg("steamIDSource"), bp::arg("iFriend") ) )    
        .def( 
            "GetFriendPersonaName"
            , (char const * ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetFriendPersonaName )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetFriendPersonaNameHistory"
            , (char const * ( ::ISteamFriends::* )( ::CSteamID,int ))( &::ISteamFriends::GetFriendPersonaNameHistory )
            , ( bp::arg("steamIDFriend"), bp::arg("iPersonaName") ) )    
        .def( 
            "GetFriendPersonaState"
            , (::EPersonaState ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetFriendPersonaState )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetFriendRelationship"
            , (::EFriendRelationship ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetFriendRelationship )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetFriendRichPresence"
            , (char const * ( ::ISteamFriends::* )( ::CSteamID,char const * ))( &::ISteamFriends::GetFriendRichPresence )
            , ( bp::arg("steamIDFriend"), bp::arg("pchKey") ) )    
        .def( 
            "GetFriendRichPresenceKeyByIndex"
            , (char const * ( ::ISteamFriends::* )( ::CSteamID,int ))( &::ISteamFriends::GetFriendRichPresenceKeyByIndex )
            , ( bp::arg("steamIDFriend"), bp::arg("iKey") ) )    
        .def( 
            "GetFriendRichPresenceKeyCount"
            , (int ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetFriendRichPresenceKeyCount )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetFriendSteamLevel"
            , (int ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetFriendSteamLevel )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetFriendsGroupCount"
            , (int ( ::ISteamFriends::* )(  ))( &::ISteamFriends::GetFriendsGroupCount ) )    
        .def( 
            "GetFriendsGroupIDByIndex"
            , (::FriendsGroupID_t ( ::ISteamFriends::* )( int ))( &::ISteamFriends::GetFriendsGroupIDByIndex )
            , ( bp::arg("iFG") ) )    
        .def( 
            "GetFriendsGroupMembersCount"
            , (int ( ::ISteamFriends::* )( ::FriendsGroupID_t ))( &::ISteamFriends::GetFriendsGroupMembersCount )
            , ( bp::arg("friendsGroupID") ) )    
        .def( 
            "GetFriendsGroupMembersList"
            , (void ( ::ISteamFriends::* )( ::FriendsGroupID_t,::CSteamID *,int ))( &::ISteamFriends::GetFriendsGroupMembersList )
            , ( bp::arg("friendsGroupID"), bp::arg("pOutSteamIDMembers"), bp::arg("nMembersCount") ) )    
        .def( 
            "GetFriendsGroupName"
            , (char const * ( ::ISteamFriends::* )( ::FriendsGroupID_t ))( &::ISteamFriends::GetFriendsGroupName )
            , ( bp::arg("friendsGroupID") ) )    
        .def( 
            "GetLargeFriendAvatar"
            , (int ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetLargeFriendAvatar )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetMediumFriendAvatar"
            , (int ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetMediumFriendAvatar )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetPersonaName"
            , (char const * ( ::ISteamFriends::* )(  ))( &::ISteamFriends::GetPersonaName ) )    
        .def( 
            "GetPersonaState"
            , (::EPersonaState ( ::ISteamFriends::* )(  ))( &::ISteamFriends::GetPersonaState ) )    
        .def( 
            "GetPlayerNickname"
            , (char const * ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetPlayerNickname )
            , ( bp::arg("steamIDPlayer") ) )    
        .def( 
            "GetSmallFriendAvatar"
            , (int ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::GetSmallFriendAvatar )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "GetUserRestrictions"
            , (::uint32 ( ::ISteamFriends::* )(  ))( &::ISteamFriends::GetUserRestrictions ) )    
        .def( 
            "HasFriend"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,int ))( &::ISteamFriends::HasFriend )
            , ( bp::arg("steamIDFriend"), bp::arg("iFriendFlags") ) )    
        .def( 
            "InviteUserToGame"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,char const * ))( &::ISteamFriends::InviteUserToGame )
            , ( bp::arg("steamIDFriend"), bp::arg("pchConnectString") ) )    
        .def( 
            "IsClanChatAdmin"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,::CSteamID ))( &::ISteamFriends::IsClanChatAdmin )
            , ( bp::arg("steamIDClanChat"), bp::arg("steamIDUser") ) )    
        .def( 
            "IsClanChatWindowOpenInSteam"
            , (bool ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::IsClanChatWindowOpenInSteam )
            , ( bp::arg("steamIDClanChat") ) )    
        .def( 
            "IsFollowing"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::IsFollowing )
            , ( bp::arg("steamID") ) )    
        .def( 
            "IsUserInSource"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,::CSteamID ))( &::ISteamFriends::IsUserInSource )
            , ( bp::arg("steamIDUser"), bp::arg("steamIDSource") ) )    
        .def( 
            "JoinClanChatRoom"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::JoinClanChatRoom )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "LeaveClanChatRoom"
            , (bool ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::LeaveClanChatRoom )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "OpenClanChatWindowInSteam"
            , (bool ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::OpenClanChatWindowInSteam )
            , ( bp::arg("steamIDClanChat") ) )    
        .def( 
            "ReplyToFriendMessage"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,char const * ))( &::ISteamFriends::ReplyToFriendMessage )
            , ( bp::arg("steamIDFriend"), bp::arg("pchMsgToSend") ) )    
        .def( 
            "RequestClanOfficerList"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::RequestClanOfficerList )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "RequestFriendRichPresence"
            , (void ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::RequestFriendRichPresence )
            , ( bp::arg("steamIDFriend") ) )    
        .def( 
            "RequestUserInformation"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,bool ))( &::ISteamFriends::RequestUserInformation )
            , ( bp::arg("steamIDUser"), bp::arg("bRequireNameOnly") ) )    
        .def( 
            "SendClanChatMessage"
            , (bool ( ::ISteamFriends::* )( ::CSteamID,char const * ))( &::ISteamFriends::SendClanChatMessage )
            , ( bp::arg("steamIDClanChat"), bp::arg("pchText") ) )    
        .def( 
            "SetInGameVoiceSpeaking"
            , (void ( ::ISteamFriends::* )( ::CSteamID,bool ))( &::ISteamFriends::SetInGameVoiceSpeaking )
            , ( bp::arg("steamIDUser"), bp::arg("bSpeaking") ) )    
        .def( 
            "SetListenForFriendsMessages"
            , (bool ( ::ISteamFriends::* )( bool ))( &::ISteamFriends::SetListenForFriendsMessages )
            , ( bp::arg("bInterceptEnabled") ) )    
        .def( 
            "SetPersonaName"
            , (::SteamAPICall_t ( ::ISteamFriends::* )( char const * ))( &::ISteamFriends::SetPersonaName )
            , ( bp::arg("pchPersonaName") ) )    
        .def( 
            "SetPlayedWith"
            , (void ( ::ISteamFriends::* )( ::CSteamID ))( &::ISteamFriends::SetPlayedWith )
            , ( bp::arg("steamIDUserPlayedWith") ) )    
        .def( 
            "SetRichPresence"
            , (bool ( ::ISteamFriends::* )( char const *,char const * ))( &::ISteamFriends::SetRichPresence )
            , ( bp::arg("pchKey"), bp::arg("pchValue") ) );

    bp::class_< ISteamGameServer, boost::noncopyable >( "ISteamGameServer", bp::no_init )    
        .def( 
            "AssociateWithClan"
            , (::SteamAPICall_t ( ::ISteamGameServer::* )( ::CSteamID ))( &::ISteamGameServer::AssociateWithClan )
            , ( bp::arg("steamIDClan") ) )    
        .def( 
            "BLoggedOn"
            , (bool ( ::ISteamGameServer::* )(  ))( &::ISteamGameServer::BLoggedOn ) )    
        .def( 
            "BSecure"
            , (bool ( ::ISteamGameServer::* )(  ))( &::ISteamGameServer::BSecure ) )    
        .def( 
            "BUpdateUserData"
            , (bool ( ::ISteamGameServer::* )( ::CSteamID,char const *,::uint32 ))( &::ISteamGameServer::BUpdateUserData )
            , ( bp::arg("steamIDUser"), bp::arg("pchPlayerName"), bp::arg("uScore") ) )    
        .def( 
            "CancelAuthTicket"
            , (void ( ::ISteamGameServer::* )( ::HAuthTicket ))( &::ISteamGameServer::CancelAuthTicket )
            , ( bp::arg("hAuthTicket") ) )    
        .def( 
            "ClearAllKeyValues"
            , (void ( ::ISteamGameServer::* )(  ))( &::ISteamGameServer::ClearAllKeyValues ) )    
        .def( 
            "ComputeNewPlayerCompatibility"
            , (::SteamAPICall_t ( ::ISteamGameServer::* )( ::CSteamID ))( &::ISteamGameServer::ComputeNewPlayerCompatibility )
            , ( bp::arg("steamIDNewPlayer") ) )    
        .def( 
            "CreateUnauthenticatedUserConnection"
            , (::CSteamID ( ::ISteamGameServer::* )(  ))( &::ISteamGameServer::CreateUnauthenticatedUserConnection ) )    
        .def( 
            "EnableHeartbeats"
            , (void ( ::ISteamGameServer::* )( bool ))( &::ISteamGameServer::EnableHeartbeats )
            , ( bp::arg("bActive") ) )    
        .def( 
            "EndAuthSession"
            , (void ( ::ISteamGameServer::* )( ::CSteamID ))( &::ISteamGameServer::EndAuthSession )
            , ( bp::arg("steamID") ) )    
        .def( 
            "ForceHeartbeat"
            , (void ( ::ISteamGameServer::* )(  ))( &::ISteamGameServer::ForceHeartbeat ) )    
        .def( 
            "GetGameplayStats"
            , (void ( ::ISteamGameServer::* )(  ))( &::ISteamGameServer::GetGameplayStats ) )    
        .def( 
            "GetPublicIP"
            , (::uint32 ( ::ISteamGameServer::* )(  ))( &::ISteamGameServer::GetPublicIP ) )    
        .def( 
            "GetServerReputation"
            , (::SteamAPICall_t ( ::ISteamGameServer::* )(  ))( &::ISteamGameServer::GetServerReputation ) )    
        .def( 
            "GetSteamID"
            , (::CSteamID ( ::ISteamGameServer::* )(  ))( &::ISteamGameServer::GetSteamID ) )    
        .def( 
            "InitGameServer"
            , (bool ( ::ISteamGameServer::* )( ::uint32,::uint16,::uint16,::uint32,::AppId_t,char const * ))( &::ISteamGameServer::InitGameServer )
            , ( bp::arg("unIP"), bp::arg("usGamePort"), bp::arg("usQueryPort"), bp::arg("unFlags"), bp::arg("nGameAppId"), bp::arg("pchVersionString") ) )    
        .def( 
            "LogOff"
            , (void ( ::ISteamGameServer::* )(  ))( &::ISteamGameServer::LogOff ) )    
        .def( 
            "LogOn"
            , (void ( ::ISteamGameServer::* )( char const * ))( &::ISteamGameServer::LogOn )
            , ( bp::arg("pszToken") ) )    
        .def( 
            "LogOnAnonymous"
            , (void ( ::ISteamGameServer::* )(  ))( &::ISteamGameServer::LogOnAnonymous ) )    
        .def( 
            "RequestUserGroupStatus"
            , (bool ( ::ISteamGameServer::* )( ::CSteamID,::CSteamID ))( &::ISteamGameServer::RequestUserGroupStatus )
            , ( bp::arg("steamIDUser"), bp::arg("steamIDGroup") ) )    
        .def( 
            "SendUserDisconnect"
            , (void ( ::ISteamGameServer::* )( ::CSteamID ))( &::ISteamGameServer::SendUserDisconnect )
            , ( bp::arg("steamIDUser") ) )    
        .def( 
            "SetBotPlayerCount"
            , (void ( ::ISteamGameServer::* )( int ))( &::ISteamGameServer::SetBotPlayerCount )
            , ( bp::arg("cBotplayers") ) )    
        .def( 
            "SetDedicatedServer"
            , (void ( ::ISteamGameServer::* )( bool ))( &::ISteamGameServer::SetDedicatedServer )
            , ( bp::arg("bDedicated") ) )    
        .def( 
            "SetGameData"
            , (void ( ::ISteamGameServer::* )( char const * ))( &::ISteamGameServer::SetGameData )
            , ( bp::arg("pchGameData") ) )    
        .def( 
            "SetGameDescription"
            , (void ( ::ISteamGameServer::* )( char const * ))( &::ISteamGameServer::SetGameDescription )
            , ( bp::arg("pszGameDescription") ) )    
        .def( 
            "SetGameTags"
            , (void ( ::ISteamGameServer::* )( char const * ))( &::ISteamGameServer::SetGameTags )
            , ( bp::arg("pchGameTags") ) )    
        .def( 
            "SetHeartbeatInterval"
            , (void ( ::ISteamGameServer::* )( int ))( &::ISteamGameServer::SetHeartbeatInterval )
            , ( bp::arg("iHeartbeatInterval") ) )    
        .def( 
            "SetKeyValue"
            , (void ( ::ISteamGameServer::* )( char const *,char const * ))( &::ISteamGameServer::SetKeyValue )
            , ( bp::arg("pKey"), bp::arg("pValue") ) )    
        .def( 
            "SetMapName"
            , (void ( ::ISteamGameServer::* )( char const * ))( &::ISteamGameServer::SetMapName )
            , ( bp::arg("pszMapName") ) )    
        .def( 
            "SetMaxPlayerCount"
            , (void ( ::ISteamGameServer::* )( int ))( &::ISteamGameServer::SetMaxPlayerCount )
            , ( bp::arg("cPlayersMax") ) )    
        .def( 
            "SetModDir"
            , (void ( ::ISteamGameServer::* )( char const * ))( &::ISteamGameServer::SetModDir )
            , ( bp::arg("pszModDir") ) )    
        .def( 
            "SetPasswordProtected"
            , (void ( ::ISteamGameServer::* )( bool ))( &::ISteamGameServer::SetPasswordProtected )
            , ( bp::arg("bPasswordProtected") ) )    
        .def( 
            "SetProduct"
            , (void ( ::ISteamGameServer::* )( char const * ))( &::ISteamGameServer::SetProduct )
            , ( bp::arg("pszProduct") ) )    
        .def( 
            "SetRegion"
            , (void ( ::ISteamGameServer::* )( char const * ))( &::ISteamGameServer::SetRegion )
            , ( bp::arg("pszRegion") ) )    
        .def( 
            "SetServerName"
            , (void ( ::ISteamGameServer::* )( char const * ))( &::ISteamGameServer::SetServerName )
            , ( bp::arg("pszServerName") ) )    
        .def( 
            "SetSpectatorPort"
            , (void ( ::ISteamGameServer::* )( ::uint16 ))( &::ISteamGameServer::SetSpectatorPort )
            , ( bp::arg("unSpectatorPort") ) )    
        .def( 
            "SetSpectatorServerName"
            , (void ( ::ISteamGameServer::* )( char const * ))( &::ISteamGameServer::SetSpectatorServerName )
            , ( bp::arg("pszSpectatorServerName") ) )    
        .def( 
            "UserHasLicenseForApp"
            , (::EUserHasLicenseForAppResult ( ::ISteamGameServer::* )( ::CSteamID,::AppId_t ))( &::ISteamGameServer::UserHasLicenseForApp )
            , ( bp::arg("steamID"), bp::arg("appID") ) )    
        .def( 
            "WasRestartRequested"
            , (bool ( ::ISteamGameServer::* )(  ))( &::ISteamGameServer::WasRestartRequested ) );

    bp::class_< ISteamMatchmaking, boost::noncopyable >( "ISteamMatchmaking", bp::no_init )    
        .def( 
            "AddFavoriteGame"
            , (int ( ::ISteamMatchmaking::* )( ::AppId_t,::uint32,::uint16,::uint16,::uint32,::uint32 ))( &::ISteamMatchmaking::AddFavoriteGame )
            , ( bp::arg("nAppID"), bp::arg("nIP"), bp::arg("nConnPort"), bp::arg("nQueryPort"), bp::arg("unFlags"), bp::arg("rTime32LastPlayedOnServer") ) )    
        .def( 
            "AddRequestLobbyListCompatibleMembersFilter"
            , (void ( ::ISteamMatchmaking::* )( ::CSteamID ))( &::ISteamMatchmaking::AddRequestLobbyListCompatibleMembersFilter )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "AddRequestLobbyListDistanceFilter"
            , (void ( ::ISteamMatchmaking::* )( ::ELobbyDistanceFilter ))( &::ISteamMatchmaking::AddRequestLobbyListDistanceFilter )
            , ( bp::arg("eLobbyDistanceFilter") ) )    
        .def( 
            "AddRequestLobbyListFilterSlotsAvailable"
            , (void ( ::ISteamMatchmaking::* )( int ))( &::ISteamMatchmaking::AddRequestLobbyListFilterSlotsAvailable )
            , ( bp::arg("nSlotsAvailable") ) )    
        .def( 
            "AddRequestLobbyListNearValueFilter"
            , (void ( ::ISteamMatchmaking::* )( char const *,int ))( &::ISteamMatchmaking::AddRequestLobbyListNearValueFilter )
            , ( bp::arg("pchKeyToMatch"), bp::arg("nValueToBeCloseTo") ) )    
        .def( 
            "AddRequestLobbyListNumericalFilter"
            , (void ( ::ISteamMatchmaking::* )( char const *,int,::ELobbyComparison ))( &::ISteamMatchmaking::AddRequestLobbyListNumericalFilter )
            , ( bp::arg("pchKeyToMatch"), bp::arg("nValueToMatch"), bp::arg("eComparisonType") ) )    
        .def( 
            "AddRequestLobbyListResultCountFilter"
            , (void ( ::ISteamMatchmaking::* )( int ))( &::ISteamMatchmaking::AddRequestLobbyListResultCountFilter )
            , ( bp::arg("cMaxResults") ) )    
        .def( 
            "AddRequestLobbyListStringFilter"
            , (void ( ::ISteamMatchmaking::* )( char const *,char const *,::ELobbyComparison ))( &::ISteamMatchmaking::AddRequestLobbyListStringFilter )
            , ( bp::arg("pchKeyToMatch"), bp::arg("pchValueToMatch"), bp::arg("eComparisonType") ) )    
        .def( 
            "CreateLobby"
            , (::SteamAPICall_t ( ::ISteamMatchmaking::* )( ::ELobbyType,int ))( &::ISteamMatchmaking::CreateLobby )
            , ( bp::arg("eLobbyType"), bp::arg("cMaxMembers") ) )    
        .def( 
            "DeleteLobbyData"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,char const * ))( &::ISteamMatchmaking::DeleteLobbyData )
            , ( bp::arg("steamIDLobby"), bp::arg("pchKey") ) )    
        .def( 
            "GetFavoriteGame"
            , (bool ( ::ISteamMatchmaking::* )( int,::AppId_t *,::uint32 *,::uint16 *,::uint16 *,::uint32 *,::uint32 * ))( &::ISteamMatchmaking::GetFavoriteGame )
            , ( bp::arg("iGame"), bp::arg("pnAppID"), bp::arg("pnIP"), bp::arg("pnConnPort"), bp::arg("pnQueryPort"), bp::arg("punFlags"), bp::arg("pRTime32LastPlayedOnServer") ) )    
        .def( 
            "GetFavoriteGameCount"
            , (int ( ::ISteamMatchmaking::* )(  ))( &::ISteamMatchmaking::GetFavoriteGameCount ) )    
        .def( 
            "GetLobbyByIndex"
            , (::CSteamID ( ::ISteamMatchmaking::* )( int ))( &::ISteamMatchmaking::GetLobbyByIndex )
            , ( bp::arg("iLobby") ) )    
        .def( 
            "GetLobbyData"
            , (char const * ( ::ISteamMatchmaking::* )( ::CSteamID,char const * ))( &::ISteamMatchmaking::GetLobbyData )
            , ( bp::arg("steamIDLobby"), bp::arg("pchKey") ) )    
        .def( 
            "GetLobbyDataCount"
            , (int ( ::ISteamMatchmaking::* )( ::CSteamID ))( &::ISteamMatchmaking::GetLobbyDataCount )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "GetLobbyGameServer"
            , (boost::python::tuple (*)( ::ISteamMatchmaking &,::CSteamID ))( &GetLobbyGameServer_e3badaaa69eb32a59ea528ba9e97e8ee )
            , ( bp::arg("inst"), bp::arg("steamIDLobby") ) )    
        .def( 
            "GetLobbyMemberByIndex"
            , (::CSteamID ( ::ISteamMatchmaking::* )( ::CSteamID,int ))( &::ISteamMatchmaking::GetLobbyMemberByIndex )
            , ( bp::arg("steamIDLobby"), bp::arg("iMember") ) )    
        .def( 
            "GetLobbyMemberData"
            , (char const * ( ::ISteamMatchmaking::* )( ::CSteamID,::CSteamID,char const * ))( &::ISteamMatchmaking::GetLobbyMemberData )
            , ( bp::arg("steamIDLobby"), bp::arg("steamIDUser"), bp::arg("pchKey") ) )    
        .def( 
            "GetLobbyMemberLimit"
            , (int ( ::ISteamMatchmaking::* )( ::CSteamID ))( &::ISteamMatchmaking::GetLobbyMemberLimit )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "GetLobbyOwner"
            , (::CSteamID ( ::ISteamMatchmaking::* )( ::CSteamID ))( &::ISteamMatchmaking::GetLobbyOwner )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "GetNumLobbyMembers"
            , (int ( ::ISteamMatchmaking::* )( ::CSteamID ))( &::ISteamMatchmaking::GetNumLobbyMembers )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "InviteUserToLobby"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,::CSteamID ))( &::ISteamMatchmaking::InviteUserToLobby )
            , ( bp::arg("steamIDLobby"), bp::arg("steamIDInvitee") ) )    
        .def( 
            "JoinLobby"
            , (::SteamAPICall_t ( ::ISteamMatchmaking::* )( ::CSteamID ))( &::ISteamMatchmaking::JoinLobby )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "LeaveLobby"
            , (void ( ::ISteamMatchmaking::* )( ::CSteamID ))( &::ISteamMatchmaking::LeaveLobby )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "RemoveFavoriteGame"
            , (bool ( ::ISteamMatchmaking::* )( ::AppId_t,::uint32,::uint16,::uint16,::uint32 ))( &::ISteamMatchmaking::RemoveFavoriteGame )
            , ( bp::arg("nAppID"), bp::arg("nIP"), bp::arg("nConnPort"), bp::arg("nQueryPort"), bp::arg("unFlags") ) )    
        .def( 
            "RequestLobbyData"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID ))( &::ISteamMatchmaking::RequestLobbyData )
            , ( bp::arg("steamIDLobby") ) )    
        .def( 
            "RequestLobbyList"
            , (::SteamAPICall_t ( ::ISteamMatchmaking::* )(  ))( &::ISteamMatchmaking::RequestLobbyList ) )    
        .def( 
            "SetLinkedLobby"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,::CSteamID ))( &::ISteamMatchmaking::SetLinkedLobby )
            , ( bp::arg("steamIDLobby"), bp::arg("steamIDLobbyDependent") ) )    
        .def( 
            "SetLobbyData"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,char const *,char const * ))( &::ISteamMatchmaking::SetLobbyData )
            , ( bp::arg("steamIDLobby"), bp::arg("pchKey"), bp::arg("pchValue") ) )    
        .def( 
            "SetLobbyGameServer"
            , (void ( ::ISteamMatchmaking::* )( ::CSteamID,::uint32,::uint16,::CSteamID ))( &::ISteamMatchmaking::SetLobbyGameServer )
            , ( bp::arg("steamIDLobby"), bp::arg("unGameServerIP"), bp::arg("unGameServerPort"), bp::arg("steamIDGameServer") ) )    
        .def( 
            "SetLobbyJoinable"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,bool ))( &::ISteamMatchmaking::SetLobbyJoinable )
            , ( bp::arg("steamIDLobby"), bp::arg("bLobbyJoinable") ) )    
        .def( 
            "SetLobbyMemberData"
            , (void ( ::ISteamMatchmaking::* )( ::CSteamID,char const *,char const * ))( &::ISteamMatchmaking::SetLobbyMemberData )
            , ( bp::arg("steamIDLobby"), bp::arg("pchKey"), bp::arg("pchValue") ) )    
        .def( 
            "SetLobbyMemberLimit"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,int ))( &::ISteamMatchmaking::SetLobbyMemberLimit )
            , ( bp::arg("steamIDLobby"), bp::arg("cMaxMembers") ) )    
        .def( 
            "SetLobbyOwner"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,::CSteamID ))( &::ISteamMatchmaking::SetLobbyOwner )
            , ( bp::arg("steamIDLobby"), bp::arg("steamIDNewOwner") ) )    
        .def( 
            "SetLobbyType"
            , (bool ( ::ISteamMatchmaking::* )( ::CSteamID,::ELobbyType ))( &::ISteamMatchmaking::SetLobbyType )
            , ( bp::arg("steamIDLobby"), bp::arg("eLobbyType") ) );

    bp::class_< ISteamUser, boost::noncopyable >( "ISteamUser", bp::no_init )    
        .def( 
            "AdvertiseGame"
            , (void ( ::ISteamUser::* )( ::CSteamID,::uint32,::uint16 ))( &::ISteamUser::AdvertiseGame )
            , ( bp::arg("steamIDGameServer"), bp::arg("unIPServer"), bp::arg("usPortServer") ) )    
        .def( 
            "BIsBehindNAT"
            , (bool ( ::ISteamUser::* )(  ))( &::ISteamUser::BIsBehindNAT ) )    
        .def( 
            "BLoggedOn"
            , (bool ( ::ISteamUser::* )(  ))( &::ISteamUser::BLoggedOn ) )    
        .def( 
            "CancelAuthTicket"
            , (void ( ::ISteamUser::* )( ::HAuthTicket ))( &::ISteamUser::CancelAuthTicket )
            , ( bp::arg("hAuthTicket") ) )    
        .def( 
            "EndAuthSession"
            , (void ( ::ISteamUser::* )( ::CSteamID ))( &::ISteamUser::EndAuthSession )
            , ( bp::arg("steamID") ) )    
        .def( 
            "GetAvailableVoice"
            , (::EVoiceResult ( ::ISteamUser::* )( ::uint32 *,::uint32 *,::uint32 ))( &::ISteamUser::GetAvailableVoice )
            , ( bp::arg("pcbCompressed"), bp::arg("pcbUncompressed"), bp::arg("nUncompressedVoiceDesiredSampleRate") ) )    
        .def( 
            "GetGameBadgeLevel"
            , (int ( ::ISteamUser::* )( int,bool ))( &::ISteamUser::GetGameBadgeLevel )
            , ( bp::arg("nSeries"), bp::arg("bFoil") ) )    
        .def( 
            "GetHSteamUser"
            , (::HSteamUser ( ::ISteamUser::* )(  ))( &::ISteamUser::GetHSteamUser ) )    
        .def( 
            "GetPlayerSteamLevel"
            , (int ( ::ISteamUser::* )(  ))( &::ISteamUser::GetPlayerSteamLevel ) )    
        .def( 
            "GetSteamID"
            , (::CSteamID ( ::ISteamUser::* )(  ))( &::ISteamUser::GetSteamID ) )    
        .def( 
            "GetUserDataFolder"
            , (bool ( ::ISteamUser::* )( char *,int ))( &::ISteamUser::GetUserDataFolder )
            , ( bp::arg("pchBuffer"), bp::arg("cubBuffer") ) )    
        .def( 
            "GetVoiceOptimalSampleRate"
            , (::uint32 ( ::ISteamUser::* )(  ))( &::ISteamUser::GetVoiceOptimalSampleRate ) )    
        .def( 
            "RequestStoreAuthURL"
            , (::SteamAPICall_t ( ::ISteamUser::* )( char const * ))( &::ISteamUser::RequestStoreAuthURL )
            , ( bp::arg("pchRedirectURL") ) )    
        .def( 
            "StartVoiceRecording"
            , (void ( ::ISteamUser::* )(  ))( &::ISteamUser::StartVoiceRecording ) )    
        .def( 
            "StopVoiceRecording"
            , (void ( ::ISteamUser::* )(  ))( &::ISteamUser::StopVoiceRecording ) )    
        .def( 
            "TerminateGameConnection"
            , (void ( ::ISteamUser::* )( ::uint32,::uint16 ))( &::ISteamUser::TerminateGameConnection )
            , ( bp::arg("unIPServer"), bp::arg("usPortServer") ) )    
        .def( 
            "TrackAppUsageEvent"
            , (void ( ::ISteamUser::* )( ::CGameID,int,char const * ))( &::ISteamUser::TrackAppUsageEvent )
            , ( bp::arg("gameID"), bp::arg("eAppUsageEvent"), bp::arg("pchExtraInfo")="" ) )    
        .def( 
            "UserHasLicenseForApp"
            , (::EUserHasLicenseForAppResult ( ::ISteamUser::* )( ::CSteamID,::AppId_t ))( &::ISteamUser::UserHasLicenseForApp )
            , ( bp::arg("steamID"), bp::arg("appID") ) );

    bp::class_< ISteamUserStats, boost::noncopyable >( "ISteamUserStats", bp::no_init )    
        .def( 
            "AttachLeaderboardUGC"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( ::SteamLeaderboard_t,::UGCHandle_t ))( &::ISteamUserStats::AttachLeaderboardUGC )
            , ( bp::arg("hSteamLeaderboard"), bp::arg("hUGC") ) )    
        .def( 
            "ClearAchievement"
            , (bool ( ::ISteamUserStats::* )( char const * ))( &::ISteamUserStats::ClearAchievement )
            , ( bp::arg("pchName") ) )    
        .def( 
            "DownloadLeaderboardEntries"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( ::SteamLeaderboard_t,::ELeaderboardDataRequest,int,int ))( &::ISteamUserStats::DownloadLeaderboardEntries )
            , ( bp::arg("hSteamLeaderboard"), bp::arg("eLeaderboardDataRequest"), bp::arg("nRangeStart"), bp::arg("nRangeEnd") ) )    
        .def( 
            "DownloadLeaderboardEntriesForUsers"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( ::SteamLeaderboard_t,::CSteamID *,int ))( &::ISteamUserStats::DownloadLeaderboardEntriesForUsers )
            , ( bp::arg("hSteamLeaderboard"), bp::arg("prgUsers"), bp::arg("cUsers") ) )    
        .def( 
            "FindLeaderboard"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( char const * ))( &::ISteamUserStats::FindLeaderboard )
            , ( bp::arg("pchLeaderboardName") ) )    
        .def( 
            "FindOrCreateLeaderboard"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( char const *,::ELeaderboardSortMethod,::ELeaderboardDisplayType ))( &::ISteamUserStats::FindOrCreateLeaderboard )
            , ( bp::arg("pchLeaderboardName"), bp::arg("eLeaderboardSortMethod"), bp::arg("eLeaderboardDisplayType") ) )    
        .def( 
            "GetAchievement"
            , (bool ( ::ISteamUserStats::* )( char const *,bool * ))( &::ISteamUserStats::GetAchievement )
            , ( bp::arg("pchName"), bp::arg("pbAchieved") ) )    
        .def( 
            "GetAchievementAchievedPercent"
            , (bool ( ::ISteamUserStats::* )( char const *,float * ))( &::ISteamUserStats::GetAchievementAchievedPercent )
            , ( bp::arg("pchName"), bp::arg("pflPercent") ) )    
        .def( 
            "GetAchievementAndUnlockTime"
            , (bool ( ::ISteamUserStats::* )( char const *,bool *,::uint32 * ))( &::ISteamUserStats::GetAchievementAndUnlockTime )
            , ( bp::arg("pchName"), bp::arg("pbAchieved"), bp::arg("punUnlockTime") ) )    
        .def( 
            "GetAchievementDisplayAttribute"
            , (char const * ( ::ISteamUserStats::* )( char const *,char const * ))( &::ISteamUserStats::GetAchievementDisplayAttribute )
            , ( bp::arg("pchName"), bp::arg("pchKey") ) )    
        .def( 
            "GetAchievementIcon"
            , (int ( ::ISteamUserStats::* )( char const * ))( &::ISteamUserStats::GetAchievementIcon )
            , ( bp::arg("pchName") ) )    
        .def( 
            "GetAchievementName"
            , (char const * ( ::ISteamUserStats::* )( ::uint32 ))( &::ISteamUserStats::GetAchievementName )
            , ( bp::arg("iAchievement") ) )    
        .def( 
            "GetDownloadedLeaderboardEntry"
            , (bool ( ::ISteamUserStats::* )( ::SteamLeaderboardEntries_t,int,::LeaderboardEntry_t *,::int32 *,int ))( &::ISteamUserStats::GetDownloadedLeaderboardEntry )
            , ( bp::arg("hSteamLeaderboardEntries"), bp::arg("index"), bp::arg("pLeaderboardEntry"), bp::arg("pDetails"), bp::arg("cDetailsMax") ) )    
        .def( 
            "GetGlobalStat"
            , (bool ( ::ISteamUserStats::* )( char const *,::int64 * ))( &::ISteamUserStats::GetGlobalStat )
            , ( bp::arg("pchStatName"), bp::arg("pData") ) )    
        .def( 
            "GetGlobalStat"
            , (bool ( ::ISteamUserStats::* )( char const *,double * ))( &::ISteamUserStats::GetGlobalStat )
            , ( bp::arg("pchStatName"), bp::arg("pData") ) )    
        .def( 
            "GetGlobalStatHistory"
            , (::int32 ( ::ISteamUserStats::* )( char const *,::int64 *,::uint32 ))( &::ISteamUserStats::GetGlobalStatHistory )
            , ( bp::arg("pchStatName"), bp::arg("pData"), bp::arg("cubData") ) )    
        .def( 
            "GetGlobalStatHistory"
            , (::int32 ( ::ISteamUserStats::* )( char const *,double *,::uint32 ))( &::ISteamUserStats::GetGlobalStatHistory )
            , ( bp::arg("pchStatName"), bp::arg("pData"), bp::arg("cubData") ) )    
        .def( 
            "GetLeaderboardDisplayType"
            , (::ELeaderboardDisplayType ( ::ISteamUserStats::* )( ::SteamLeaderboard_t ))( &::ISteamUserStats::GetLeaderboardDisplayType )
            , ( bp::arg("hSteamLeaderboard") ) )    
        .def( 
            "GetLeaderboardEntryCount"
            , (int ( ::ISteamUserStats::* )( ::SteamLeaderboard_t ))( &::ISteamUserStats::GetLeaderboardEntryCount )
            , ( bp::arg("hSteamLeaderboard") ) )    
        .def( 
            "GetLeaderboardName"
            , (char const * ( ::ISteamUserStats::* )( ::SteamLeaderboard_t ))( &::ISteamUserStats::GetLeaderboardName )
            , ( bp::arg("hSteamLeaderboard") ) )    
        .def( 
            "GetLeaderboardSortMethod"
            , (::ELeaderboardSortMethod ( ::ISteamUserStats::* )( ::SteamLeaderboard_t ))( &::ISteamUserStats::GetLeaderboardSortMethod )
            , ( bp::arg("hSteamLeaderboard") ) )    
        .def( 
            "GetMostAchievedAchievementInfo"
            , (int ( ::ISteamUserStats::* )( char *,::uint32,float *,bool * ))( &::ISteamUserStats::GetMostAchievedAchievementInfo )
            , ( bp::arg("pchName"), bp::arg("unNameBufLen"), bp::arg("pflPercent"), bp::arg("pbAchieved") ) )    
        .def( 
            "GetNextMostAchievedAchievementInfo"
            , (int ( ::ISteamUserStats::* )( int,char *,::uint32,float *,bool * ))( &::ISteamUserStats::GetNextMostAchievedAchievementInfo )
            , ( bp::arg("iIteratorPrevious"), bp::arg("pchName"), bp::arg("unNameBufLen"), bp::arg("pflPercent"), bp::arg("pbAchieved") ) )    
        .def( 
            "GetNumAchievements"
            , (::uint32 ( ::ISteamUserStats::* )(  ))( &::ISteamUserStats::GetNumAchievements ) )    
        .def( 
            "GetNumberOfCurrentPlayers"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )(  ))( &::ISteamUserStats::GetNumberOfCurrentPlayers ) )    
        .def( 
            "GetStat"
            , (bool ( ::ISteamUserStats::* )( char const *,::int32 * ))( &::ISteamUserStats::GetStat )
            , ( bp::arg("pchName"), bp::arg("pData") ) )    
        .def( 
            "GetStat"
            , (bool ( ::ISteamUserStats::* )( char const *,float * ))( &::ISteamUserStats::GetStat )
            , ( bp::arg("pchName"), bp::arg("pData") ) )    
        .def( 
            "GetUserAchievement"
            , (bool ( ::ISteamUserStats::* )( ::CSteamID,char const *,bool * ))( &::ISteamUserStats::GetUserAchievement )
            , ( bp::arg("steamIDUser"), bp::arg("pchName"), bp::arg("pbAchieved") ) )    
        .def( 
            "GetUserAchievementAndUnlockTime"
            , (bool ( ::ISteamUserStats::* )( ::CSteamID,char const *,bool *,::uint32 * ))( &::ISteamUserStats::GetUserAchievementAndUnlockTime )
            , ( bp::arg("steamIDUser"), bp::arg("pchName"), bp::arg("pbAchieved"), bp::arg("punUnlockTime") ) )    
        .def( 
            "GetUserStat"
            , (bool ( ::ISteamUserStats::* )( ::CSteamID,char const *,::int32 * ))( &::ISteamUserStats::GetUserStat )
            , ( bp::arg("steamIDUser"), bp::arg("pchName"), bp::arg("pData") ) )    
        .def( 
            "GetUserStat"
            , (bool ( ::ISteamUserStats::* )( ::CSteamID,char const *,float * ))( &::ISteamUserStats::GetUserStat )
            , ( bp::arg("steamIDUser"), bp::arg("pchName"), bp::arg("pData") ) )    
        .def( 
            "IndicateAchievementProgress"
            , (bool ( ::ISteamUserStats::* )( char const *,::uint32,::uint32 ))( &::ISteamUserStats::IndicateAchievementProgress )
            , ( bp::arg("pchName"), bp::arg("nCurProgress"), bp::arg("nMaxProgress") ) )    
        .def( 
            "RequestCurrentStats"
            , (bool ( ::ISteamUserStats::* )(  ))( &::ISteamUserStats::RequestCurrentStats ) )    
        .def( 
            "RequestGlobalAchievementPercentages"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )(  ))( &::ISteamUserStats::RequestGlobalAchievementPercentages ) )    
        .def( 
            "RequestGlobalStats"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( int ))( &::ISteamUserStats::RequestGlobalStats )
            , ( bp::arg("nHistoryDays") ) )    
        .def( 
            "RequestUserStats"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( ::CSteamID ))( &::ISteamUserStats::RequestUserStats )
            , ( bp::arg("steamIDUser") ) )    
        .def( 
            "ResetAllStats"
            , (bool ( ::ISteamUserStats::* )( bool ))( &::ISteamUserStats::ResetAllStats )
            , ( bp::arg("bAchievementsToo") ) )    
        .def( 
            "SetAchievement"
            , (bool ( ::ISteamUserStats::* )( char const * ))( &::ISteamUserStats::SetAchievement )
            , ( bp::arg("pchName") ) )    
        .def( 
            "SetStat"
            , (bool ( ::ISteamUserStats::* )( char const *,::int32 ))( &::ISteamUserStats::SetStat )
            , ( bp::arg("pchName"), bp::arg("nData") ) )    
        .def( 
            "SetStat"
            , (bool ( ::ISteamUserStats::* )( char const *,float ))( &::ISteamUserStats::SetStat )
            , ( bp::arg("pchName"), bp::arg("fData") ) )    
        .def( 
            "StoreStats"
            , (bool ( ::ISteamUserStats::* )(  ))( &::ISteamUserStats::StoreStats ) )    
        .def( 
            "UpdateAvgRateStat"
            , (bool ( ::ISteamUserStats::* )( char const *,float,double ))( &::ISteamUserStats::UpdateAvgRateStat )
            , ( bp::arg("pchName"), bp::arg("flCountThisSession"), bp::arg("dSessionLength") ) )    
        .def( 
            "UploadLeaderboardScore"
            , (::SteamAPICall_t ( ::ISteamUserStats::* )( ::SteamLeaderboard_t,::ELeaderboardUploadScoreMethod,::int32,::int32 const *,int ))( &::ISteamUserStats::UploadLeaderboardScore )
            , ( bp::arg("hSteamLeaderboard"), bp::arg("eLeaderboardUploadScoreMethod"), bp::arg("nScore"), bp::arg("pScoreDetails"), bp::arg("cScoreDetailsCount") ) );

    bp::class_< ISteamUtils, boost::noncopyable >( "ISteamUtils", bp::no_init )    
        .def( 
            "BOverlayNeedsPresent"
            , (bool ( ::ISteamUtils::* )(  ))( &::ISteamUtils::BOverlayNeedsPresent ) )    
        .def( 
            "CheckFileSignature"
            , (::SteamAPICall_t ( ::ISteamUtils::* )( char const * ))( &::ISteamUtils::CheckFileSignature )
            , ( bp::arg("szFileName") ) )    
        .def( 
            "GetAPICallFailureReason"
            , (::ESteamAPICallFailure ( ::ISteamUtils::* )( ::SteamAPICall_t ))( &::ISteamUtils::GetAPICallFailureReason )
            , ( bp::arg("hSteamAPICall") ) )    
        .def( 
            "GetAppID"
            , (::uint32 ( ::ISteamUtils::* )(  ))( &::ISteamUtils::GetAppID ) )    
        .def( 
            "GetCSERIPPort"
            , (bool ( ::ISteamUtils::* )( ::uint32 *,::uint16 * ))( &::ISteamUtils::GetCSERIPPort )
            , ( bp::arg("unIP"), bp::arg("usPort") ) )    
        .def( 
            "GetConnectedUniverse"
            , (::EUniverse ( ::ISteamUtils::* )(  ))( &::ISteamUtils::GetConnectedUniverse ) )    
        .def( 
            "GetCurrentBatteryPower"
            , (::uint8 ( ::ISteamUtils::* )(  ))( &::ISteamUtils::GetCurrentBatteryPower ) )    
        .def( 
            "GetEnteredGamepadTextInput"
            , (bool ( ::ISteamUtils::* )( char *,::uint32 ))( &::ISteamUtils::GetEnteredGamepadTextInput )
            , ( bp::arg("pchText"), bp::arg("cchText") ) )    
        .def( 
            "GetEnteredGamepadTextLength"
            , (::uint32 ( ::ISteamUtils::* )(  ))( &::ISteamUtils::GetEnteredGamepadTextLength ) )    
        .def( 
            "GetIPCCallCount"
            , (::uint32 ( ::ISteamUtils::* )(  ))( &::ISteamUtils::GetIPCCallCount ) )    
        .def( 
            "GetIPCountry"
            , (char const * ( ::ISteamUtils::* )(  ))( &::ISteamUtils::GetIPCountry ) )    
        .def( 
            "GetSecondsSinceAppActive"
            , (::uint32 ( ::ISteamUtils::* )(  ))( &::ISteamUtils::GetSecondsSinceAppActive ) )    
        .def( 
            "GetSecondsSinceComputerActive"
            , (::uint32 ( ::ISteamUtils::* )(  ))( &::ISteamUtils::GetSecondsSinceComputerActive ) )    
        .def( 
            "GetServerRealTime"
            , (::uint32 ( ::ISteamUtils::* )(  ))( &::ISteamUtils::GetServerRealTime ) )    
        .def( 
            "GetSteamUILanguage"
            , (char const * ( ::ISteamUtils::* )(  ))( &::ISteamUtils::GetSteamUILanguage ) )    
        .def( 
            "IsAPICallCompleted"
            , (bool ( ::ISteamUtils::* )( ::SteamAPICall_t,bool * ))( &::ISteamUtils::IsAPICallCompleted )
            , ( bp::arg("hSteamAPICall"), bp::arg("pbFailed") ) )    
        .def( 
            "IsOverlayEnabled"
            , (bool ( ::ISteamUtils::* )(  ))( &::ISteamUtils::IsOverlayEnabled ) )    
        .def( 
            "IsSteamRunningInVR"
            , (bool ( ::ISteamUtils::* )(  ))( &::ISteamUtils::IsSteamRunningInVR ) )    
        .def( 
            "RunFrame"
            , (void ( ::ISteamUtils::* )(  ))( &::ISteamUtils::RunFrame ) )    
        .def( 
            "SetOverlayNotificationInset"
            , (void ( ::ISteamUtils::* )( int,int ))( &::ISteamUtils::SetOverlayNotificationInset )
            , ( bp::arg("nHorizontalInset"), bp::arg("nVerticalInset") ) )    
        .def( 
            "SetOverlayNotificationPosition"
            , (void ( ::ISteamUtils::* )( ::ENotificationPosition ))( &::ISteamUtils::SetOverlayNotificationPosition )
            , ( bp::arg("eNotificationPosition") ) )    
        .def( 
            "ShowGamepadTextInput"
            , (bool ( ::ISteamUtils::* )( ::EGamepadTextInputMode,::EGamepadTextInputLineMode,char const *,::uint32,char const * ))( &::ISteamUtils::ShowGamepadTextInput )
            , ( bp::arg("eInputMode"), bp::arg("eLineInputMode"), bp::arg("pchDescription"), bp::arg("unCharMax"), bp::arg("pchExistingText") ) );

    { //::JoinClanChatRoomCompletionResult_t
        typedef bp::class_< JoinClanChatRoomCompletionResult_t, boost::noncopyable > JoinClanChatRoomCompletionResult_t_exposer_t;
        JoinClanChatRoomCompletionResult_t_exposer_t JoinClanChatRoomCompletionResult_t_exposer = JoinClanChatRoomCompletionResult_t_exposer_t( "JoinClanChatRoomCompletionResult_t", bp::no_init );
        bp::scope JoinClanChatRoomCompletionResult_t_scope( JoinClanChatRoomCompletionResult_t_exposer );
        bp::scope().attr("k_iCallback") = (int)JoinClanChatRoomCompletionResult_t::k_iCallback;
        JoinClanChatRoomCompletionResult_t_exposer.def_readwrite( "chatroomenterresponse", &JoinClanChatRoomCompletionResult_t::m_eChatRoomEnterResponse );
        JoinClanChatRoomCompletionResult_t_exposer.def_readwrite( "steamidclanchat", &JoinClanChatRoomCompletionResult_t::m_steamIDClanChat );
    }

    { //::LobbyChatMsg_t
        typedef bp::class_< LobbyChatMsg_t, boost::noncopyable > LobbyChatMsg_t_exposer_t;
        LobbyChatMsg_t_exposer_t LobbyChatMsg_t_exposer = LobbyChatMsg_t_exposer_t( "LobbyChatMsg_t", bp::no_init );
        bp::scope LobbyChatMsg_t_scope( LobbyChatMsg_t_exposer );
        bp::scope().attr("k_iCallback") = (int)LobbyChatMsg_t::k_iCallback;
        LobbyChatMsg_t_exposer.def_readwrite( "chatentrytype", &LobbyChatMsg_t::m_eChatEntryType );
        LobbyChatMsg_t_exposer.def_readwrite( "chatid", &LobbyChatMsg_t::m_iChatID );
        LobbyChatMsg_t_exposer.def_readwrite( "steamidlobby", &LobbyChatMsg_t::m_ulSteamIDLobby );
        LobbyChatMsg_t_exposer.def_readwrite( "steamiduser", &LobbyChatMsg_t::m_ulSteamIDUser );
    }

    { //::LobbyChatUpdate_t
        typedef bp::class_< LobbyChatUpdate_t, boost::noncopyable > LobbyChatUpdate_t_exposer_t;
        LobbyChatUpdate_t_exposer_t LobbyChatUpdate_t_exposer = LobbyChatUpdate_t_exposer_t( "LobbyChatUpdate_t", bp::no_init );
        bp::scope LobbyChatUpdate_t_scope( LobbyChatUpdate_t_exposer );
        bp::scope().attr("k_iCallback") = (int)LobbyChatUpdate_t::k_iCallback;
        LobbyChatUpdate_t_exposer.def_readwrite( "chatmemberstatechange", &LobbyChatUpdate_t::m_rgfChatMemberStateChange );
        LobbyChatUpdate_t_exposer.def_readwrite( "steamidlobby", &LobbyChatUpdate_t::m_ulSteamIDLobby );
        LobbyChatUpdate_t_exposer.def_readwrite( "steamidmakingchange", &LobbyChatUpdate_t::m_ulSteamIDMakingChange );
        LobbyChatUpdate_t_exposer.def_readwrite( "steamiduserchanged", &LobbyChatUpdate_t::m_ulSteamIDUserChanged );
    }

    { //::LobbyCreated_t
        typedef bp::class_< LobbyCreated_t, boost::noncopyable > LobbyCreated_t_exposer_t;
        LobbyCreated_t_exposer_t LobbyCreated_t_exposer = LobbyCreated_t_exposer_t( "LobbyCreated_t", bp::no_init );
        bp::scope LobbyCreated_t_scope( LobbyCreated_t_exposer );
        bp::scope().attr("k_iCallback") = (int)LobbyCreated_t::k_iCallback;
        LobbyCreated_t_exposer.def_readwrite( "result", &LobbyCreated_t::m_eResult );
        LobbyCreated_t_exposer.def_readwrite( "steamidlobby", &LobbyCreated_t::m_ulSteamIDLobby );
    }

    { //::LobbyDataUpdate_t
        typedef bp::class_< LobbyDataUpdate_t, boost::noncopyable > LobbyDataUpdate_t_exposer_t;
        LobbyDataUpdate_t_exposer_t LobbyDataUpdate_t_exposer = LobbyDataUpdate_t_exposer_t( "LobbyDataUpdate_t", bp::no_init );
        bp::scope LobbyDataUpdate_t_scope( LobbyDataUpdate_t_exposer );
        bp::scope().attr("k_iCallback") = (int)LobbyDataUpdate_t::k_iCallback;
        LobbyDataUpdate_t_exposer.def_readwrite( "success", &LobbyDataUpdate_t::m_bSuccess );
        LobbyDataUpdate_t_exposer.def_readwrite( "steamidlobby", &LobbyDataUpdate_t::m_ulSteamIDLobby );
        LobbyDataUpdate_t_exposer.def_readwrite( "steamidmember", &LobbyDataUpdate_t::m_ulSteamIDMember );
    }

    { //::LobbyEnter_t
        typedef bp::class_< LobbyEnter_t, boost::noncopyable > LobbyEnter_t_exposer_t;
        LobbyEnter_t_exposer_t LobbyEnter_t_exposer = LobbyEnter_t_exposer_t( "LobbyEnter_t", bp::no_init );
        bp::scope LobbyEnter_t_scope( LobbyEnter_t_exposer );
        bp::scope().attr("k_iCallback") = (int)LobbyEnter_t::k_iCallback;
        LobbyEnter_t_exposer.def_readwrite( "chatroomenterresponse", &LobbyEnter_t::m_EChatRoomEnterResponse );
        LobbyEnter_t_exposer.def_readwrite( "locked", &LobbyEnter_t::m_bLocked );
        LobbyEnter_t_exposer.def_readwrite( "chatpermissions", &LobbyEnter_t::m_rgfChatPermissions );
        LobbyEnter_t_exposer.def_readwrite( "steamidlobby", &LobbyEnter_t::m_ulSteamIDLobby );
    }

    { //::LobbyGameCreated_t
        typedef bp::class_< LobbyGameCreated_t, boost::noncopyable > LobbyGameCreated_t_exposer_t;
        LobbyGameCreated_t_exposer_t LobbyGameCreated_t_exposer = LobbyGameCreated_t_exposer_t( "LobbyGameCreated_t", bp::no_init );
        bp::scope LobbyGameCreated_t_scope( LobbyGameCreated_t_exposer );
        bp::scope().attr("k_iCallback") = (int)LobbyGameCreated_t::k_iCallback;
        LobbyGameCreated_t_exposer.def_readwrite( "steamidgameserver", &LobbyGameCreated_t::m_ulSteamIDGameServer );
        LobbyGameCreated_t_exposer.def_readwrite( "steamidlobby", &LobbyGameCreated_t::m_ulSteamIDLobby );
        LobbyGameCreated_t_exposer.def_readwrite( "ip", &LobbyGameCreated_t::m_unIP );
        LobbyGameCreated_t_exposer.def_readwrite( "port", &LobbyGameCreated_t::m_usPort );
    }

    { //::LobbyMatchList_t
        typedef bp::class_< LobbyMatchList_t, boost::noncopyable > LobbyMatchList_t_exposer_t;
        LobbyMatchList_t_exposer_t LobbyMatchList_t_exposer = LobbyMatchList_t_exposer_t( "LobbyMatchList_t", bp::no_init );
        bp::scope LobbyMatchList_t_scope( LobbyMatchList_t_exposer );
        bp::scope().attr("k_iCallback") = (int)LobbyMatchList_t::k_iCallback;
        LobbyMatchList_t_exposer.def_readwrite( "lobbiesmatching", &LobbyMatchList_t::m_nLobbiesMatching );
    }

    { //::NumberOfCurrentPlayers_t
        typedef bp::class_< NumberOfCurrentPlayers_t, boost::noncopyable > NumberOfCurrentPlayers_t_exposer_t;
        NumberOfCurrentPlayers_t_exposer_t NumberOfCurrentPlayers_t_exposer = NumberOfCurrentPlayers_t_exposer_t( "NumberOfCurrentPlayers_t", bp::no_init );
        bp::scope NumberOfCurrentPlayers_t_scope( NumberOfCurrentPlayers_t_exposer );
        bp::scope().attr("k_iCallback") = (int)NumberOfCurrentPlayers_t::k_iCallback;
        NumberOfCurrentPlayers_t_exposer.def_readwrite( "success", &NumberOfCurrentPlayers_t::m_bSuccess );
        NumberOfCurrentPlayers_t_exposer.def_readwrite( "players", &NumberOfCurrentPlayers_t::m_cPlayers );
    }

    { //::PersonaStateChange_t
        typedef bp::class_< PersonaStateChange_t, boost::noncopyable > PersonaStateChange_t_exposer_t;
        PersonaStateChange_t_exposer_t PersonaStateChange_t_exposer = PersonaStateChange_t_exposer_t( "PersonaStateChange_t", bp::no_init );
        bp::scope PersonaStateChange_t_scope( PersonaStateChange_t_exposer );
        bp::scope().attr("k_iCallback") = (int)PersonaStateChange_t::k_iCallback;
        PersonaStateChange_t_exposer.def_readwrite( "changeflags", &PersonaStateChange_t::m_nChangeFlags );
        PersonaStateChange_t_exposer.def_readwrite( "steamid", &PersonaStateChange_t::m_ulSteamID );
    }

    bp::class_< PySteamMatchmakingPingResponse_wrapper >( "SteamMatchmakingPingResponse" )    
        .def( 
            "ServerFailedToRespond"
            , (void ( ::PySteamMatchmakingPingResponse::* )(  ))(&::PySteamMatchmakingPingResponse::ServerFailedToRespond)
            , (void ( PySteamMatchmakingPingResponse_wrapper::* )(  ))(&PySteamMatchmakingPingResponse_wrapper::default_ServerFailedToRespond) )    
        .def( 
            "ServerResponded"
            , (void ( ::PySteamMatchmakingPingResponse::* )( ::gameserveritem_t & ))(&::PySteamMatchmakingPingResponse::ServerResponded)
            , (void ( PySteamMatchmakingPingResponse_wrapper::* )( ::gameserveritem_t & ))(&PySteamMatchmakingPingResponse_wrapper::default_ServerResponded)
            , ( bp::arg("server") ) );

    bp::class_< PySteamMatchmakingPlayersResponse_wrapper >( "SteamMatchmakingPlayersResponse" )    
        .def( 
            "AddPlayerToList"
            , (void ( ::PySteamMatchmakingPlayersResponse::* )( char const *,int,float ))(&::PySteamMatchmakingPlayersResponse::AddPlayerToList)
            , (void ( PySteamMatchmakingPlayersResponse_wrapper::* )( char const *,int,float ))(&PySteamMatchmakingPlayersResponse_wrapper::default_AddPlayerToList)
            , ( bp::arg("pchName"), bp::arg("nScore"), bp::arg("flTimePlayed") ) )    
        .def( 
            "PlayersFailedToRespond"
            , (void ( ::PySteamMatchmakingPlayersResponse::* )(  ))(&::PySteamMatchmakingPlayersResponse::PlayersFailedToRespond)
            , (void ( PySteamMatchmakingPlayersResponse_wrapper::* )(  ))(&PySteamMatchmakingPlayersResponse_wrapper::default_PlayersFailedToRespond) )    
        .def( 
            "PlayersRefreshComplete"
            , (void ( ::PySteamMatchmakingPlayersResponse::* )(  ))(&::PySteamMatchmakingPlayersResponse::PlayersRefreshComplete)
            , (void ( PySteamMatchmakingPlayersResponse_wrapper::* )(  ))(&PySteamMatchmakingPlayersResponse_wrapper::default_PlayersRefreshComplete) );

    bp::class_< PySteamMatchmakingRulesResponse_wrapper >( "SteamMatchmakingRulesResponse" )    
        .def( 
            "RulesFailedToRespond"
            , (void ( ::PySteamMatchmakingRulesResponse::* )(  ))(&::PySteamMatchmakingRulesResponse::RulesFailedToRespond)
            , (void ( PySteamMatchmakingRulesResponse_wrapper::* )(  ))(&PySteamMatchmakingRulesResponse_wrapper::default_RulesFailedToRespond) )    
        .def( 
            "RulesRefreshComplete"
            , (void ( ::PySteamMatchmakingRulesResponse::* )(  ))(&::PySteamMatchmakingRulesResponse::RulesRefreshComplete)
            , (void ( PySteamMatchmakingRulesResponse_wrapper::* )(  ))(&PySteamMatchmakingRulesResponse_wrapper::default_RulesRefreshComplete) )    
        .def( 
            "RulesResponded"
            , (void ( ::PySteamMatchmakingRulesResponse::* )( char const *,char const * ))(&::PySteamMatchmakingRulesResponse::RulesResponded)
            , (void ( PySteamMatchmakingRulesResponse_wrapper::* )( char const *,char const * ))(&PySteamMatchmakingRulesResponse_wrapper::default_RulesResponded)
            , ( bp::arg("pchRule"), bp::arg("pchValue") ) );

    bp::class_< PySteamMatchmakingServerListResponse_wrapper >( "SteamMatchmakingServerListResponse" )    
        .def( 
            "RefreshComplete"
            , (void ( ::PySteamMatchmakingServerListResponse::* )( int,::EMatchMakingServerResponse ))(&::PySteamMatchmakingServerListResponse::PyRefreshComplete)
            , (void ( PySteamMatchmakingServerListResponse_wrapper::* )( int,::EMatchMakingServerResponse ))(&PySteamMatchmakingServerListResponse_wrapper::default_RefreshComplete)
            , ( bp::arg("hRequest"), bp::arg("response") ) )    
        .def( 
            "ServerFailedToRespond"
            , (void ( ::PySteamMatchmakingServerListResponse::* )( int,int ))(&::PySteamMatchmakingServerListResponse::PyServerFailedToRespond)
            , (void ( PySteamMatchmakingServerListResponse_wrapper::* )( int,int ))(&PySteamMatchmakingServerListResponse_wrapper::default_ServerFailedToRespond)
            , ( bp::arg("hRequest"), bp::arg("iServer") ) )    
        .def( 
            "ServerResponded"
            , (void ( ::PySteamMatchmakingServerListResponse::* )( int,int ))(&::PySteamMatchmakingServerListResponse::PyServerResponded)
            , (void ( PySteamMatchmakingServerListResponse_wrapper::* )( int,int ))(&PySteamMatchmakingServerListResponse_wrapper::default_ServerResponded)
            , ( bp::arg("hRequest"), bp::arg("iServer") ) );

    bp::class_< PySteamMatchmakingServers >( "SteamMatchmakingServers" )    
        .def( 
            "CancelServerQuery"
            , (void ( ::PySteamMatchmakingServers::* )( ::HServerQuery ))( &::PySteamMatchmakingServers::CancelServerQuery )
            , ( bp::arg("hServerQuery") ) )    
        .def( 
            "GetServerDetails"
            , (::pygameserveritem_t ( ::PySteamMatchmakingServers::* )( int,int ))( &::PySteamMatchmakingServers::GetServerDetails )
            , ( bp::arg("hRequest"), bp::arg("iServer") ) )    
        .def( 
            "PingServer"
            , (int ( ::PySteamMatchmakingServers::* )( ::uint32,::uint16,::PySteamMatchmakingPingResponse * ))( &::PySteamMatchmakingServers::PingServer )
            , ( bp::arg("unIP"), bp::arg("usPort"), bp::arg("pRequestServersResponse") ) )    
        .def( 
            "PlayerDetails"
            , (int ( ::PySteamMatchmakingServers::* )( ::uint32,::uint16,::PySteamMatchmakingPlayersResponse * ))( &::PySteamMatchmakingServers::PlayerDetails )
            , ( bp::arg("unIP"), bp::arg("usPort"), bp::arg("pRequestServersResponse") ) )    
        .def( 
            "ReleaseRequest"
            , (void ( ::PySteamMatchmakingServers::* )( int ))( &::PySteamMatchmakingServers::ReleaseRequest )
            , ( bp::arg("hServerListRequest") ) )    
        .def( 
            "RequestFavoritesServerList"
            , (int ( ::PySteamMatchmakingServers::* )( ::AppId_t,::boost::python::list,::ISteamMatchmakingServerListResponse * ))( &::PySteamMatchmakingServers::RequestFavoritesServerList )
            , ( bp::arg("iApp"), bp::arg("filters"), bp::arg("pRequestServersResponse") ) )    
        .def( 
            "RequestFriendsServerList"
            , (int ( ::PySteamMatchmakingServers::* )( ::AppId_t,::boost::python::list,::ISteamMatchmakingServerListResponse * ))( &::PySteamMatchmakingServers::RequestFriendsServerList )
            , ( bp::arg("iApp"), bp::arg("filters"), bp::arg("pRequestServersResponse") ) )    
        .def( 
            "RequestHistoryServerList"
            , (int ( ::PySteamMatchmakingServers::* )( ::AppId_t,::boost::python::list,::ISteamMatchmakingServerListResponse * ))( &::PySteamMatchmakingServers::RequestHistoryServerList )
            , ( bp::arg("iApp"), bp::arg("filters"), bp::arg("pRequestServersResponse") ) )    
        .def( 
            "RequestInternetServerList"
            , (int ( ::PySteamMatchmakingServers::* )( ::AppId_t,::boost::python::list,::PySteamMatchmakingServerListResponse * ))( &::PySteamMatchmakingServers::RequestInternetServerList )
            , ( bp::arg("iApp"), bp::arg("filters"), bp::arg("pRequestServersResponse") ) )    
        .def( 
            "RequestLANServerList"
            , (int ( ::PySteamMatchmakingServers::* )( ::AppId_t,::ISteamMatchmakingServerListResponse * ))( &::PySteamMatchmakingServers::RequestLANServerList )
            , ( bp::arg("iApp"), bp::arg("pRequestServersResponse") ) )    
        .def( 
            "RequestSpectatorServerList"
            , (int ( ::PySteamMatchmakingServers::* )( ::AppId_t,::boost::python::list,::ISteamMatchmakingServerListResponse * ))( &::PySteamMatchmakingServers::RequestSpectatorServerList )
            , ( bp::arg("iApp"), bp::arg("filters"), bp::arg("pRequestServersResponse") ) )    
        .def( 
            "ServerRules"
            , (::HServerQuery ( ::PySteamMatchmakingServers::* )( ::uint32,::uint16,::PySteamMatchmakingRulesResponse * ))( &::PySteamMatchmakingServers::ServerRules )
            , ( bp::arg("unIP"), bp::arg("usPort"), bp::arg("pRequestServersResponse") ) );

    { //::SetPersonaNameResponse_t
        typedef bp::class_< SetPersonaNameResponse_t, boost::noncopyable > SetPersonaNameResponse_t_exposer_t;
        SetPersonaNameResponse_t_exposer_t SetPersonaNameResponse_t_exposer = SetPersonaNameResponse_t_exposer_t( "SetPersonaNameResponse_t", bp::no_init );
        bp::scope SetPersonaNameResponse_t_scope( SetPersonaNameResponse_t_exposer );
        bp::scope().attr("k_iCallback") = (int)SetPersonaNameResponse_t::k_iCallback;
        SetPersonaNameResponse_t_exposer.def_readwrite( "localsuccess", &SetPersonaNameResponse_t::m_bLocalSuccess );
        SetPersonaNameResponse_t_exposer.def_readwrite( "success", &SetPersonaNameResponse_t::m_bSuccess );
        SetPersonaNameResponse_t_exposer.def_readwrite( "result", &SetPersonaNameResponse_t::m_result );
    }

    bp::class_< gameserveritem_t >( "gameserveritem_t", bp::init< >() )    
        .def( 
            "GetName"
            , (char const * ( ::gameserveritem_t::* )(  )const)( &::gameserveritem_t::GetName ) )    
        .def_readwrite( "netadr", &gameserveritem_t::m_NetAdr )    
        .def_readwrite( "donotrefresh", &gameserveritem_t::m_bDoNotRefresh )    
        .def_readwrite( "hadsuccessfulresponse", &gameserveritem_t::m_bHadSuccessfulResponse )    
        .def_readwrite( "password", &gameserveritem_t::m_bPassword )    
        .def_readwrite( "secure", &gameserveritem_t::m_bSecure )    
        .def_readwrite( "appid", &gameserveritem_t::m_nAppID )    
        .def_readwrite( "botplayers", &gameserveritem_t::m_nBotPlayers )    
        .def_readwrite( "maxplayers", &gameserveritem_t::m_nMaxPlayers )    
        .def_readwrite( "ping", &gameserveritem_t::m_nPing )    
        .def_readwrite( "players", &gameserveritem_t::m_nPlayers )    
        .def_readwrite( "serverversion", &gameserveritem_t::m_nServerVersion )    
        .def_readwrite( "steamid", &gameserveritem_t::m_steamID )    
        .def_readwrite( "timelastplayed", &gameserveritem_t::m_ulTimeLastPlayed );

    { //::pygameserveritem_t
        typedef bp::class_< pygameserveritem_t, bp::bases< gameserveritem_t > > pygameserveritem_t_exposer_t;
        pygameserveritem_t_exposer_t pygameserveritem_t_exposer = pygameserveritem_t_exposer_t( "pygameserveritem_t" );
        bp::scope pygameserveritem_t_scope( pygameserveritem_t_exposer );
        { //property "gamedir"[fget=::pygameserveritem_t::GetGameDir]
        
            typedef char const * ( ::pygameserveritem_t::*fget)(  ) ;
            
            pygameserveritem_t_exposer.add_property( 
                "gamedir"
                , fget( &::pygameserveritem_t::GetGameDir ) );
        
        }
        { //property "map"[fget=::pygameserveritem_t::GetMap]
        
            typedef char const * ( ::pygameserveritem_t::*fget)(  ) ;
            
            pygameserveritem_t_exposer.add_property( 
                "map"
                , fget( &::pygameserveritem_t::GetMap ) );
        
        }
        { //property "gamedescription"[fget=::pygameserveritem_t::GetGameDescription]
        
            typedef char const * ( ::pygameserveritem_t::*fget)(  ) ;
            
            pygameserveritem_t_exposer.add_property( 
                "gamedescription"
                , fget( &::pygameserveritem_t::GetGameDescription ) );
        
        }
        { //property "gametags"[fget=::pygameserveritem_t::GetGameTags]
        
            typedef char const * ( ::pygameserveritem_t::*fget)(  ) ;
            
            pygameserveritem_t_exposer.add_property( 
                "gametags"
                , fget( &::pygameserveritem_t::GetGameTags ) );
        
        }
    }

    { //::servernetadr_t
        typedef bp::class_< servernetadr_t > servernetadr_exposer_t;
        servernetadr_exposer_t servernetadr_exposer = servernetadr_exposer_t( "servernetadr", bp::init< >() );
        bp::scope servernetadr_scope( servernetadr_exposer );
        { //::servernetadr_t::GetConnectionAddressString
        
            typedef char const * ( ::servernetadr_t::*GetConnectionAddressString_function_type)(  ) const;
            
            servernetadr_exposer.def( 
                "GetConnectionAddressString"
                , GetConnectionAddressString_function_type( &::servernetadr_t::GetConnectionAddressString ) );
        
        }
        { //::servernetadr_t::GetConnectionPort
        
            typedef ::uint16 ( ::servernetadr_t::*GetConnectionPort_function_type)(  ) const;
            
            servernetadr_exposer.def( 
                "GetConnectionPort"
                , GetConnectionPort_function_type( &::servernetadr_t::GetConnectionPort ) );
        
        }
        { //::servernetadr_t::GetIP
        
            typedef ::uint32 ( ::servernetadr_t::*GetIP_function_type)(  ) const;
            
            servernetadr_exposer.def( 
                "GetIP"
                , GetIP_function_type( &::servernetadr_t::GetIP ) );
        
        }
        { //::servernetadr_t::GetQueryAddressString
        
            typedef char const * ( ::servernetadr_t::*GetQueryAddressString_function_type)(  ) const;
            
            servernetadr_exposer.def( 
                "GetQueryAddressString"
                , GetQueryAddressString_function_type( &::servernetadr_t::GetQueryAddressString ) );
        
        }
        { //::servernetadr_t::GetQueryPort
        
            typedef ::uint16 ( ::servernetadr_t::*GetQueryPort_function_type)(  ) const;
            
            servernetadr_exposer.def( 
                "GetQueryPort"
                , GetQueryPort_function_type( &::servernetadr_t::GetQueryPort ) );
        
        }
        { //::servernetadr_t::Init
        
            typedef void ( ::servernetadr_t::*Init_function_type)( unsigned int,::uint16,::uint16 ) ;
            
            servernetadr_exposer.def( 
                "Init"
                , Init_function_type( &::servernetadr_t::Init )
                , ( bp::arg("ip"), bp::arg("usQueryPort"), bp::arg("usConnectionPort") ) );
        
        }
        { //::servernetadr_t::SetConnectionPort
        
            typedef void ( ::servernetadr_t::*SetConnectionPort_function_type)( ::uint16 ) ;
            
            servernetadr_exposer.def( 
                "SetConnectionPort"
                , SetConnectionPort_function_type( &::servernetadr_t::SetConnectionPort )
                , ( bp::arg("usPort") ) );
        
        }
        { //::servernetadr_t::SetIP
        
            typedef void ( ::servernetadr_t::*SetIP_function_type)( ::uint32 ) ;
            
            servernetadr_exposer.def( 
                "SetIP"
                , SetIP_function_type( &::servernetadr_t::SetIP )
                , ( bp::arg("arg0") ) );
        
        }
        { //::servernetadr_t::SetQueryPort
        
            typedef void ( ::servernetadr_t::*SetQueryPort_function_type)( ::uint16 ) ;
            
            servernetadr_exposer.def( 
                "SetQueryPort"
                , SetQueryPort_function_type( &::servernetadr_t::SetQueryPort )
                , ( bp::arg("usPort") ) );
        
        }
        servernetadr_exposer.def( bp::self < bp::self );
        { //::servernetadr_t::operator=
        
            typedef void ( ::servernetadr_t::*assign_function_type)( ::servernetadr_t const & ) ;
            
            servernetadr_exposer.def( 
                "assign"
                , assign_function_type( &::servernetadr_t::operator= )
                , ( bp::arg("that") ) );
        
        }
    }

    { //::PyGameServer_GetAuthSessionTicket
    
        typedef ::boost::python::api::object ( *GameServer_GetAuthSessionTicket_function_type )(  );
        
        bp::def( 
            "GameServer_GetAuthSessionTicket"
            , GameServer_GetAuthSessionTicket_function_type( &::PyGameServer_GetAuthSessionTicket ) );
    
    }

    { //::PyGetLobbyChatEntry
    
        typedef ::boost::python::tuple ( *PyGetLobbyChatEntry_function_type )( ::CSteamID,int,::CSteamID * );
        
        bp::def( 
            "PyGetLobbyChatEntry"
            , PyGetLobbyChatEntry_function_type( &::PyGetLobbyChatEntry )
            , ( bp::arg("steamIDLobby"), bp::arg("iChatID"), bp::arg("pSteamIDUser") ) );
    
    }

    { //::PyGetLobbyDataByIndex
    
        typedef ::boost::python::tuple ( *PyGetLobbyDataByIndex_function_type )( ::CSteamID,int );
        
        bp::def( 
            "PyGetLobbyDataByIndex"
            , PyGetLobbyDataByIndex_function_type( &::PyGetLobbyDataByIndex )
            , ( bp::arg("steamIDLobby"), bp::arg("iLobbyData") ) );
    
    }

    { //::PyGetStatFloat
    
        typedef ::boost::python::api::object ( *PyGetStatFloat_function_type )( char const * );
        
        bp::def( 
            "PyGetStatFloat"
            , PyGetStatFloat_function_type( &::PyGetStatFloat )
            , ( bp::arg("name") ) );
    
    }

    { //::PyGetStatInt
    
        typedef ::boost::python::api::object ( *PyGetStatInt_function_type )( char const * );
        
        bp::def( 
            "PyGetStatInt"
            , PyGetStatInt_function_type( &::PyGetStatInt )
            , ( bp::arg("name") ) );
    
    }

    { //::PySendLobbyChatMsg
    
        typedef bool ( *PySendLobbyChatMsg_function_type )( ::CSteamID,char const * );
        
        bp::def( 
            "PySendLobbyChatMsg"
            , PySendLobbyChatMsg_function_type( &::PySendLobbyChatMsg )
            , ( bp::arg("steamIDLobby"), bp::arg("pvMsgBody") ) );
    
    }

    { //::PySteamUser_GetAuthSessionTicket
    
        typedef ::boost::python::api::object ( *SteamUser_GetAuthSessionTicket_function_type )(  );
        
        bp::def( 
            "SteamUser_GetAuthSessionTicket"
            , SteamUser_GetAuthSessionTicket_function_type( &::PySteamUser_GetAuthSessionTicket ) );
    
    }

    { //::SteamAPI_RunCallbacks
    
        typedef void ( *SteamAPI_RunCallbacks_function_type )(  );
        
        bp::def( 
            "SteamAPI_RunCallbacks"
            , SteamAPI_RunCallbacks_function_type( &::SteamAPI_RunCallbacks ) );
    
    }

    bp::scope().attr( "steamapicontext" ) = boost::ref(steamapicontext);

    bp::scope().attr( "QUERY_PORT_NOT_INITIALIZED" ) = (int)QUERY_PORT_NOT_INITIALIZED;

    bp::scope().attr( "QUERY_PORT_ERROR" ) = (int)QUERY_PORT_ERROR;

    bp::scope().attr( "k_cchPersonaNameMax" ) = (int)k_cchPersonaNameMax;

    { //::PersonaStateChangeCallback
            typedef bp::class_< PersonaStateChangeCallback_wrapper, boost::noncopyable > PersonaStateChangeCallback_exposer_t;
            PersonaStateChangeCallback_exposer_t PersonaStateChangeCallback_exposer = PersonaStateChangeCallback_exposer_t( "PersonaStateChangeCallback", bp::init<>() );
            bp::scope PersonaStateChangeCallback_scope( PersonaStateChangeCallback_exposer );
            { //::PersonaStateChangeCallback::OnPersonaStateChange
            
                typedef void ( ::PersonaStateChangeCallback::*OnPersonaStateChange_function_type )( ::PersonaStateChange_t * ) ;
                typedef void ( PersonaStateChangeCallback_wrapper::*default_OnPersonaStateChange_function_type )( ::PersonaStateChange_t * ) ;
                
                PersonaStateChangeCallback_exposer.def( 
                    "OnPersonaStateChange"
                    , OnPersonaStateChange_function_type(&::PersonaStateChangeCallback::OnPersonaStateChange)
                    , default_OnPersonaStateChange_function_type(&PersonaStateChangeCallback_wrapper::default_OnPersonaStateChange)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::GameOverlayActivatedCallback
            typedef bp::class_< GameOverlayActivatedCallback_wrapper, boost::noncopyable > GameOverlayActivatedCallback_exposer_t;
            GameOverlayActivatedCallback_exposer_t GameOverlayActivatedCallback_exposer = GameOverlayActivatedCallback_exposer_t( "GameOverlayActivatedCallback", bp::init<>() );
            bp::scope GameOverlayActivatedCallback_scope( GameOverlayActivatedCallback_exposer );
            { //::GameOverlayActivatedCallback::OnGameOverlayActivated
            
                typedef void ( ::GameOverlayActivatedCallback::*OnGameOverlayActivated_function_type )( ::GameOverlayActivated_t * ) ;
                typedef void ( GameOverlayActivatedCallback_wrapper::*default_OnGameOverlayActivated_function_type )( ::GameOverlayActivated_t * ) ;
                
                GameOverlayActivatedCallback_exposer.def( 
                    "OnGameOverlayActivated"
                    , OnGameOverlayActivated_function_type(&::GameOverlayActivatedCallback::OnGameOverlayActivated)
                    , default_OnGameOverlayActivated_function_type(&GameOverlayActivatedCallback_wrapper::default_OnGameOverlayActivated)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::GameServerChangeRequestedCallback
            typedef bp::class_< GameServerChangeRequestedCallback_wrapper, boost::noncopyable > GameServerChangeRequestedCallback_exposer_t;
            GameServerChangeRequestedCallback_exposer_t GameServerChangeRequestedCallback_exposer = GameServerChangeRequestedCallback_exposer_t( "GameServerChangeRequestedCallback", bp::init<>() );
            bp::scope GameServerChangeRequestedCallback_scope( GameServerChangeRequestedCallback_exposer );
            { //::GameServerChangeRequestedCallback::OnGameServerChangeRequested
            
                typedef void ( ::GameServerChangeRequestedCallback::*OnGameServerChangeRequested_function_type )( ::GameServerChangeRequested_t * ) ;
                typedef void ( GameServerChangeRequestedCallback_wrapper::*default_OnGameServerChangeRequested_function_type )( ::GameServerChangeRequested_t * ) ;
                
                GameServerChangeRequestedCallback_exposer.def( 
                    "OnGameServerChangeRequested"
                    , OnGameServerChangeRequested_function_type(&::GameServerChangeRequestedCallback::OnGameServerChangeRequested)
                    , default_OnGameServerChangeRequested_function_type(&GameServerChangeRequestedCallback_wrapper::default_OnGameServerChangeRequested)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::GameLobbyJoinRequestedCallback
            typedef bp::class_< GameLobbyJoinRequestedCallback_wrapper, boost::noncopyable > GameLobbyJoinRequestedCallback_exposer_t;
            GameLobbyJoinRequestedCallback_exposer_t GameLobbyJoinRequestedCallback_exposer = GameLobbyJoinRequestedCallback_exposer_t( "GameLobbyJoinRequestedCallback", bp::init<>() );
            bp::scope GameLobbyJoinRequestedCallback_scope( GameLobbyJoinRequestedCallback_exposer );
            { //::GameLobbyJoinRequestedCallback::OnGameLobbyJoinRequested
            
                typedef void ( ::GameLobbyJoinRequestedCallback::*OnGameLobbyJoinRequested_function_type )( ::GameLobbyJoinRequested_t * ) ;
                typedef void ( GameLobbyJoinRequestedCallback_wrapper::*default_OnGameLobbyJoinRequested_function_type )( ::GameLobbyJoinRequested_t * ) ;
                
                GameLobbyJoinRequestedCallback_exposer.def( 
                    "OnGameLobbyJoinRequested"
                    , OnGameLobbyJoinRequested_function_type(&::GameLobbyJoinRequestedCallback::OnGameLobbyJoinRequested)
                    , default_OnGameLobbyJoinRequested_function_type(&GameLobbyJoinRequestedCallback_wrapper::default_OnGameLobbyJoinRequested)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::AvatarImageLoadedCallback
            typedef bp::class_< AvatarImageLoadedCallback_wrapper, boost::noncopyable > AvatarImageLoadedCallback_exposer_t;
            AvatarImageLoadedCallback_exposer_t AvatarImageLoadedCallback_exposer = AvatarImageLoadedCallback_exposer_t( "AvatarImageLoadedCallback", bp::init<>() );
            bp::scope AvatarImageLoadedCallback_scope( AvatarImageLoadedCallback_exposer );
            { //::AvatarImageLoadedCallback::OnAvatarImageLoaded
            
                typedef void ( ::AvatarImageLoadedCallback::*OnAvatarImageLoaded_function_type )( ::AvatarImageLoaded_t * ) ;
                typedef void ( AvatarImageLoadedCallback_wrapper::*default_OnAvatarImageLoaded_function_type )( ::AvatarImageLoaded_t * ) ;
                
                AvatarImageLoadedCallback_exposer.def( 
                    "OnAvatarImageLoaded"
                    , OnAvatarImageLoaded_function_type(&::AvatarImageLoadedCallback::OnAvatarImageLoaded)
                    , default_OnAvatarImageLoaded_function_type(&AvatarImageLoadedCallback_wrapper::default_OnAvatarImageLoaded)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::ClanOfficerListResponseCallback
            typedef bp::class_< ClanOfficerListResponseCallback_wrapper, boost::noncopyable > ClanOfficerListResponseCallback_exposer_t;
            ClanOfficerListResponseCallback_exposer_t ClanOfficerListResponseCallback_exposer = ClanOfficerListResponseCallback_exposer_t( "ClanOfficerListResponseCallback", bp::init<>() );
            bp::scope ClanOfficerListResponseCallback_scope( ClanOfficerListResponseCallback_exposer );
            { //::ClanOfficerListResponseCallback::OnClanOfficerListResponse
            
                typedef void ( ::ClanOfficerListResponseCallback::*OnClanOfficerListResponse_function_type )( ::ClanOfficerListResponse_t * ) ;
                typedef void ( ClanOfficerListResponseCallback_wrapper::*default_OnClanOfficerListResponse_function_type )( ::ClanOfficerListResponse_t * ) ;
                
                ClanOfficerListResponseCallback_exposer.def( 
                    "OnClanOfficerListResponse"
                    , OnClanOfficerListResponse_function_type(&::ClanOfficerListResponseCallback::OnClanOfficerListResponse)
                    , default_OnClanOfficerListResponse_function_type(&ClanOfficerListResponseCallback_wrapper::default_OnClanOfficerListResponse)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::FriendRichPresenceUpdateCallback
            typedef bp::class_< FriendRichPresenceUpdateCallback_wrapper, boost::noncopyable > FriendRichPresenceUpdateCallback_exposer_t;
            FriendRichPresenceUpdateCallback_exposer_t FriendRichPresenceUpdateCallback_exposer = FriendRichPresenceUpdateCallback_exposer_t( "FriendRichPresenceUpdateCallback", bp::init<>() );
            bp::scope FriendRichPresenceUpdateCallback_scope( FriendRichPresenceUpdateCallback_exposer );
            { //::FriendRichPresenceUpdateCallback::OnFriendRichPresenceUpdate
            
                typedef void ( ::FriendRichPresenceUpdateCallback::*OnFriendRichPresenceUpdate_function_type )( ::FriendRichPresenceUpdate_t * ) ;
                typedef void ( FriendRichPresenceUpdateCallback_wrapper::*default_OnFriendRichPresenceUpdate_function_type )( ::FriendRichPresenceUpdate_t * ) ;
                
                FriendRichPresenceUpdateCallback_exposer.def( 
                    "OnFriendRichPresenceUpdate"
                    , OnFriendRichPresenceUpdate_function_type(&::FriendRichPresenceUpdateCallback::OnFriendRichPresenceUpdate)
                    , default_OnFriendRichPresenceUpdate_function_type(&FriendRichPresenceUpdateCallback_wrapper::default_OnFriendRichPresenceUpdate)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::GameRichPresenceJoinRequestedCallback
            typedef bp::class_< GameRichPresenceJoinRequestedCallback_wrapper, boost::noncopyable > GameRichPresenceJoinRequestedCallback_exposer_t;
            GameRichPresenceJoinRequestedCallback_exposer_t GameRichPresenceJoinRequestedCallback_exposer = GameRichPresenceJoinRequestedCallback_exposer_t( "GameRichPresenceJoinRequestedCallback", bp::init<>() );
            bp::scope GameRichPresenceJoinRequestedCallback_scope( GameRichPresenceJoinRequestedCallback_exposer );
            { //::GameRichPresenceJoinRequestedCallback::OnGameRichPresenceJoinRequested
            
                typedef void ( ::GameRichPresenceJoinRequestedCallback::*OnGameRichPresenceJoinRequested_function_type )( ::GameRichPresenceJoinRequested_t * ) ;
                typedef void ( GameRichPresenceJoinRequestedCallback_wrapper::*default_OnGameRichPresenceJoinRequested_function_type )( ::GameRichPresenceJoinRequested_t * ) ;
                
                GameRichPresenceJoinRequestedCallback_exposer.def( 
                    "OnGameRichPresenceJoinRequested"
                    , OnGameRichPresenceJoinRequested_function_type(&::GameRichPresenceJoinRequestedCallback::OnGameRichPresenceJoinRequested)
                    , default_OnGameRichPresenceJoinRequested_function_type(&GameRichPresenceJoinRequestedCallback_wrapper::default_OnGameRichPresenceJoinRequested)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::GameConnectedClanChatMsgCallback
            typedef bp::class_< GameConnectedClanChatMsgCallback_wrapper, boost::noncopyable > GameConnectedClanChatMsgCallback_exposer_t;
            GameConnectedClanChatMsgCallback_exposer_t GameConnectedClanChatMsgCallback_exposer = GameConnectedClanChatMsgCallback_exposer_t( "GameConnectedClanChatMsgCallback", bp::init<>() );
            bp::scope GameConnectedClanChatMsgCallback_scope( GameConnectedClanChatMsgCallback_exposer );
            { //::GameConnectedClanChatMsgCallback::OnGameConnectedClanChatMsg
            
                typedef void ( ::GameConnectedClanChatMsgCallback::*OnGameConnectedClanChatMsg_function_type )( ::GameConnectedClanChatMsg_t * ) ;
                typedef void ( GameConnectedClanChatMsgCallback_wrapper::*default_OnGameConnectedClanChatMsg_function_type )( ::GameConnectedClanChatMsg_t * ) ;
                
                GameConnectedClanChatMsgCallback_exposer.def( 
                    "OnGameConnectedClanChatMsg"
                    , OnGameConnectedClanChatMsg_function_type(&::GameConnectedClanChatMsgCallback::OnGameConnectedClanChatMsg)
                    , default_OnGameConnectedClanChatMsg_function_type(&GameConnectedClanChatMsgCallback_wrapper::default_OnGameConnectedClanChatMsg)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::GameConnectedChatJoinCallback
            typedef bp::class_< GameConnectedChatJoinCallback_wrapper, boost::noncopyable > GameConnectedChatJoinCallback_exposer_t;
            GameConnectedChatJoinCallback_exposer_t GameConnectedChatJoinCallback_exposer = GameConnectedChatJoinCallback_exposer_t( "GameConnectedChatJoinCallback", bp::init<>() );
            bp::scope GameConnectedChatJoinCallback_scope( GameConnectedChatJoinCallback_exposer );
            { //::GameConnectedChatJoinCallback::OnGameConnectedChatJoin
            
                typedef void ( ::GameConnectedChatJoinCallback::*OnGameConnectedChatJoin_function_type )( ::GameConnectedChatJoin_t * ) ;
                typedef void ( GameConnectedChatJoinCallback_wrapper::*default_OnGameConnectedChatJoin_function_type )( ::GameConnectedChatJoin_t * ) ;
                
                GameConnectedChatJoinCallback_exposer.def( 
                    "OnGameConnectedChatJoin"
                    , OnGameConnectedChatJoin_function_type(&::GameConnectedChatJoinCallback::OnGameConnectedChatJoin)
                    , default_OnGameConnectedChatJoin_function_type(&GameConnectedChatJoinCallback_wrapper::default_OnGameConnectedChatJoin)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::GameConnectedChatLeaveCallback
            typedef bp::class_< GameConnectedChatLeaveCallback_wrapper, boost::noncopyable > GameConnectedChatLeaveCallback_exposer_t;
            GameConnectedChatLeaveCallback_exposer_t GameConnectedChatLeaveCallback_exposer = GameConnectedChatLeaveCallback_exposer_t( "GameConnectedChatLeaveCallback", bp::init<>() );
            bp::scope GameConnectedChatLeaveCallback_scope( GameConnectedChatLeaveCallback_exposer );
            { //::GameConnectedChatLeaveCallback::OnGameConnectedChatLeave
            
                typedef void ( ::GameConnectedChatLeaveCallback::*OnGameConnectedChatLeave_function_type )( ::GameConnectedChatLeave_t * ) ;
                typedef void ( GameConnectedChatLeaveCallback_wrapper::*default_OnGameConnectedChatLeave_function_type )( ::GameConnectedChatLeave_t * ) ;
                
                GameConnectedChatLeaveCallback_exposer.def( 
                    "OnGameConnectedChatLeave"
                    , OnGameConnectedChatLeave_function_type(&::GameConnectedChatLeaveCallback::OnGameConnectedChatLeave)
                    , default_OnGameConnectedChatLeave_function_type(&GameConnectedChatLeaveCallback_wrapper::default_OnGameConnectedChatLeave)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::DownloadClanActivityCountsResultCallback
            typedef bp::class_< DownloadClanActivityCountsResultCallback_wrapper, boost::noncopyable > DownloadClanActivityCountsResultCallback_exposer_t;
            DownloadClanActivityCountsResultCallback_exposer_t DownloadClanActivityCountsResultCallback_exposer = DownloadClanActivityCountsResultCallback_exposer_t( "DownloadClanActivityCountsResultCallback", bp::init<>() );
            bp::scope DownloadClanActivityCountsResultCallback_scope( DownloadClanActivityCountsResultCallback_exposer );
            { //::DownloadClanActivityCountsResultCallback::OnDownloadClanActivityCountsResult
            
                typedef void ( ::DownloadClanActivityCountsResultCallback::*OnDownloadClanActivityCountsResult_function_type )( ::DownloadClanActivityCountsResult_t * ) ;
                typedef void ( DownloadClanActivityCountsResultCallback_wrapper::*default_OnDownloadClanActivityCountsResult_function_type )( ::DownloadClanActivityCountsResult_t * ) ;
                
                DownloadClanActivityCountsResultCallback_exposer.def( 
                    "OnDownloadClanActivityCountsResult"
                    , OnDownloadClanActivityCountsResult_function_type(&::DownloadClanActivityCountsResultCallback::OnDownloadClanActivityCountsResult)
                    , default_OnDownloadClanActivityCountsResult_function_type(&DownloadClanActivityCountsResultCallback_wrapper::default_OnDownloadClanActivityCountsResult)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::JoinClanChatRoomCompletionResultCallback
            typedef bp::class_< JoinClanChatRoomCompletionResultCallback_wrapper, boost::noncopyable > JoinClanChatRoomCompletionResultCallback_exposer_t;
            JoinClanChatRoomCompletionResultCallback_exposer_t JoinClanChatRoomCompletionResultCallback_exposer = JoinClanChatRoomCompletionResultCallback_exposer_t( "JoinClanChatRoomCompletionResultCallback", bp::init<>() );
            bp::scope JoinClanChatRoomCompletionResultCallback_scope( JoinClanChatRoomCompletionResultCallback_exposer );
            { //::JoinClanChatRoomCompletionResultCallback::OnJoinClanChatRoomCompletionResult
            
                typedef void ( ::JoinClanChatRoomCompletionResultCallback::*OnJoinClanChatRoomCompletionResult_function_type )( ::JoinClanChatRoomCompletionResult_t * ) ;
                typedef void ( JoinClanChatRoomCompletionResultCallback_wrapper::*default_OnJoinClanChatRoomCompletionResult_function_type )( ::JoinClanChatRoomCompletionResult_t * ) ;
                
                JoinClanChatRoomCompletionResultCallback_exposer.def( 
                    "OnJoinClanChatRoomCompletionResult"
                    , OnJoinClanChatRoomCompletionResult_function_type(&::JoinClanChatRoomCompletionResultCallback::OnJoinClanChatRoomCompletionResult)
                    , default_OnJoinClanChatRoomCompletionResult_function_type(&JoinClanChatRoomCompletionResultCallback_wrapper::default_OnJoinClanChatRoomCompletionResult)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::GameConnectedFriendChatMsgCallback
            typedef bp::class_< GameConnectedFriendChatMsgCallback_wrapper, boost::noncopyable > GameConnectedFriendChatMsgCallback_exposer_t;
            GameConnectedFriendChatMsgCallback_exposer_t GameConnectedFriendChatMsgCallback_exposer = GameConnectedFriendChatMsgCallback_exposer_t( "GameConnectedFriendChatMsgCallback", bp::init<>() );
            bp::scope GameConnectedFriendChatMsgCallback_scope( GameConnectedFriendChatMsgCallback_exposer );
            { //::GameConnectedFriendChatMsgCallback::OnGameConnectedFriendChatMsg
            
                typedef void ( ::GameConnectedFriendChatMsgCallback::*OnGameConnectedFriendChatMsg_function_type )( ::GameConnectedFriendChatMsg_t * ) ;
                typedef void ( GameConnectedFriendChatMsgCallback_wrapper::*default_OnGameConnectedFriendChatMsg_function_type )( ::GameConnectedFriendChatMsg_t * ) ;
                
                GameConnectedFriendChatMsgCallback_exposer.def( 
                    "OnGameConnectedFriendChatMsg"
                    , OnGameConnectedFriendChatMsg_function_type(&::GameConnectedFriendChatMsgCallback::OnGameConnectedFriendChatMsg)
                    , default_OnGameConnectedFriendChatMsg_function_type(&GameConnectedFriendChatMsgCallback_wrapper::default_OnGameConnectedFriendChatMsg)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::FriendsGetFollowerCountCallback
            typedef bp::class_< FriendsGetFollowerCountCallback_wrapper, boost::noncopyable > FriendsGetFollowerCountCallback_exposer_t;
            FriendsGetFollowerCountCallback_exposer_t FriendsGetFollowerCountCallback_exposer = FriendsGetFollowerCountCallback_exposer_t( "FriendsGetFollowerCountCallback", bp::init<>() );
            bp::scope FriendsGetFollowerCountCallback_scope( FriendsGetFollowerCountCallback_exposer );
            { //::FriendsGetFollowerCountCallback::OnFriendsGetFollowerCount
            
                typedef void ( ::FriendsGetFollowerCountCallback::*OnFriendsGetFollowerCount_function_type )( ::FriendsGetFollowerCount_t * ) ;
                typedef void ( FriendsGetFollowerCountCallback_wrapper::*default_OnFriendsGetFollowerCount_function_type )( ::FriendsGetFollowerCount_t * ) ;
                
                FriendsGetFollowerCountCallback_exposer.def( 
                    "OnFriendsGetFollowerCount"
                    , OnFriendsGetFollowerCount_function_type(&::FriendsGetFollowerCountCallback::OnFriendsGetFollowerCount)
                    , default_OnFriendsGetFollowerCount_function_type(&FriendsGetFollowerCountCallback_wrapper::default_OnFriendsGetFollowerCount)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::FriendsIsFollowingCallback
            typedef bp::class_< FriendsIsFollowingCallback_wrapper, boost::noncopyable > FriendsIsFollowingCallback_exposer_t;
            FriendsIsFollowingCallback_exposer_t FriendsIsFollowingCallback_exposer = FriendsIsFollowingCallback_exposer_t( "FriendsIsFollowingCallback", bp::init<>() );
            bp::scope FriendsIsFollowingCallback_scope( FriendsIsFollowingCallback_exposer );
            { //::FriendsIsFollowingCallback::OnFriendsIsFollowing
            
                typedef void ( ::FriendsIsFollowingCallback::*OnFriendsIsFollowing_function_type )( ::FriendsIsFollowing_t * ) ;
                typedef void ( FriendsIsFollowingCallback_wrapper::*default_OnFriendsIsFollowing_function_type )( ::FriendsIsFollowing_t * ) ;
                
                FriendsIsFollowingCallback_exposer.def( 
                    "OnFriendsIsFollowing"
                    , OnFriendsIsFollowing_function_type(&::FriendsIsFollowingCallback::OnFriendsIsFollowing)
                    , default_OnFriendsIsFollowing_function_type(&FriendsIsFollowingCallback_wrapper::default_OnFriendsIsFollowing)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::FriendsEnumerateFollowingListCallback
            typedef bp::class_< FriendsEnumerateFollowingListCallback_wrapper, boost::noncopyable > FriendsEnumerateFollowingListCallback_exposer_t;
            FriendsEnumerateFollowingListCallback_exposer_t FriendsEnumerateFollowingListCallback_exposer = FriendsEnumerateFollowingListCallback_exposer_t( "FriendsEnumerateFollowingListCallback", bp::init<>() );
            bp::scope FriendsEnumerateFollowingListCallback_scope( FriendsEnumerateFollowingListCallback_exposer );
            { //::FriendsEnumerateFollowingListCallback::OnFriendsEnumerateFollowingList
            
                typedef void ( ::FriendsEnumerateFollowingListCallback::*OnFriendsEnumerateFollowingList_function_type )( ::FriendsEnumerateFollowingList_t * ) ;
                typedef void ( FriendsEnumerateFollowingListCallback_wrapper::*default_OnFriendsEnumerateFollowingList_function_type )( ::FriendsEnumerateFollowingList_t * ) ;
                
                FriendsEnumerateFollowingListCallback_exposer.def( 
                    "OnFriendsEnumerateFollowingList"
                    , OnFriendsEnumerateFollowingList_function_type(&::FriendsEnumerateFollowingListCallback::OnFriendsEnumerateFollowingList)
                    , default_OnFriendsEnumerateFollowingList_function_type(&FriendsEnumerateFollowingListCallback_wrapper::default_OnFriendsEnumerateFollowingList)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::SetPersonaNameResponseCallback
            typedef bp::class_< SetPersonaNameResponseCallback_wrapper, boost::noncopyable > SetPersonaNameResponseCallback_exposer_t;
            SetPersonaNameResponseCallback_exposer_t SetPersonaNameResponseCallback_exposer = SetPersonaNameResponseCallback_exposer_t( "SetPersonaNameResponseCallback", bp::init<>() );
            bp::scope SetPersonaNameResponseCallback_scope( SetPersonaNameResponseCallback_exposer );
            { //::SetPersonaNameResponseCallback::OnSetPersonaNameResponse
            
                typedef void ( ::SetPersonaNameResponseCallback::*OnSetPersonaNameResponse_function_type )( ::SetPersonaNameResponse_t * ) ;
                typedef void ( SetPersonaNameResponseCallback_wrapper::*default_OnSetPersonaNameResponse_function_type )( ::SetPersonaNameResponse_t * ) ;
                
                SetPersonaNameResponseCallback_exposer.def( 
                    "OnSetPersonaNameResponse"
                    , OnSetPersonaNameResponse_function_type(&::SetPersonaNameResponseCallback::OnSetPersonaNameResponse)
                    , default_OnSetPersonaNameResponse_function_type(&SetPersonaNameResponseCallback_wrapper::default_OnSetPersonaNameResponse)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::LobbyMatchListCallResult
            typedef bp::class_< LobbyMatchListCallResult_wrapper, boost::noncopyable > LobbyMatchListCallResult_exposer_t;
            LobbyMatchListCallResult_exposer_t LobbyMatchListCallResult_exposer = LobbyMatchListCallResult_exposer_t( "LobbyMatchListCallResult", bp::init< SteamAPICall_t >(( bp::arg("steamapicall") )) );
            bp::scope LobbyMatchListCallResult_scope( LobbyMatchListCallResult_exposer );
            bp::implicitly_convertible< SteamAPICall_t, LobbyMatchListCallResult >();
            { //::LobbyMatchListCallResult::OnLobbyMatchList
            
                typedef void ( ::LobbyMatchListCallResult::*OnLobbyMatchList_function_type )( ::LobbyMatchList_t *,bool ) ;
                typedef void ( LobbyMatchListCallResult_wrapper::*default_OnLobbyMatchList_function_type )( ::LobbyMatchList_t *,bool ) ;
                
                LobbyMatchListCallResult_exposer.def( 
                    "OnLobbyMatchList"
                    , OnLobbyMatchList_function_type(&::LobbyMatchListCallResult::OnLobbyMatchList)
                    , default_OnLobbyMatchList_function_type(&LobbyMatchListCallResult_wrapper::default_OnLobbyMatchList)
                    , ( bp::arg("data"), bp::arg("iofailure") ) );
            
            }
        }

    { //::LobbyGameCreatedCallResult
            typedef bp::class_< LobbyGameCreatedCallResult_wrapper, boost::noncopyable > LobbyGameCreatedCallResult_exposer_t;
            LobbyGameCreatedCallResult_exposer_t LobbyGameCreatedCallResult_exposer = LobbyGameCreatedCallResult_exposer_t( "LobbyGameCreatedCallResult", bp::init< SteamAPICall_t >(( bp::arg("steamapicall") )) );
            bp::scope LobbyGameCreatedCallResult_scope( LobbyGameCreatedCallResult_exposer );
            bp::implicitly_convertible< SteamAPICall_t, LobbyGameCreatedCallResult >();
            { //::LobbyGameCreatedCallResult::OnLobbyGameCreated
            
                typedef void ( ::LobbyGameCreatedCallResult::*OnLobbyGameCreated_function_type )( ::LobbyGameCreated_t *,bool ) ;
                typedef void ( LobbyGameCreatedCallResult_wrapper::*default_OnLobbyGameCreated_function_type )( ::LobbyGameCreated_t *,bool ) ;
                
                LobbyGameCreatedCallResult_exposer.def( 
                    "OnLobbyGameCreated"
                    , OnLobbyGameCreated_function_type(&::LobbyGameCreatedCallResult::OnLobbyGameCreated)
                    , default_OnLobbyGameCreated_function_type(&LobbyGameCreatedCallResult_wrapper::default_OnLobbyGameCreated)
                    , ( bp::arg("data"), bp::arg("iofailure") ) );
            
            }
        }

    { //::LobbyCreatedCallResult
            typedef bp::class_< LobbyCreatedCallResult_wrapper, boost::noncopyable > LobbyCreatedCallResult_exposer_t;
            LobbyCreatedCallResult_exposer_t LobbyCreatedCallResult_exposer = LobbyCreatedCallResult_exposer_t( "LobbyCreatedCallResult", bp::init< SteamAPICall_t >(( bp::arg("steamapicall") )) );
            bp::scope LobbyCreatedCallResult_scope( LobbyCreatedCallResult_exposer );
            bp::implicitly_convertible< SteamAPICall_t, LobbyCreatedCallResult >();
            { //::LobbyCreatedCallResult::OnLobbyCreated
            
                typedef void ( ::LobbyCreatedCallResult::*OnLobbyCreated_function_type )( ::LobbyCreated_t *,bool ) ;
                typedef void ( LobbyCreatedCallResult_wrapper::*default_OnLobbyCreated_function_type )( ::LobbyCreated_t *,bool ) ;
                
                LobbyCreatedCallResult_exposer.def( 
                    "OnLobbyCreated"
                    , OnLobbyCreated_function_type(&::LobbyCreatedCallResult::OnLobbyCreated)
                    , default_OnLobbyCreated_function_type(&LobbyCreatedCallResult_wrapper::default_OnLobbyCreated)
                    , ( bp::arg("data"), bp::arg("iofailure") ) );
            
            }
        }

    { //::LobbyEnterCallResult
            typedef bp::class_< LobbyEnterCallResult_wrapper, boost::noncopyable > LobbyEnterCallResult_exposer_t;
            LobbyEnterCallResult_exposer_t LobbyEnterCallResult_exposer = LobbyEnterCallResult_exposer_t( "LobbyEnterCallResult", bp::init< SteamAPICall_t >(( bp::arg("steamapicall") )) );
            bp::scope LobbyEnterCallResult_scope( LobbyEnterCallResult_exposer );
            bp::implicitly_convertible< SteamAPICall_t, LobbyEnterCallResult >();
            { //::LobbyEnterCallResult::OnLobbyEnter
            
                typedef void ( ::LobbyEnterCallResult::*OnLobbyEnter_function_type )( ::LobbyEnter_t *,bool ) ;
                typedef void ( LobbyEnterCallResult_wrapper::*default_OnLobbyEnter_function_type )( ::LobbyEnter_t *,bool ) ;
                
                LobbyEnterCallResult_exposer.def( 
                    "OnLobbyEnter"
                    , OnLobbyEnter_function_type(&::LobbyEnterCallResult::OnLobbyEnter)
                    , default_OnLobbyEnter_function_type(&LobbyEnterCallResult_wrapper::default_OnLobbyEnter)
                    , ( bp::arg("data"), bp::arg("iofailure") ) );
            
            }
        }

    { //::LobbyChatUpdateCallback
            typedef bp::class_< LobbyChatUpdateCallback_wrapper, boost::noncopyable > LobbyChatUpdateCallback_exposer_t;
            LobbyChatUpdateCallback_exposer_t LobbyChatUpdateCallback_exposer = LobbyChatUpdateCallback_exposer_t( "LobbyChatUpdateCallback", bp::init<>() );
            bp::scope LobbyChatUpdateCallback_scope( LobbyChatUpdateCallback_exposer );
            { //::LobbyChatUpdateCallback::OnLobbyChatUpdate
            
                typedef void ( ::LobbyChatUpdateCallback::*OnLobbyChatUpdate_function_type )( ::LobbyChatUpdate_t * ) ;
                typedef void ( LobbyChatUpdateCallback_wrapper::*default_OnLobbyChatUpdate_function_type )( ::LobbyChatUpdate_t * ) ;
                
                LobbyChatUpdateCallback_exposer.def( 
                    "OnLobbyChatUpdate"
                    , OnLobbyChatUpdate_function_type(&::LobbyChatUpdateCallback::OnLobbyChatUpdate)
                    , default_OnLobbyChatUpdate_function_type(&LobbyChatUpdateCallback_wrapper::default_OnLobbyChatUpdate)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::LobbyChatMsgCallback
            typedef bp::class_< LobbyChatMsgCallback_wrapper, boost::noncopyable > LobbyChatMsgCallback_exposer_t;
            LobbyChatMsgCallback_exposer_t LobbyChatMsgCallback_exposer = LobbyChatMsgCallback_exposer_t( "LobbyChatMsgCallback", bp::init<>() );
            bp::scope LobbyChatMsgCallback_scope( LobbyChatMsgCallback_exposer );
            { //::LobbyChatMsgCallback::OnLobbyChatMsg
            
                typedef void ( ::LobbyChatMsgCallback::*OnLobbyChatMsg_function_type )( ::LobbyChatMsg_t * ) ;
                typedef void ( LobbyChatMsgCallback_wrapper::*default_OnLobbyChatMsg_function_type )( ::LobbyChatMsg_t * ) ;
                
                LobbyChatMsgCallback_exposer.def( 
                    "OnLobbyChatMsg"
                    , OnLobbyChatMsg_function_type(&::LobbyChatMsgCallback::OnLobbyChatMsg)
                    , default_OnLobbyChatMsg_function_type(&LobbyChatMsgCallback_wrapper::default_OnLobbyChatMsg)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::LobbyDataUpdateCallback
            typedef bp::class_< LobbyDataUpdateCallback_wrapper, boost::noncopyable > LobbyDataUpdateCallback_exposer_t;
            LobbyDataUpdateCallback_exposer_t LobbyDataUpdateCallback_exposer = LobbyDataUpdateCallback_exposer_t( "LobbyDataUpdateCallback", bp::init<>() );
            bp::scope LobbyDataUpdateCallback_scope( LobbyDataUpdateCallback_exposer );
            { //::LobbyDataUpdateCallback::OnLobbyDataUpdate
            
                typedef void ( ::LobbyDataUpdateCallback::*OnLobbyDataUpdate_function_type )( ::LobbyDataUpdate_t * ) ;
                typedef void ( LobbyDataUpdateCallback_wrapper::*default_OnLobbyDataUpdate_function_type )( ::LobbyDataUpdate_t * ) ;
                
                LobbyDataUpdateCallback_exposer.def( 
                    "OnLobbyDataUpdate"
                    , OnLobbyDataUpdate_function_type(&::LobbyDataUpdateCallback::OnLobbyDataUpdate)
                    , default_OnLobbyDataUpdate_function_type(&LobbyDataUpdateCallback_wrapper::default_OnLobbyDataUpdate)
                    , ( bp::arg("data") ) );
            
            }
        }

    { //::NumberOfCurrentPlayersCallResult
            typedef bp::class_< NumberOfCurrentPlayersCallResult_wrapper, boost::noncopyable > NumberOfCurrentPlayersCallResult_exposer_t;
            NumberOfCurrentPlayersCallResult_exposer_t NumberOfCurrentPlayersCallResult_exposer = NumberOfCurrentPlayersCallResult_exposer_t( "NumberOfCurrentPlayersCallResult", bp::init< SteamAPICall_t >(( bp::arg("steamapicall") )) );
            bp::scope NumberOfCurrentPlayersCallResult_scope( NumberOfCurrentPlayersCallResult_exposer );
            bp::implicitly_convertible< SteamAPICall_t, NumberOfCurrentPlayersCallResult >();
            { //::NumberOfCurrentPlayersCallResult::OnNumberOfCurrentPlayers
            
                typedef void ( ::NumberOfCurrentPlayersCallResult::*OnNumberOfCurrentPlayers_function_type )( ::NumberOfCurrentPlayers_t *,bool ) ;
                typedef void ( NumberOfCurrentPlayersCallResult_wrapper::*default_OnNumberOfCurrentPlayers_function_type )( ::NumberOfCurrentPlayers_t *,bool ) ;
                
                NumberOfCurrentPlayersCallResult_exposer.def( 
                    "OnNumberOfCurrentPlayers"
                    , OnNumberOfCurrentPlayers_function_type(&::NumberOfCurrentPlayersCallResult::OnNumberOfCurrentPlayers)
                    , default_OnNumberOfCurrentPlayers_function_type(&NumberOfCurrentPlayersCallResult_wrapper::default_OnNumberOfCurrentPlayers)
                    , ( bp::arg("data"), bp::arg("iofailure") ) );
            
            }
        }

    bp::scope().attr( "steamgameserverapicontext" ) = boost::ref(steamgameserverapicontext);

    bp::scope().attr("k_uAPICallInvalid") = k_uAPICallInvalid;
}
#endif

