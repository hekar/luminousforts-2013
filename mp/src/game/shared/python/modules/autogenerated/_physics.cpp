// This file has been generated by Py++.

#include "cbase.h"
#ifdef CLIENT_DLL
#include "cbase.h"

#include "srcpy_physics.h"

#include "vphysics/friction.h"

#include "physics.h"

#include "vphysics_interface.h"

#include "physics_shared.h"

#include "srcpy_physics_converters.h"

#include "tier0/valve_minmax_off.h"

#include "srcpy.h"

#include "tier0/valve_minmax_on.h"

#include "tier0/memdbgon.h"

namespace bp = boost::python;

struct PyPhysicsObject_wrapper : PyPhysicsObject, bp::wrapper< PyPhysicsObject > {

    PyPhysicsObject_wrapper(PyPhysicsObject const & arg )
    : PyPhysicsObject( arg )
      , bp::wrapper< PyPhysicsObject >(){
        // copy constructor
        
    }

    PyPhysicsObject_wrapper( )
    : PyPhysicsObject( )
      , bp::wrapper< PyPhysicsObject >(){
        // null constructor
    
    }

    PyPhysicsObject_wrapper(::C_BaseEntity * pEnt )
    : PyPhysicsObject( pEnt )
      , bp::wrapper< PyPhysicsObject >(){
        // constructor
    
    }

    PyPhysicsObject_wrapper(::IPhysicsObject * pPhysObj )
    : PyPhysicsObject( pPhysObj )
      , bp::wrapper< PyPhysicsObject >(){
        // constructor
    
    }

    virtual PyObject *GetPySelf() const { return boost::python::detail::wrapper_base_::get_owner(*this); }

};

#ifdef _LINUX
typedef struct model_t {};
#endif // _LINUX

BOOST_PYTHON_MODULE(_physics){
    bp::docstring_options doc_options( true, true, false );

    bp::enum_< SurroundingBoundsType_t>("SurroundingBoundsType_t")
        .value("USE_OBB_COLLISION_BOUNDS", USE_OBB_COLLISION_BOUNDS)
        .value("USE_BEST_COLLISION_BOUNDS", USE_BEST_COLLISION_BOUNDS)
        .value("USE_HITBOXES", USE_HITBOXES)
        .value("USE_SPECIFIED_BOUNDS", USE_SPECIFIED_BOUNDS)
        .value("USE_GAME_CODE", USE_GAME_CODE)
        .value("USE_ROTATION_EXPANDED_BOUNDS", USE_ROTATION_EXPANDED_BOUNDS)
        .value("USE_COLLISION_BOUNDS_NEVER_VPHYSICS", USE_COLLISION_BOUNDS_NEVER_VPHYSICS)
        .value("SURROUNDING_TYPE_BIT_COUNT", SURROUNDING_TYPE_BIT_COUNT)
        .export_values()
        ;

    bp::class_< CCollisionProperty >( "CCollisionProperty", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "AddSolidFlags"
            , (void ( ::CCollisionProperty::* )( int ))( &::CCollisionProperty::AddSolidFlags )
            , ( bp::arg("flags") ) )    
        .def( 
            "BoundingRadius"
            , (float ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::BoundingRadius ) )    
        .def( 
            "BoundingRadius2D"
            , (float ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::BoundingRadius2D ) )    
        .def( 
            "CalcDistanceFromPoint"
            , (float ( ::CCollisionProperty::* )( ::Vector const & )const)( &::CCollisionProperty::CalcDistanceFromPoint )
            , ( bp::arg("vecWorldPt") ) )    
        .def( 
            "CalcNearestPoint"
            , (void ( ::CCollisionProperty::* )( ::Vector const &,::Vector * )const)( &::CCollisionProperty::CalcNearestPoint )
            , ( bp::arg("vecWorldPt"), bp::arg("pVecNearestWorldPt") ) )    
        .def( 
            "ClearSolidFlags"
            , (void ( ::CCollisionProperty::* )(  ))( &::CCollisionProperty::ClearSolidFlags ) )    
        .def( 
            "CollisionSpaceMaxs"
            , (::Vector const & ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::CollisionSpaceMaxs )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "CollisionSpaceMins"
            , (::Vector const & ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::CollisionSpaceMins )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "CollisionToNormalizedSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * )const)( &::CCollisionProperty::CollisionToNormalizedSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "CollisionToWorldSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * )const)( &::CCollisionProperty::CollisionToWorldSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "CollisionToWorldTransform"
            , (::matrix3x4_t const & ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::CollisionToWorldTransform )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "ComputeSupportMap"
            , (float ( ::CCollisionProperty::* )( ::Vector const & )const)( &::CCollisionProperty::ComputeSupportMap )
            , ( bp::arg("vecDirection") ) )    
        .def( 
            "CreatePartitionHandle"
            , (void ( ::CCollisionProperty::* )(  ))( &::CCollisionProperty::CreatePartitionHandle ) )    
        .def( 
            "DestroyPartitionHandle"
            , (void ( ::CCollisionProperty::* )(  ))( &::CCollisionProperty::DestroyPartitionHandle ) )    
        .def( 
            "DoesRotationInvalidateSurroundingBox"
            , (bool ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::DoesRotationInvalidateSurroundingBox ) )    
        .def( 
            "DoesVPhysicsInvalidateSurroundingBox"
            , (bool ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::DoesVPhysicsInvalidateSurroundingBox ) )    
        .def( 
            "GetCollisionAngles"
            , (::QAngle const & ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::GetCollisionAngles )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetCollisionGroup"
            , (int ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::GetCollisionGroup ) )    
        .def( 
            "GetCollisionModel"
            , (::model_t const * ( ::CCollisionProperty::* )(  ))( &::CCollisionProperty::GetCollisionModel )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetCollisionModelIndex"
            , (int ( ::CCollisionProperty::* )(  ))( &::CCollisionProperty::GetCollisionModelIndex ) )    
        .def( 
            "GetCollisionOrigin"
            , (::Vector const & ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::GetCollisionOrigin )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetPartitionHandle"
            , (short unsigned int ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::GetPartitionHandle ) )    
        .def( 
            "GetRootParentToWorldTransform"
            , (::matrix3x4_t const * ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::GetRootParentToWorldTransform )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetSolid"
            , (::SolidType_t ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::GetSolid ) )    
        .def( 
            "GetSolidFlags"
            , (int ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::GetSolidFlags ) )    
        .def( 
            "Init"
            , (void ( ::CCollisionProperty::* )( ::C_BaseEntity * ))( &::CCollisionProperty::Init )
            , ( bp::arg("pEntity") ) )    
        .def( 
            "IsBoundsDefinedInEntitySpace"
            , (bool ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::IsBoundsDefinedInEntitySpace ) )    
        .def( 
            "IsPointInBounds"
            , (bool ( ::CCollisionProperty::* )( ::Vector const & )const)( &::CCollisionProperty::IsPointInBounds )
            , ( bp::arg("vecWorldPt") ) )    
        .def( 
            "IsSolid"
            , (bool ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::IsSolid ) )    
        .def( 
            "IsSolidFlagSet"
            , (bool ( ::CCollisionProperty::* )( int )const)( &::CCollisionProperty::IsSolidFlagSet )
            , ( bp::arg("flagMask") ) )    
        .def( 
            "MarkPartitionHandleDirty"
            , (void ( ::CCollisionProperty::* )(  ))( &::CCollisionProperty::MarkPartitionHandleDirty ) )    
        .def( 
            "MarkSurroundingBoundsDirty"
            , (void ( ::CCollisionProperty::* )(  ))( &::CCollisionProperty::MarkSurroundingBoundsDirty ) )    
        .def( 
            "NormalizedToCollisionSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * )const)( &::CCollisionProperty::NormalizedToCollisionSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "NormalizedToWorldSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * )const)( &::CCollisionProperty::NormalizedToWorldSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "OBBCenter"
            , (::Vector const & ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::OBBCenter )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "OBBMaxs"
            , (::Vector const & ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::OBBMaxs )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "OBBMaxsPreScaled"
            , (::Vector const & ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::OBBMaxsPreScaled )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "OBBMins"
            , (::Vector const & ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::OBBMins )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "OBBMinsPreScaled"
            , (::Vector const & ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::OBBMinsPreScaled )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "OBBSize"
            , (::Vector const & ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::OBBSize )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "RandomPointInBounds"
            , (void ( ::CCollisionProperty::* )( ::Vector const &,::Vector const &,::Vector * )const)( &::CCollisionProperty::RandomPointInBounds )
            , ( bp::arg("vecNormalizedMins"), bp::arg("vecNormalizedMaxs"), bp::arg("pPoint") ) )    
        .def( 
            "RefreshScaledCollisionBounds"
            , (void ( ::CCollisionProperty::* )(  ))( &::CCollisionProperty::RefreshScaledCollisionBounds ) )    
        .def( 
            "RemoveSolidFlags"
            , (void ( ::CCollisionProperty::* )( int ))( &::CCollisionProperty::RemoveSolidFlags )
            , ( bp::arg("flags") ) )    
        .def( 
            "SetCollisionBounds"
            , (void ( ::CCollisionProperty::* )( ::Vector const &,::Vector const & ))( &::CCollisionProperty::SetCollisionBounds )
            , ( bp::arg("mins"), bp::arg("maxs") ) )    
        .def( 
            "SetSolid"
            , (void ( ::CCollisionProperty::* )( ::SolidType_t ))( &::CCollisionProperty::SetSolid )
            , ( bp::arg("val") ) )    
        .def( 
            "SetSolidFlags"
            , (void ( ::CCollisionProperty::* )( int ))( &::CCollisionProperty::SetSolidFlags )
            , ( bp::arg("flags") ) )    
        .def( 
            "SetSurroundingBoundsType"
            , (void ( ::CCollisionProperty::* )( ::SurroundingBoundsType_t,::Vector const *,::Vector const * ))( &::CCollisionProperty::SetSurroundingBoundsType )
            , ( bp::arg("type"), bp::arg("pMins")=bp::object(), bp::arg("pMaxs")=bp::object() ) )    
        .def( 
            "ShouldTouchTrigger"
            , (bool ( ::CCollisionProperty::* )( int )const)( &::CCollisionProperty::ShouldTouchTrigger )
            , ( bp::arg("triggerSolidFlags") ) )    
        .def( 
            "TestCollision"
            , (bool ( ::CCollisionProperty::* )( ::Ray_t const &,unsigned int,::trace_t & ))( &::CCollisionProperty::TestCollision )
            , ( bp::arg("ray"), bp::arg("fContentsMask"), bp::arg("tr") ) )    
        .def( 
            "TestHitboxes"
            , (bool ( ::CCollisionProperty::* )( ::Ray_t const &,unsigned int,::trace_t & ))( &::CCollisionProperty::TestHitboxes )
            , ( bp::arg("ray"), bp::arg("fContentsMask"), bp::arg("tr") ) )    
        .def( 
            "UpdatePartition"
            , (void ( ::CCollisionProperty::* )(  ))( &::CCollisionProperty::UpdatePartition ) )    
        .def( 
            "UseTriggerBounds"
            , (void ( ::CCollisionProperty::* )( bool,float ))( &::CCollisionProperty::UseTriggerBounds )
            , ( bp::arg("bEnable"), bp::arg("flBloat")=0.F ) )    
        .def( 
            "WorldDirectionToCollisionSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * )const)( &::CCollisionProperty::WorldDirectionToCollisionSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "WorldSpaceAABB"
            , (void ( ::CCollisionProperty::* )( ::Vector *,::Vector * )const)( &::CCollisionProperty::WorldSpaceAABB )
            , ( bp::arg("pWorldMins"), bp::arg("pWorldMaxs") ) )    
        .def( 
            "WorldSpaceCenter"
            , (::Vector const & ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::WorldSpaceCenter )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "WorldSpaceSurroundingBounds"
            , (void ( ::CCollisionProperty::* )( ::Vector *,::Vector * ))( &::CCollisionProperty::WorldSpaceSurroundingBounds )
            , ( bp::arg("pVecMins"), bp::arg("pVecMaxs") ) )    
        .def( 
            "WorldSpaceTriggerBounds"
            , (void ( ::CCollisionProperty::* )( ::Vector *,::Vector * )const)( &::CCollisionProperty::WorldSpaceTriggerBounds )
            , ( bp::arg("pVecWorldMins"), bp::arg("pVecWorldMaxs") ) )    
        .def( 
            "WorldToCollisionSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * )const)( &::CCollisionProperty::WorldToCollisionSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "WorldToNormalizedSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * )const)( &::CCollisionProperty::WorldToNormalizedSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() );

    bp::class_< PyPhysicsCollision >( "PhysicsCollision", bp::no_init )    
        .def( 
            "CollideGetAABB"
            , (::boost::python::tuple ( ::PyPhysicsCollision::* )( ::PyPhysicsObject *,::Vector const &,::QAngle const & ))( &::PyPhysicsCollision::CollideGetAABB )
            , ( bp::arg("pPhysObj"), bp::arg("collideOrigin"), bp::arg("collideAngles") ) )    
        .def( 
            "TraceBox"
            , (void ( ::PyPhysicsCollision::* )( ::PyRay_t &,::PyPhysicsObject &,::Vector const &,::QAngle const &,::trace_t & ))( &::PyPhysicsCollision::TraceBox )
            , ( bp::arg("ray"), bp::arg("physObj"), bp::arg("collideOrigin"), bp::arg("collideAngles"), bp::arg("ptr") ) );

    { //::PyPhysicsObject
        typedef bp::class_< PyPhysicsObject_wrapper > PhysicsObject_exposer_t;
        PhysicsObject_exposer_t PhysicsObject_exposer = PhysicsObject_exposer_t( "PhysicsObject", bp::init< >() );
        bp::scope PhysicsObject_scope( PhysicsObject_exposer );
        PhysicsObject_exposer.def( bp::init< C_BaseEntity * >(( bp::arg("pEnt") )) );
        bp::implicitly_convertible< C_BaseEntity *, PyPhysicsObject >();
        PhysicsObject_exposer.def( bp::init< IPhysicsObject * >(( bp::arg("pPhysObj") )) );
        bp::implicitly_convertible< IPhysicsObject *, PyPhysicsObject >();
        { //::PyPhysicsObject::AddVelocity
        
            typedef void ( ::PyPhysicsObject::*AddVelocity_function_type)( ::Vector const *,::AngularImpulse const * ) ;
            
            PhysicsObject_exposer.def( 
                "AddVelocity"
                , AddVelocity_function_type( &::PyPhysicsObject::AddVelocity )
                , ( bp::arg("velocity"), bp::arg("angularVelocity") ) );
        
        }
        { //::PyPhysicsObject::ApplyForceCenter
        
            typedef void ( ::PyPhysicsObject::*ApplyForceCenter_function_type)( ::Vector const & ) ;
            
            PhysicsObject_exposer.def( 
                "ApplyForceCenter"
                , ApplyForceCenter_function_type( &::PyPhysicsObject::ApplyForceCenter )
                , ( bp::arg("forceVector") ) );
        
        }
        { //::PyPhysicsObject::ApplyForceOffset
        
            typedef void ( ::PyPhysicsObject::*ApplyForceOffset_function_type)( ::Vector const &,::Vector const & ) ;
            
            PhysicsObject_exposer.def( 
                "ApplyForceOffset"
                , ApplyForceOffset_function_type( &::PyPhysicsObject::ApplyForceOffset )
                , ( bp::arg("forceVector"), bp::arg("worldPosition") ) );
        
        }
        { //::PyPhysicsObject::ApplyTorqueCenter
        
            typedef void ( ::PyPhysicsObject::*ApplyTorqueCenter_function_type)( ::AngularImpulse const & ) ;
            
            PhysicsObject_exposer.def( 
                "ApplyTorqueCenter"
                , ApplyTorqueCenter_function_type( &::PyPhysicsObject::ApplyTorqueCenter )
                , ( bp::arg("torque") ) );
        
        }
        { //::PyPhysicsObject::BecomeHinged
        
            typedef void ( ::PyPhysicsObject::*BecomeHinged_function_type)( int ) ;
            
            PhysicsObject_exposer.def( 
                "BecomeHinged"
                , BecomeHinged_function_type( &::PyPhysicsObject::BecomeHinged )
                , ( bp::arg("localAxis") ) );
        
        }
        { //::PyPhysicsObject::BecomeTrigger
        
            typedef void ( ::PyPhysicsObject::*BecomeTrigger_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "BecomeTrigger"
                , BecomeTrigger_function_type( &::PyPhysicsObject::BecomeTrigger ) );
        
        }
        { //::PyPhysicsObject::Bool
        
            typedef bool ( ::PyPhysicsObject::*__bool___function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "__bool__"
                , __bool___function_type( &::PyPhysicsObject::Bool ) );
        
        }
        { //::PyPhysicsObject::CalculateAngularDrag
        
            typedef float ( ::PyPhysicsObject::*CalculateAngularDrag_function_type)( ::Vector const & ) ;
            
            PhysicsObject_exposer.def( 
                "CalculateAngularDrag"
                , CalculateAngularDrag_function_type( &::PyPhysicsObject::CalculateAngularDrag )
                , ( bp::arg("objectSpaceRotationAxis") ) );
        
        }
        { //::PyPhysicsObject::CalculateForceOffset
        
            typedef void ( ::PyPhysicsObject::*CalculateForceOffset_function_type)( ::Vector const &,::Vector const &,::Vector *,::AngularImpulse * ) ;
            
            PhysicsObject_exposer.def( 
                "CalculateForceOffset"
                , CalculateForceOffset_function_type( &::PyPhysicsObject::CalculateForceOffset )
                , ( bp::arg("forceVector"), bp::arg("worldPosition"), bp::arg("centerForce"), bp::arg("centerTorque") ) );
        
        }
        { //::PyPhysicsObject::CalculateLinearDrag
        
            typedef float ( ::PyPhysicsObject::*CalculateLinearDrag_function_type)( ::Vector const & ) ;
            
            PhysicsObject_exposer.def( 
                "CalculateLinearDrag"
                , CalculateLinearDrag_function_type( &::PyPhysicsObject::CalculateLinearDrag )
                , ( bp::arg("unitDirection") ) );
        
        }
        { //::PyPhysicsObject::CalculateVelocityOffset
        
            typedef void ( ::PyPhysicsObject::*CalculateVelocityOffset_function_type)( ::Vector const &,::Vector const &,::Vector *,::AngularImpulse * ) ;
            
            PhysicsObject_exposer.def( 
                "CalculateVelocityOffset"
                , CalculateVelocityOffset_function_type( &::PyPhysicsObject::CalculateVelocityOffset )
                , ( bp::arg("forceVector"), bp::arg("worldPosition"), bp::arg("centerVelocity"), bp::arg("centerAngularVelocity") ) );
        
        }
        { //::PyPhysicsObject::Cmp
        
            typedef bool ( ::PyPhysicsObject::*__cmp___function_type)( ::boost::python::api::object ) ;
            
            PhysicsObject_exposer.def( 
                "__cmp__"
                , __cmp___function_type( &::PyPhysicsObject::Cmp )
                , ( bp::arg("other") ) );
        
        }
        { //::PyPhysicsObject::Destroy
        
            typedef void ( ::PyPhysicsObject::*Destroy_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "Destroy"
                , Destroy_function_type( &::PyPhysicsObject::Destroy ) );
        
        }
        { //::PyPhysicsObject::EnableCollisions
        
            typedef void ( ::PyPhysicsObject::*EnableCollisions_function_type)( bool ) ;
            
            PhysicsObject_exposer.def( 
                "EnableCollisions"
                , EnableCollisions_function_type( &::PyPhysicsObject::EnableCollisions )
                , ( bp::arg("enable") ) );
        
        }
        { //::PyPhysicsObject::EnableDrag
        
            typedef void ( ::PyPhysicsObject::*EnableDrag_function_type)( bool ) ;
            
            PhysicsObject_exposer.def( 
                "EnableDrag"
                , EnableDrag_function_type( &::PyPhysicsObject::EnableDrag )
                , ( bp::arg("enable") ) );
        
        }
        { //::PyPhysicsObject::EnableGravity
        
            typedef void ( ::PyPhysicsObject::*EnableGravity_function_type)( bool ) ;
            
            PhysicsObject_exposer.def( 
                "EnableGravity"
                , EnableGravity_function_type( &::PyPhysicsObject::EnableGravity )
                , ( bp::arg("enable") ) );
        
        }
        { //::PyPhysicsObject::EnableMotion
        
            typedef void ( ::PyPhysicsObject::*EnableMotion_function_type)( bool ) ;
            
            PhysicsObject_exposer.def( 
                "EnableMotion"
                , EnableMotion_function_type( &::PyPhysicsObject::EnableMotion )
                , ( bp::arg("enable") ) );
        
        }
        { //::PyPhysicsObject::GetCallbackFlags
        
            typedef short unsigned int ( ::PyPhysicsObject::*GetCallbackFlags_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetCallbackFlags"
                , GetCallbackFlags_function_type( &::PyPhysicsObject::GetCallbackFlags ) );
        
        }
        { //::PyPhysicsObject::GetContents
        
            typedef unsigned int ( ::PyPhysicsObject::*GetContents_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetContents"
                , GetContents_function_type( &::PyPhysicsObject::GetContents ) );
        
        }
        { //::PyPhysicsObject::GetDamping
        
            typedef ::boost::python::tuple ( ::PyPhysicsObject::*GetDamping_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetDamping"
                , GetDamping_function_type( &::PyPhysicsObject::GetDamping ) );
        
        }
        { //::PyPhysicsObject::GetEnergy
        
            typedef float ( ::PyPhysicsObject::*GetEnergy_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetEnergy"
                , GetEnergy_function_type( &::PyPhysicsObject::GetEnergy ) );
        
        }
        { //::PyPhysicsObject::GetGameFlags
        
            typedef short unsigned int ( ::PyPhysicsObject::*GetGameFlags_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetGameFlags"
                , GetGameFlags_function_type( &::PyPhysicsObject::GetGameFlags ) );
        
        }
        { //::PyPhysicsObject::GetGameIndex
        
            typedef short unsigned int ( ::PyPhysicsObject::*GetGameIndex_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetGameIndex"
                , GetGameIndex_function_type( &::PyPhysicsObject::GetGameIndex ) );
        
        }
        { //::PyPhysicsObject::GetImplicitVelocity
        
            typedef void ( ::PyPhysicsObject::*GetImplicitVelocity_function_type)( ::Vector *,::AngularImpulse * ) ;
            
            PhysicsObject_exposer.def( 
                "GetImplicitVelocity"
                , GetImplicitVelocity_function_type( &::PyPhysicsObject::GetImplicitVelocity )
                , ( bp::arg("velocity"), bp::arg("angularVelocity") ) );
        
        }
        { //::PyPhysicsObject::GetInertia
        
            typedef ::Vector ( ::PyPhysicsObject::*GetInertia_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetInertia"
                , GetInertia_function_type( &::PyPhysicsObject::GetInertia ) );
        
        }
        { //::PyPhysicsObject::GetInvInertia
        
            typedef ::Vector ( ::PyPhysicsObject::*GetInvInertia_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetInvInertia"
                , GetInvInertia_function_type( &::PyPhysicsObject::GetInvInertia ) );
        
        }
        { //::PyPhysicsObject::GetInvMass
        
            typedef float ( ::PyPhysicsObject::*GetInvMass_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetInvMass"
                , GetInvMass_function_type( &::PyPhysicsObject::GetInvMass ) );
        
        }
        { //::PyPhysicsObject::GetMass
        
            typedef float ( ::PyPhysicsObject::*GetMass_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetMass"
                , GetMass_function_type( &::PyPhysicsObject::GetMass ) );
        
        }
        { //::PyPhysicsObject::GetMassCenterLocalSpace
        
            typedef ::Vector ( ::PyPhysicsObject::*GetMassCenterLocalSpace_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetMassCenterLocalSpace"
                , GetMassCenterLocalSpace_function_type( &::PyPhysicsObject::GetMassCenterLocalSpace ) );
        
        }
        { //::PyPhysicsObject::GetMaterialIndex
        
            typedef int ( ::PyPhysicsObject::*GetMaterialIndex_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetMaterialIndex"
                , GetMaterialIndex_function_type( &::PyPhysicsObject::GetMaterialIndex ) );
        
        }
        { //::PyPhysicsObject::GetName
        
            typedef char const * ( ::PyPhysicsObject::*GetName_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetName"
                , GetName_function_type( &::PyPhysicsObject::GetName ) );
        
        }
        { //::PyPhysicsObject::GetPosition
        
            typedef void ( ::PyPhysicsObject::*GetPosition_function_type)( ::Vector *,::QAngle * ) ;
            
            PhysicsObject_exposer.def( 
                "GetPosition"
                , GetPosition_function_type( &::PyPhysicsObject::GetPosition )
                , ( bp::arg("worldPosition"), bp::arg("angles") ) );
        
        }
        { //::PyPhysicsObject::GetPositionMatrix
        
            typedef void ( ::PyPhysicsObject::*GetPositionMatrix_function_type)( ::matrix3x4_t * ) ;
            
            PhysicsObject_exposer.def( 
                "GetPositionMatrix"
                , GetPositionMatrix_function_type( &::PyPhysicsObject::GetPositionMatrix )
                , ( bp::arg("positionMatrix") ) );
        
        }
        { //::PyPhysicsObject::GetShadowController
        
            typedef ::PyPhysicsShadowController ( ::PyPhysicsObject::*GetShadowController_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetShadowController"
                , GetShadowController_function_type( &::PyPhysicsObject::GetShadowController ) );
        
        }
        { //::PyPhysicsObject::GetShadowPosition
        
            typedef int ( ::PyPhysicsObject::*GetShadowPosition_function_type)( ::Vector *,::QAngle * ) ;
            
            PhysicsObject_exposer.def( 
                "GetShadowPosition"
                , GetShadowPosition_function_type( &::PyPhysicsObject::GetShadowPosition )
                , ( bp::arg("position"), bp::arg("angles") ) );
        
        }
        { //::PyPhysicsObject::GetSphereRadius
        
            typedef float ( ::PyPhysicsObject::*GetSphereRadius_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetSphereRadius"
                , GetSphereRadius_function_type( &::PyPhysicsObject::GetSphereRadius ) );
        
        }
        { //::PyPhysicsObject::GetVelocity
        
            typedef void ( ::PyPhysicsObject::*GetVelocity_function_type)( ::Vector *,::AngularImpulse * ) ;
            
            PhysicsObject_exposer.def( 
                "GetVelocity"
                , GetVelocity_function_type( &::PyPhysicsObject::GetVelocity )
                , ( bp::arg("velocity"), bp::arg("angularVelocity") ) );
        
        }
        { //::PyPhysicsObject::GetVelocityAtPoint
        
            typedef void ( ::PyPhysicsObject::*GetVelocityAtPoint_function_type)( ::Vector const &,::Vector * ) ;
            
            PhysicsObject_exposer.def( 
                "GetVelocityAtPoint"
                , GetVelocityAtPoint_function_type( &::PyPhysicsObject::GetVelocityAtPoint )
                , ( bp::arg("worldPosition"), bp::arg("pVelocity") ) );
        
        }
        { //::PyPhysicsObject::HasEntity
        
            typedef bool ( ::PyPhysicsObject::*HasEntity_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "HasEntity"
                , HasEntity_function_type( &::PyPhysicsObject::HasEntity ) );
        
        }
        { //::PyPhysicsObject::IsAsleep
        
            typedef bool ( ::PyPhysicsObject::*IsAsleep_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "IsAsleep"
                , IsAsleep_function_type( &::PyPhysicsObject::IsAsleep ) );
        
        }
        { //::PyPhysicsObject::IsAttachedToConstraint
        
            typedef bool ( ::PyPhysicsObject::*IsAttachedToConstraint_function_type)( bool ) ;
            
            PhysicsObject_exposer.def( 
                "IsAttachedToConstraint"
                , IsAttachedToConstraint_function_type( &::PyPhysicsObject::IsAttachedToConstraint )
                , ( bp::arg("bExternalOnly") ) );
        
        }
        { //::PyPhysicsObject::IsCollisionEnabled
        
            typedef bool ( ::PyPhysicsObject::*IsCollisionEnabled_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "IsCollisionEnabled"
                , IsCollisionEnabled_function_type( &::PyPhysicsObject::IsCollisionEnabled ) );
        
        }
        { //::PyPhysicsObject::IsDragEnabled
        
            typedef bool ( ::PyPhysicsObject::*IsDragEnabled_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "IsDragEnabled"
                , IsDragEnabled_function_type( &::PyPhysicsObject::IsDragEnabled ) );
        
        }
        { //::PyPhysicsObject::IsFluid
        
            typedef bool ( ::PyPhysicsObject::*IsFluid_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "IsFluid"
                , IsFluid_function_type( &::PyPhysicsObject::IsFluid ) );
        
        }
        { //::PyPhysicsObject::IsGravityEnabled
        
            typedef bool ( ::PyPhysicsObject::*IsGravityEnabled_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "IsGravityEnabled"
                , IsGravityEnabled_function_type( &::PyPhysicsObject::IsGravityEnabled ) );
        
        }
        { //::PyPhysicsObject::IsHinged
        
            typedef bool ( ::PyPhysicsObject::*IsHinged_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "IsHinged"
                , IsHinged_function_type( &::PyPhysicsObject::IsHinged ) );
        
        }
        { //::PyPhysicsObject::IsMotionEnabled
        
            typedef bool ( ::PyPhysicsObject::*IsMotionEnabled_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "IsMotionEnabled"
                , IsMotionEnabled_function_type( &::PyPhysicsObject::IsMotionEnabled ) );
        
        }
        { //::PyPhysicsObject::IsMoveable
        
            typedef bool ( ::PyPhysicsObject::*IsMoveable_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "IsMoveable"
                , IsMoveable_function_type( &::PyPhysicsObject::IsMoveable ) );
        
        }
        { //::PyPhysicsObject::IsStatic
        
            typedef bool ( ::PyPhysicsObject::*IsStatic_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "IsStatic"
                , IsStatic_function_type( &::PyPhysicsObject::IsStatic ) );
        
        }
        { //::PyPhysicsObject::IsTrigger
        
            typedef bool ( ::PyPhysicsObject::*IsTrigger_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "IsTrigger"
                , IsTrigger_function_type( &::PyPhysicsObject::IsTrigger ) );
        
        }
        { //::PyPhysicsObject::LocalToWorld
        
            typedef void ( ::PyPhysicsObject::*LocalToWorld_function_type)( ::Vector *,::Vector const & ) ;
            
            PhysicsObject_exposer.def( 
                "LocalToWorld"
                , LocalToWorld_function_type( &::PyPhysicsObject::LocalToWorld )
                , ( bp::arg("worldPosition"), bp::arg("localPosition") ) );
        
        }
        { //::PyPhysicsObject::LocalToWorldVector
        
            typedef void ( ::PyPhysicsObject::*LocalToWorldVector_function_type)( ::Vector *,::Vector const & ) ;
            
            PhysicsObject_exposer.def( 
                "LocalToWorldVector"
                , LocalToWorldVector_function_type( &::PyPhysicsObject::LocalToWorldVector )
                , ( bp::arg("worldVector"), bp::arg("localVector") ) );
        
        }
        { //::PyPhysicsObject::NonZero
        
            typedef bool ( ::PyPhysicsObject::*__nonzero___function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "__nonzero__"
                , __nonzero___function_type( &::PyPhysicsObject::NonZero ) );
        
        }
        { //::PyPhysicsObject::OutputDebugInfo
        
            typedef void ( ::PyPhysicsObject::*OutputDebugInfo_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "OutputDebugInfo"
                , OutputDebugInfo_function_type( &::PyPhysicsObject::OutputDebugInfo ) );
        
        }
        { //::PyPhysicsObject::RecheckCollisionFilter
        
            typedef void ( ::PyPhysicsObject::*RecheckCollisionFilter_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "RecheckCollisionFilter"
                , RecheckCollisionFilter_function_type( &::PyPhysicsObject::RecheckCollisionFilter ) );
        
        }
        { //::PyPhysicsObject::RecheckContactPoints
        
            typedef void ( ::PyPhysicsObject::*RecheckContactPoints_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "RecheckContactPoints"
                , RecheckContactPoints_function_type( &::PyPhysicsObject::RecheckContactPoints ) );
        
        }
        { //::PyPhysicsObject::RemoveHinged
        
            typedef void ( ::PyPhysicsObject::*RemoveHinged_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "RemoveHinged"
                , RemoveHinged_function_type( &::PyPhysicsObject::RemoveHinged ) );
        
        }
        { //::PyPhysicsObject::RemoveShadowController
        
            typedef void ( ::PyPhysicsObject::*RemoveShadowController_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "RemoveShadowController"
                , RemoveShadowController_function_type( &::PyPhysicsObject::RemoveShadowController ) );
        
        }
        { //::PyPhysicsObject::RemoveTrigger
        
            typedef void ( ::PyPhysicsObject::*RemoveTrigger_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "RemoveTrigger"
                , RemoveTrigger_function_type( &::PyPhysicsObject::RemoveTrigger ) );
        
        }
        { //::PyPhysicsObject::SetBuoyancyRatio
        
            typedef void ( ::PyPhysicsObject::*SetBuoyancyRatio_function_type)( float ) ;
            
            PhysicsObject_exposer.def( 
                "SetBuoyancyRatio"
                , SetBuoyancyRatio_function_type( &::PyPhysicsObject::SetBuoyancyRatio )
                , ( bp::arg("ratio") ) );
        
        }
        { //::PyPhysicsObject::SetCallbackFlags
        
            typedef void ( ::PyPhysicsObject::*SetCallbackFlags_function_type)( short unsigned int ) ;
            
            PhysicsObject_exposer.def( 
                "SetCallbackFlags"
                , SetCallbackFlags_function_type( &::PyPhysicsObject::SetCallbackFlags )
                , ( bp::arg("callbackflags") ) );
        
        }
        { //::PyPhysicsObject::SetContents
        
            typedef void ( ::PyPhysicsObject::*SetContents_function_type)( unsigned int ) ;
            
            PhysicsObject_exposer.def( 
                "SetContents"
                , SetContents_function_type( &::PyPhysicsObject::SetContents )
                , ( bp::arg("contents") ) );
        
        }
        { //::PyPhysicsObject::SetDamping
        
            typedef void ( ::PyPhysicsObject::*SetDamping_function_type)( float,float ) ;
            
            PhysicsObject_exposer.def( 
                "SetDamping"
                , SetDamping_function_type( &::PyPhysicsObject::SetDamping )
                , ( bp::arg("speed"), bp::arg("rot") ) );
        
        }
        { //::PyPhysicsObject::SetDragCoefficient
        
            typedef void ( ::PyPhysicsObject::*SetDragCoefficient_function_type)( float *,float * ) ;
            
            PhysicsObject_exposer.def( 
                "SetDragCoefficient"
                , SetDragCoefficient_function_type( &::PyPhysicsObject::SetDragCoefficient )
                , ( bp::arg("pDrag"), bp::arg("pAngularDrag") ) );
        
        }
        { //::PyPhysicsObject::SetGameFlags
        
            typedef void ( ::PyPhysicsObject::*SetGameFlags_function_type)( short unsigned int ) ;
            
            PhysicsObject_exposer.def( 
                "SetGameFlags"
                , SetGameFlags_function_type( &::PyPhysicsObject::SetGameFlags )
                , ( bp::arg("userFlags") ) );
        
        }
        { //::PyPhysicsObject::SetGameIndex
        
            typedef void ( ::PyPhysicsObject::*SetGameIndex_function_type)( short unsigned int ) ;
            
            PhysicsObject_exposer.def( 
                "SetGameIndex"
                , SetGameIndex_function_type( &::PyPhysicsObject::SetGameIndex )
                , ( bp::arg("gameIndex") ) );
        
        }
        { //::PyPhysicsObject::SetInertia
        
            typedef void ( ::PyPhysicsObject::*SetInertia_function_type)( ::Vector const & ) ;
            
            PhysicsObject_exposer.def( 
                "SetInertia"
                , SetInertia_function_type( &::PyPhysicsObject::SetInertia )
                , ( bp::arg("inertia") ) );
        
        }
        { //::PyPhysicsObject::SetMass
        
            typedef void ( ::PyPhysicsObject::*SetMass_function_type)( float ) ;
            
            PhysicsObject_exposer.def( 
                "SetMass"
                , SetMass_function_type( &::PyPhysicsObject::SetMass )
                , ( bp::arg("mass") ) );
        
        }
        { //::PyPhysicsObject::SetMaterialIndex
        
            typedef void ( ::PyPhysicsObject::*SetMaterialIndex_function_type)( int ) ;
            
            PhysicsObject_exposer.def( 
                "SetMaterialIndex"
                , SetMaterialIndex_function_type( &::PyPhysicsObject::SetMaterialIndex )
                , ( bp::arg("materialIndex") ) );
        
        }
        { //::PyPhysicsObject::SetPosition
        
            typedef void ( ::PyPhysicsObject::*SetPosition_function_type)( ::Vector const &,::QAngle const &,bool ) ;
            
            PhysicsObject_exposer.def( 
                "SetPosition"
                , SetPosition_function_type( &::PyPhysicsObject::SetPosition )
                , ( bp::arg("worldPosition"), bp::arg("angles"), bp::arg("isTeleport") ) );
        
        }
        { //::PyPhysicsObject::SetPositionMatrix
        
            typedef void ( ::PyPhysicsObject::*SetPositionMatrix_function_type)( ::matrix3x4_t const &,bool ) ;
            
            PhysicsObject_exposer.def( 
                "SetPositionMatrix"
                , SetPositionMatrix_function_type( &::PyPhysicsObject::SetPositionMatrix )
                , ( bp::arg("matrix"), bp::arg("isTeleport") ) );
        
        }
        { //::PyPhysicsObject::SetShadow
        
            typedef void ( ::PyPhysicsObject::*SetShadow_function_type)( float,float,bool,bool ) ;
            
            PhysicsObject_exposer.def( 
                "SetShadow"
                , SetShadow_function_type( &::PyPhysicsObject::SetShadow )
                , ( bp::arg("maxSpeed"), bp::arg("maxAngularSpeed"), bp::arg("allowPhysicsMovement"), bp::arg("allowPhysicsRotation") ) );
        
        }
        { //::PyPhysicsObject::SetVelocity
        
            typedef void ( ::PyPhysicsObject::*SetVelocity_function_type)( ::Vector const *,::AngularImpulse const * ) ;
            
            PhysicsObject_exposer.def( 
                "SetVelocity"
                , SetVelocity_function_type( &::PyPhysicsObject::SetVelocity )
                , ( bp::arg("velocity"), bp::arg("angularVelocity") ) );
        
        }
        { //::PyPhysicsObject::SetVelocityInstantaneous
        
            typedef void ( ::PyPhysicsObject::*SetVelocityInstantaneous_function_type)( ::Vector const *,::AngularImpulse const * ) ;
            
            PhysicsObject_exposer.def( 
                "SetVelocityInstantaneous"
                , SetVelocityInstantaneous_function_type( &::PyPhysicsObject::SetVelocityInstantaneous )
                , ( bp::arg("velocity"), bp::arg("angularVelocity") ) );
        
        }
        { //::PyPhysicsObject::Sleep
        
            typedef void ( ::PyPhysicsObject::*Sleep_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "Sleep"
                , Sleep_function_type( &::PyPhysicsObject::Sleep ) );
        
        }
        { //::PyPhysicsObject::UpdateShadow
        
            typedef void ( ::PyPhysicsObject::*UpdateShadow_function_type)( ::Vector const &,::QAngle const &,bool,float ) ;
            
            PhysicsObject_exposer.def( 
                "UpdateShadow"
                , UpdateShadow_function_type( &::PyPhysicsObject::UpdateShadow )
                , ( bp::arg("targetPosition"), bp::arg("targetAngles"), bp::arg("tempDisableGravity"), bp::arg("timeOffset") ) );
        
        }
        { //::PyPhysicsObject::Wake
        
            typedef void ( ::PyPhysicsObject::*Wake_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "Wake"
                , Wake_function_type( &::PyPhysicsObject::Wake ) );
        
        }
        { //::PyPhysicsObject::WorldToLocal
        
            typedef void ( ::PyPhysicsObject::*WorldToLocal_function_type)( ::Vector *,::Vector const & ) ;
            
            PhysicsObject_exposer.def( 
                "WorldToLocal"
                , WorldToLocal_function_type( &::PyPhysicsObject::WorldToLocal )
                , ( bp::arg("localPosition"), bp::arg("worldPosition") ) );
        
        }
        { //::PyPhysicsObject::WorldToLocalVector
        
            typedef void ( ::PyPhysicsObject::*WorldToLocalVector_function_type)( ::Vector *,::Vector const & ) ;
            
            PhysicsObject_exposer.def( 
                "WorldToLocalVector"
                , WorldToLocalVector_function_type( &::PyPhysicsObject::WorldToLocalVector )
                , ( bp::arg("localVector"), bp::arg("worldVector") ) );
        
        }
        PhysicsObject_exposer.def( bp::self != bp::self );
        PhysicsObject_exposer.def( bp::self == bp::self );
    }

    { //::PyPhysicsShadowController
        typedef bp::class_< PyPhysicsShadowController > PhysicsShadowController_exposer_t;
        PhysicsShadowController_exposer_t PhysicsShadowController_exposer = PhysicsShadowController_exposer_t( "PhysicsShadowController", bp::init< bp::api::object >(( bp::arg("refPyPhysObj") )) );
        bp::scope PhysicsShadowController_scope( PhysicsShadowController_exposer );
        bp::implicitly_convertible< bp::api::object, PyPhysicsShadowController >();
        { //::PyPhysicsShadowController::AllowsRotation
        
            typedef bool ( ::PyPhysicsShadowController::*AllowsRotation_function_type)(  ) ;
            
            PhysicsShadowController_exposer.def( 
                "AllowsRotation"
                , AllowsRotation_function_type( &::PyPhysicsShadowController::AllowsRotation ) );
        
        }
        { //::PyPhysicsShadowController::AllowsTranslation
        
            typedef bool ( ::PyPhysicsShadowController::*AllowsTranslation_function_type)(  ) ;
            
            PhysicsShadowController_exposer.def( 
                "AllowsTranslation"
                , AllowsTranslation_function_type( &::PyPhysicsShadowController::AllowsTranslation ) );
        
        }
        { //::PyPhysicsShadowController::Bool
        
            typedef bool ( ::PyPhysicsShadowController::*__bool___function_type)(  ) ;
            
            PhysicsShadowController_exposer.def( 
                "__bool__"
                , __bool___function_type( &::PyPhysicsShadowController::Bool ) );
        
        }
        { //::PyPhysicsShadowController::Cmp
        
            typedef bool ( ::PyPhysicsShadowController::*__cmp___function_type)( ::boost::python::api::object ) ;
            
            PhysicsShadowController_exposer.def( 
                "__cmp__"
                , __cmp___function_type( &::PyPhysicsShadowController::Cmp )
                , ( bp::arg("other") ) );
        
        }
        { //::PyPhysicsShadowController::GetLastImpulse
        
            typedef void ( ::PyPhysicsShadowController::*GetLastImpulse_function_type)( ::Vector * ) ;
            
            PhysicsShadowController_exposer.def( 
                "GetLastImpulse"
                , GetLastImpulse_function_type( &::PyPhysicsShadowController::GetLastImpulse )
                , ( bp::arg("pOut") ) );
        
        }
        { //::PyPhysicsShadowController::GetMaxSpeed
        
            typedef void ( ::PyPhysicsShadowController::*GetMaxSpeed_function_type)( float *,float * ) ;
            
            PhysicsShadowController_exposer.def( 
                "GetMaxSpeed"
                , GetMaxSpeed_function_type( &::PyPhysicsShadowController::GetMaxSpeed )
                , ( bp::arg("pMaxSpeedOut"), bp::arg("pMaxAngularSpeedOut") ) );
        
        }
        { //::PyPhysicsShadowController::GetTargetPosition
        
            typedef float ( ::PyPhysicsShadowController::*GetTargetPosition_function_type)( ::Vector *,::QAngle * ) ;
            
            PhysicsShadowController_exposer.def( 
                "GetTargetPosition"
                , GetTargetPosition_function_type( &::PyPhysicsShadowController::GetTargetPosition )
                , ( bp::arg("pPositionOut"), bp::arg("pAnglesOut") ) );
        
        }
        { //::PyPhysicsShadowController::GetTeleportDistance
        
            typedef float ( ::PyPhysicsShadowController::*GetTeleportDistance_function_type)(  ) ;
            
            PhysicsShadowController_exposer.def( 
                "GetTeleportDistance"
                , GetTeleportDistance_function_type( &::PyPhysicsShadowController::GetTeleportDistance ) );
        
        }
        { //::PyPhysicsShadowController::IsPhysicallyControlled
        
            typedef bool ( ::PyPhysicsShadowController::*IsPhysicallyControlled_function_type)(  ) ;
            
            PhysicsShadowController_exposer.def( 
                "IsPhysicallyControlled"
                , IsPhysicallyControlled_function_type( &::PyPhysicsShadowController::IsPhysicallyControlled ) );
        
        }
        { //::PyPhysicsShadowController::MaxSpeed
        
            typedef void ( ::PyPhysicsShadowController::*MaxSpeed_function_type)( float,float ) ;
            
            PhysicsShadowController_exposer.def( 
                "MaxSpeed"
                , MaxSpeed_function_type( &::PyPhysicsShadowController::MaxSpeed )
                , ( bp::arg("maxSpeed"), bp::arg("maxAngularSpeed") ) );
        
        }
        { //::PyPhysicsShadowController::NonZero
        
            typedef bool ( ::PyPhysicsShadowController::*__nonzero___function_type)(  ) ;
            
            PhysicsShadowController_exposer.def( 
                "__nonzero__"
                , __nonzero___function_type( &::PyPhysicsShadowController::NonZero ) );
        
        }
        { //::PyPhysicsShadowController::ObjectMaterialChanged
        
            typedef void ( ::PyPhysicsShadowController::*ObjectMaterialChanged_function_type)( int ) ;
            
            PhysicsShadowController_exposer.def( 
                "ObjectMaterialChanged"
                , ObjectMaterialChanged_function_type( &::PyPhysicsShadowController::ObjectMaterialChanged )
                , ( bp::arg("materialIndex") ) );
        
        }
        { //::PyPhysicsShadowController::SetPhysicallyControlled
        
            typedef void ( ::PyPhysicsShadowController::*SetPhysicallyControlled_function_type)( bool ) ;
            
            PhysicsShadowController_exposer.def( 
                "SetPhysicallyControlled"
                , SetPhysicallyControlled_function_type( &::PyPhysicsShadowController::SetPhysicallyControlled )
                , ( bp::arg("isPhysicallyControlled") ) );
        
        }
        { //::PyPhysicsShadowController::SetTeleportDistance
        
            typedef void ( ::PyPhysicsShadowController::*SetTeleportDistance_function_type)( float ) ;
            
            PhysicsShadowController_exposer.def( 
                "SetTeleportDistance"
                , SetTeleportDistance_function_type( &::PyPhysicsShadowController::SetTeleportDistance )
                , ( bp::arg("teleportDistance") ) );
        
        }
        { //::PyPhysicsShadowController::StepUp
        
            typedef void ( ::PyPhysicsShadowController::*StepUp_function_type)( float ) ;
            
            PhysicsShadowController_exposer.def( 
                "StepUp"
                , StepUp_function_type( &::PyPhysicsShadowController::StepUp )
                , ( bp::arg("height") ) );
        
        }
        { //::PyPhysicsShadowController::Update
        
            typedef void ( ::PyPhysicsShadowController::*Update_function_type)( ::Vector const &,::QAngle const &,float ) ;
            
            PhysicsShadowController_exposer.def( 
                "Update"
                , Update_function_type( &::PyPhysicsShadowController::Update )
                , ( bp::arg("position"), bp::arg("angles"), bp::arg("timeOffset") ) );
        
        }
        { //::PyPhysicsShadowController::UseShadowMaterial
        
            typedef void ( ::PyPhysicsShadowController::*UseShadowMaterial_function_type)( bool ) ;
            
            PhysicsShadowController_exposer.def( 
                "UseShadowMaterial"
                , UseShadowMaterial_function_type( &::PyPhysicsShadowController::UseShadowMaterial )
                , ( bp::arg("bUseShadowMaterial") ) );
        
        }
        PhysicsShadowController_exposer.def( bp::self != bp::self );
        PhysicsShadowController_exposer.def( bp::self == bp::self );
    }

    bp::class_< PyPhysicsSurfaceProps >( "PhysicsSurfaceProps", bp::no_init )    
        .def( 
            "GetPhysicsParameters"
            , (void ( ::PyPhysicsSurfaceProps::* )( int,::surfacephysicsparams_t & )const)( &::PyPhysicsSurfaceProps::GetPhysicsParameters )
            , ( bp::arg("surfaceDataIndex"), bp::arg("paramsout") ) )    
        .def( 
            "GetPropName"
            , (char const * ( ::PyPhysicsSurfaceProps::* )( int )const)( &::PyPhysicsSurfaceProps::GetPropName )
            , ( bp::arg("surfaceDataIndex") ) )    
        .def( 
            "GetString"
            , (char const * ( ::PyPhysicsSurfaceProps::* )( short unsigned int )const)( &::PyPhysicsSurfaceProps::GetString )
            , ( bp::arg("stringTableIndex") ) )    
        .def( 
            "GetSurfaceData"
            , (::surfacedata_t ( ::PyPhysicsSurfaceProps::* )( int ))( &::PyPhysicsSurfaceProps::GetSurfaceData )
            , ( bp::arg("surfaceDataIndex") ) )    
        .def( 
            "GetSurfaceIndex"
            , (int ( ::PyPhysicsSurfaceProps::* )( char const * )const)( &::PyPhysicsSurfaceProps::GetSurfaceIndex )
            , ( bp::arg("pSurfacePropName") ) )    
        .def( 
            "ParseSurfaceData"
            , (int ( ::PyPhysicsSurfaceProps::* )( char const *,char const * ))( &::PyPhysicsSurfaceProps::ParseSurfaceData )
            , ( bp::arg("pFilename"), bp::arg("pTextfile") ) )    
        .def( 
            "SurfacePropCount"
            , (int ( ::PyPhysicsSurfaceProps::* )(  )const)( &::PyPhysicsSurfaceProps::SurfacePropCount ) );

    bp::class_< surfaceaudioparams_t >( "surfaceaudioparams_t" )    
        .def_readwrite( "hardThreshold", &surfaceaudioparams_t::hardThreshold )    
        .def_readwrite( "hardVelocityThreshold", &surfaceaudioparams_t::hardVelocityThreshold )    
        .def_readwrite( "hardnessFactor", &surfaceaudioparams_t::hardnessFactor )    
        .def_readwrite( "reflectivity", &surfaceaudioparams_t::reflectivity )    
        .def_readwrite( "roughThreshold", &surfaceaudioparams_t::roughThreshold )    
        .def_readwrite( "roughnessFactor", &surfaceaudioparams_t::roughnessFactor );

    bp::class_< surfacedata_t >( "surfacedata_t" )    
        .def_readwrite( "audio", &surfacedata_t::audio )    
        .def_readwrite( "game", &surfacedata_t::game )    
        .def_readwrite( "physics", &surfacedata_t::physics )    
        .def_readwrite( "soundhandles", &surfacedata_t::soundhandles )    
        .def_readwrite( "sounds", &surfacedata_t::sounds );

    bp::class_< surfacegameprops_t >( "surfacegameprops_t" )    
        .def_readwrite( "climbable", &surfacegameprops_t::climbable )    
        .def_readwrite( "jumpFactor", &surfacegameprops_t::jumpFactor )    
        .def_readwrite( "material", &surfacegameprops_t::material )    
        .def_readwrite( "maxSpeedFactor", &surfacegameprops_t::maxSpeedFactor )    
        .def_readwrite( "pad", &surfacegameprops_t::pad );

    bp::class_< surfacephysicsparams_t >( "surfacephysicsparams_t" )    
        .def_readwrite( "dampening", &surfacephysicsparams_t::dampening )    
        .def_readwrite( "density", &surfacephysicsparams_t::density )    
        .def_readwrite( "elasticity", &surfacephysicsparams_t::elasticity )    
        .def_readwrite( "friction", &surfacephysicsparams_t::friction )    
        .def_readwrite( "thickness", &surfacephysicsparams_t::thickness );

    bp::class_< surfacesoundhandles_t >( "surfacesoundhandles_t" )    
        .def_readwrite( "breakSound", &surfacesoundhandles_t::breakSound )    
        .def_readwrite( "bulletImpact", &surfacesoundhandles_t::bulletImpact )    
        .def_readwrite( "impactHard", &surfacesoundhandles_t::impactHard )    
        .def_readwrite( "impactSoft", &surfacesoundhandles_t::impactSoft )    
        .def_readwrite( "rolling", &surfacesoundhandles_t::rolling )    
        .def_readwrite( "scrapeRough", &surfacesoundhandles_t::scrapeRough )    
        .def_readwrite( "scrapeSmooth", &surfacesoundhandles_t::scrapeSmooth )    
        .def_readwrite( "stepleft", &surfacesoundhandles_t::stepleft )    
        .def_readwrite( "stepright", &surfacesoundhandles_t::stepright )    
        .def_readwrite( "strainSound", &surfacesoundhandles_t::strainSound );

    bp::class_< surfacesoundnames_t >( "surfacesoundnames_t" )    
        .def_readwrite( "breakSound", &surfacesoundnames_t::breakSound )    
        .def_readwrite( "bulletImpact", &surfacesoundnames_t::bulletImpact )    
        .def_readwrite( "impactHard", &surfacesoundnames_t::impactHard )    
        .def_readwrite( "impactSoft", &surfacesoundnames_t::impactSoft )    
        .def_readwrite( "rolling", &surfacesoundnames_t::rolling )    
        .def_readwrite( "scrapeRough", &surfacesoundnames_t::scrapeRough )    
        .def_readwrite( "scrapeSmooth", &surfacesoundnames_t::scrapeSmooth )    
        .def_readwrite( "stepleft", &surfacesoundnames_t::stepleft )    
        .def_readwrite( "stepright", &surfacesoundnames_t::stepright )    
        .def_readwrite( "strainSound", &surfacesoundnames_t::strainSound );

    { //::PyForcePhysicsSimulate
    
        typedef void ( *ForcePhysicsSimulate_function_type )(  );
        
        bp::def( 
            "ForcePhysicsSimulate"
            , ForcePhysicsSimulate_function_type( &::PyForcePhysicsSimulate ) );
    
    }

    { //::PyGetCollideAABB
    
        typedef ::boost::python::tuple ( *GetCollideAABB_function_type )( ::C_BaseEntity * );
        
        bp::def( 
            "GetCollideAABB"
            , GetCollideAABB_function_type( &::PyGetCollideAABB )
            , ( bp::arg("pEnt") ) );
    
    }

    { //::PyPhysDestroyObject
    
        typedef void ( *PhysDestroyObject_function_type )( ::PyPhysicsObject *,::C_BaseEntity * );
        
        bp::def( 
            "PhysDestroyObject"
            , PhysDestroyObject_function_type( &::PyPhysDestroyObject )
            , ( bp::arg("pPyPhysObj"), bp::arg("pEntity")=bp::object() ) );
    
    }

    { //::PyPhysModelCreateBox
    
        typedef ::boost::python::api::object ( *PhysModelCreateBox_function_type )( ::C_BaseEntity *,::Vector const &,::Vector const &,::Vector const &,bool );
        
        bp::def( 
            "PhysModelCreateBox"
            , PhysModelCreateBox_function_type( &::PyPhysModelCreateBox )
            , ( bp::arg("pEntity"), bp::arg("mins"), bp::arg("maxs"), bp::arg("origin"), bp::arg("isStatic") ) );
    
    }

    ptr_IPhysicsObject_to_PyPhysicsObject();

    const_ptr_IPhysicsObject_to_PyPhysicsObject();

    PyPhysicsObject_to_IPhysicsObject();

    bp::scope().attr( "physcollision" ) = boost::ref(pyphyscollision);

    bp::scope().attr( "physprops" ) = boost::ref(pyphysprops);

    { //::PyPhysModelCreateOBB
    
        typedef ::boost::python::api::object ( *PhysModelCreateOBB_function_type )( ::C_BaseEntity *,::Vector const &,::Vector const &,::Vector const &,::QAngle const &,bool );
        
        bp::def( 
            "PhysModelCreateOBB"
            , PhysModelCreateOBB_function_type( &::PyPhysModelCreateOBB )
            , ( bp::arg("pEntity"), bp::arg("mins"), bp::arg("maxs"), bp::arg("origin"), bp::arg("angle"), bp::arg("isStatic") ) );
    
    }
}
#else
#include "cbase.h"

#include "srcpy_physics.h"

#include "vphysics/friction.h"

#include "physics.h"

#include "physics_impact_damage.h"

#include "vphysics_interface.h"

#include "physics_shared.h"

#include "srcpy_physics_converters.h"

#include "tier0/valve_minmax_off.h"

#include "srcpy.h"

#include "tier0/valve_minmax_on.h"

#include "tier0/memdbgon.h"

namespace bp = boost::python;

struct PyPhysicsObject_wrapper : PyPhysicsObject, bp::wrapper< PyPhysicsObject > {

    PyPhysicsObject_wrapper(PyPhysicsObject const & arg )
    : PyPhysicsObject( arg )
      , bp::wrapper< PyPhysicsObject >(){
        // copy constructor
        
    }

    PyPhysicsObject_wrapper( )
    : PyPhysicsObject( )
      , bp::wrapper< PyPhysicsObject >(){
        // null constructor
    
    }

    PyPhysicsObject_wrapper(::CBaseEntity * pEnt )
    : PyPhysicsObject( pEnt )
      , bp::wrapper< PyPhysicsObject >(){
        // constructor
    
    }

    PyPhysicsObject_wrapper(::IPhysicsObject * pPhysObj )
    : PyPhysicsObject( pPhysObj )
      , bp::wrapper< PyPhysicsObject >(){
        // constructor
    
    }

    virtual PyObject *GetPySelf() const { return boost::python::detail::wrapper_base_::get_owner(*this); }

};

#ifdef _LINUX
typedef struct model_t {};
#endif // _LINUX

BOOST_PYTHON_MODULE(_physics){
    bp::docstring_options doc_options( true, true, false );

    bp::enum_< SurroundingBoundsType_t>("SurroundingBoundsType_t")
        .value("USE_OBB_COLLISION_BOUNDS", USE_OBB_COLLISION_BOUNDS)
        .value("USE_BEST_COLLISION_BOUNDS", USE_BEST_COLLISION_BOUNDS)
        .value("USE_HITBOXES", USE_HITBOXES)
        .value("USE_SPECIFIED_BOUNDS", USE_SPECIFIED_BOUNDS)
        .value("USE_GAME_CODE", USE_GAME_CODE)
        .value("USE_ROTATION_EXPANDED_BOUNDS", USE_ROTATION_EXPANDED_BOUNDS)
        .value("USE_COLLISION_BOUNDS_NEVER_VPHYSICS", USE_COLLISION_BOUNDS_NEVER_VPHYSICS)
        .value("SURROUNDING_TYPE_BIT_COUNT", SURROUNDING_TYPE_BIT_COUNT)
        .export_values()
        ;

    bp::class_< CCollisionProperty >( "CCollisionProperty", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "AddSolidFlags"
            , (void ( ::CCollisionProperty::* )( int ))( &::CCollisionProperty::AddSolidFlags )
            , ( bp::arg("flags") ) )    
        .def( 
            "BoundingRadius"
            , (float ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::BoundingRadius ) )    
        .def( 
            "BoundingRadius2D"
            , (float ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::BoundingRadius2D ) )    
        .def( 
            "CalcDistanceFromPoint"
            , (float ( ::CCollisionProperty::* )( ::Vector const & )const)( &::CCollisionProperty::CalcDistanceFromPoint )
            , ( bp::arg("vecWorldPt") ) )    
        .def( 
            "CalcNearestPoint"
            , (void ( ::CCollisionProperty::* )( ::Vector const &,::Vector * )const)( &::CCollisionProperty::CalcNearestPoint )
            , ( bp::arg("vecWorldPt"), bp::arg("pVecNearestWorldPt") ) )    
        .def( 
            "ClearSolidFlags"
            , (void ( ::CCollisionProperty::* )(  ))( &::CCollisionProperty::ClearSolidFlags ) )    
        .def( 
            "CollisionSpaceMaxs"
            , (::Vector const & ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::CollisionSpaceMaxs )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "CollisionSpaceMins"
            , (::Vector const & ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::CollisionSpaceMins )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "CollisionToNormalizedSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * )const)( &::CCollisionProperty::CollisionToNormalizedSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "CollisionToWorldSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * )const)( &::CCollisionProperty::CollisionToWorldSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "CollisionToWorldTransform"
            , (::matrix3x4_t const & ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::CollisionToWorldTransform )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "ComputeSupportMap"
            , (float ( ::CCollisionProperty::* )( ::Vector const & )const)( &::CCollisionProperty::ComputeSupportMap )
            , ( bp::arg("vecDirection") ) )    
        .def( 
            "CreatePartitionHandle"
            , (void ( ::CCollisionProperty::* )(  ))( &::CCollisionProperty::CreatePartitionHandle ) )    
        .def( 
            "DestroyPartitionHandle"
            , (void ( ::CCollisionProperty::* )(  ))( &::CCollisionProperty::DestroyPartitionHandle ) )    
        .def( 
            "DoesRotationInvalidateSurroundingBox"
            , (bool ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::DoesRotationInvalidateSurroundingBox ) )    
        .def( 
            "DoesVPhysicsInvalidateSurroundingBox"
            , (bool ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::DoesVPhysicsInvalidateSurroundingBox ) )    
        .def( 
            "GetCollisionAngles"
            , (::QAngle const & ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::GetCollisionAngles )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetCollisionGroup"
            , (int ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::GetCollisionGroup ) )    
        .def( 
            "GetCollisionModel"
            , (::model_t const * ( ::CCollisionProperty::* )(  ))( &::CCollisionProperty::GetCollisionModel )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetCollisionModelIndex"
            , (int ( ::CCollisionProperty::* )(  ))( &::CCollisionProperty::GetCollisionModelIndex ) )    
        .def( 
            "GetCollisionOrigin"
            , (::Vector const & ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::GetCollisionOrigin )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "GetPartitionHandle"
            , (short unsigned int ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::GetPartitionHandle ) )    
        .def( 
            "GetRootParentToWorldTransform"
            , (::matrix3x4_t const * ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::GetRootParentToWorldTransform )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetSolid"
            , (::SolidType_t ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::GetSolid ) )    
        .def( 
            "GetSolidFlags"
            , (int ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::GetSolidFlags ) )    
        .def( 
            "Init"
            , (void ( ::CCollisionProperty::* )( ::CBaseEntity * ))( &::CCollisionProperty::Init )
            , ( bp::arg("pEntity") ) )    
        .def( 
            "IsBoundsDefinedInEntitySpace"
            , (bool ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::IsBoundsDefinedInEntitySpace ) )    
        .def( 
            "IsPointInBounds"
            , (bool ( ::CCollisionProperty::* )( ::Vector const & )const)( &::CCollisionProperty::IsPointInBounds )
            , ( bp::arg("vecWorldPt") ) )    
        .def( 
            "IsSolid"
            , (bool ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::IsSolid ) )    
        .def( 
            "IsSolidFlagSet"
            , (bool ( ::CCollisionProperty::* )( int )const)( &::CCollisionProperty::IsSolidFlagSet )
            , ( bp::arg("flagMask") ) )    
        .def( 
            "MarkPartitionHandleDirty"
            , (void ( ::CCollisionProperty::* )(  ))( &::CCollisionProperty::MarkPartitionHandleDirty ) )    
        .def( 
            "MarkSurroundingBoundsDirty"
            , (void ( ::CCollisionProperty::* )(  ))( &::CCollisionProperty::MarkSurroundingBoundsDirty ) )    
        .def( 
            "NormalizedToCollisionSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * )const)( &::CCollisionProperty::NormalizedToCollisionSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "NormalizedToWorldSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * )const)( &::CCollisionProperty::NormalizedToWorldSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "OBBCenter"
            , (::Vector const & ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::OBBCenter )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "OBBMaxs"
            , (::Vector const & ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::OBBMaxs )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "OBBMaxsPreScaled"
            , (::Vector const & ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::OBBMaxsPreScaled )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "OBBMins"
            , (::Vector const & ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::OBBMins )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "OBBMinsPreScaled"
            , (::Vector const & ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::OBBMinsPreScaled )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "OBBSize"
            , (::Vector const & ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::OBBSize )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "RandomPointInBounds"
            , (void ( ::CCollisionProperty::* )( ::Vector const &,::Vector const &,::Vector * )const)( &::CCollisionProperty::RandomPointInBounds )
            , ( bp::arg("vecNormalizedMins"), bp::arg("vecNormalizedMaxs"), bp::arg("pPoint") ) )    
        .def( 
            "RefreshScaledCollisionBounds"
            , (void ( ::CCollisionProperty::* )(  ))( &::CCollisionProperty::RefreshScaledCollisionBounds ) )    
        .def( 
            "RemoveSolidFlags"
            , (void ( ::CCollisionProperty::* )( int ))( &::CCollisionProperty::RemoveSolidFlags )
            , ( bp::arg("flags") ) )    
        .def( 
            "SetCollisionBounds"
            , (void ( ::CCollisionProperty::* )( ::Vector const &,::Vector const & ))( &::CCollisionProperty::SetCollisionBounds )
            , ( bp::arg("mins"), bp::arg("maxs") ) )    
        .def( 
            "SetSolid"
            , (void ( ::CCollisionProperty::* )( ::SolidType_t ))( &::CCollisionProperty::SetSolid )
            , ( bp::arg("val") ) )    
        .def( 
            "SetSolidFlags"
            , (void ( ::CCollisionProperty::* )( int ))( &::CCollisionProperty::SetSolidFlags )
            , ( bp::arg("flags") ) )    
        .def( 
            "SetSurroundingBoundsType"
            , (void ( ::CCollisionProperty::* )( ::SurroundingBoundsType_t,::Vector const *,::Vector const * ))( &::CCollisionProperty::SetSurroundingBoundsType )
            , ( bp::arg("type"), bp::arg("pMins")=bp::object(), bp::arg("pMaxs")=bp::object() ) )    
        .def( 
            "ShouldTouchTrigger"
            , (bool ( ::CCollisionProperty::* )( int )const)( &::CCollisionProperty::ShouldTouchTrigger )
            , ( bp::arg("triggerSolidFlags") ) )    
        .def( 
            "TestCollision"
            , (bool ( ::CCollisionProperty::* )( ::Ray_t const &,unsigned int,::trace_t & ))( &::CCollisionProperty::TestCollision )
            , ( bp::arg("ray"), bp::arg("fContentsMask"), bp::arg("tr") ) )    
        .def( 
            "TestHitboxes"
            , (bool ( ::CCollisionProperty::* )( ::Ray_t const &,unsigned int,::trace_t & ))( &::CCollisionProperty::TestHitboxes )
            , ( bp::arg("ray"), bp::arg("fContentsMask"), bp::arg("tr") ) )    
        .def( 
            "UpdatePartition"
            , (void ( ::CCollisionProperty::* )(  ))( &::CCollisionProperty::UpdatePartition ) )    
        .def( 
            "UseTriggerBounds"
            , (void ( ::CCollisionProperty::* )( bool,float ))( &::CCollisionProperty::UseTriggerBounds )
            , ( bp::arg("bEnable"), bp::arg("flBloat")=0.F ) )    
        .def( 
            "WorldDirectionToCollisionSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * )const)( &::CCollisionProperty::WorldDirectionToCollisionSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "WorldSpaceAABB"
            , (void ( ::CCollisionProperty::* )( ::Vector *,::Vector * )const)( &::CCollisionProperty::WorldSpaceAABB )
            , ( bp::arg("pWorldMins"), bp::arg("pWorldMaxs") ) )    
        .def( 
            "WorldSpaceCenter"
            , (::Vector const & ( ::CCollisionProperty::* )(  )const)( &::CCollisionProperty::WorldSpaceCenter )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "WorldSpaceSurroundingBounds"
            , (void ( ::CCollisionProperty::* )( ::Vector *,::Vector * ))( &::CCollisionProperty::WorldSpaceSurroundingBounds )
            , ( bp::arg("pVecMins"), bp::arg("pVecMaxs") ) )    
        .def( 
            "WorldSpaceTriggerBounds"
            , (void ( ::CCollisionProperty::* )( ::Vector *,::Vector * )const)( &::CCollisionProperty::WorldSpaceTriggerBounds )
            , ( bp::arg("pVecWorldMins"), bp::arg("pVecWorldMaxs") ) )    
        .def( 
            "WorldToCollisionSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * )const)( &::CCollisionProperty::WorldToCollisionSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() )    
        .def( 
            "WorldToNormalizedSpace"
            , (::Vector const & ( ::CCollisionProperty::* )( ::Vector const &,::Vector * )const)( &::CCollisionProperty::WorldToNormalizedSpace )
            , ( bp::arg("in"), bp::arg("pResult") )
            , bp::return_value_policy< bp::copy_const_reference >() );

    bp::class_< PyPhysicsCollision >( "PhysicsCollision", bp::no_init )    
        .def( 
            "CollideGetAABB"
            , (::boost::python::tuple ( ::PyPhysicsCollision::* )( ::PyPhysicsObject *,::Vector const &,::QAngle const & ))( &::PyPhysicsCollision::CollideGetAABB )
            , ( bp::arg("pPhysObj"), bp::arg("collideOrigin"), bp::arg("collideAngles") ) )    
        .def( 
            "TraceBox"
            , (void ( ::PyPhysicsCollision::* )( ::PyRay_t &,::PyPhysicsObject &,::Vector const &,::QAngle const &,::trace_t & ))( &::PyPhysicsCollision::TraceBox )
            , ( bp::arg("ray"), bp::arg("physObj"), bp::arg("collideOrigin"), bp::arg("collideAngles"), bp::arg("ptr") ) );

    { //::PyPhysicsObject
        typedef bp::class_< PyPhysicsObject_wrapper > PhysicsObject_exposer_t;
        PhysicsObject_exposer_t PhysicsObject_exposer = PhysicsObject_exposer_t( "PhysicsObject", bp::init< >() );
        bp::scope PhysicsObject_scope( PhysicsObject_exposer );
        PhysicsObject_exposer.def( bp::init< CBaseEntity * >(( bp::arg("pEnt") )) );
        bp::implicitly_convertible< CBaseEntity *, PyPhysicsObject >();
        PhysicsObject_exposer.def( bp::init< IPhysicsObject * >(( bp::arg("pPhysObj") )) );
        bp::implicitly_convertible< IPhysicsObject *, PyPhysicsObject >();
        { //::PyPhysicsObject::AddVelocity
        
            typedef void ( ::PyPhysicsObject::*AddVelocity_function_type)( ::Vector const *,::AngularImpulse const * ) ;
            
            PhysicsObject_exposer.def( 
                "AddVelocity"
                , AddVelocity_function_type( &::PyPhysicsObject::AddVelocity )
                , ( bp::arg("velocity"), bp::arg("angularVelocity") ) );
        
        }
        { //::PyPhysicsObject::ApplyForceCenter
        
            typedef void ( ::PyPhysicsObject::*ApplyForceCenter_function_type)( ::Vector const & ) ;
            
            PhysicsObject_exposer.def( 
                "ApplyForceCenter"
                , ApplyForceCenter_function_type( &::PyPhysicsObject::ApplyForceCenter )
                , ( bp::arg("forceVector") ) );
        
        }
        { //::PyPhysicsObject::ApplyForceOffset
        
            typedef void ( ::PyPhysicsObject::*ApplyForceOffset_function_type)( ::Vector const &,::Vector const & ) ;
            
            PhysicsObject_exposer.def( 
                "ApplyForceOffset"
                , ApplyForceOffset_function_type( &::PyPhysicsObject::ApplyForceOffset )
                , ( bp::arg("forceVector"), bp::arg("worldPosition") ) );
        
        }
        { //::PyPhysicsObject::ApplyTorqueCenter
        
            typedef void ( ::PyPhysicsObject::*ApplyTorqueCenter_function_type)( ::AngularImpulse const & ) ;
            
            PhysicsObject_exposer.def( 
                "ApplyTorqueCenter"
                , ApplyTorqueCenter_function_type( &::PyPhysicsObject::ApplyTorqueCenter )
                , ( bp::arg("torque") ) );
        
        }
        { //::PyPhysicsObject::BecomeHinged
        
            typedef void ( ::PyPhysicsObject::*BecomeHinged_function_type)( int ) ;
            
            PhysicsObject_exposer.def( 
                "BecomeHinged"
                , BecomeHinged_function_type( &::PyPhysicsObject::BecomeHinged )
                , ( bp::arg("localAxis") ) );
        
        }
        { //::PyPhysicsObject::BecomeTrigger
        
            typedef void ( ::PyPhysicsObject::*BecomeTrigger_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "BecomeTrigger"
                , BecomeTrigger_function_type( &::PyPhysicsObject::BecomeTrigger ) );
        
        }
        { //::PyPhysicsObject::Bool
        
            typedef bool ( ::PyPhysicsObject::*__bool___function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "__bool__"
                , __bool___function_type( &::PyPhysicsObject::Bool ) );
        
        }
        { //::PyPhysicsObject::CalculateAngularDrag
        
            typedef float ( ::PyPhysicsObject::*CalculateAngularDrag_function_type)( ::Vector const & ) ;
            
            PhysicsObject_exposer.def( 
                "CalculateAngularDrag"
                , CalculateAngularDrag_function_type( &::PyPhysicsObject::CalculateAngularDrag )
                , ( bp::arg("objectSpaceRotationAxis") ) );
        
        }
        { //::PyPhysicsObject::CalculateForceOffset
        
            typedef void ( ::PyPhysicsObject::*CalculateForceOffset_function_type)( ::Vector const &,::Vector const &,::Vector *,::AngularImpulse * ) ;
            
            PhysicsObject_exposer.def( 
                "CalculateForceOffset"
                , CalculateForceOffset_function_type( &::PyPhysicsObject::CalculateForceOffset )
                , ( bp::arg("forceVector"), bp::arg("worldPosition"), bp::arg("centerForce"), bp::arg("centerTorque") ) );
        
        }
        { //::PyPhysicsObject::CalculateLinearDrag
        
            typedef float ( ::PyPhysicsObject::*CalculateLinearDrag_function_type)( ::Vector const & ) ;
            
            PhysicsObject_exposer.def( 
                "CalculateLinearDrag"
                , CalculateLinearDrag_function_type( &::PyPhysicsObject::CalculateLinearDrag )
                , ( bp::arg("unitDirection") ) );
        
        }
        { //::PyPhysicsObject::CalculateVelocityOffset
        
            typedef void ( ::PyPhysicsObject::*CalculateVelocityOffset_function_type)( ::Vector const &,::Vector const &,::Vector *,::AngularImpulse * ) ;
            
            PhysicsObject_exposer.def( 
                "CalculateVelocityOffset"
                , CalculateVelocityOffset_function_type( &::PyPhysicsObject::CalculateVelocityOffset )
                , ( bp::arg("forceVector"), bp::arg("worldPosition"), bp::arg("centerVelocity"), bp::arg("centerAngularVelocity") ) );
        
        }
        { //::PyPhysicsObject::Cmp
        
            typedef bool ( ::PyPhysicsObject::*__cmp___function_type)( ::boost::python::api::object ) ;
            
            PhysicsObject_exposer.def( 
                "__cmp__"
                , __cmp___function_type( &::PyPhysicsObject::Cmp )
                , ( bp::arg("other") ) );
        
        }
        { //::PyPhysicsObject::Destroy
        
            typedef void ( ::PyPhysicsObject::*Destroy_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "Destroy"
                , Destroy_function_type( &::PyPhysicsObject::Destroy ) );
        
        }
        { //::PyPhysicsObject::EnableCollisions
        
            typedef void ( ::PyPhysicsObject::*EnableCollisions_function_type)( bool ) ;
            
            PhysicsObject_exposer.def( 
                "EnableCollisions"
                , EnableCollisions_function_type( &::PyPhysicsObject::EnableCollisions )
                , ( bp::arg("enable") ) );
        
        }
        { //::PyPhysicsObject::EnableDrag
        
            typedef void ( ::PyPhysicsObject::*EnableDrag_function_type)( bool ) ;
            
            PhysicsObject_exposer.def( 
                "EnableDrag"
                , EnableDrag_function_type( &::PyPhysicsObject::EnableDrag )
                , ( bp::arg("enable") ) );
        
        }
        { //::PyPhysicsObject::EnableGravity
        
            typedef void ( ::PyPhysicsObject::*EnableGravity_function_type)( bool ) ;
            
            PhysicsObject_exposer.def( 
                "EnableGravity"
                , EnableGravity_function_type( &::PyPhysicsObject::EnableGravity )
                , ( bp::arg("enable") ) );
        
        }
        { //::PyPhysicsObject::EnableMotion
        
            typedef void ( ::PyPhysicsObject::*EnableMotion_function_type)( bool ) ;
            
            PhysicsObject_exposer.def( 
                "EnableMotion"
                , EnableMotion_function_type( &::PyPhysicsObject::EnableMotion )
                , ( bp::arg("enable") ) );
        
        }
        { //::PyPhysicsObject::GetCallbackFlags
        
            typedef short unsigned int ( ::PyPhysicsObject::*GetCallbackFlags_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetCallbackFlags"
                , GetCallbackFlags_function_type( &::PyPhysicsObject::GetCallbackFlags ) );
        
        }
        { //::PyPhysicsObject::GetContents
        
            typedef unsigned int ( ::PyPhysicsObject::*GetContents_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetContents"
                , GetContents_function_type( &::PyPhysicsObject::GetContents ) );
        
        }
        { //::PyPhysicsObject::GetDamping
        
            typedef ::boost::python::tuple ( ::PyPhysicsObject::*GetDamping_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetDamping"
                , GetDamping_function_type( &::PyPhysicsObject::GetDamping ) );
        
        }
        { //::PyPhysicsObject::GetEnergy
        
            typedef float ( ::PyPhysicsObject::*GetEnergy_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetEnergy"
                , GetEnergy_function_type( &::PyPhysicsObject::GetEnergy ) );
        
        }
        { //::PyPhysicsObject::GetGameFlags
        
            typedef short unsigned int ( ::PyPhysicsObject::*GetGameFlags_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetGameFlags"
                , GetGameFlags_function_type( &::PyPhysicsObject::GetGameFlags ) );
        
        }
        { //::PyPhysicsObject::GetGameIndex
        
            typedef short unsigned int ( ::PyPhysicsObject::*GetGameIndex_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetGameIndex"
                , GetGameIndex_function_type( &::PyPhysicsObject::GetGameIndex ) );
        
        }
        { //::PyPhysicsObject::GetImplicitVelocity
        
            typedef void ( ::PyPhysicsObject::*GetImplicitVelocity_function_type)( ::Vector *,::AngularImpulse * ) ;
            
            PhysicsObject_exposer.def( 
                "GetImplicitVelocity"
                , GetImplicitVelocity_function_type( &::PyPhysicsObject::GetImplicitVelocity )
                , ( bp::arg("velocity"), bp::arg("angularVelocity") ) );
        
        }
        { //::PyPhysicsObject::GetInertia
        
            typedef ::Vector ( ::PyPhysicsObject::*GetInertia_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetInertia"
                , GetInertia_function_type( &::PyPhysicsObject::GetInertia ) );
        
        }
        { //::PyPhysicsObject::GetInvInertia
        
            typedef ::Vector ( ::PyPhysicsObject::*GetInvInertia_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetInvInertia"
                , GetInvInertia_function_type( &::PyPhysicsObject::GetInvInertia ) );
        
        }
        { //::PyPhysicsObject::GetInvMass
        
            typedef float ( ::PyPhysicsObject::*GetInvMass_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetInvMass"
                , GetInvMass_function_type( &::PyPhysicsObject::GetInvMass ) );
        
        }
        { //::PyPhysicsObject::GetMass
        
            typedef float ( ::PyPhysicsObject::*GetMass_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetMass"
                , GetMass_function_type( &::PyPhysicsObject::GetMass ) );
        
        }
        { //::PyPhysicsObject::GetMassCenterLocalSpace
        
            typedef ::Vector ( ::PyPhysicsObject::*GetMassCenterLocalSpace_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetMassCenterLocalSpace"
                , GetMassCenterLocalSpace_function_type( &::PyPhysicsObject::GetMassCenterLocalSpace ) );
        
        }
        { //::PyPhysicsObject::GetMaterialIndex
        
            typedef int ( ::PyPhysicsObject::*GetMaterialIndex_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetMaterialIndex"
                , GetMaterialIndex_function_type( &::PyPhysicsObject::GetMaterialIndex ) );
        
        }
        { //::PyPhysicsObject::GetName
        
            typedef char const * ( ::PyPhysicsObject::*GetName_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetName"
                , GetName_function_type( &::PyPhysicsObject::GetName ) );
        
        }
        { //::PyPhysicsObject::GetPosition
        
            typedef void ( ::PyPhysicsObject::*GetPosition_function_type)( ::Vector *,::QAngle * ) ;
            
            PhysicsObject_exposer.def( 
                "GetPosition"
                , GetPosition_function_type( &::PyPhysicsObject::GetPosition )
                , ( bp::arg("worldPosition"), bp::arg("angles") ) );
        
        }
        { //::PyPhysicsObject::GetPositionMatrix
        
            typedef void ( ::PyPhysicsObject::*GetPositionMatrix_function_type)( ::matrix3x4_t * ) ;
            
            PhysicsObject_exposer.def( 
                "GetPositionMatrix"
                , GetPositionMatrix_function_type( &::PyPhysicsObject::GetPositionMatrix )
                , ( bp::arg("positionMatrix") ) );
        
        }
        { //::PyPhysicsObject::GetShadowController
        
            typedef ::PyPhysicsShadowController ( ::PyPhysicsObject::*GetShadowController_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetShadowController"
                , GetShadowController_function_type( &::PyPhysicsObject::GetShadowController ) );
        
        }
        { //::PyPhysicsObject::GetShadowPosition
        
            typedef int ( ::PyPhysicsObject::*GetShadowPosition_function_type)( ::Vector *,::QAngle * ) ;
            
            PhysicsObject_exposer.def( 
                "GetShadowPosition"
                , GetShadowPosition_function_type( &::PyPhysicsObject::GetShadowPosition )
                , ( bp::arg("position"), bp::arg("angles") ) );
        
        }
        { //::PyPhysicsObject::GetSphereRadius
        
            typedef float ( ::PyPhysicsObject::*GetSphereRadius_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "GetSphereRadius"
                , GetSphereRadius_function_type( &::PyPhysicsObject::GetSphereRadius ) );
        
        }
        { //::PyPhysicsObject::GetVelocity
        
            typedef void ( ::PyPhysicsObject::*GetVelocity_function_type)( ::Vector *,::AngularImpulse * ) ;
            
            PhysicsObject_exposer.def( 
                "GetVelocity"
                , GetVelocity_function_type( &::PyPhysicsObject::GetVelocity )
                , ( bp::arg("velocity"), bp::arg("angularVelocity") ) );
        
        }
        { //::PyPhysicsObject::GetVelocityAtPoint
        
            typedef void ( ::PyPhysicsObject::*GetVelocityAtPoint_function_type)( ::Vector const &,::Vector * ) ;
            
            PhysicsObject_exposer.def( 
                "GetVelocityAtPoint"
                , GetVelocityAtPoint_function_type( &::PyPhysicsObject::GetVelocityAtPoint )
                , ( bp::arg("worldPosition"), bp::arg("pVelocity") ) );
        
        }
        { //::PyPhysicsObject::HasEntity
        
            typedef bool ( ::PyPhysicsObject::*HasEntity_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "HasEntity"
                , HasEntity_function_type( &::PyPhysicsObject::HasEntity ) );
        
        }
        { //::PyPhysicsObject::IsAsleep
        
            typedef bool ( ::PyPhysicsObject::*IsAsleep_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "IsAsleep"
                , IsAsleep_function_type( &::PyPhysicsObject::IsAsleep ) );
        
        }
        { //::PyPhysicsObject::IsAttachedToConstraint
        
            typedef bool ( ::PyPhysicsObject::*IsAttachedToConstraint_function_type)( bool ) ;
            
            PhysicsObject_exposer.def( 
                "IsAttachedToConstraint"
                , IsAttachedToConstraint_function_type( &::PyPhysicsObject::IsAttachedToConstraint )
                , ( bp::arg("bExternalOnly") ) );
        
        }
        { //::PyPhysicsObject::IsCollisionEnabled
        
            typedef bool ( ::PyPhysicsObject::*IsCollisionEnabled_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "IsCollisionEnabled"
                , IsCollisionEnabled_function_type( &::PyPhysicsObject::IsCollisionEnabled ) );
        
        }
        { //::PyPhysicsObject::IsDragEnabled
        
            typedef bool ( ::PyPhysicsObject::*IsDragEnabled_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "IsDragEnabled"
                , IsDragEnabled_function_type( &::PyPhysicsObject::IsDragEnabled ) );
        
        }
        { //::PyPhysicsObject::IsFluid
        
            typedef bool ( ::PyPhysicsObject::*IsFluid_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "IsFluid"
                , IsFluid_function_type( &::PyPhysicsObject::IsFluid ) );
        
        }
        { //::PyPhysicsObject::IsGravityEnabled
        
            typedef bool ( ::PyPhysicsObject::*IsGravityEnabled_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "IsGravityEnabled"
                , IsGravityEnabled_function_type( &::PyPhysicsObject::IsGravityEnabled ) );
        
        }
        { //::PyPhysicsObject::IsHinged
        
            typedef bool ( ::PyPhysicsObject::*IsHinged_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "IsHinged"
                , IsHinged_function_type( &::PyPhysicsObject::IsHinged ) );
        
        }
        { //::PyPhysicsObject::IsMotionEnabled
        
            typedef bool ( ::PyPhysicsObject::*IsMotionEnabled_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "IsMotionEnabled"
                , IsMotionEnabled_function_type( &::PyPhysicsObject::IsMotionEnabled ) );
        
        }
        { //::PyPhysicsObject::IsMoveable
        
            typedef bool ( ::PyPhysicsObject::*IsMoveable_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "IsMoveable"
                , IsMoveable_function_type( &::PyPhysicsObject::IsMoveable ) );
        
        }
        { //::PyPhysicsObject::IsStatic
        
            typedef bool ( ::PyPhysicsObject::*IsStatic_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "IsStatic"
                , IsStatic_function_type( &::PyPhysicsObject::IsStatic ) );
        
        }
        { //::PyPhysicsObject::IsTrigger
        
            typedef bool ( ::PyPhysicsObject::*IsTrigger_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "IsTrigger"
                , IsTrigger_function_type( &::PyPhysicsObject::IsTrigger ) );
        
        }
        { //::PyPhysicsObject::LocalToWorld
        
            typedef void ( ::PyPhysicsObject::*LocalToWorld_function_type)( ::Vector *,::Vector const & ) ;
            
            PhysicsObject_exposer.def( 
                "LocalToWorld"
                , LocalToWorld_function_type( &::PyPhysicsObject::LocalToWorld )
                , ( bp::arg("worldPosition"), bp::arg("localPosition") ) );
        
        }
        { //::PyPhysicsObject::LocalToWorldVector
        
            typedef void ( ::PyPhysicsObject::*LocalToWorldVector_function_type)( ::Vector *,::Vector const & ) ;
            
            PhysicsObject_exposer.def( 
                "LocalToWorldVector"
                , LocalToWorldVector_function_type( &::PyPhysicsObject::LocalToWorldVector )
                , ( bp::arg("worldVector"), bp::arg("localVector") ) );
        
        }
        { //::PyPhysicsObject::NonZero
        
            typedef bool ( ::PyPhysicsObject::*__nonzero___function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "__nonzero__"
                , __nonzero___function_type( &::PyPhysicsObject::NonZero ) );
        
        }
        { //::PyPhysicsObject::OutputDebugInfo
        
            typedef void ( ::PyPhysicsObject::*OutputDebugInfo_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "OutputDebugInfo"
                , OutputDebugInfo_function_type( &::PyPhysicsObject::OutputDebugInfo ) );
        
        }
        { //::PyPhysicsObject::RecheckCollisionFilter
        
            typedef void ( ::PyPhysicsObject::*RecheckCollisionFilter_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "RecheckCollisionFilter"
                , RecheckCollisionFilter_function_type( &::PyPhysicsObject::RecheckCollisionFilter ) );
        
        }
        { //::PyPhysicsObject::RecheckContactPoints
        
            typedef void ( ::PyPhysicsObject::*RecheckContactPoints_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "RecheckContactPoints"
                , RecheckContactPoints_function_type( &::PyPhysicsObject::RecheckContactPoints ) );
        
        }
        { //::PyPhysicsObject::RemoveHinged
        
            typedef void ( ::PyPhysicsObject::*RemoveHinged_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "RemoveHinged"
                , RemoveHinged_function_type( &::PyPhysicsObject::RemoveHinged ) );
        
        }
        { //::PyPhysicsObject::RemoveShadowController
        
            typedef void ( ::PyPhysicsObject::*RemoveShadowController_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "RemoveShadowController"
                , RemoveShadowController_function_type( &::PyPhysicsObject::RemoveShadowController ) );
        
        }
        { //::PyPhysicsObject::RemoveTrigger
        
            typedef void ( ::PyPhysicsObject::*RemoveTrigger_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "RemoveTrigger"
                , RemoveTrigger_function_type( &::PyPhysicsObject::RemoveTrigger ) );
        
        }
        { //::PyPhysicsObject::SetBuoyancyRatio
        
            typedef void ( ::PyPhysicsObject::*SetBuoyancyRatio_function_type)( float ) ;
            
            PhysicsObject_exposer.def( 
                "SetBuoyancyRatio"
                , SetBuoyancyRatio_function_type( &::PyPhysicsObject::SetBuoyancyRatio )
                , ( bp::arg("ratio") ) );
        
        }
        { //::PyPhysicsObject::SetCallbackFlags
        
            typedef void ( ::PyPhysicsObject::*SetCallbackFlags_function_type)( short unsigned int ) ;
            
            PhysicsObject_exposer.def( 
                "SetCallbackFlags"
                , SetCallbackFlags_function_type( &::PyPhysicsObject::SetCallbackFlags )
                , ( bp::arg("callbackflags") ) );
        
        }
        { //::PyPhysicsObject::SetContents
        
            typedef void ( ::PyPhysicsObject::*SetContents_function_type)( unsigned int ) ;
            
            PhysicsObject_exposer.def( 
                "SetContents"
                , SetContents_function_type( &::PyPhysicsObject::SetContents )
                , ( bp::arg("contents") ) );
        
        }
        { //::PyPhysicsObject::SetDamping
        
            typedef void ( ::PyPhysicsObject::*SetDamping_function_type)( float,float ) ;
            
            PhysicsObject_exposer.def( 
                "SetDamping"
                , SetDamping_function_type( &::PyPhysicsObject::SetDamping )
                , ( bp::arg("speed"), bp::arg("rot") ) );
        
        }
        { //::PyPhysicsObject::SetDragCoefficient
        
            typedef void ( ::PyPhysicsObject::*SetDragCoefficient_function_type)( float *,float * ) ;
            
            PhysicsObject_exposer.def( 
                "SetDragCoefficient"
                , SetDragCoefficient_function_type( &::PyPhysicsObject::SetDragCoefficient )
                , ( bp::arg("pDrag"), bp::arg("pAngularDrag") ) );
        
        }
        { //::PyPhysicsObject::SetGameFlags
        
            typedef void ( ::PyPhysicsObject::*SetGameFlags_function_type)( short unsigned int ) ;
            
            PhysicsObject_exposer.def( 
                "SetGameFlags"
                , SetGameFlags_function_type( &::PyPhysicsObject::SetGameFlags )
                , ( bp::arg("userFlags") ) );
        
        }
        { //::PyPhysicsObject::SetGameIndex
        
            typedef void ( ::PyPhysicsObject::*SetGameIndex_function_type)( short unsigned int ) ;
            
            PhysicsObject_exposer.def( 
                "SetGameIndex"
                , SetGameIndex_function_type( &::PyPhysicsObject::SetGameIndex )
                , ( bp::arg("gameIndex") ) );
        
        }
        { //::PyPhysicsObject::SetInertia
        
            typedef void ( ::PyPhysicsObject::*SetInertia_function_type)( ::Vector const & ) ;
            
            PhysicsObject_exposer.def( 
                "SetInertia"
                , SetInertia_function_type( &::PyPhysicsObject::SetInertia )
                , ( bp::arg("inertia") ) );
        
        }
        { //::PyPhysicsObject::SetMass
        
            typedef void ( ::PyPhysicsObject::*SetMass_function_type)( float ) ;
            
            PhysicsObject_exposer.def( 
                "SetMass"
                , SetMass_function_type( &::PyPhysicsObject::SetMass )
                , ( bp::arg("mass") ) );
        
        }
        { //::PyPhysicsObject::SetMaterialIndex
        
            typedef void ( ::PyPhysicsObject::*SetMaterialIndex_function_type)( int ) ;
            
            PhysicsObject_exposer.def( 
                "SetMaterialIndex"
                , SetMaterialIndex_function_type( &::PyPhysicsObject::SetMaterialIndex )
                , ( bp::arg("materialIndex") ) );
        
        }
        { //::PyPhysicsObject::SetPosition
        
            typedef void ( ::PyPhysicsObject::*SetPosition_function_type)( ::Vector const &,::QAngle const &,bool ) ;
            
            PhysicsObject_exposer.def( 
                "SetPosition"
                , SetPosition_function_type( &::PyPhysicsObject::SetPosition )
                , ( bp::arg("worldPosition"), bp::arg("angles"), bp::arg("isTeleport") ) );
        
        }
        { //::PyPhysicsObject::SetPositionMatrix
        
            typedef void ( ::PyPhysicsObject::*SetPositionMatrix_function_type)( ::matrix3x4_t const &,bool ) ;
            
            PhysicsObject_exposer.def( 
                "SetPositionMatrix"
                , SetPositionMatrix_function_type( &::PyPhysicsObject::SetPositionMatrix )
                , ( bp::arg("matrix"), bp::arg("isTeleport") ) );
        
        }
        { //::PyPhysicsObject::SetShadow
        
            typedef void ( ::PyPhysicsObject::*SetShadow_function_type)( float,float,bool,bool ) ;
            
            PhysicsObject_exposer.def( 
                "SetShadow"
                , SetShadow_function_type( &::PyPhysicsObject::SetShadow )
                , ( bp::arg("maxSpeed"), bp::arg("maxAngularSpeed"), bp::arg("allowPhysicsMovement"), bp::arg("allowPhysicsRotation") ) );
        
        }
        { //::PyPhysicsObject::SetVelocity
        
            typedef void ( ::PyPhysicsObject::*SetVelocity_function_type)( ::Vector const *,::AngularImpulse const * ) ;
            
            PhysicsObject_exposer.def( 
                "SetVelocity"
                , SetVelocity_function_type( &::PyPhysicsObject::SetVelocity )
                , ( bp::arg("velocity"), bp::arg("angularVelocity") ) );
        
        }
        { //::PyPhysicsObject::SetVelocityInstantaneous
        
            typedef void ( ::PyPhysicsObject::*SetVelocityInstantaneous_function_type)( ::Vector const *,::AngularImpulse const * ) ;
            
            PhysicsObject_exposer.def( 
                "SetVelocityInstantaneous"
                , SetVelocityInstantaneous_function_type( &::PyPhysicsObject::SetVelocityInstantaneous )
                , ( bp::arg("velocity"), bp::arg("angularVelocity") ) );
        
        }
        { //::PyPhysicsObject::Sleep
        
            typedef void ( ::PyPhysicsObject::*Sleep_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "Sleep"
                , Sleep_function_type( &::PyPhysicsObject::Sleep ) );
        
        }
        { //::PyPhysicsObject::UpdateShadow
        
            typedef void ( ::PyPhysicsObject::*UpdateShadow_function_type)( ::Vector const &,::QAngle const &,bool,float ) ;
            
            PhysicsObject_exposer.def( 
                "UpdateShadow"
                , UpdateShadow_function_type( &::PyPhysicsObject::UpdateShadow )
                , ( bp::arg("targetPosition"), bp::arg("targetAngles"), bp::arg("tempDisableGravity"), bp::arg("timeOffset") ) );
        
        }
        { //::PyPhysicsObject::Wake
        
            typedef void ( ::PyPhysicsObject::*Wake_function_type)(  ) ;
            
            PhysicsObject_exposer.def( 
                "Wake"
                , Wake_function_type( &::PyPhysicsObject::Wake ) );
        
        }
        { //::PyPhysicsObject::WorldToLocal
        
            typedef void ( ::PyPhysicsObject::*WorldToLocal_function_type)( ::Vector *,::Vector const & ) ;
            
            PhysicsObject_exposer.def( 
                "WorldToLocal"
                , WorldToLocal_function_type( &::PyPhysicsObject::WorldToLocal )
                , ( bp::arg("localPosition"), bp::arg("worldPosition") ) );
        
        }
        { //::PyPhysicsObject::WorldToLocalVector
        
            typedef void ( ::PyPhysicsObject::*WorldToLocalVector_function_type)( ::Vector *,::Vector const & ) ;
            
            PhysicsObject_exposer.def( 
                "WorldToLocalVector"
                , WorldToLocalVector_function_type( &::PyPhysicsObject::WorldToLocalVector )
                , ( bp::arg("localVector"), bp::arg("worldVector") ) );
        
        }
        PhysicsObject_exposer.def( bp::self != bp::self );
        PhysicsObject_exposer.def( bp::self == bp::self );
    }

    { //::PyPhysicsShadowController
        typedef bp::class_< PyPhysicsShadowController > PhysicsShadowController_exposer_t;
        PhysicsShadowController_exposer_t PhysicsShadowController_exposer = PhysicsShadowController_exposer_t( "PhysicsShadowController", bp::init< bp::api::object >(( bp::arg("refPyPhysObj") )) );
        bp::scope PhysicsShadowController_scope( PhysicsShadowController_exposer );
        bp::implicitly_convertible< bp::api::object, PyPhysicsShadowController >();
        { //::PyPhysicsShadowController::AllowsRotation
        
            typedef bool ( ::PyPhysicsShadowController::*AllowsRotation_function_type)(  ) ;
            
            PhysicsShadowController_exposer.def( 
                "AllowsRotation"
                , AllowsRotation_function_type( &::PyPhysicsShadowController::AllowsRotation ) );
        
        }
        { //::PyPhysicsShadowController::AllowsTranslation
        
            typedef bool ( ::PyPhysicsShadowController::*AllowsTranslation_function_type)(  ) ;
            
            PhysicsShadowController_exposer.def( 
                "AllowsTranslation"
                , AllowsTranslation_function_type( &::PyPhysicsShadowController::AllowsTranslation ) );
        
        }
        { //::PyPhysicsShadowController::Bool
        
            typedef bool ( ::PyPhysicsShadowController::*__bool___function_type)(  ) ;
            
            PhysicsShadowController_exposer.def( 
                "__bool__"
                , __bool___function_type( &::PyPhysicsShadowController::Bool ) );
        
        }
        { //::PyPhysicsShadowController::Cmp
        
            typedef bool ( ::PyPhysicsShadowController::*__cmp___function_type)( ::boost::python::api::object ) ;
            
            PhysicsShadowController_exposer.def( 
                "__cmp__"
                , __cmp___function_type( &::PyPhysicsShadowController::Cmp )
                , ( bp::arg("other") ) );
        
        }
        { //::PyPhysicsShadowController::GetLastImpulse
        
            typedef void ( ::PyPhysicsShadowController::*GetLastImpulse_function_type)( ::Vector * ) ;
            
            PhysicsShadowController_exposer.def( 
                "GetLastImpulse"
                , GetLastImpulse_function_type( &::PyPhysicsShadowController::GetLastImpulse )
                , ( bp::arg("pOut") ) );
        
        }
        { //::PyPhysicsShadowController::GetMaxSpeed
        
            typedef void ( ::PyPhysicsShadowController::*GetMaxSpeed_function_type)( float *,float * ) ;
            
            PhysicsShadowController_exposer.def( 
                "GetMaxSpeed"
                , GetMaxSpeed_function_type( &::PyPhysicsShadowController::GetMaxSpeed )
                , ( bp::arg("pMaxSpeedOut"), bp::arg("pMaxAngularSpeedOut") ) );
        
        }
        { //::PyPhysicsShadowController::GetTargetPosition
        
            typedef float ( ::PyPhysicsShadowController::*GetTargetPosition_function_type)( ::Vector *,::QAngle * ) ;
            
            PhysicsShadowController_exposer.def( 
                "GetTargetPosition"
                , GetTargetPosition_function_type( &::PyPhysicsShadowController::GetTargetPosition )
                , ( bp::arg("pPositionOut"), bp::arg("pAnglesOut") ) );
        
        }
        { //::PyPhysicsShadowController::GetTeleportDistance
        
            typedef float ( ::PyPhysicsShadowController::*GetTeleportDistance_function_type)(  ) ;
            
            PhysicsShadowController_exposer.def( 
                "GetTeleportDistance"
                , GetTeleportDistance_function_type( &::PyPhysicsShadowController::GetTeleportDistance ) );
        
        }
        { //::PyPhysicsShadowController::IsPhysicallyControlled
        
            typedef bool ( ::PyPhysicsShadowController::*IsPhysicallyControlled_function_type)(  ) ;
            
            PhysicsShadowController_exposer.def( 
                "IsPhysicallyControlled"
                , IsPhysicallyControlled_function_type( &::PyPhysicsShadowController::IsPhysicallyControlled ) );
        
        }
        { //::PyPhysicsShadowController::MaxSpeed
        
            typedef void ( ::PyPhysicsShadowController::*MaxSpeed_function_type)( float,float ) ;
            
            PhysicsShadowController_exposer.def( 
                "MaxSpeed"
                , MaxSpeed_function_type( &::PyPhysicsShadowController::MaxSpeed )
                , ( bp::arg("maxSpeed"), bp::arg("maxAngularSpeed") ) );
        
        }
        { //::PyPhysicsShadowController::NonZero
        
            typedef bool ( ::PyPhysicsShadowController::*__nonzero___function_type)(  ) ;
            
            PhysicsShadowController_exposer.def( 
                "__nonzero__"
                , __nonzero___function_type( &::PyPhysicsShadowController::NonZero ) );
        
        }
        { //::PyPhysicsShadowController::ObjectMaterialChanged
        
            typedef void ( ::PyPhysicsShadowController::*ObjectMaterialChanged_function_type)( int ) ;
            
            PhysicsShadowController_exposer.def( 
                "ObjectMaterialChanged"
                , ObjectMaterialChanged_function_type( &::PyPhysicsShadowController::ObjectMaterialChanged )
                , ( bp::arg("materialIndex") ) );
        
        }
        { //::PyPhysicsShadowController::SetPhysicallyControlled
        
            typedef void ( ::PyPhysicsShadowController::*SetPhysicallyControlled_function_type)( bool ) ;
            
            PhysicsShadowController_exposer.def( 
                "SetPhysicallyControlled"
                , SetPhysicallyControlled_function_type( &::PyPhysicsShadowController::SetPhysicallyControlled )
                , ( bp::arg("isPhysicallyControlled") ) );
        
        }
        { //::PyPhysicsShadowController::SetTeleportDistance
        
            typedef void ( ::PyPhysicsShadowController::*SetTeleportDistance_function_type)( float ) ;
            
            PhysicsShadowController_exposer.def( 
                "SetTeleportDistance"
                , SetTeleportDistance_function_type( &::PyPhysicsShadowController::SetTeleportDistance )
                , ( bp::arg("teleportDistance") ) );
        
        }
        { //::PyPhysicsShadowController::StepUp
        
            typedef void ( ::PyPhysicsShadowController::*StepUp_function_type)( float ) ;
            
            PhysicsShadowController_exposer.def( 
                "StepUp"
                , StepUp_function_type( &::PyPhysicsShadowController::StepUp )
                , ( bp::arg("height") ) );
        
        }
        { //::PyPhysicsShadowController::Update
        
            typedef void ( ::PyPhysicsShadowController::*Update_function_type)( ::Vector const &,::QAngle const &,float ) ;
            
            PhysicsShadowController_exposer.def( 
                "Update"
                , Update_function_type( &::PyPhysicsShadowController::Update )
                , ( bp::arg("position"), bp::arg("angles"), bp::arg("timeOffset") ) );
        
        }
        { //::PyPhysicsShadowController::UseShadowMaterial
        
            typedef void ( ::PyPhysicsShadowController::*UseShadowMaterial_function_type)( bool ) ;
            
            PhysicsShadowController_exposer.def( 
                "UseShadowMaterial"
                , UseShadowMaterial_function_type( &::PyPhysicsShadowController::UseShadowMaterial )
                , ( bp::arg("bUseShadowMaterial") ) );
        
        }
        PhysicsShadowController_exposer.def( bp::self != bp::self );
        PhysicsShadowController_exposer.def( bp::self == bp::self );
    }

    bp::class_< PyPhysicsSurfaceProps >( "PhysicsSurfaceProps", bp::no_init )    
        .def( 
            "GetPhysicsParameters"
            , (void ( ::PyPhysicsSurfaceProps::* )( int,::surfacephysicsparams_t & )const)( &::PyPhysicsSurfaceProps::GetPhysicsParameters )
            , ( bp::arg("surfaceDataIndex"), bp::arg("paramsout") ) )    
        .def( 
            "GetPropName"
            , (char const * ( ::PyPhysicsSurfaceProps::* )( int )const)( &::PyPhysicsSurfaceProps::GetPropName )
            , ( bp::arg("surfaceDataIndex") ) )    
        .def( 
            "GetString"
            , (char const * ( ::PyPhysicsSurfaceProps::* )( short unsigned int )const)( &::PyPhysicsSurfaceProps::GetString )
            , ( bp::arg("stringTableIndex") ) )    
        .def( 
            "GetSurfaceData"
            , (::surfacedata_t ( ::PyPhysicsSurfaceProps::* )( int ))( &::PyPhysicsSurfaceProps::GetSurfaceData )
            , ( bp::arg("surfaceDataIndex") ) )    
        .def( 
            "GetSurfaceIndex"
            , (int ( ::PyPhysicsSurfaceProps::* )( char const * )const)( &::PyPhysicsSurfaceProps::GetSurfaceIndex )
            , ( bp::arg("pSurfacePropName") ) )    
        .def( 
            "ParseSurfaceData"
            , (int ( ::PyPhysicsSurfaceProps::* )( char const *,char const * ))( &::PyPhysicsSurfaceProps::ParseSurfaceData )
            , ( bp::arg("pFilename"), bp::arg("pTextfile") ) )    
        .def( 
            "SurfacePropCount"
            , (int ( ::PyPhysicsSurfaceProps::* )(  )const)( &::PyPhysicsSurfaceProps::SurfacePropCount ) );

    bp::class_< surfaceaudioparams_t >( "surfaceaudioparams_t" )    
        .def_readwrite( "hardThreshold", &surfaceaudioparams_t::hardThreshold )    
        .def_readwrite( "hardVelocityThreshold", &surfaceaudioparams_t::hardVelocityThreshold )    
        .def_readwrite( "hardnessFactor", &surfaceaudioparams_t::hardnessFactor )    
        .def_readwrite( "reflectivity", &surfaceaudioparams_t::reflectivity )    
        .def_readwrite( "roughThreshold", &surfaceaudioparams_t::roughThreshold )    
        .def_readwrite( "roughnessFactor", &surfaceaudioparams_t::roughnessFactor );

    bp::class_< surfacedata_t >( "surfacedata_t" )    
        .def_readwrite( "audio", &surfacedata_t::audio )    
        .def_readwrite( "game", &surfacedata_t::game )    
        .def_readwrite( "physics", &surfacedata_t::physics )    
        .def_readwrite( "soundhandles", &surfacedata_t::soundhandles )    
        .def_readwrite( "sounds", &surfacedata_t::sounds );

    bp::class_< surfacegameprops_t >( "surfacegameprops_t" )    
        .def_readwrite( "climbable", &surfacegameprops_t::climbable )    
        .def_readwrite( "jumpFactor", &surfacegameprops_t::jumpFactor )    
        .def_readwrite( "material", &surfacegameprops_t::material )    
        .def_readwrite( "maxSpeedFactor", &surfacegameprops_t::maxSpeedFactor )    
        .def_readwrite( "pad", &surfacegameprops_t::pad );

    bp::class_< surfacephysicsparams_t >( "surfacephysicsparams_t" )    
        .def_readwrite( "dampening", &surfacephysicsparams_t::dampening )    
        .def_readwrite( "density", &surfacephysicsparams_t::density )    
        .def_readwrite( "elasticity", &surfacephysicsparams_t::elasticity )    
        .def_readwrite( "friction", &surfacephysicsparams_t::friction )    
        .def_readwrite( "thickness", &surfacephysicsparams_t::thickness );

    bp::class_< surfacesoundhandles_t >( "surfacesoundhandles_t" )    
        .def_readwrite( "breakSound", &surfacesoundhandles_t::breakSound )    
        .def_readwrite( "bulletImpact", &surfacesoundhandles_t::bulletImpact )    
        .def_readwrite( "impactHard", &surfacesoundhandles_t::impactHard )    
        .def_readwrite( "impactSoft", &surfacesoundhandles_t::impactSoft )    
        .def_readwrite( "rolling", &surfacesoundhandles_t::rolling )    
        .def_readwrite( "scrapeRough", &surfacesoundhandles_t::scrapeRough )    
        .def_readwrite( "scrapeSmooth", &surfacesoundhandles_t::scrapeSmooth )    
        .def_readwrite( "stepleft", &surfacesoundhandles_t::stepleft )    
        .def_readwrite( "stepright", &surfacesoundhandles_t::stepright )    
        .def_readwrite( "strainSound", &surfacesoundhandles_t::strainSound );

    bp::class_< surfacesoundnames_t >( "surfacesoundnames_t" )    
        .def_readwrite( "breakSound", &surfacesoundnames_t::breakSound )    
        .def_readwrite( "bulletImpact", &surfacesoundnames_t::bulletImpact )    
        .def_readwrite( "impactHard", &surfacesoundnames_t::impactHard )    
        .def_readwrite( "impactSoft", &surfacesoundnames_t::impactSoft )    
        .def_readwrite( "rolling", &surfacesoundnames_t::rolling )    
        .def_readwrite( "scrapeRough", &surfacesoundnames_t::scrapeRough )    
        .def_readwrite( "scrapeSmooth", &surfacesoundnames_t::scrapeSmooth )    
        .def_readwrite( "stepleft", &surfacesoundnames_t::stepleft )    
        .def_readwrite( "stepright", &surfacesoundnames_t::stepright )    
        .def_readwrite( "strainSound", &surfacesoundnames_t::strainSound );

    { //::PhysIsInCallback
    
        typedef bool ( *PhysIsInCallback_function_type )(  );
        
        bp::def( 
            "PhysIsInCallback"
            , PhysIsInCallback_function_type( &::PhysIsInCallback ) );
    
    }

    { //::Physics_RunThinkFunctions
    
        typedef void ( *Physics_RunThinkFunctions_function_type )( bool );
        
        bp::def( 
            "Physics_RunThinkFunctions"
            , Physics_RunThinkFunctions_function_type( &::Physics_RunThinkFunctions )
            , ( bp::arg("simulating") ) );
    
    }

    { //::PyCalculateDefaultPhysicsDamage
    
        typedef float ( *CalculateDefaultPhysicsDamage_function_type )( int,::gamevcollisionevent_t *,float,bool,int &,char const *,bool );
        
        bp::def( 
            "CalculateDefaultPhysicsDamage"
            , CalculateDefaultPhysicsDamage_function_type( &::PyCalculateDefaultPhysicsDamage )
            , ( bp::arg("index"), bp::arg("pEvent"), bp::arg("energyScale"), bp::arg("allowStaticDamage"), bp::arg("damageTypeOut"), bp::arg("iszDamageTableName")=bp::object(), bp::arg("bDamageFromHeldObjects")=(bool)(false) ) );
    
    }

    { //::PyForcePhysicsSimulate
    
        typedef void ( *ForcePhysicsSimulate_function_type )(  );
        
        bp::def( 
            "ForcePhysicsSimulate"
            , ForcePhysicsSimulate_function_type( &::PyForcePhysicsSimulate ) );
    
    }

    { //::PyGetCollideAABB
    
        typedef ::boost::python::tuple ( *GetCollideAABB_function_type )( ::CBaseEntity * );
        
        bp::def( 
            "GetCollideAABB"
            , GetCollideAABB_function_type( &::PyGetCollideAABB )
            , ( bp::arg("pEnt") ) );
    
    }

    { //::PyPhysCallbackDamage
    
        typedef void ( *PhysCallbackDamage_function_type )( ::CBaseEntity *,::CTakeDamageInfo const &,::gamevcollisionevent_t &,int );
        
        bp::def( 
            "PhysCallbackDamage"
            , PhysCallbackDamage_function_type( &::PyPhysCallbackDamage )
            , ( bp::arg("pEntity"), bp::arg("info"), bp::arg("event"), bp::arg("hurtIndex") ) );
    
    }

    { //::PyPhysCallbackDamage
    
        typedef void ( *PhysCallbackDamage_function_type )( ::CBaseEntity *,::CTakeDamageInfo const & );
        
        bp::def( 
            "PhysCallbackDamage"
            , PhysCallbackDamage_function_type( &::PyPhysCallbackDamage )
            , ( bp::arg("pEntity"), bp::arg("info") ) );
    
    }

    { //::PyPhysCallbackImpulse
    
        typedef void ( *PhysCallbackImpulse_function_type )( ::PyPhysicsObject &,::Vector const &,::AngularImpulse const & );
        
        bp::def( 
            "PhysCallbackImpulse"
            , PhysCallbackImpulse_function_type( &::PyPhysCallbackImpulse )
            , ( bp::arg("pyPhysicsObject"), bp::arg("vecCenterForce"), bp::arg("vecCenterTorque") ) );
    
    }

    { //::PyPhysCallbackRemove
    
        typedef void ( *PhysCallbackRemove_function_type )( ::CBaseEntity * );
        
        bp::def( 
            "PhysCallbackRemove"
            , PhysCallbackRemove_function_type( &::PyPhysCallbackRemove )
            , ( bp::arg("pRemove") ) );
    
    }

    { //::PyPhysCallbackSetVelocity
    
        typedef void ( *PhysCallbackSetVelocity_function_type )( ::PyPhysicsObject &,::Vector const & );
        
        bp::def( 
            "PhysCallbackSetVelocity"
            , PhysCallbackSetVelocity_function_type( &::PyPhysCallbackSetVelocity )
            , ( bp::arg("pyPhysicsObject"), bp::arg("vecVelocity") ) );
    
    }

    { //::PyPhysDestroyObject
    
        typedef void ( *PhysDestroyObject_function_type )( ::PyPhysicsObject *,::CBaseEntity * );
        
        bp::def( 
            "PhysDestroyObject"
            , PhysDestroyObject_function_type( &::PyPhysDestroyObject )
            , ( bp::arg("pPyPhysObj"), bp::arg("pEntity")=bp::object() ) );
    
    }

    { //::PyPhysModelCreateBox
    
        typedef ::boost::python::api::object ( *PhysModelCreateBox_function_type )( ::CBaseEntity *,::Vector const &,::Vector const &,::Vector const &,bool );
        
        bp::def( 
            "PhysModelCreateBox"
            , PhysModelCreateBox_function_type( &::PyPhysModelCreateBox )
            , ( bp::arg("pEntity"), bp::arg("mins"), bp::arg("maxs"), bp::arg("origin"), bp::arg("isStatic") ) );
    
    }

    ptr_IPhysicsObject_to_PyPhysicsObject();

    const_ptr_IPhysicsObject_to_PyPhysicsObject();

    PyPhysicsObject_to_IPhysicsObject();

    bp::scope().attr( "physcollision" ) = boost::ref(pyphyscollision);

    bp::scope().attr( "physprops" ) = boost::ref(pyphysprops);

    { //::PyPhysModelCreateOBB
    
        typedef ::boost::python::api::object ( *PhysModelCreateOBB_function_type )( ::CBaseEntity *,::Vector const &,::Vector const &,::Vector const &,::QAngle const &,bool );
        
        bp::def( 
            "PhysModelCreateOBB"
            , PhysModelCreateOBB_function_type( &::PyPhysModelCreateOBB )
            , ( bp::arg("pEntity"), bp::arg("mins"), bp::arg("maxs"), bp::arg("origin"), bp::arg("angle"), bp::arg("isStatic") ) );
    
    }
}
#endif

