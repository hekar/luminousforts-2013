// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "__convenience.pypp.hpp"

#include "__call_policies.pypp.hpp"

#include "cbase.h"

#include "npcevent.h"

#include "srcpy_entities.h"

#include "bone_setup.h"

#include "baseprojectile.h"

#include "basegrenade_shared.h"

#include "SkyCamera.h"

#include "ai_basenpc.h"

#include "modelentities.h"

#include "basetoggle.h"

#include "triggers.h"

#include "AI_Criteria.h"

#include "saverestore.h"

#include "saverestoretypes.h"

#include "vcollide_parse.h"

#include "iservervehicle.h"

#include "gib.h"

#include "spark.h"

#include "filters.h"

#include "EntityFlame.h"

#include "player_resource.h"

#include "props.h"

#include "physics_prop_ragdoll.h"

#include "nav_area.h"

#include "tier0/valve_minmax_off.h"

#include "srcpy.h"

#include "tier0/valve_minmax_on.h"

#include "tier0/memdbgon.h"

#include "../../game/server/python/modules/autogenerated/_entities/CBaseAnimating.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/CBaseAnimatingOverlay.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/CBaseCombatCharacter.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/CBaseCombatWeapon.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/CBaseEntity.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/CBaseFilter.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/CBaseFlex.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/CBaseGrenade.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/CBaseHandle.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/CBasePlayer.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/CBaseProjectile.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/CBaseProp.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/CBaseToggle.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/CBaseTrigger.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/CBreakableProp.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/CEntityFlame.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/CFuncBrush.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/CGib.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/CLogicalEntity.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/CPhysicsProp.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/CPlayerResource.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/CPointEntity.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/CRagdollProp.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/CServerOnlyEntity.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/CServerOnlyPointEntity.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/CSoundEnt.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/CTriggerMultiple.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/DeadEntity.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/IHandleEntity.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/IServerEntity.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/IServerUnknown.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/PyHandle.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/_entities_enumerations.pypp.hpp"

#include "../../game/server/python/modules/autogenerated/_entities/_entities_free_functions.pypp.hpp"

namespace bp = boost::python;

struct handle_to_IHandleEntity
{
    handle_to_IHandleEntity()
    {
        bp::converter::registry::insert(
            &extract_IHandleEntity, 
            bp::type_id<IHandleEntity>()
            );
    }

    static void* extract_IHandleEntity(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< CBaseEntity > CBaseEntityHANDLE;

struct ptr_CBaseEntity_to_handle : bp::to_python_converter<CBaseEntity *, ptr_CBaseEntity_to_handle>
{
    static PyObject* convert(CBaseEntity *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBaseEntity_to_handle : bp::to_python_converter<CBaseEntity, CBaseEntity_to_handle>
{
    static PyObject* convert(const CBaseEntity &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBaseEntity
{
    handle_to_CBaseEntity()
    {
        bp::converter::registry::insert(
            &extract_CBaseEntity, 
            bp::type_id<CBaseEntity>()
            );
    }

    static void* extract_CBaseEntity(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< CBaseAnimating > CBaseAnimatingHANDLE;

struct ptr_CBaseAnimating_to_handle : bp::to_python_converter<CBaseAnimating *, ptr_CBaseAnimating_to_handle>
{
    static PyObject* convert(CBaseAnimating *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBaseAnimating_to_handle : bp::to_python_converter<CBaseAnimating, CBaseAnimating_to_handle>
{
    static PyObject* convert(const CBaseAnimating &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBaseAnimating
{
    handle_to_CBaseAnimating()
    {
        bp::converter::registry::insert(
            &extract_CBaseAnimating, 
            bp::type_id<CBaseAnimating>()
            );
    }

    static void* extract_CBaseAnimating(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< CBaseAnimatingOverlay > CBaseAnimatingOverlayHANDLE;

struct ptr_CBaseAnimatingOverlay_to_handle : bp::to_python_converter<CBaseAnimatingOverlay *, ptr_CBaseAnimatingOverlay_to_handle>
{
    static PyObject* convert(CBaseAnimatingOverlay *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBaseAnimatingOverlay_to_handle : bp::to_python_converter<CBaseAnimatingOverlay, CBaseAnimatingOverlay_to_handle>
{
    static PyObject* convert(const CBaseAnimatingOverlay &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBaseAnimatingOverlay
{
    handle_to_CBaseAnimatingOverlay()
    {
        bp::converter::registry::insert(
            &extract_CBaseAnimatingOverlay, 
            bp::type_id<CBaseAnimatingOverlay>()
            );
    }

    static void* extract_CBaseAnimatingOverlay(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< CBaseFlex > CBaseFlexHANDLE;

struct ptr_CBaseFlex_to_handle : bp::to_python_converter<CBaseFlex *, ptr_CBaseFlex_to_handle>
{
    static PyObject* convert(CBaseFlex *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBaseFlex_to_handle : bp::to_python_converter<CBaseFlex, CBaseFlex_to_handle>
{
    static PyObject* convert(const CBaseFlex &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBaseFlex
{
    handle_to_CBaseFlex()
    {
        bp::converter::registry::insert(
            &extract_CBaseFlex, 
            bp::type_id<CBaseFlex>()
            );
    }

    static void* extract_CBaseFlex(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< CBaseCombatCharacter > CBaseCombatCharacterHANDLE;

struct ptr_CBaseCombatCharacter_to_handle : bp::to_python_converter<CBaseCombatCharacter *, ptr_CBaseCombatCharacter_to_handle>
{
    static PyObject* convert(CBaseCombatCharacter *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBaseCombatCharacter_to_handle : bp::to_python_converter<CBaseCombatCharacter, CBaseCombatCharacter_to_handle>
{
    static PyObject* convert(const CBaseCombatCharacter &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBaseCombatCharacter
{
    handle_to_CBaseCombatCharacter()
    {
        bp::converter::registry::insert(
            &extract_CBaseCombatCharacter, 
            bp::type_id<CBaseCombatCharacter>()
            );
    }

    static void* extract_CBaseCombatCharacter(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< CBaseCombatWeapon > CBaseCombatWeaponHANDLE;

struct ptr_CBaseCombatWeapon_to_handle : bp::to_python_converter<CBaseCombatWeapon *, ptr_CBaseCombatWeapon_to_handle>
{
    static PyObject* convert(CBaseCombatWeapon *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBaseCombatWeapon_to_handle : bp::to_python_converter<CBaseCombatWeapon, CBaseCombatWeapon_to_handle>
{
    static PyObject* convert(const CBaseCombatWeapon &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBaseCombatWeapon
{
    handle_to_CBaseCombatWeapon()
    {
        bp::converter::registry::insert(
            &extract_CBaseCombatWeapon, 
            bp::type_id<CBaseCombatWeapon>()
            );
    }

    static void* extract_CBaseCombatWeapon(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< CBaseProjectile > CBaseProjectileHANDLE;

struct ptr_CBaseProjectile_to_handle : bp::to_python_converter<CBaseProjectile *, ptr_CBaseProjectile_to_handle>
{
    static PyObject* convert(CBaseProjectile *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBaseProjectile_to_handle : bp::to_python_converter<CBaseProjectile, CBaseProjectile_to_handle>
{
    static PyObject* convert(const CBaseProjectile &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBaseProjectile
{
    handle_to_CBaseProjectile()
    {
        bp::converter::registry::insert(
            &extract_CBaseProjectile, 
            bp::type_id<CBaseProjectile>()
            );
    }

    static void* extract_CBaseProjectile(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< CBaseGrenade > CBaseGrenadeHANDLE;

struct ptr_CBaseGrenade_to_handle : bp::to_python_converter<CBaseGrenade *, ptr_CBaseGrenade_to_handle>
{
    static PyObject* convert(CBaseGrenade *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBaseGrenade_to_handle : bp::to_python_converter<CBaseGrenade, CBaseGrenade_to_handle>
{
    static PyObject* convert(const CBaseGrenade &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBaseGrenade
{
    handle_to_CBaseGrenade()
    {
        bp::converter::registry::insert(
            &extract_CBaseGrenade, 
            bp::type_id<CBaseGrenade>()
            );
    }

    static void* extract_CBaseGrenade(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< CBasePlayer > CBasePlayerHANDLE;

struct ptr_CBasePlayer_to_handle : bp::to_python_converter<CBasePlayer *, ptr_CBasePlayer_to_handle>
{
    static PyObject* convert(CBasePlayer *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBasePlayer_to_handle : bp::to_python_converter<CBasePlayer, CBasePlayer_to_handle>
{
    static PyObject* convert(const CBasePlayer &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBasePlayer
{
    handle_to_CBasePlayer()
    {
        bp::converter::registry::insert(
            &extract_CBasePlayer, 
            bp::type_id<CBasePlayer>()
            );
    }

    static void* extract_CBasePlayer(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< CPlayerResource > CPlayerResourceHANDLE;

struct ptr_CPlayerResource_to_handle : bp::to_python_converter<CPlayerResource *, ptr_CPlayerResource_to_handle>
{
    static PyObject* convert(CPlayerResource *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CPlayerResource_to_handle : bp::to_python_converter<CPlayerResource, CPlayerResource_to_handle>
{
    static PyObject* convert(const CPlayerResource &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CPlayerResource
{
    handle_to_CPlayerResource()
    {
        bp::converter::registry::insert(
            &extract_CPlayerResource, 
            bp::type_id<CPlayerResource>()
            );
    }

    static void* extract_CPlayerResource(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< CPointEntity > CPointEntityHANDLE;

struct ptr_CPointEntity_to_handle : bp::to_python_converter<CPointEntity *, ptr_CPointEntity_to_handle>
{
    static PyObject* convert(CPointEntity *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CPointEntity_to_handle : bp::to_python_converter<CPointEntity, CPointEntity_to_handle>
{
    static PyObject* convert(const CPointEntity &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CPointEntity
{
    handle_to_CPointEntity()
    {
        bp::converter::registry::insert(
            &extract_CPointEntity, 
            bp::type_id<CPointEntity>()
            );
    }

    static void* extract_CPointEntity(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< CServerOnlyEntity > CServerOnlyEntityHANDLE;

struct ptr_CServerOnlyEntity_to_handle : bp::to_python_converter<CServerOnlyEntity *, ptr_CServerOnlyEntity_to_handle>
{
    static PyObject* convert(CServerOnlyEntity *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CServerOnlyEntity_to_handle : bp::to_python_converter<CServerOnlyEntity, CServerOnlyEntity_to_handle>
{
    static PyObject* convert(const CServerOnlyEntity &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CServerOnlyEntity
{
    handle_to_CServerOnlyEntity()
    {
        bp::converter::registry::insert(
            &extract_CServerOnlyEntity, 
            bp::type_id<CServerOnlyEntity>()
            );
    }

    static void* extract_CServerOnlyEntity(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< CServerOnlyPointEntity > CServerOnlyPointEntityHANDLE;

struct ptr_CServerOnlyPointEntity_to_handle : bp::to_python_converter<CServerOnlyPointEntity *, ptr_CServerOnlyPointEntity_to_handle>
{
    static PyObject* convert(CServerOnlyPointEntity *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CServerOnlyPointEntity_to_handle : bp::to_python_converter<CServerOnlyPointEntity, CServerOnlyPointEntity_to_handle>
{
    static PyObject* convert(const CServerOnlyPointEntity &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CServerOnlyPointEntity
{
    handle_to_CServerOnlyPointEntity()
    {
        bp::converter::registry::insert(
            &extract_CServerOnlyPointEntity, 
            bp::type_id<CServerOnlyPointEntity>()
            );
    }

    static void* extract_CServerOnlyPointEntity(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< CLogicalEntity > CLogicalEntityHANDLE;

struct ptr_CLogicalEntity_to_handle : bp::to_python_converter<CLogicalEntity *, ptr_CLogicalEntity_to_handle>
{
    static PyObject* convert(CLogicalEntity *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CLogicalEntity_to_handle : bp::to_python_converter<CLogicalEntity, CLogicalEntity_to_handle>
{
    static PyObject* convert(const CLogicalEntity &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CLogicalEntity
{
    handle_to_CLogicalEntity()
    {
        bp::converter::registry::insert(
            &extract_CLogicalEntity, 
            bp::type_id<CLogicalEntity>()
            );
    }

    static void* extract_CLogicalEntity(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< CFuncBrush > CFuncBrushHANDLE;

struct ptr_CFuncBrush_to_handle : bp::to_python_converter<CFuncBrush *, ptr_CFuncBrush_to_handle>
{
    static PyObject* convert(CFuncBrush *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CFuncBrush_to_handle : bp::to_python_converter<CFuncBrush, CFuncBrush_to_handle>
{
    static PyObject* convert(const CFuncBrush &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CFuncBrush
{
    handle_to_CFuncBrush()
    {
        bp::converter::registry::insert(
            &extract_CFuncBrush, 
            bp::type_id<CFuncBrush>()
            );
    }

    static void* extract_CFuncBrush(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< CBaseToggle > CBaseToggleHANDLE;

struct ptr_CBaseToggle_to_handle : bp::to_python_converter<CBaseToggle *, ptr_CBaseToggle_to_handle>
{
    static PyObject* convert(CBaseToggle *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBaseToggle_to_handle : bp::to_python_converter<CBaseToggle, CBaseToggle_to_handle>
{
    static PyObject* convert(const CBaseToggle &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBaseToggle
{
    handle_to_CBaseToggle()
    {
        bp::converter::registry::insert(
            &extract_CBaseToggle, 
            bp::type_id<CBaseToggle>()
            );
    }

    static void* extract_CBaseToggle(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< CBaseTrigger > CBaseTriggerHANDLE;

struct ptr_CBaseTrigger_to_handle : bp::to_python_converter<CBaseTrigger *, ptr_CBaseTrigger_to_handle>
{
    static PyObject* convert(CBaseTrigger *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBaseTrigger_to_handle : bp::to_python_converter<CBaseTrigger, CBaseTrigger_to_handle>
{
    static PyObject* convert(const CBaseTrigger &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBaseTrigger
{
    handle_to_CBaseTrigger()
    {
        bp::converter::registry::insert(
            &extract_CBaseTrigger, 
            bp::type_id<CBaseTrigger>()
            );
    }

    static void* extract_CBaseTrigger(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< CTriggerMultiple > CTriggerMultipleHANDLE;

struct ptr_CTriggerMultiple_to_handle : bp::to_python_converter<CTriggerMultiple *, ptr_CTriggerMultiple_to_handle>
{
    static PyObject* convert(CTriggerMultiple *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CTriggerMultiple_to_handle : bp::to_python_converter<CTriggerMultiple, CTriggerMultiple_to_handle>
{
    static PyObject* convert(const CTriggerMultiple &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CTriggerMultiple
{
    handle_to_CTriggerMultiple()
    {
        bp::converter::registry::insert(
            &extract_CTriggerMultiple, 
            bp::type_id<CTriggerMultiple>()
            );
    }

    static void* extract_CTriggerMultiple(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< CBaseFilter > CBaseFilterHANDLE;

struct ptr_CBaseFilter_to_handle : bp::to_python_converter<CBaseFilter *, ptr_CBaseFilter_to_handle>
{
    static PyObject* convert(CBaseFilter *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBaseFilter_to_handle : bp::to_python_converter<CBaseFilter, CBaseFilter_to_handle>
{
    static PyObject* convert(const CBaseFilter &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBaseFilter
{
    handle_to_CBaseFilter()
    {
        bp::converter::registry::insert(
            &extract_CBaseFilter, 
            bp::type_id<CBaseFilter>()
            );
    }

    static void* extract_CBaseFilter(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< CGib > CGibHANDLE;

struct ptr_CGib_to_handle : bp::to_python_converter<CGib *, ptr_CGib_to_handle>
{
    static PyObject* convert(CGib *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CGib_to_handle : bp::to_python_converter<CGib, CGib_to_handle>
{
    static PyObject* convert(const CGib &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CGib
{
    handle_to_CGib()
    {
        bp::converter::registry::insert(
            &extract_CGib, 
            bp::type_id<CGib>()
            );
    }

    static void* extract_CGib(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< CBaseProp > CBasePropHANDLE;

struct ptr_CBaseProp_to_handle : bp::to_python_converter<CBaseProp *, ptr_CBaseProp_to_handle>
{
    static PyObject* convert(CBaseProp *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBaseProp_to_handle : bp::to_python_converter<CBaseProp, CBaseProp_to_handle>
{
    static PyObject* convert(const CBaseProp &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBaseProp
{
    handle_to_CBaseProp()
    {
        bp::converter::registry::insert(
            &extract_CBaseProp, 
            bp::type_id<CBaseProp>()
            );
    }

    static void* extract_CBaseProp(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< CBreakableProp > CBreakablePropHANDLE;

struct ptr_CBreakableProp_to_handle : bp::to_python_converter<CBreakableProp *, ptr_CBreakableProp_to_handle>
{
    static PyObject* convert(CBreakableProp *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CBreakableProp_to_handle : bp::to_python_converter<CBreakableProp, CBreakableProp_to_handle>
{
    static PyObject* convert(const CBreakableProp &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CBreakableProp
{
    handle_to_CBreakableProp()
    {
        bp::converter::registry::insert(
            &extract_CBreakableProp, 
            bp::type_id<CBreakableProp>()
            );
    }

    static void* extract_CBreakableProp(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< CPhysicsProp > CPhysicsPropHANDLE;

struct ptr_CPhysicsProp_to_handle : bp::to_python_converter<CPhysicsProp *, ptr_CPhysicsProp_to_handle>
{
    static PyObject* convert(CPhysicsProp *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CPhysicsProp_to_handle : bp::to_python_converter<CPhysicsProp, CPhysicsProp_to_handle>
{
    static PyObject* convert(const CPhysicsProp &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CPhysicsProp
{
    handle_to_CPhysicsProp()
    {
        bp::converter::registry::insert(
            &extract_CPhysicsProp, 
            bp::type_id<CPhysicsProp>()
            );
    }

    static void* extract_CPhysicsProp(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< CRagdollProp > CRagdollPropHANDLE;

struct ptr_CRagdollProp_to_handle : bp::to_python_converter<CRagdollProp *, ptr_CRagdollProp_to_handle>
{
    static PyObject* convert(CRagdollProp *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CRagdollProp_to_handle : bp::to_python_converter<CRagdollProp, CRagdollProp_to_handle>
{
    static PyObject* convert(const CRagdollProp &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CRagdollProp
{
    handle_to_CRagdollProp()
    {
        bp::converter::registry::insert(
            &extract_CRagdollProp, 
            bp::type_id<CRagdollProp>()
            );
    }

    static void* extract_CRagdollProp(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< CEntityFlame > CEntityFlameHANDLE;

struct ptr_CEntityFlame_to_handle : bp::to_python_converter<CEntityFlame *, ptr_CEntityFlame_to_handle>
{
    static PyObject* convert(CEntityFlame *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct CEntityFlame_to_handle : bp::to_python_converter<CEntityFlame, CEntityFlame_to_handle>
{
    static PyObject* convert(const CEntityFlame &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_CEntityFlame
{
    handle_to_CEntityFlame()
    {
        bp::converter::registry::insert(
            &extract_CEntityFlame, 
            bp::type_id<CEntityFlame>()
            );
    }

    static void* extract_CEntityFlame(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

BOOST_PYTHON_MODULE(_entities){
    _entities_register_enumerations();

    bp::docstring_options doc_options( true, true, false );

    register_IHandleEntity_class();

    register_IServerUnknown_class();

    register_IServerEntity_class();

    register_CBaseEntity_class();

    register_CBaseAnimating_class();

    register_CBaseAnimatingOverlay_class();

    register_CBaseFlex_class();

    register_CBaseCombatCharacter_class();

    register_CBaseCombatWeapon_class();

    register_CServerOnlyEntity_class();

    register_CLogicalEntity_class();

    register_CBaseFilter_class();

    register_CBaseProjectile_class();

    register_CBaseGrenade_class();

    register_CBaseHandle_class();

    register_CBasePlayer_class();

    register_CBaseProp_class();

    register_CBaseToggle_class();

    register_CBaseTrigger_class();

    register_CBreakableProp_class();

    register_CEntityFlame_class();

    register_CFuncBrush_class();

    register_CGib_class();

    register_CPhysicsProp_class();

    register_CPlayerResource_class();

    register_CPointEntity_class();

    register_CRagdollProp_class();

    register_CServerOnlyPointEntity_class();

    register_CSoundEnt_class();

    register_CTriggerMultiple_class();

    register_DeadEntity_class();

    register_PyHandle_class();

    handle_to_IHandleEntity();

    { //::CBaseEntityHANDLE
            typedef bp::class_< CBaseEntityHANDLE, bp::bases< CBaseHandle > > CBaseEntityHANDLE_exposer_t;
            CBaseEntityHANDLE_exposer_t CBaseEntityHANDLE_exposer = CBaseEntityHANDLE_exposer_t( "CBaseEntityHANDLE", bp::init< >() );
            CBaseEntityHANDLE_exposer.def( bp::init< CBaseEntity * >(( bp::arg("pVal") )) );
            CBaseEntityHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::CBaseEntityHANDLE::GetAttr
            
                typedef bp::object ( ::CBaseEntityHANDLE::*GetAttr_function_type )( const char * ) const;
                
                CBaseEntityHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::CBaseEntityHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::CBaseEntityHANDLE::Cmp
            
                typedef bool ( ::CBaseEntityHANDLE::*Cmp_function_type )( bp::object ) const;
                
                CBaseEntityHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::CBaseEntityHANDLE::Cmp )
                );
            
            }
            { //::CBaseEntityHANDLE::NonZero
            
                typedef bool ( ::CBaseEntityHANDLE::*NonZero_function_type )( ) const;
                
                CBaseEntityHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::CBaseEntityHANDLE::NonZero )
                );
            }
    #else
            { //::CBaseEntityHANDLE::Bool
            
                typedef bool ( ::CBaseEntityHANDLE::*Bool_function_type )( ) const;
                
                CBaseEntityHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::CBaseEntityHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::CBaseEntityHANDLE::Hash
            
                typedef Py_hash_t ( ::CBaseEntityHANDLE::*Hash_function_type )( ) const;
                
                CBaseEntityHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::CBaseEntityHANDLE::Hash )
                );
            }
            { //::CBaseEntityHANDLE::Set
            
                typedef void ( ::CBaseEntityHANDLE::*Set_function_type )( CBaseEntity * ) const;
                
                CBaseEntityHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::CBaseEntityHANDLE::Set )
                );
            
            }
            { //::CBaseEntityHANDLE::GetSerialNumber
            
                typedef int ( ::CBaseEntityHANDLE::*GetSerialNumber_function_type )( ) const;
                
                CBaseEntityHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::CBaseEntityHANDLE::GetSerialNumber )
                );
            
            }
            { //::CBaseEntityHANDLE::GetEntryIndex
            
                typedef int ( ::CBaseEntityHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                CBaseEntityHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::CBaseEntityHANDLE::GetEntryIndex )
                );
            
            }
            CBaseEntityHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            CBaseEntityHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_CBaseEntity_to_handle();

    CBaseEntity_to_handle();

    handle_to_CBaseEntity();

    { //::CBaseAnimatingHANDLE
            typedef bp::class_< CBaseAnimatingHANDLE, bp::bases< CBaseHandle > > CBaseAnimatingHANDLE_exposer_t;
            CBaseAnimatingHANDLE_exposer_t CBaseAnimatingHANDLE_exposer = CBaseAnimatingHANDLE_exposer_t( "CBaseAnimatingHANDLE", bp::init< >() );
            CBaseAnimatingHANDLE_exposer.def( bp::init< CBaseAnimating * >(( bp::arg("pVal") )) );
            CBaseAnimatingHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::CBaseAnimatingHANDLE::GetAttr
            
                typedef bp::object ( ::CBaseAnimatingHANDLE::*GetAttr_function_type )( const char * ) const;
                
                CBaseAnimatingHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::CBaseAnimatingHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::CBaseAnimatingHANDLE::Cmp
            
                typedef bool ( ::CBaseAnimatingHANDLE::*Cmp_function_type )( bp::object ) const;
                
                CBaseAnimatingHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::CBaseAnimatingHANDLE::Cmp )
                );
            
            }
            { //::CBaseAnimatingHANDLE::NonZero
            
                typedef bool ( ::CBaseAnimatingHANDLE::*NonZero_function_type )( ) const;
                
                CBaseAnimatingHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::CBaseAnimatingHANDLE::NonZero )
                );
            }
    #else
            { //::CBaseAnimatingHANDLE::Bool
            
                typedef bool ( ::CBaseAnimatingHANDLE::*Bool_function_type )( ) const;
                
                CBaseAnimatingHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::CBaseAnimatingHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::CBaseAnimatingHANDLE::Hash
            
                typedef Py_hash_t ( ::CBaseAnimatingHANDLE::*Hash_function_type )( ) const;
                
                CBaseAnimatingHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::CBaseAnimatingHANDLE::Hash )
                );
            }
            { //::CBaseAnimatingHANDLE::Set
            
                typedef void ( ::CBaseAnimatingHANDLE::*Set_function_type )( CBaseAnimating * ) const;
                
                CBaseAnimatingHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::CBaseAnimatingHANDLE::Set )
                );
            
            }
            { //::CBaseAnimatingHANDLE::GetSerialNumber
            
                typedef int ( ::CBaseAnimatingHANDLE::*GetSerialNumber_function_type )( ) const;
                
                CBaseAnimatingHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::CBaseAnimatingHANDLE::GetSerialNumber )
                );
            
            }
            { //::CBaseAnimatingHANDLE::GetEntryIndex
            
                typedef int ( ::CBaseAnimatingHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                CBaseAnimatingHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::CBaseAnimatingHANDLE::GetEntryIndex )
                );
            
            }
            CBaseAnimatingHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            CBaseAnimatingHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_CBaseAnimating_to_handle();

    CBaseAnimating_to_handle();

    handle_to_CBaseAnimating();

    { //::CBaseAnimatingOverlayHANDLE
            typedef bp::class_< CBaseAnimatingOverlayHANDLE, bp::bases< CBaseHandle > > CBaseAnimatingOverlayHANDLE_exposer_t;
            CBaseAnimatingOverlayHANDLE_exposer_t CBaseAnimatingOverlayHANDLE_exposer = CBaseAnimatingOverlayHANDLE_exposer_t( "CBaseAnimatingOverlayHANDLE", bp::init< >() );
            CBaseAnimatingOverlayHANDLE_exposer.def( bp::init< CBaseAnimatingOverlay * >(( bp::arg("pVal") )) );
            CBaseAnimatingOverlayHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::CBaseAnimatingOverlayHANDLE::GetAttr
            
                typedef bp::object ( ::CBaseAnimatingOverlayHANDLE::*GetAttr_function_type )( const char * ) const;
                
                CBaseAnimatingOverlayHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::CBaseAnimatingOverlayHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::CBaseAnimatingOverlayHANDLE::Cmp
            
                typedef bool ( ::CBaseAnimatingOverlayHANDLE::*Cmp_function_type )( bp::object ) const;
                
                CBaseAnimatingOverlayHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::CBaseAnimatingOverlayHANDLE::Cmp )
                );
            
            }
            { //::CBaseAnimatingOverlayHANDLE::NonZero
            
                typedef bool ( ::CBaseAnimatingOverlayHANDLE::*NonZero_function_type )( ) const;
                
                CBaseAnimatingOverlayHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::CBaseAnimatingOverlayHANDLE::NonZero )
                );
            }
    #else
            { //::CBaseAnimatingOverlayHANDLE::Bool
            
                typedef bool ( ::CBaseAnimatingOverlayHANDLE::*Bool_function_type )( ) const;
                
                CBaseAnimatingOverlayHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::CBaseAnimatingOverlayHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::CBaseAnimatingOverlayHANDLE::Hash
            
                typedef Py_hash_t ( ::CBaseAnimatingOverlayHANDLE::*Hash_function_type )( ) const;
                
                CBaseAnimatingOverlayHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::CBaseAnimatingOverlayHANDLE::Hash )
                );
            }
            { //::CBaseAnimatingOverlayHANDLE::Set
            
                typedef void ( ::CBaseAnimatingOverlayHANDLE::*Set_function_type )( CBaseAnimatingOverlay * ) const;
                
                CBaseAnimatingOverlayHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::CBaseAnimatingOverlayHANDLE::Set )
                );
            
            }
            { //::CBaseAnimatingOverlayHANDLE::GetSerialNumber
            
                typedef int ( ::CBaseAnimatingOverlayHANDLE::*GetSerialNumber_function_type )( ) const;
                
                CBaseAnimatingOverlayHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::CBaseAnimatingOverlayHANDLE::GetSerialNumber )
                );
            
            }
            { //::CBaseAnimatingOverlayHANDLE::GetEntryIndex
            
                typedef int ( ::CBaseAnimatingOverlayHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                CBaseAnimatingOverlayHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::CBaseAnimatingOverlayHANDLE::GetEntryIndex )
                );
            
            }
            CBaseAnimatingOverlayHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            CBaseAnimatingOverlayHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_CBaseAnimatingOverlay_to_handle();

    CBaseAnimatingOverlay_to_handle();

    handle_to_CBaseAnimatingOverlay();

    { //::CBaseFlexHANDLE
            typedef bp::class_< CBaseFlexHANDLE, bp::bases< CBaseHandle > > CBaseFlexHANDLE_exposer_t;
            CBaseFlexHANDLE_exposer_t CBaseFlexHANDLE_exposer = CBaseFlexHANDLE_exposer_t( "CBaseFlexHANDLE", bp::init< >() );
            CBaseFlexHANDLE_exposer.def( bp::init< CBaseFlex * >(( bp::arg("pVal") )) );
            CBaseFlexHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::CBaseFlexHANDLE::GetAttr
            
                typedef bp::object ( ::CBaseFlexHANDLE::*GetAttr_function_type )( const char * ) const;
                
                CBaseFlexHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::CBaseFlexHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::CBaseFlexHANDLE::Cmp
            
                typedef bool ( ::CBaseFlexHANDLE::*Cmp_function_type )( bp::object ) const;
                
                CBaseFlexHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::CBaseFlexHANDLE::Cmp )
                );
            
            }
            { //::CBaseFlexHANDLE::NonZero
            
                typedef bool ( ::CBaseFlexHANDLE::*NonZero_function_type )( ) const;
                
                CBaseFlexHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::CBaseFlexHANDLE::NonZero )
                );
            }
    #else
            { //::CBaseFlexHANDLE::Bool
            
                typedef bool ( ::CBaseFlexHANDLE::*Bool_function_type )( ) const;
                
                CBaseFlexHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::CBaseFlexHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::CBaseFlexHANDLE::Hash
            
                typedef Py_hash_t ( ::CBaseFlexHANDLE::*Hash_function_type )( ) const;
                
                CBaseFlexHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::CBaseFlexHANDLE::Hash )
                );
            }
            { //::CBaseFlexHANDLE::Set
            
                typedef void ( ::CBaseFlexHANDLE::*Set_function_type )( CBaseFlex * ) const;
                
                CBaseFlexHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::CBaseFlexHANDLE::Set )
                );
            
            }
            { //::CBaseFlexHANDLE::GetSerialNumber
            
                typedef int ( ::CBaseFlexHANDLE::*GetSerialNumber_function_type )( ) const;
                
                CBaseFlexHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::CBaseFlexHANDLE::GetSerialNumber )
                );
            
            }
            { //::CBaseFlexHANDLE::GetEntryIndex
            
                typedef int ( ::CBaseFlexHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                CBaseFlexHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::CBaseFlexHANDLE::GetEntryIndex )
                );
            
            }
            CBaseFlexHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            CBaseFlexHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_CBaseFlex_to_handle();

    CBaseFlex_to_handle();

    handle_to_CBaseFlex();

    { //::CBaseCombatCharacterHANDLE
            typedef bp::class_< CBaseCombatCharacterHANDLE, bp::bases< CBaseHandle > > CBaseCombatCharacterHANDLE_exposer_t;
            CBaseCombatCharacterHANDLE_exposer_t CBaseCombatCharacterHANDLE_exposer = CBaseCombatCharacterHANDLE_exposer_t( "CBaseCombatCharacterHANDLE", bp::init< >() );
            CBaseCombatCharacterHANDLE_exposer.def( bp::init< CBaseCombatCharacter * >(( bp::arg("pVal") )) );
            CBaseCombatCharacterHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::CBaseCombatCharacterHANDLE::GetAttr
            
                typedef bp::object ( ::CBaseCombatCharacterHANDLE::*GetAttr_function_type )( const char * ) const;
                
                CBaseCombatCharacterHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::CBaseCombatCharacterHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::CBaseCombatCharacterHANDLE::Cmp
            
                typedef bool ( ::CBaseCombatCharacterHANDLE::*Cmp_function_type )( bp::object ) const;
                
                CBaseCombatCharacterHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::CBaseCombatCharacterHANDLE::Cmp )
                );
            
            }
            { //::CBaseCombatCharacterHANDLE::NonZero
            
                typedef bool ( ::CBaseCombatCharacterHANDLE::*NonZero_function_type )( ) const;
                
                CBaseCombatCharacterHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::CBaseCombatCharacterHANDLE::NonZero )
                );
            }
    #else
            { //::CBaseCombatCharacterHANDLE::Bool
            
                typedef bool ( ::CBaseCombatCharacterHANDLE::*Bool_function_type )( ) const;
                
                CBaseCombatCharacterHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::CBaseCombatCharacterHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::CBaseCombatCharacterHANDLE::Hash
            
                typedef Py_hash_t ( ::CBaseCombatCharacterHANDLE::*Hash_function_type )( ) const;
                
                CBaseCombatCharacterHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::CBaseCombatCharacterHANDLE::Hash )
                );
            }
            { //::CBaseCombatCharacterHANDLE::Set
            
                typedef void ( ::CBaseCombatCharacterHANDLE::*Set_function_type )( CBaseCombatCharacter * ) const;
                
                CBaseCombatCharacterHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::CBaseCombatCharacterHANDLE::Set )
                );
            
            }
            { //::CBaseCombatCharacterHANDLE::GetSerialNumber
            
                typedef int ( ::CBaseCombatCharacterHANDLE::*GetSerialNumber_function_type )( ) const;
                
                CBaseCombatCharacterHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::CBaseCombatCharacterHANDLE::GetSerialNumber )
                );
            
            }
            { //::CBaseCombatCharacterHANDLE::GetEntryIndex
            
                typedef int ( ::CBaseCombatCharacterHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                CBaseCombatCharacterHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::CBaseCombatCharacterHANDLE::GetEntryIndex )
                );
            
            }
            CBaseCombatCharacterHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            CBaseCombatCharacterHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_CBaseCombatCharacter_to_handle();

    CBaseCombatCharacter_to_handle();

    handle_to_CBaseCombatCharacter();

    { //::CBaseCombatWeaponHANDLE
            typedef bp::class_< CBaseCombatWeaponHANDLE, bp::bases< CBaseHandle > > CBaseCombatWeaponHANDLE_exposer_t;
            CBaseCombatWeaponHANDLE_exposer_t CBaseCombatWeaponHANDLE_exposer = CBaseCombatWeaponHANDLE_exposer_t( "CBaseCombatWeaponHANDLE", bp::init< >() );
            CBaseCombatWeaponHANDLE_exposer.def( bp::init< CBaseCombatWeapon * >(( bp::arg("pVal") )) );
            CBaseCombatWeaponHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::CBaseCombatWeaponHANDLE::GetAttr
            
                typedef bp::object ( ::CBaseCombatWeaponHANDLE::*GetAttr_function_type )( const char * ) const;
                
                CBaseCombatWeaponHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::CBaseCombatWeaponHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::CBaseCombatWeaponHANDLE::Cmp
            
                typedef bool ( ::CBaseCombatWeaponHANDLE::*Cmp_function_type )( bp::object ) const;
                
                CBaseCombatWeaponHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::CBaseCombatWeaponHANDLE::Cmp )
                );
            
            }
            { //::CBaseCombatWeaponHANDLE::NonZero
            
                typedef bool ( ::CBaseCombatWeaponHANDLE::*NonZero_function_type )( ) const;
                
                CBaseCombatWeaponHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::CBaseCombatWeaponHANDLE::NonZero )
                );
            }
    #else
            { //::CBaseCombatWeaponHANDLE::Bool
            
                typedef bool ( ::CBaseCombatWeaponHANDLE::*Bool_function_type )( ) const;
                
                CBaseCombatWeaponHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::CBaseCombatWeaponHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::CBaseCombatWeaponHANDLE::Hash
            
                typedef Py_hash_t ( ::CBaseCombatWeaponHANDLE::*Hash_function_type )( ) const;
                
                CBaseCombatWeaponHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::CBaseCombatWeaponHANDLE::Hash )
                );
            }
            { //::CBaseCombatWeaponHANDLE::Set
            
                typedef void ( ::CBaseCombatWeaponHANDLE::*Set_function_type )( CBaseCombatWeapon * ) const;
                
                CBaseCombatWeaponHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::CBaseCombatWeaponHANDLE::Set )
                );
            
            }
            { //::CBaseCombatWeaponHANDLE::GetSerialNumber
            
                typedef int ( ::CBaseCombatWeaponHANDLE::*GetSerialNumber_function_type )( ) const;
                
                CBaseCombatWeaponHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::CBaseCombatWeaponHANDLE::GetSerialNumber )
                );
            
            }
            { //::CBaseCombatWeaponHANDLE::GetEntryIndex
            
                typedef int ( ::CBaseCombatWeaponHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                CBaseCombatWeaponHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::CBaseCombatWeaponHANDLE::GetEntryIndex )
                );
            
            }
            CBaseCombatWeaponHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            CBaseCombatWeaponHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_CBaseCombatWeapon_to_handle();

    CBaseCombatWeapon_to_handle();

    handle_to_CBaseCombatWeapon();

    { //::CBaseProjectileHANDLE
            typedef bp::class_< CBaseProjectileHANDLE, bp::bases< CBaseHandle > > CBaseProjectileHANDLE_exposer_t;
            CBaseProjectileHANDLE_exposer_t CBaseProjectileHANDLE_exposer = CBaseProjectileHANDLE_exposer_t( "CBaseProjectileHANDLE", bp::init< >() );
            CBaseProjectileHANDLE_exposer.def( bp::init< CBaseProjectile * >(( bp::arg("pVal") )) );
            CBaseProjectileHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::CBaseProjectileHANDLE::GetAttr
            
                typedef bp::object ( ::CBaseProjectileHANDLE::*GetAttr_function_type )( const char * ) const;
                
                CBaseProjectileHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::CBaseProjectileHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::CBaseProjectileHANDLE::Cmp
            
                typedef bool ( ::CBaseProjectileHANDLE::*Cmp_function_type )( bp::object ) const;
                
                CBaseProjectileHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::CBaseProjectileHANDLE::Cmp )
                );
            
            }
            { //::CBaseProjectileHANDLE::NonZero
            
                typedef bool ( ::CBaseProjectileHANDLE::*NonZero_function_type )( ) const;
                
                CBaseProjectileHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::CBaseProjectileHANDLE::NonZero )
                );
            }
    #else
            { //::CBaseProjectileHANDLE::Bool
            
                typedef bool ( ::CBaseProjectileHANDLE::*Bool_function_type )( ) const;
                
                CBaseProjectileHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::CBaseProjectileHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::CBaseProjectileHANDLE::Hash
            
                typedef Py_hash_t ( ::CBaseProjectileHANDLE::*Hash_function_type )( ) const;
                
                CBaseProjectileHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::CBaseProjectileHANDLE::Hash )
                );
            }
            { //::CBaseProjectileHANDLE::Set
            
                typedef void ( ::CBaseProjectileHANDLE::*Set_function_type )( CBaseProjectile * ) const;
                
                CBaseProjectileHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::CBaseProjectileHANDLE::Set )
                );
            
            }
            { //::CBaseProjectileHANDLE::GetSerialNumber
            
                typedef int ( ::CBaseProjectileHANDLE::*GetSerialNumber_function_type )( ) const;
                
                CBaseProjectileHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::CBaseProjectileHANDLE::GetSerialNumber )
                );
            
            }
            { //::CBaseProjectileHANDLE::GetEntryIndex
            
                typedef int ( ::CBaseProjectileHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                CBaseProjectileHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::CBaseProjectileHANDLE::GetEntryIndex )
                );
            
            }
            CBaseProjectileHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            CBaseProjectileHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_CBaseProjectile_to_handle();

    CBaseProjectile_to_handle();

    handle_to_CBaseProjectile();

    { //::CBaseGrenadeHANDLE
            typedef bp::class_< CBaseGrenadeHANDLE, bp::bases< CBaseHandle > > CBaseGrenadeHANDLE_exposer_t;
            CBaseGrenadeHANDLE_exposer_t CBaseGrenadeHANDLE_exposer = CBaseGrenadeHANDLE_exposer_t( "CBaseGrenadeHANDLE", bp::init< >() );
            CBaseGrenadeHANDLE_exposer.def( bp::init< CBaseGrenade * >(( bp::arg("pVal") )) );
            CBaseGrenadeHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::CBaseGrenadeHANDLE::GetAttr
            
                typedef bp::object ( ::CBaseGrenadeHANDLE::*GetAttr_function_type )( const char * ) const;
                
                CBaseGrenadeHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::CBaseGrenadeHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::CBaseGrenadeHANDLE::Cmp
            
                typedef bool ( ::CBaseGrenadeHANDLE::*Cmp_function_type )( bp::object ) const;
                
                CBaseGrenadeHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::CBaseGrenadeHANDLE::Cmp )
                );
            
            }
            { //::CBaseGrenadeHANDLE::NonZero
            
                typedef bool ( ::CBaseGrenadeHANDLE::*NonZero_function_type )( ) const;
                
                CBaseGrenadeHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::CBaseGrenadeHANDLE::NonZero )
                );
            }
    #else
            { //::CBaseGrenadeHANDLE::Bool
            
                typedef bool ( ::CBaseGrenadeHANDLE::*Bool_function_type )( ) const;
                
                CBaseGrenadeHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::CBaseGrenadeHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::CBaseGrenadeHANDLE::Hash
            
                typedef Py_hash_t ( ::CBaseGrenadeHANDLE::*Hash_function_type )( ) const;
                
                CBaseGrenadeHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::CBaseGrenadeHANDLE::Hash )
                );
            }
            { //::CBaseGrenadeHANDLE::Set
            
                typedef void ( ::CBaseGrenadeHANDLE::*Set_function_type )( CBaseGrenade * ) const;
                
                CBaseGrenadeHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::CBaseGrenadeHANDLE::Set )
                );
            
            }
            { //::CBaseGrenadeHANDLE::GetSerialNumber
            
                typedef int ( ::CBaseGrenadeHANDLE::*GetSerialNumber_function_type )( ) const;
                
                CBaseGrenadeHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::CBaseGrenadeHANDLE::GetSerialNumber )
                );
            
            }
            { //::CBaseGrenadeHANDLE::GetEntryIndex
            
                typedef int ( ::CBaseGrenadeHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                CBaseGrenadeHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::CBaseGrenadeHANDLE::GetEntryIndex )
                );
            
            }
            CBaseGrenadeHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            CBaseGrenadeHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_CBaseGrenade_to_handle();

    CBaseGrenade_to_handle();

    handle_to_CBaseGrenade();

    { //::CBasePlayerHANDLE
            typedef bp::class_< CBasePlayerHANDLE, bp::bases< CBaseHandle > > CBasePlayerHANDLE_exposer_t;
            CBasePlayerHANDLE_exposer_t CBasePlayerHANDLE_exposer = CBasePlayerHANDLE_exposer_t( "CBasePlayerHANDLE", bp::init< >() );
            CBasePlayerHANDLE_exposer.def( bp::init< CBasePlayer * >(( bp::arg("pVal") )) );
            CBasePlayerHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::CBasePlayerHANDLE::GetAttr
            
                typedef bp::object ( ::CBasePlayerHANDLE::*GetAttr_function_type )( const char * ) const;
                
                CBasePlayerHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::CBasePlayerHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::CBasePlayerHANDLE::Cmp
            
                typedef bool ( ::CBasePlayerHANDLE::*Cmp_function_type )( bp::object ) const;
                
                CBasePlayerHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::CBasePlayerHANDLE::Cmp )
                );
            
            }
            { //::CBasePlayerHANDLE::NonZero
            
                typedef bool ( ::CBasePlayerHANDLE::*NonZero_function_type )( ) const;
                
                CBasePlayerHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::CBasePlayerHANDLE::NonZero )
                );
            }
    #else
            { //::CBasePlayerHANDLE::Bool
            
                typedef bool ( ::CBasePlayerHANDLE::*Bool_function_type )( ) const;
                
                CBasePlayerHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::CBasePlayerHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::CBasePlayerHANDLE::Hash
            
                typedef Py_hash_t ( ::CBasePlayerHANDLE::*Hash_function_type )( ) const;
                
                CBasePlayerHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::CBasePlayerHANDLE::Hash )
                );
            }
            { //::CBasePlayerHANDLE::Set
            
                typedef void ( ::CBasePlayerHANDLE::*Set_function_type )( CBasePlayer * ) const;
                
                CBasePlayerHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::CBasePlayerHANDLE::Set )
                );
            
            }
            { //::CBasePlayerHANDLE::GetSerialNumber
            
                typedef int ( ::CBasePlayerHANDLE::*GetSerialNumber_function_type )( ) const;
                
                CBasePlayerHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::CBasePlayerHANDLE::GetSerialNumber )
                );
            
            }
            { //::CBasePlayerHANDLE::GetEntryIndex
            
                typedef int ( ::CBasePlayerHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                CBasePlayerHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::CBasePlayerHANDLE::GetEntryIndex )
                );
            
            }
            CBasePlayerHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            CBasePlayerHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_CBasePlayer_to_handle();

    CBasePlayer_to_handle();

    handle_to_CBasePlayer();

    { //::CPlayerResourceHANDLE
            typedef bp::class_< CPlayerResourceHANDLE, bp::bases< CBaseHandle > > CPlayerResourceHANDLE_exposer_t;
            CPlayerResourceHANDLE_exposer_t CPlayerResourceHANDLE_exposer = CPlayerResourceHANDLE_exposer_t( "CPlayerResourceHANDLE", bp::init< >() );
            CPlayerResourceHANDLE_exposer.def( bp::init< CPlayerResource * >(( bp::arg("pVal") )) );
            CPlayerResourceHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::CPlayerResourceHANDLE::GetAttr
            
                typedef bp::object ( ::CPlayerResourceHANDLE::*GetAttr_function_type )( const char * ) const;
                
                CPlayerResourceHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::CPlayerResourceHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::CPlayerResourceHANDLE::Cmp
            
                typedef bool ( ::CPlayerResourceHANDLE::*Cmp_function_type )( bp::object ) const;
                
                CPlayerResourceHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::CPlayerResourceHANDLE::Cmp )
                );
            
            }
            { //::CPlayerResourceHANDLE::NonZero
            
                typedef bool ( ::CPlayerResourceHANDLE::*NonZero_function_type )( ) const;
                
                CPlayerResourceHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::CPlayerResourceHANDLE::NonZero )
                );
            }
    #else
            { //::CPlayerResourceHANDLE::Bool
            
                typedef bool ( ::CPlayerResourceHANDLE::*Bool_function_type )( ) const;
                
                CPlayerResourceHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::CPlayerResourceHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::CPlayerResourceHANDLE::Hash
            
                typedef Py_hash_t ( ::CPlayerResourceHANDLE::*Hash_function_type )( ) const;
                
                CPlayerResourceHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::CPlayerResourceHANDLE::Hash )
                );
            }
            { //::CPlayerResourceHANDLE::Set
            
                typedef void ( ::CPlayerResourceHANDLE::*Set_function_type )( CPlayerResource * ) const;
                
                CPlayerResourceHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::CPlayerResourceHANDLE::Set )
                );
            
            }
            { //::CPlayerResourceHANDLE::GetSerialNumber
            
                typedef int ( ::CPlayerResourceHANDLE::*GetSerialNumber_function_type )( ) const;
                
                CPlayerResourceHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::CPlayerResourceHANDLE::GetSerialNumber )
                );
            
            }
            { //::CPlayerResourceHANDLE::GetEntryIndex
            
                typedef int ( ::CPlayerResourceHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                CPlayerResourceHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::CPlayerResourceHANDLE::GetEntryIndex )
                );
            
            }
            CPlayerResourceHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            CPlayerResourceHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_CPlayerResource_to_handle();

    CPlayerResource_to_handle();

    handle_to_CPlayerResource();

    { //::CPointEntityHANDLE
            typedef bp::class_< CPointEntityHANDLE, bp::bases< CBaseHandle > > CPointEntityHANDLE_exposer_t;
            CPointEntityHANDLE_exposer_t CPointEntityHANDLE_exposer = CPointEntityHANDLE_exposer_t( "CPointEntityHANDLE", bp::init< >() );
            CPointEntityHANDLE_exposer.def( bp::init< CPointEntity * >(( bp::arg("pVal") )) );
            CPointEntityHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::CPointEntityHANDLE::GetAttr
            
                typedef bp::object ( ::CPointEntityHANDLE::*GetAttr_function_type )( const char * ) const;
                
                CPointEntityHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::CPointEntityHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::CPointEntityHANDLE::Cmp
            
                typedef bool ( ::CPointEntityHANDLE::*Cmp_function_type )( bp::object ) const;
                
                CPointEntityHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::CPointEntityHANDLE::Cmp )
                );
            
            }
            { //::CPointEntityHANDLE::NonZero
            
                typedef bool ( ::CPointEntityHANDLE::*NonZero_function_type )( ) const;
                
                CPointEntityHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::CPointEntityHANDLE::NonZero )
                );
            }
    #else
            { //::CPointEntityHANDLE::Bool
            
                typedef bool ( ::CPointEntityHANDLE::*Bool_function_type )( ) const;
                
                CPointEntityHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::CPointEntityHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::CPointEntityHANDLE::Hash
            
                typedef Py_hash_t ( ::CPointEntityHANDLE::*Hash_function_type )( ) const;
                
                CPointEntityHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::CPointEntityHANDLE::Hash )
                );
            }
            { //::CPointEntityHANDLE::Set
            
                typedef void ( ::CPointEntityHANDLE::*Set_function_type )( CPointEntity * ) const;
                
                CPointEntityHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::CPointEntityHANDLE::Set )
                );
            
            }
            { //::CPointEntityHANDLE::GetSerialNumber
            
                typedef int ( ::CPointEntityHANDLE::*GetSerialNumber_function_type )( ) const;
                
                CPointEntityHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::CPointEntityHANDLE::GetSerialNumber )
                );
            
            }
            { //::CPointEntityHANDLE::GetEntryIndex
            
                typedef int ( ::CPointEntityHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                CPointEntityHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::CPointEntityHANDLE::GetEntryIndex )
                );
            
            }
            CPointEntityHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            CPointEntityHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_CPointEntity_to_handle();

    CPointEntity_to_handle();

    handle_to_CPointEntity();

    { //::CServerOnlyEntityHANDLE
            typedef bp::class_< CServerOnlyEntityHANDLE, bp::bases< CBaseHandle > > CServerOnlyEntityHANDLE_exposer_t;
            CServerOnlyEntityHANDLE_exposer_t CServerOnlyEntityHANDLE_exposer = CServerOnlyEntityHANDLE_exposer_t( "CServerOnlyEntityHANDLE", bp::init< >() );
            CServerOnlyEntityHANDLE_exposer.def( bp::init< CServerOnlyEntity * >(( bp::arg("pVal") )) );
            CServerOnlyEntityHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::CServerOnlyEntityHANDLE::GetAttr
            
                typedef bp::object ( ::CServerOnlyEntityHANDLE::*GetAttr_function_type )( const char * ) const;
                
                CServerOnlyEntityHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::CServerOnlyEntityHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::CServerOnlyEntityHANDLE::Cmp
            
                typedef bool ( ::CServerOnlyEntityHANDLE::*Cmp_function_type )( bp::object ) const;
                
                CServerOnlyEntityHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::CServerOnlyEntityHANDLE::Cmp )
                );
            
            }
            { //::CServerOnlyEntityHANDLE::NonZero
            
                typedef bool ( ::CServerOnlyEntityHANDLE::*NonZero_function_type )( ) const;
                
                CServerOnlyEntityHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::CServerOnlyEntityHANDLE::NonZero )
                );
            }
    #else
            { //::CServerOnlyEntityHANDLE::Bool
            
                typedef bool ( ::CServerOnlyEntityHANDLE::*Bool_function_type )( ) const;
                
                CServerOnlyEntityHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::CServerOnlyEntityHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::CServerOnlyEntityHANDLE::Hash
            
                typedef Py_hash_t ( ::CServerOnlyEntityHANDLE::*Hash_function_type )( ) const;
                
                CServerOnlyEntityHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::CServerOnlyEntityHANDLE::Hash )
                );
            }
            { //::CServerOnlyEntityHANDLE::Set
            
                typedef void ( ::CServerOnlyEntityHANDLE::*Set_function_type )( CServerOnlyEntity * ) const;
                
                CServerOnlyEntityHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::CServerOnlyEntityHANDLE::Set )
                );
            
            }
            { //::CServerOnlyEntityHANDLE::GetSerialNumber
            
                typedef int ( ::CServerOnlyEntityHANDLE::*GetSerialNumber_function_type )( ) const;
                
                CServerOnlyEntityHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::CServerOnlyEntityHANDLE::GetSerialNumber )
                );
            
            }
            { //::CServerOnlyEntityHANDLE::GetEntryIndex
            
                typedef int ( ::CServerOnlyEntityHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                CServerOnlyEntityHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::CServerOnlyEntityHANDLE::GetEntryIndex )
                );
            
            }
            CServerOnlyEntityHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            CServerOnlyEntityHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_CServerOnlyEntity_to_handle();

    CServerOnlyEntity_to_handle();

    handle_to_CServerOnlyEntity();

    { //::CServerOnlyPointEntityHANDLE
            typedef bp::class_< CServerOnlyPointEntityHANDLE, bp::bases< CBaseHandle > > CServerOnlyPointEntityHANDLE_exposer_t;
            CServerOnlyPointEntityHANDLE_exposer_t CServerOnlyPointEntityHANDLE_exposer = CServerOnlyPointEntityHANDLE_exposer_t( "CServerOnlyPointEntityHANDLE", bp::init< >() );
            CServerOnlyPointEntityHANDLE_exposer.def( bp::init< CServerOnlyPointEntity * >(( bp::arg("pVal") )) );
            CServerOnlyPointEntityHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::CServerOnlyPointEntityHANDLE::GetAttr
            
                typedef bp::object ( ::CServerOnlyPointEntityHANDLE::*GetAttr_function_type )( const char * ) const;
                
                CServerOnlyPointEntityHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::CServerOnlyPointEntityHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::CServerOnlyPointEntityHANDLE::Cmp
            
                typedef bool ( ::CServerOnlyPointEntityHANDLE::*Cmp_function_type )( bp::object ) const;
                
                CServerOnlyPointEntityHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::CServerOnlyPointEntityHANDLE::Cmp )
                );
            
            }
            { //::CServerOnlyPointEntityHANDLE::NonZero
            
                typedef bool ( ::CServerOnlyPointEntityHANDLE::*NonZero_function_type )( ) const;
                
                CServerOnlyPointEntityHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::CServerOnlyPointEntityHANDLE::NonZero )
                );
            }
    #else
            { //::CServerOnlyPointEntityHANDLE::Bool
            
                typedef bool ( ::CServerOnlyPointEntityHANDLE::*Bool_function_type )( ) const;
                
                CServerOnlyPointEntityHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::CServerOnlyPointEntityHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::CServerOnlyPointEntityHANDLE::Hash
            
                typedef Py_hash_t ( ::CServerOnlyPointEntityHANDLE::*Hash_function_type )( ) const;
                
                CServerOnlyPointEntityHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::CServerOnlyPointEntityHANDLE::Hash )
                );
            }
            { //::CServerOnlyPointEntityHANDLE::Set
            
                typedef void ( ::CServerOnlyPointEntityHANDLE::*Set_function_type )( CServerOnlyPointEntity * ) const;
                
                CServerOnlyPointEntityHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::CServerOnlyPointEntityHANDLE::Set )
                );
            
            }
            { //::CServerOnlyPointEntityHANDLE::GetSerialNumber
            
                typedef int ( ::CServerOnlyPointEntityHANDLE::*GetSerialNumber_function_type )( ) const;
                
                CServerOnlyPointEntityHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::CServerOnlyPointEntityHANDLE::GetSerialNumber )
                );
            
            }
            { //::CServerOnlyPointEntityHANDLE::GetEntryIndex
            
                typedef int ( ::CServerOnlyPointEntityHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                CServerOnlyPointEntityHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::CServerOnlyPointEntityHANDLE::GetEntryIndex )
                );
            
            }
            CServerOnlyPointEntityHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            CServerOnlyPointEntityHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_CServerOnlyPointEntity_to_handle();

    CServerOnlyPointEntity_to_handle();

    handle_to_CServerOnlyPointEntity();

    { //::CLogicalEntityHANDLE
            typedef bp::class_< CLogicalEntityHANDLE, bp::bases< CBaseHandle > > CLogicalEntityHANDLE_exposer_t;
            CLogicalEntityHANDLE_exposer_t CLogicalEntityHANDLE_exposer = CLogicalEntityHANDLE_exposer_t( "CLogicalEntityHANDLE", bp::init< >() );
            CLogicalEntityHANDLE_exposer.def( bp::init< CLogicalEntity * >(( bp::arg("pVal") )) );
            CLogicalEntityHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::CLogicalEntityHANDLE::GetAttr
            
                typedef bp::object ( ::CLogicalEntityHANDLE::*GetAttr_function_type )( const char * ) const;
                
                CLogicalEntityHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::CLogicalEntityHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::CLogicalEntityHANDLE::Cmp
            
                typedef bool ( ::CLogicalEntityHANDLE::*Cmp_function_type )( bp::object ) const;
                
                CLogicalEntityHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::CLogicalEntityHANDLE::Cmp )
                );
            
            }
            { //::CLogicalEntityHANDLE::NonZero
            
                typedef bool ( ::CLogicalEntityHANDLE::*NonZero_function_type )( ) const;
                
                CLogicalEntityHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::CLogicalEntityHANDLE::NonZero )
                );
            }
    #else
            { //::CLogicalEntityHANDLE::Bool
            
                typedef bool ( ::CLogicalEntityHANDLE::*Bool_function_type )( ) const;
                
                CLogicalEntityHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::CLogicalEntityHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::CLogicalEntityHANDLE::Hash
            
                typedef Py_hash_t ( ::CLogicalEntityHANDLE::*Hash_function_type )( ) const;
                
                CLogicalEntityHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::CLogicalEntityHANDLE::Hash )
                );
            }
            { //::CLogicalEntityHANDLE::Set
            
                typedef void ( ::CLogicalEntityHANDLE::*Set_function_type )( CLogicalEntity * ) const;
                
                CLogicalEntityHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::CLogicalEntityHANDLE::Set )
                );
            
            }
            { //::CLogicalEntityHANDLE::GetSerialNumber
            
                typedef int ( ::CLogicalEntityHANDLE::*GetSerialNumber_function_type )( ) const;
                
                CLogicalEntityHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::CLogicalEntityHANDLE::GetSerialNumber )
                );
            
            }
            { //::CLogicalEntityHANDLE::GetEntryIndex
            
                typedef int ( ::CLogicalEntityHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                CLogicalEntityHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::CLogicalEntityHANDLE::GetEntryIndex )
                );
            
            }
            CLogicalEntityHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            CLogicalEntityHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_CLogicalEntity_to_handle();

    CLogicalEntity_to_handle();

    handle_to_CLogicalEntity();

    { //::CFuncBrushHANDLE
            typedef bp::class_< CFuncBrushHANDLE, bp::bases< CBaseHandle > > CFuncBrushHANDLE_exposer_t;
            CFuncBrushHANDLE_exposer_t CFuncBrushHANDLE_exposer = CFuncBrushHANDLE_exposer_t( "CFuncBrushHANDLE", bp::init< >() );
            CFuncBrushHANDLE_exposer.def( bp::init< CFuncBrush * >(( bp::arg("pVal") )) );
            CFuncBrushHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::CFuncBrushHANDLE::GetAttr
            
                typedef bp::object ( ::CFuncBrushHANDLE::*GetAttr_function_type )( const char * ) const;
                
                CFuncBrushHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::CFuncBrushHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::CFuncBrushHANDLE::Cmp
            
                typedef bool ( ::CFuncBrushHANDLE::*Cmp_function_type )( bp::object ) const;
                
                CFuncBrushHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::CFuncBrushHANDLE::Cmp )
                );
            
            }
            { //::CFuncBrushHANDLE::NonZero
            
                typedef bool ( ::CFuncBrushHANDLE::*NonZero_function_type )( ) const;
                
                CFuncBrushHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::CFuncBrushHANDLE::NonZero )
                );
            }
    #else
            { //::CFuncBrushHANDLE::Bool
            
                typedef bool ( ::CFuncBrushHANDLE::*Bool_function_type )( ) const;
                
                CFuncBrushHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::CFuncBrushHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::CFuncBrushHANDLE::Hash
            
                typedef Py_hash_t ( ::CFuncBrushHANDLE::*Hash_function_type )( ) const;
                
                CFuncBrushHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::CFuncBrushHANDLE::Hash )
                );
            }
            { //::CFuncBrushHANDLE::Set
            
                typedef void ( ::CFuncBrushHANDLE::*Set_function_type )( CFuncBrush * ) const;
                
                CFuncBrushHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::CFuncBrushHANDLE::Set )
                );
            
            }
            { //::CFuncBrushHANDLE::GetSerialNumber
            
                typedef int ( ::CFuncBrushHANDLE::*GetSerialNumber_function_type )( ) const;
                
                CFuncBrushHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::CFuncBrushHANDLE::GetSerialNumber )
                );
            
            }
            { //::CFuncBrushHANDLE::GetEntryIndex
            
                typedef int ( ::CFuncBrushHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                CFuncBrushHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::CFuncBrushHANDLE::GetEntryIndex )
                );
            
            }
            CFuncBrushHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            CFuncBrushHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_CFuncBrush_to_handle();

    CFuncBrush_to_handle();

    handle_to_CFuncBrush();

    { //::CBaseToggleHANDLE
            typedef bp::class_< CBaseToggleHANDLE, bp::bases< CBaseHandle > > CBaseToggleHANDLE_exposer_t;
            CBaseToggleHANDLE_exposer_t CBaseToggleHANDLE_exposer = CBaseToggleHANDLE_exposer_t( "CBaseToggleHANDLE", bp::init< >() );
            CBaseToggleHANDLE_exposer.def( bp::init< CBaseToggle * >(( bp::arg("pVal") )) );
            CBaseToggleHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::CBaseToggleHANDLE::GetAttr
            
                typedef bp::object ( ::CBaseToggleHANDLE::*GetAttr_function_type )( const char * ) const;
                
                CBaseToggleHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::CBaseToggleHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::CBaseToggleHANDLE::Cmp
            
                typedef bool ( ::CBaseToggleHANDLE::*Cmp_function_type )( bp::object ) const;
                
                CBaseToggleHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::CBaseToggleHANDLE::Cmp )
                );
            
            }
            { //::CBaseToggleHANDLE::NonZero
            
                typedef bool ( ::CBaseToggleHANDLE::*NonZero_function_type )( ) const;
                
                CBaseToggleHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::CBaseToggleHANDLE::NonZero )
                );
            }
    #else
            { //::CBaseToggleHANDLE::Bool
            
                typedef bool ( ::CBaseToggleHANDLE::*Bool_function_type )( ) const;
                
                CBaseToggleHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::CBaseToggleHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::CBaseToggleHANDLE::Hash
            
                typedef Py_hash_t ( ::CBaseToggleHANDLE::*Hash_function_type )( ) const;
                
                CBaseToggleHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::CBaseToggleHANDLE::Hash )
                );
            }
            { //::CBaseToggleHANDLE::Set
            
                typedef void ( ::CBaseToggleHANDLE::*Set_function_type )( CBaseToggle * ) const;
                
                CBaseToggleHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::CBaseToggleHANDLE::Set )
                );
            
            }
            { //::CBaseToggleHANDLE::GetSerialNumber
            
                typedef int ( ::CBaseToggleHANDLE::*GetSerialNumber_function_type )( ) const;
                
                CBaseToggleHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::CBaseToggleHANDLE::GetSerialNumber )
                );
            
            }
            { //::CBaseToggleHANDLE::GetEntryIndex
            
                typedef int ( ::CBaseToggleHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                CBaseToggleHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::CBaseToggleHANDLE::GetEntryIndex )
                );
            
            }
            CBaseToggleHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            CBaseToggleHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_CBaseToggle_to_handle();

    CBaseToggle_to_handle();

    handle_to_CBaseToggle();

    { //::CBaseTriggerHANDLE
            typedef bp::class_< CBaseTriggerHANDLE, bp::bases< CBaseHandle > > CBaseTriggerHANDLE_exposer_t;
            CBaseTriggerHANDLE_exposer_t CBaseTriggerHANDLE_exposer = CBaseTriggerHANDLE_exposer_t( "CBaseTriggerHANDLE", bp::init< >() );
            CBaseTriggerHANDLE_exposer.def( bp::init< CBaseTrigger * >(( bp::arg("pVal") )) );
            CBaseTriggerHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::CBaseTriggerHANDLE::GetAttr
            
                typedef bp::object ( ::CBaseTriggerHANDLE::*GetAttr_function_type )( const char * ) const;
                
                CBaseTriggerHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::CBaseTriggerHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::CBaseTriggerHANDLE::Cmp
            
                typedef bool ( ::CBaseTriggerHANDLE::*Cmp_function_type )( bp::object ) const;
                
                CBaseTriggerHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::CBaseTriggerHANDLE::Cmp )
                );
            
            }
            { //::CBaseTriggerHANDLE::NonZero
            
                typedef bool ( ::CBaseTriggerHANDLE::*NonZero_function_type )( ) const;
                
                CBaseTriggerHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::CBaseTriggerHANDLE::NonZero )
                );
            }
    #else
            { //::CBaseTriggerHANDLE::Bool
            
                typedef bool ( ::CBaseTriggerHANDLE::*Bool_function_type )( ) const;
                
                CBaseTriggerHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::CBaseTriggerHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::CBaseTriggerHANDLE::Hash
            
                typedef Py_hash_t ( ::CBaseTriggerHANDLE::*Hash_function_type )( ) const;
                
                CBaseTriggerHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::CBaseTriggerHANDLE::Hash )
                );
            }
            { //::CBaseTriggerHANDLE::Set
            
                typedef void ( ::CBaseTriggerHANDLE::*Set_function_type )( CBaseTrigger * ) const;
                
                CBaseTriggerHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::CBaseTriggerHANDLE::Set )
                );
            
            }
            { //::CBaseTriggerHANDLE::GetSerialNumber
            
                typedef int ( ::CBaseTriggerHANDLE::*GetSerialNumber_function_type )( ) const;
                
                CBaseTriggerHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::CBaseTriggerHANDLE::GetSerialNumber )
                );
            
            }
            { //::CBaseTriggerHANDLE::GetEntryIndex
            
                typedef int ( ::CBaseTriggerHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                CBaseTriggerHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::CBaseTriggerHANDLE::GetEntryIndex )
                );
            
            }
            CBaseTriggerHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            CBaseTriggerHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_CBaseTrigger_to_handle();

    CBaseTrigger_to_handle();

    handle_to_CBaseTrigger();

    { //::CTriggerMultipleHANDLE
            typedef bp::class_< CTriggerMultipleHANDLE, bp::bases< CBaseHandle > > CTriggerMultipleHANDLE_exposer_t;
            CTriggerMultipleHANDLE_exposer_t CTriggerMultipleHANDLE_exposer = CTriggerMultipleHANDLE_exposer_t( "CTriggerMultipleHANDLE", bp::init< >() );
            CTriggerMultipleHANDLE_exposer.def( bp::init< CTriggerMultiple * >(( bp::arg("pVal") )) );
            CTriggerMultipleHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::CTriggerMultipleHANDLE::GetAttr
            
                typedef bp::object ( ::CTriggerMultipleHANDLE::*GetAttr_function_type )( const char * ) const;
                
                CTriggerMultipleHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::CTriggerMultipleHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::CTriggerMultipleHANDLE::Cmp
            
                typedef bool ( ::CTriggerMultipleHANDLE::*Cmp_function_type )( bp::object ) const;
                
                CTriggerMultipleHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::CTriggerMultipleHANDLE::Cmp )
                );
            
            }
            { //::CTriggerMultipleHANDLE::NonZero
            
                typedef bool ( ::CTriggerMultipleHANDLE::*NonZero_function_type )( ) const;
                
                CTriggerMultipleHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::CTriggerMultipleHANDLE::NonZero )
                );
            }
    #else
            { //::CTriggerMultipleHANDLE::Bool
            
                typedef bool ( ::CTriggerMultipleHANDLE::*Bool_function_type )( ) const;
                
                CTriggerMultipleHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::CTriggerMultipleHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::CTriggerMultipleHANDLE::Hash
            
                typedef Py_hash_t ( ::CTriggerMultipleHANDLE::*Hash_function_type )( ) const;
                
                CTriggerMultipleHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::CTriggerMultipleHANDLE::Hash )
                );
            }
            { //::CTriggerMultipleHANDLE::Set
            
                typedef void ( ::CTriggerMultipleHANDLE::*Set_function_type )( CTriggerMultiple * ) const;
                
                CTriggerMultipleHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::CTriggerMultipleHANDLE::Set )
                );
            
            }
            { //::CTriggerMultipleHANDLE::GetSerialNumber
            
                typedef int ( ::CTriggerMultipleHANDLE::*GetSerialNumber_function_type )( ) const;
                
                CTriggerMultipleHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::CTriggerMultipleHANDLE::GetSerialNumber )
                );
            
            }
            { //::CTriggerMultipleHANDLE::GetEntryIndex
            
                typedef int ( ::CTriggerMultipleHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                CTriggerMultipleHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::CTriggerMultipleHANDLE::GetEntryIndex )
                );
            
            }
            CTriggerMultipleHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            CTriggerMultipleHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_CTriggerMultiple_to_handle();

    CTriggerMultiple_to_handle();

    handle_to_CTriggerMultiple();

    { //::CBaseFilterHANDLE
            typedef bp::class_< CBaseFilterHANDLE, bp::bases< CBaseHandle > > CBaseFilterHANDLE_exposer_t;
            CBaseFilterHANDLE_exposer_t CBaseFilterHANDLE_exposer = CBaseFilterHANDLE_exposer_t( "CBaseFilterHANDLE", bp::init< >() );
            CBaseFilterHANDLE_exposer.def( bp::init< CBaseFilter * >(( bp::arg("pVal") )) );
            CBaseFilterHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::CBaseFilterHANDLE::GetAttr
            
                typedef bp::object ( ::CBaseFilterHANDLE::*GetAttr_function_type )( const char * ) const;
                
                CBaseFilterHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::CBaseFilterHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::CBaseFilterHANDLE::Cmp
            
                typedef bool ( ::CBaseFilterHANDLE::*Cmp_function_type )( bp::object ) const;
                
                CBaseFilterHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::CBaseFilterHANDLE::Cmp )
                );
            
            }
            { //::CBaseFilterHANDLE::NonZero
            
                typedef bool ( ::CBaseFilterHANDLE::*NonZero_function_type )( ) const;
                
                CBaseFilterHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::CBaseFilterHANDLE::NonZero )
                );
            }
    #else
            { //::CBaseFilterHANDLE::Bool
            
                typedef bool ( ::CBaseFilterHANDLE::*Bool_function_type )( ) const;
                
                CBaseFilterHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::CBaseFilterHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::CBaseFilterHANDLE::Hash
            
                typedef Py_hash_t ( ::CBaseFilterHANDLE::*Hash_function_type )( ) const;
                
                CBaseFilterHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::CBaseFilterHANDLE::Hash )
                );
            }
            { //::CBaseFilterHANDLE::Set
            
                typedef void ( ::CBaseFilterHANDLE::*Set_function_type )( CBaseFilter * ) const;
                
                CBaseFilterHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::CBaseFilterHANDLE::Set )
                );
            
            }
            { //::CBaseFilterHANDLE::GetSerialNumber
            
                typedef int ( ::CBaseFilterHANDLE::*GetSerialNumber_function_type )( ) const;
                
                CBaseFilterHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::CBaseFilterHANDLE::GetSerialNumber )
                );
            
            }
            { //::CBaseFilterHANDLE::GetEntryIndex
            
                typedef int ( ::CBaseFilterHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                CBaseFilterHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::CBaseFilterHANDLE::GetEntryIndex )
                );
            
            }
            CBaseFilterHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            CBaseFilterHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_CBaseFilter_to_handle();

    CBaseFilter_to_handle();

    handle_to_CBaseFilter();

    { //::CGibHANDLE
            typedef bp::class_< CGibHANDLE, bp::bases< CBaseHandle > > CGibHANDLE_exposer_t;
            CGibHANDLE_exposer_t CGibHANDLE_exposer = CGibHANDLE_exposer_t( "CGibHANDLE", bp::init< >() );
            CGibHANDLE_exposer.def( bp::init< CGib * >(( bp::arg("pVal") )) );
            CGibHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::CGibHANDLE::GetAttr
            
                typedef bp::object ( ::CGibHANDLE::*GetAttr_function_type )( const char * ) const;
                
                CGibHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::CGibHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::CGibHANDLE::Cmp
            
                typedef bool ( ::CGibHANDLE::*Cmp_function_type )( bp::object ) const;
                
                CGibHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::CGibHANDLE::Cmp )
                );
            
            }
            { //::CGibHANDLE::NonZero
            
                typedef bool ( ::CGibHANDLE::*NonZero_function_type )( ) const;
                
                CGibHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::CGibHANDLE::NonZero )
                );
            }
    #else
            { //::CGibHANDLE::Bool
            
                typedef bool ( ::CGibHANDLE::*Bool_function_type )( ) const;
                
                CGibHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::CGibHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::CGibHANDLE::Hash
            
                typedef Py_hash_t ( ::CGibHANDLE::*Hash_function_type )( ) const;
                
                CGibHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::CGibHANDLE::Hash )
                );
            }
            { //::CGibHANDLE::Set
            
                typedef void ( ::CGibHANDLE::*Set_function_type )( CGib * ) const;
                
                CGibHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::CGibHANDLE::Set )
                );
            
            }
            { //::CGibHANDLE::GetSerialNumber
            
                typedef int ( ::CGibHANDLE::*GetSerialNumber_function_type )( ) const;
                
                CGibHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::CGibHANDLE::GetSerialNumber )
                );
            
            }
            { //::CGibHANDLE::GetEntryIndex
            
                typedef int ( ::CGibHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                CGibHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::CGibHANDLE::GetEntryIndex )
                );
            
            }
            CGibHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            CGibHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_CGib_to_handle();

    CGib_to_handle();

    handle_to_CGib();

    { //::CBasePropHANDLE
            typedef bp::class_< CBasePropHANDLE, bp::bases< CBaseHandle > > CBasePropHANDLE_exposer_t;
            CBasePropHANDLE_exposer_t CBasePropHANDLE_exposer = CBasePropHANDLE_exposer_t( "CBasePropHANDLE", bp::init< >() );
            CBasePropHANDLE_exposer.def( bp::init< CBaseProp * >(( bp::arg("pVal") )) );
            CBasePropHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::CBasePropHANDLE::GetAttr
            
                typedef bp::object ( ::CBasePropHANDLE::*GetAttr_function_type )( const char * ) const;
                
                CBasePropHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::CBasePropHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::CBasePropHANDLE::Cmp
            
                typedef bool ( ::CBasePropHANDLE::*Cmp_function_type )( bp::object ) const;
                
                CBasePropHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::CBasePropHANDLE::Cmp )
                );
            
            }
            { //::CBasePropHANDLE::NonZero
            
                typedef bool ( ::CBasePropHANDLE::*NonZero_function_type )( ) const;
                
                CBasePropHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::CBasePropHANDLE::NonZero )
                );
            }
    #else
            { //::CBasePropHANDLE::Bool
            
                typedef bool ( ::CBasePropHANDLE::*Bool_function_type )( ) const;
                
                CBasePropHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::CBasePropHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::CBasePropHANDLE::Hash
            
                typedef Py_hash_t ( ::CBasePropHANDLE::*Hash_function_type )( ) const;
                
                CBasePropHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::CBasePropHANDLE::Hash )
                );
            }
            { //::CBasePropHANDLE::Set
            
                typedef void ( ::CBasePropHANDLE::*Set_function_type )( CBaseProp * ) const;
                
                CBasePropHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::CBasePropHANDLE::Set )
                );
            
            }
            { //::CBasePropHANDLE::GetSerialNumber
            
                typedef int ( ::CBasePropHANDLE::*GetSerialNumber_function_type )( ) const;
                
                CBasePropHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::CBasePropHANDLE::GetSerialNumber )
                );
            
            }
            { //::CBasePropHANDLE::GetEntryIndex
            
                typedef int ( ::CBasePropHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                CBasePropHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::CBasePropHANDLE::GetEntryIndex )
                );
            
            }
            CBasePropHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            CBasePropHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_CBaseProp_to_handle();

    CBaseProp_to_handle();

    handle_to_CBaseProp();

    { //::CBreakablePropHANDLE
            typedef bp::class_< CBreakablePropHANDLE, bp::bases< CBaseHandle > > CBreakablePropHANDLE_exposer_t;
            CBreakablePropHANDLE_exposer_t CBreakablePropHANDLE_exposer = CBreakablePropHANDLE_exposer_t( "CBreakablePropHANDLE", bp::init< >() );
            CBreakablePropHANDLE_exposer.def( bp::init< CBreakableProp * >(( bp::arg("pVal") )) );
            CBreakablePropHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::CBreakablePropHANDLE::GetAttr
            
                typedef bp::object ( ::CBreakablePropHANDLE::*GetAttr_function_type )( const char * ) const;
                
                CBreakablePropHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::CBreakablePropHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::CBreakablePropHANDLE::Cmp
            
                typedef bool ( ::CBreakablePropHANDLE::*Cmp_function_type )( bp::object ) const;
                
                CBreakablePropHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::CBreakablePropHANDLE::Cmp )
                );
            
            }
            { //::CBreakablePropHANDLE::NonZero
            
                typedef bool ( ::CBreakablePropHANDLE::*NonZero_function_type )( ) const;
                
                CBreakablePropHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::CBreakablePropHANDLE::NonZero )
                );
            }
    #else
            { //::CBreakablePropHANDLE::Bool
            
                typedef bool ( ::CBreakablePropHANDLE::*Bool_function_type )( ) const;
                
                CBreakablePropHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::CBreakablePropHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::CBreakablePropHANDLE::Hash
            
                typedef Py_hash_t ( ::CBreakablePropHANDLE::*Hash_function_type )( ) const;
                
                CBreakablePropHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::CBreakablePropHANDLE::Hash )
                );
            }
            { //::CBreakablePropHANDLE::Set
            
                typedef void ( ::CBreakablePropHANDLE::*Set_function_type )( CBreakableProp * ) const;
                
                CBreakablePropHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::CBreakablePropHANDLE::Set )
                );
            
            }
            { //::CBreakablePropHANDLE::GetSerialNumber
            
                typedef int ( ::CBreakablePropHANDLE::*GetSerialNumber_function_type )( ) const;
                
                CBreakablePropHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::CBreakablePropHANDLE::GetSerialNumber )
                );
            
            }
            { //::CBreakablePropHANDLE::GetEntryIndex
            
                typedef int ( ::CBreakablePropHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                CBreakablePropHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::CBreakablePropHANDLE::GetEntryIndex )
                );
            
            }
            CBreakablePropHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            CBreakablePropHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_CBreakableProp_to_handle();

    CBreakableProp_to_handle();

    handle_to_CBreakableProp();

    { //::CPhysicsPropHANDLE
            typedef bp::class_< CPhysicsPropHANDLE, bp::bases< CBaseHandle > > CPhysicsPropHANDLE_exposer_t;
            CPhysicsPropHANDLE_exposer_t CPhysicsPropHANDLE_exposer = CPhysicsPropHANDLE_exposer_t( "CPhysicsPropHANDLE", bp::init< >() );
            CPhysicsPropHANDLE_exposer.def( bp::init< CPhysicsProp * >(( bp::arg("pVal") )) );
            CPhysicsPropHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::CPhysicsPropHANDLE::GetAttr
            
                typedef bp::object ( ::CPhysicsPropHANDLE::*GetAttr_function_type )( const char * ) const;
                
                CPhysicsPropHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::CPhysicsPropHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::CPhysicsPropHANDLE::Cmp
            
                typedef bool ( ::CPhysicsPropHANDLE::*Cmp_function_type )( bp::object ) const;
                
                CPhysicsPropHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::CPhysicsPropHANDLE::Cmp )
                );
            
            }
            { //::CPhysicsPropHANDLE::NonZero
            
                typedef bool ( ::CPhysicsPropHANDLE::*NonZero_function_type )( ) const;
                
                CPhysicsPropHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::CPhysicsPropHANDLE::NonZero )
                );
            }
    #else
            { //::CPhysicsPropHANDLE::Bool
            
                typedef bool ( ::CPhysicsPropHANDLE::*Bool_function_type )( ) const;
                
                CPhysicsPropHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::CPhysicsPropHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::CPhysicsPropHANDLE::Hash
            
                typedef Py_hash_t ( ::CPhysicsPropHANDLE::*Hash_function_type )( ) const;
                
                CPhysicsPropHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::CPhysicsPropHANDLE::Hash )
                );
            }
            { //::CPhysicsPropHANDLE::Set
            
                typedef void ( ::CPhysicsPropHANDLE::*Set_function_type )( CPhysicsProp * ) const;
                
                CPhysicsPropHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::CPhysicsPropHANDLE::Set )
                );
            
            }
            { //::CPhysicsPropHANDLE::GetSerialNumber
            
                typedef int ( ::CPhysicsPropHANDLE::*GetSerialNumber_function_type )( ) const;
                
                CPhysicsPropHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::CPhysicsPropHANDLE::GetSerialNumber )
                );
            
            }
            { //::CPhysicsPropHANDLE::GetEntryIndex
            
                typedef int ( ::CPhysicsPropHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                CPhysicsPropHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::CPhysicsPropHANDLE::GetEntryIndex )
                );
            
            }
            CPhysicsPropHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            CPhysicsPropHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_CPhysicsProp_to_handle();

    CPhysicsProp_to_handle();

    handle_to_CPhysicsProp();

    { //::CRagdollPropHANDLE
            typedef bp::class_< CRagdollPropHANDLE, bp::bases< CBaseHandle > > CRagdollPropHANDLE_exposer_t;
            CRagdollPropHANDLE_exposer_t CRagdollPropHANDLE_exposer = CRagdollPropHANDLE_exposer_t( "CRagdollPropHANDLE", bp::init< >() );
            CRagdollPropHANDLE_exposer.def( bp::init< CRagdollProp * >(( bp::arg("pVal") )) );
            CRagdollPropHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::CRagdollPropHANDLE::GetAttr
            
                typedef bp::object ( ::CRagdollPropHANDLE::*GetAttr_function_type )( const char * ) const;
                
                CRagdollPropHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::CRagdollPropHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::CRagdollPropHANDLE::Cmp
            
                typedef bool ( ::CRagdollPropHANDLE::*Cmp_function_type )( bp::object ) const;
                
                CRagdollPropHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::CRagdollPropHANDLE::Cmp )
                );
            
            }
            { //::CRagdollPropHANDLE::NonZero
            
                typedef bool ( ::CRagdollPropHANDLE::*NonZero_function_type )( ) const;
                
                CRagdollPropHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::CRagdollPropHANDLE::NonZero )
                );
            }
    #else
            { //::CRagdollPropHANDLE::Bool
            
                typedef bool ( ::CRagdollPropHANDLE::*Bool_function_type )( ) const;
                
                CRagdollPropHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::CRagdollPropHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::CRagdollPropHANDLE::Hash
            
                typedef Py_hash_t ( ::CRagdollPropHANDLE::*Hash_function_type )( ) const;
                
                CRagdollPropHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::CRagdollPropHANDLE::Hash )
                );
            }
            { //::CRagdollPropHANDLE::Set
            
                typedef void ( ::CRagdollPropHANDLE::*Set_function_type )( CRagdollProp * ) const;
                
                CRagdollPropHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::CRagdollPropHANDLE::Set )
                );
            
            }
            { //::CRagdollPropHANDLE::GetSerialNumber
            
                typedef int ( ::CRagdollPropHANDLE::*GetSerialNumber_function_type )( ) const;
                
                CRagdollPropHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::CRagdollPropHANDLE::GetSerialNumber )
                );
            
            }
            { //::CRagdollPropHANDLE::GetEntryIndex
            
                typedef int ( ::CRagdollPropHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                CRagdollPropHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::CRagdollPropHANDLE::GetEntryIndex )
                );
            
            }
            CRagdollPropHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            CRagdollPropHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_CRagdollProp_to_handle();

    CRagdollProp_to_handle();

    handle_to_CRagdollProp();

    { //::CEntityFlameHANDLE
            typedef bp::class_< CEntityFlameHANDLE, bp::bases< CBaseHandle > > CEntityFlameHANDLE_exposer_t;
            CEntityFlameHANDLE_exposer_t CEntityFlameHANDLE_exposer = CEntityFlameHANDLE_exposer_t( "CEntityFlameHANDLE", bp::init< >() );
            CEntityFlameHANDLE_exposer.def( bp::init< CEntityFlame * >(( bp::arg("pVal") )) );
            CEntityFlameHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::CEntityFlameHANDLE::GetAttr
            
                typedef bp::object ( ::CEntityFlameHANDLE::*GetAttr_function_type )( const char * ) const;
                
                CEntityFlameHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::CEntityFlameHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::CEntityFlameHANDLE::Cmp
            
                typedef bool ( ::CEntityFlameHANDLE::*Cmp_function_type )( bp::object ) const;
                
                CEntityFlameHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::CEntityFlameHANDLE::Cmp )
                );
            
            }
            { //::CEntityFlameHANDLE::NonZero
            
                typedef bool ( ::CEntityFlameHANDLE::*NonZero_function_type )( ) const;
                
                CEntityFlameHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::CEntityFlameHANDLE::NonZero )
                );
            }
    #else
            { //::CEntityFlameHANDLE::Bool
            
                typedef bool ( ::CEntityFlameHANDLE::*Bool_function_type )( ) const;
                
                CEntityFlameHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::CEntityFlameHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::CEntityFlameHANDLE::Hash
            
                typedef Py_hash_t ( ::CEntityFlameHANDLE::*Hash_function_type )( ) const;
                
                CEntityFlameHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::CEntityFlameHANDLE::Hash )
                );
            }
            { //::CEntityFlameHANDLE::Set
            
                typedef void ( ::CEntityFlameHANDLE::*Set_function_type )( CEntityFlame * ) const;
                
                CEntityFlameHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::CEntityFlameHANDLE::Set )
                );
            
            }
            { //::CEntityFlameHANDLE::GetSerialNumber
            
                typedef int ( ::CEntityFlameHANDLE::*GetSerialNumber_function_type )( ) const;
                
                CEntityFlameHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::CEntityFlameHANDLE::GetSerialNumber )
                );
            
            }
            { //::CEntityFlameHANDLE::GetEntryIndex
            
                typedef int ( ::CEntityFlameHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                CEntityFlameHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::CEntityFlameHANDLE::GetEntryIndex )
                );
            
            }
            CEntityFlameHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            CEntityFlameHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_CEntityFlame_to_handle();

    CEntityFlame_to_handle();

    handle_to_CEntityFlame();

    bp::scope().attr( "SF_WALL_START_OFF" ) = (int)SF_WALL_START_OFF;

    bp::scope().attr( "SF_IGNORE_PLAYERUSE" ) = (int)SF_IGNORE_PLAYERUSE;

    _entities_register_free_functions();
}


