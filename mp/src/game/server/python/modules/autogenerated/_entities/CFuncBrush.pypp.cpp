// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "cbase.h"
#include "npcevent.h"
#include "srcpy_entities.h"
#include "bone_setup.h"
#include "baseprojectile.h"
#include "basegrenade_shared.h"
#include "SkyCamera.h"
#include "ai_basenpc.h"
#include "modelentities.h"
#include "basetoggle.h"
#include "triggers.h"
#include "AI_Criteria.h"
#include "saverestore.h"
#include "saverestoretypes.h"
#include "vcollide_parse.h"
#include "iservervehicle.h"
#include "gib.h"
#include "spark.h"
#include "filters.h"
#include "EntityFlame.h"
#include "player_resource.h"
#include "props.h"
#include "physics_prop_ragdoll.h"
#include "nav_area.h"
#include "tier0/valve_minmax_off.h"
#include "srcpy.h"
#include "tier0/valve_minmax_on.h"
#include "tier0/memdbgon.h"
#include "CFuncBrush.pypp.hpp"

namespace bp = boost::python;

struct CFuncBrush_wrapper : CFuncBrush, bp::wrapper< CFuncBrush > {

    CFuncBrush_wrapper()
    : CFuncBrush()
      , bp::wrapper< CFuncBrush >(){
        // null constructor
        
    }

    virtual bool CreateVPhysics(  ) {
        PY_OVERRIDE_CHECK( CFuncBrush, CreateVPhysics )
        PY_OVERRIDE_LOG( _entities, CFuncBrush, CreateVPhysics )
        bp::override func_CreateVPhysics = this->get_override( "CreateVPhysics" );
        if( func_CreateVPhysics.ptr() != Py_None )
            try {
                return func_CreateVPhysics(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CFuncBrush::CreateVPhysics(  );
            }
        else
            return this->CFuncBrush::CreateVPhysics(  );
    }
    
    bool default_CreateVPhysics(  ) {
        return CFuncBrush::CreateVPhysics( );
    }

    virtual int DrawDebugTextOverlays(  ) {
        PY_OVERRIDE_CHECK( CFuncBrush, DrawDebugTextOverlays )
        PY_OVERRIDE_LOG( _entities, CFuncBrush, DrawDebugTextOverlays )
        bp::override func_DrawDebugTextOverlays = this->get_override( "DrawDebugTextOverlays" );
        if( func_DrawDebugTextOverlays.ptr() != Py_None )
            try {
                return func_DrawDebugTextOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CFuncBrush::DrawDebugTextOverlays(  );
            }
        else
            return this->CFuncBrush::DrawDebugTextOverlays(  );
    }
    
    int default_DrawDebugTextOverlays(  ) {
        return CFuncBrush::DrawDebugTextOverlays( );
    }

    virtual void Spawn(  ) {
        PY_OVERRIDE_CHECK( CFuncBrush, Spawn )
        PY_OVERRIDE_LOG( _entities, CFuncBrush, Spawn )
        bp::override func_Spawn = this->get_override( "Spawn" );
        if( func_Spawn.ptr() != Py_None )
            try {
                func_Spawn(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CFuncBrush::Spawn(  );
            }
        else
            this->CFuncBrush::Spawn(  );
    }
    
    void default_Spawn(  ) {
        CFuncBrush::Spawn( );
    }

    virtual void Activate(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, Activate )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, Activate )
        bp::override func_Activate = this->get_override( "Activate" );
        if( func_Activate.ptr() != Py_None )
            try {
                func_Activate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::Activate(  );
            }
        else
            this->CBaseEntity::Activate(  );
    }
    
    void default_Activate(  ) {
        CBaseEntity::Activate( );
    }

    virtual void ComputeWorldSpaceSurroundingBox( ::Vector * pWorldMins, ::Vector * pWorldMaxs ) {
        PY_OVERRIDE_CHECK( CBaseEntity, ComputeWorldSpaceSurroundingBox )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, ComputeWorldSpaceSurroundingBox )
        bp::override func_ComputeWorldSpaceSurroundingBox = this->get_override( "ComputeWorldSpaceSurroundingBox" );
        if( func_ComputeWorldSpaceSurroundingBox.ptr() != Py_None )
            try {
                func_ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::ComputeWorldSpaceSurroundingBox( pWorldMins, pWorldMaxs );
            }
        else
            this->CBaseEntity::ComputeWorldSpaceSurroundingBox( pWorldMins, pWorldMaxs );
    }
    
    void default_ComputeWorldSpaceSurroundingBox( ::Vector * pWorldMins, ::Vector * pWorldMaxs ) {
        CBaseEntity::ComputeWorldSpaceSurroundingBox( pWorldMins, pWorldMaxs );
    }

    virtual void DeathNotice( ::CBaseEntity * pVictim ) {
        PY_OVERRIDE_CHECK( CBaseEntity, DeathNotice )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, DeathNotice )
        bp::override func_DeathNotice = this->get_override( "DeathNotice" );
        if( func_DeathNotice.ptr() != Py_None )
            try {
                func_DeathNotice( pVictim ? pVictim->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DeathNotice( pVictim );
            }
        else
            this->CBaseEntity::DeathNotice( pVictim );
    }
    
    void default_DeathNotice( ::CBaseEntity * pVictim ) {
        CBaseEntity::DeathNotice( pVictim );
    }

    virtual void DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        PY_OVERRIDE_CHECK( CBaseEntity, DoImpactEffect )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, DoImpactEffect )
        bp::override func_DoImpactEffect = this->get_override( "DoImpactEffect" );
        if( func_DoImpactEffect.ptr() != Py_None )
            try {
                func_DoImpactEffect( boost::ref(tr), nDamageType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DoImpactEffect( tr, nDamageType );
            }
        else
            this->CBaseEntity::DoImpactEffect( tr, nDamageType );
    }
    
    void default_DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        CBaseEntity::DoImpactEffect( tr, nDamageType );
    }

    virtual void DrawDebugGeometryOverlays(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, DrawDebugGeometryOverlays )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, DrawDebugGeometryOverlays )
        bp::override func_DrawDebugGeometryOverlays = this->get_override( "DrawDebugGeometryOverlays" );
        if( func_DrawDebugGeometryOverlays.ptr() != Py_None )
            try {
                func_DrawDebugGeometryOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DrawDebugGeometryOverlays(  );
            }
        else
            this->CBaseEntity::DrawDebugGeometryOverlays(  );
    }
    
    void default_DrawDebugGeometryOverlays(  ) {
        CBaseEntity::DrawDebugGeometryOverlays( );
    }

    virtual void EndTouch( ::CBaseEntity * pOther ) {
        PY_OVERRIDE_CHECK( CBaseEntity, EndTouch )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, EndTouch )
        bp::override func_EndTouch = this->get_override( "EndTouch" );
        if( func_EndTouch.ptr() != Py_None )
            try {
                func_EndTouch( pOther ? pOther->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::EndTouch( pOther );
            }
        else
            this->CBaseEntity::EndTouch( pOther );
    }
    
    void default_EndTouch( ::CBaseEntity * pOther ) {
        CBaseEntity::EndTouch( pOther );
    }

    virtual void Event_Killed( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseEntity, Event_Killed )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, Event_Killed )
        bp::override func_Event_Killed = this->get_override( "Event_Killed" );
        if( func_Event_Killed.ptr() != Py_None )
            try {
                func_Event_Killed( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::Event_Killed( info );
            }
        else
            this->CBaseEntity::Event_Killed( info );
    }
    
    void default_Event_Killed( ::CTakeDamageInfo const & info ) {
        CBaseEntity::Event_Killed( info );
    }

    virtual void Event_KilledOther( ::CBaseEntity * pVictim, ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseEntity, Event_KilledOther )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, Event_KilledOther )
        bp::override func_Event_KilledOther = this->get_override( "Event_KilledOther" );
        if( func_Event_KilledOther.ptr() != Py_None )
            try {
                func_Event_KilledOther( pVictim ? pVictim->GetPyHandle() : boost::python::object(), boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::Event_KilledOther( pVictim, info );
            }
        else
            this->CBaseEntity::Event_KilledOther( pVictim, info );
    }
    
    void default_Event_KilledOther( ::CBaseEntity * pVictim, ::CTakeDamageInfo const & info ) {
        CBaseEntity::Event_KilledOther( pVictim, info );
    }

    virtual char const * GetTracerType(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, GetTracerType )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, GetTracerType )
        bp::override func_GetTracerType = this->get_override( "GetTracerType" );
        if( func_GetTracerType.ptr() != Py_None )
            try {
                return func_GetTracerType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::GetTracerType(  );
            }
        else
            return this->CBaseEntity::GetTracerType(  );
    }
    
    char const * default_GetTracerType(  ) {
        return CBaseEntity::GetTracerType( );
    }

    virtual bool KeyValue( char const * szKeyName, char const * szValue ) {
        PY_OVERRIDE_CHECK( CBaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, szValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, szValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, szValue );
    }
    
    bool default_KeyValue( char const * szKeyName, char const * szValue ) {
        return CBaseEntity::KeyValue( szKeyName, szValue );
    }

    virtual bool KeyValue( char const * szKeyName, float flValue ) {
        PY_OVERRIDE_CHECK( CBaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, flValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, flValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, flValue );
    }
    
    bool default_KeyValue( char const * szKeyName, float flValue ) {
        return CBaseEntity::KeyValue( szKeyName, flValue );
    }

    virtual bool KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        PY_OVERRIDE_CHECK( CBaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, boost::ref(vecValue) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, vecValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, vecValue );
    }
    
    bool default_KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        return CBaseEntity::KeyValue( szKeyName, vecValue );
    }

    virtual void MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        PY_OVERRIDE_CHECK( CBaseEntity, MakeTracer )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, MakeTracer )
        bp::override func_MakeTracer = this->get_override( "MakeTracer" );
        if( func_MakeTracer.ptr() != Py_None )
            try {
                func_MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::MakeTracer( vecTracerSrc, tr, iTracerType );
            }
        else
            this->CBaseEntity::MakeTracer( vecTracerSrc, tr, iTracerType );
    }
    
    void default_MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        CBaseEntity::MakeTracer( vecTracerSrc, tr, iTracerType );
    }

    virtual void ModifyOrAppendCriteria( ::AI_CriteriaSet & set ) {
        PY_OVERRIDE_CHECK( CBaseEntity, ModifyOrAppendCriteria )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, ModifyOrAppendCriteria )
        bp::override func_ModifyOrAppendCriteria = this->get_override( "ModifyOrAppendCriteria" );
        if( func_ModifyOrAppendCriteria.ptr() != Py_None )
            try {
                func_ModifyOrAppendCriteria( boost::ref(set) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::ModifyOrAppendCriteria( set );
            }
        else
            this->CBaseEntity::ModifyOrAppendCriteria( set );
    }
    
    void default_ModifyOrAppendCriteria( ::AI_CriteriaSet & set ) {
        CBaseEntity::ModifyOrAppendCriteria( set );
    }

    virtual void OnRestore(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, OnRestore )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, OnRestore )
        bp::override func_OnRestore = this->get_override( "OnRestore" );
        if( func_OnRestore.ptr() != Py_None )
            try {
                func_OnRestore(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::OnRestore(  );
            }
        else
            this->CBaseEntity::OnRestore(  );
    }
    
    void default_OnRestore(  ) {
        CBaseEntity::OnRestore( );
    }

    virtual int OnTakeDamage( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseEntity, OnTakeDamage )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, OnTakeDamage )
        bp::override func_OnTakeDamage = this->get_override( "OnTakeDamage" );
        if( func_OnTakeDamage.ptr() != Py_None )
            try {
                return func_OnTakeDamage( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::OnTakeDamage( info );
            }
        else
            return this->CBaseEntity::OnTakeDamage( info );
    }
    
    int default_OnTakeDamage( ::CTakeDamageInfo const & info ) {
        return CBaseEntity::OnTakeDamage( info );
    }

    virtual bool PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseEntity, PassesDamageFilter )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, PassesDamageFilter )
        bp::override func_PassesDamageFilter = this->get_override( "PassesDamageFilter" );
        if( func_PassesDamageFilter.ptr() != Py_None )
            try {
                return func_PassesDamageFilter( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::PassesDamageFilter( info );
            }
        else
            return this->CBaseEntity::PassesDamageFilter( info );
    }
    
    bool default_PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        return CBaseEntity::PassesDamageFilter( info );
    }

    virtual void PostClientActive(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, PostClientActive )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, PostClientActive )
        bp::override func_PostClientActive = this->get_override( "PostClientActive" );
        if( func_PostClientActive.ptr() != Py_None )
            try {
                func_PostClientActive(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostClientActive(  );
            }
        else
            this->CBaseEntity::PostClientActive(  );
    }
    
    void default_PostClientActive(  ) {
        CBaseEntity::PostClientActive( );
    }

    virtual void PostConstructor( char const * szClassname ) {
        PY_OVERRIDE_CHECK( CBaseEntity, PostConstructor )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, PostConstructor )
        bp::override func_PostConstructor = this->get_override( "PostConstructor" );
        if( func_PostConstructor.ptr() != Py_None )
            try {
                func_PostConstructor( szClassname );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostConstructor( szClassname );
            }
        else
            this->CBaseEntity::PostConstructor( szClassname );
    }
    
    void default_PostConstructor( char const * szClassname ) {
        CBaseEntity::PostConstructor( szClassname );
    }

    virtual void Precache(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, Precache )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, Precache )
        bp::override func_Precache = this->get_override( "Precache" );
        if( func_Precache.ptr() != Py_None )
            try {
                func_Precache(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::Precache(  );
            }
        else
            this->CBaseEntity::Precache(  );
    }
    
    void default_Precache(  ) {
        CBaseEntity::Precache( );
    }

    virtual int Restore( ::IRestore & restore ) {
        PY_OVERRIDE_CHECK( CBaseEntity, Restore )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, Restore )
        bp::override func_Restore = this->get_override( "Restore" );
        if( func_Restore.ptr() != Py_None )
            try {
                return func_Restore( boost::ref(restore) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::Restore( restore );
            }
        else
            return this->CBaseEntity::Restore( restore );
    }
    
    int default_Restore( ::IRestore & restore ) {
        return CBaseEntity::Restore( restore );
    }

    virtual void StartTouch( ::CBaseEntity * pOther ) {
        PY_OVERRIDE_CHECK( CBaseEntity, StartTouch )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, StartTouch )
        bp::override func_StartTouch = this->get_override( "StartTouch" );
        if( func_StartTouch.ptr() != Py_None )
            try {
                func_StartTouch( pOther ? pOther->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StartTouch( pOther );
            }
        else
            this->CBaseEntity::StartTouch( pOther );
    }
    
    void default_StartTouch( ::CBaseEntity * pOther ) {
        CBaseEntity::StartTouch( pOther );
    }

    virtual void StopLoopingSounds(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, StopLoopingSounds )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, StopLoopingSounds )
        bp::override func_StopLoopingSounds = this->get_override( "StopLoopingSounds" );
        if( func_StopLoopingSounds.ptr() != Py_None )
            try {
                func_StopLoopingSounds(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StopLoopingSounds(  );
            }
        else
            this->CBaseEntity::StopLoopingSounds(  );
    }
    
    void default_StopLoopingSounds(  ) {
        CBaseEntity::StopLoopingSounds( );
    }

    void TraceAttack( ::CTakeDamageInfo const & info, ::Vector const & vecDir, ::trace_t * ptr, ::CDmgAccumulator * pAccumulator=0 ){
        CBaseEntity::TraceAttack( info, vecDir, ptr, pAccumulator );
    }

    virtual void UpdateOnRemove(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, UpdateOnRemove )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, UpdateOnRemove )
        bp::override func_UpdateOnRemove = this->get_override( "UpdateOnRemove" );
        if( func_UpdateOnRemove.ptr() != Py_None )
            try {
                func_UpdateOnRemove(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::UpdateOnRemove(  );
            }
        else
            this->CBaseEntity::UpdateOnRemove(  );
    }
    
    void default_UpdateOnRemove(  ) {
        CBaseEntity::UpdateOnRemove( );
    }

    virtual int UpdateTransmitState(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, UpdateTransmitState )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, UpdateTransmitState )
        bp::override func_UpdateTransmitState = this->get_override( "UpdateTransmitState" );
        if( func_UpdateTransmitState.ptr() != Py_None )
            try {
                return func_UpdateTransmitState(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::UpdateTransmitState(  );
            }
        else
            return this->CBaseEntity::UpdateTransmitState(  );
    }
    
    int default_UpdateTransmitState(  ) {
        return CBaseEntity::UpdateTransmitState( );
    }

    virtual void VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        PY_OVERRIDE_CHECK( CBaseEntity, VPhysicsCollision )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, VPhysicsCollision )
        bp::override func_VPhysicsCollision = this->get_override( "VPhysicsCollision" );
        if( func_VPhysicsCollision.ptr() != Py_None )
            try {
                func_VPhysicsCollision( index, boost::python::ptr(pEvent) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::VPhysicsCollision( index, pEvent );
            }
        else
            this->CBaseEntity::VPhysicsCollision( index, pEvent );
    }
    
    void default_VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        CBaseEntity::VPhysicsCollision( index, pEvent );
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual ServerClass* GetServerClass() {
            PY_OVERRIDE_CHECK( CBaseEntity, GetServerClass )
            if( PyObject_HasAttrString(GetPyInstance().ptr(), "pyServerClass") )
            {
                try
                {
                    ServerClass *pServerClass = boost::python::extract<ServerClass *>( GetPyInstance().attr("pyServerClass") );
                    if( pServerClass )
                        return pServerClass;
                }
                catch( bp::error_already_set & ) 
                {
                    PyErr_Print();
                }
            }
            return CBaseEntity::GetServerClass();
        }

    static int m_lifeState_Get( CFuncBrush const & inst ) { return inst.m_lifeState.Get(); }

    static void m_lifeState_Set( CFuncBrush & inst, int val ) { inst.m_lifeState.Set( val ); }

    static int m_takedamage_Get( CFuncBrush const & inst ) { return inst.m_takedamage.Get(); }

    static void m_takedamage_Set( CFuncBrush & inst, int val ) { inst.m_takedamage.Set( val ); }

};

void register_CFuncBrush_class(){

    { //::CFuncBrush
        typedef bp::class_< CFuncBrush_wrapper, bp::bases< CBaseEntity >, boost::noncopyable > CFuncBrush_exposer_t;
        CFuncBrush_exposer_t CFuncBrush_exposer = CFuncBrush_exposer_t( "CFuncBrush" );
        bp::scope CFuncBrush_scope( CFuncBrush_exposer );
        bp::enum_< CFuncBrush::BrushSolidities_e>("BrushSolidities_e")
            .value("BRUSHSOLID_TOGGLE", CFuncBrush::BRUSHSOLID_TOGGLE)
            .value("BRUSHSOLID_NEVER", CFuncBrush::BRUSHSOLID_NEVER)
            .value("BRUSHSOLID_ALWAYS", CFuncBrush::BRUSHSOLID_ALWAYS)
            .export_values()
            ;
        { //::CFuncBrush::CreateVPhysics
        
            typedef bool ( ::CFuncBrush::*CreateVPhysics_function_type)(  ) ;
            typedef bool ( CFuncBrush_wrapper::*default_CreateVPhysics_function_type)(  ) ;
            
            CFuncBrush_exposer.def( 
                "CreateVPhysics"
                , CreateVPhysics_function_type(&::CFuncBrush::CreateVPhysics)
                , default_CreateVPhysics_function_type(&CFuncBrush_wrapper::default_CreateVPhysics) );
        
        }
        { //::CFuncBrush::DrawDebugTextOverlays
        
            typedef int ( ::CFuncBrush::*DrawDebugTextOverlays_function_type)(  ) ;
            typedef int ( CFuncBrush_wrapper::*default_DrawDebugTextOverlays_function_type)(  ) ;
            
            CFuncBrush_exposer.def( 
                "DrawDebugTextOverlays"
                , DrawDebugTextOverlays_function_type(&::CFuncBrush::DrawDebugTextOverlays)
                , default_DrawDebugTextOverlays_function_type(&CFuncBrush_wrapper::default_DrawDebugTextOverlays) );
        
        }
        { //::CFuncBrush::InputSetExcluded
        
            typedef void ( ::CFuncBrush::*InputSetExcluded_function_type)( ::inputdata_t & ) ;
            
            CFuncBrush_exposer.def( 
                "InputSetExcluded"
                , InputSetExcluded_function_type( &::CFuncBrush::InputSetExcluded )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CFuncBrush::InputSetInvert
        
            typedef void ( ::CFuncBrush::*InputSetInvert_function_type)( ::inputdata_t & ) ;
            
            CFuncBrush_exposer.def( 
                "InputSetInvert"
                , InputSetInvert_function_type( &::CFuncBrush::InputSetInvert )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CFuncBrush::InputToggle
        
            typedef void ( ::CFuncBrush::*InputToggle_function_type)( ::inputdata_t & ) ;
            
            CFuncBrush_exposer.def( 
                "InputToggle"
                , InputToggle_function_type( &::CFuncBrush::InputToggle )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CFuncBrush::InputTurnOff
        
            typedef void ( ::CFuncBrush::*InputTurnOff_function_type)( ::inputdata_t & ) ;
            
            CFuncBrush_exposer.def( 
                "InputTurnOff"
                , InputTurnOff_function_type( &::CFuncBrush::InputTurnOff )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CFuncBrush::InputTurnOn
        
            typedef void ( ::CFuncBrush::*InputTurnOn_function_type)( ::inputdata_t & ) ;
            
            CFuncBrush_exposer.def( 
                "InputTurnOn"
                , InputTurnOn_function_type( &::CFuncBrush::InputTurnOn )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CFuncBrush::IsOn
        
            typedef bool ( ::CFuncBrush::*IsOn_function_type)(  ) const;
            
            CFuncBrush_exposer.def( 
                "IsOn"
                , IsOn_function_type( &::CFuncBrush::IsOn ) );
        
        }
        { //::CFuncBrush::ObjectCaps
        
            typedef int ( ::CFuncBrush::*ObjectCaps_function_type)(  ) ;
            
            CFuncBrush_exposer.def( 
                "ObjectCaps"
                , ObjectCaps_function_type( &::CFuncBrush::ObjectCaps ) );
        
        }
        { //::CFuncBrush::Spawn
        
            typedef void ( ::CFuncBrush::*Spawn_function_type)(  ) ;
            typedef void ( CFuncBrush_wrapper::*default_Spawn_function_type)(  ) ;
            
            CFuncBrush_exposer.def( 
                "Spawn"
                , Spawn_function_type(&::CFuncBrush::Spawn)
                , default_Spawn_function_type(&CFuncBrush_wrapper::default_Spawn) );
        
        }
        { //::CFuncBrush::TurnOff
        
            typedef void ( ::CFuncBrush::*TurnOff_function_type)(  ) ;
            
            CFuncBrush_exposer.def( 
                "TurnOff"
                , TurnOff_function_type( &::CFuncBrush::TurnOff ) );
        
        }
        { //::CFuncBrush::TurnOn
        
            typedef void ( ::CFuncBrush::*TurnOn_function_type)(  ) ;
            
            CFuncBrush_exposer.def( 
                "TurnOn"
                , TurnOn_function_type( &::CFuncBrush::TurnOn ) );
        
        }
        { //::CBaseEntity::Activate
        
            typedef void ( ::CBaseEntity::*Activate_function_type)(  ) ;
            typedef void ( CFuncBrush_wrapper::*default_Activate_function_type)(  ) ;
            
            CFuncBrush_exposer.def( 
                "Activate"
                , Activate_function_type(&::CBaseEntity::Activate)
                , default_Activate_function_type(&CFuncBrush_wrapper::default_Activate) );
        
        }
        { //::CBaseEntity::ComputeWorldSpaceSurroundingBox
        
            typedef void ( ::CBaseEntity::*ComputeWorldSpaceSurroundingBox_function_type)( ::Vector *,::Vector * ) ;
            typedef void ( CFuncBrush_wrapper::*default_ComputeWorldSpaceSurroundingBox_function_type)( ::Vector *,::Vector * ) ;
            
            CFuncBrush_exposer.def( 
                "ComputeWorldSpaceSurroundingBox"
                , ComputeWorldSpaceSurroundingBox_function_type(&::CBaseEntity::ComputeWorldSpaceSurroundingBox)
                , default_ComputeWorldSpaceSurroundingBox_function_type(&CFuncBrush_wrapper::default_ComputeWorldSpaceSurroundingBox)
                , ( bp::arg("pWorldMins"), bp::arg("pWorldMaxs") ) );
        
        }
        { //::CBaseEntity::DeathNotice
        
            typedef void ( ::CBaseEntity::*DeathNotice_function_type)( ::CBaseEntity * ) ;
            typedef void ( CFuncBrush_wrapper::*default_DeathNotice_function_type)( ::CBaseEntity * ) ;
            
            CFuncBrush_exposer.def( 
                "DeathNotice"
                , DeathNotice_function_type(&::CBaseEntity::DeathNotice)
                , default_DeathNotice_function_type(&CFuncBrush_wrapper::default_DeathNotice)
                , ( bp::arg("pVictim") ) );
        
        }
        { //::CBaseEntity::DoImpactEffect
        
            typedef void ( ::CBaseEntity::*DoImpactEffect_function_type)( ::trace_t &,int ) ;
            typedef void ( CFuncBrush_wrapper::*default_DoImpactEffect_function_type)( ::trace_t &,int ) ;
            
            CFuncBrush_exposer.def( 
                "DoImpactEffect"
                , DoImpactEffect_function_type(&::CBaseEntity::DoImpactEffect)
                , default_DoImpactEffect_function_type(&CFuncBrush_wrapper::default_DoImpactEffect)
                , ( bp::arg("tr"), bp::arg("nDamageType") ) );
        
        }
        { //::CBaseEntity::DrawDebugGeometryOverlays
        
            typedef void ( ::CBaseEntity::*DrawDebugGeometryOverlays_function_type)(  ) ;
            typedef void ( CFuncBrush_wrapper::*default_DrawDebugGeometryOverlays_function_type)(  ) ;
            
            CFuncBrush_exposer.def( 
                "DrawDebugGeometryOverlays"
                , DrawDebugGeometryOverlays_function_type(&::CBaseEntity::DrawDebugGeometryOverlays)
                , default_DrawDebugGeometryOverlays_function_type(&CFuncBrush_wrapper::default_DrawDebugGeometryOverlays) );
        
        }
        { //::CBaseEntity::EndTouch
        
            typedef void ( ::CBaseEntity::*EndTouch_function_type)( ::CBaseEntity * ) ;
            typedef void ( CFuncBrush_wrapper::*default_EndTouch_function_type)( ::CBaseEntity * ) ;
            
            CFuncBrush_exposer.def( 
                "EndTouch"
                , EndTouch_function_type(&::CBaseEntity::EndTouch)
                , default_EndTouch_function_type(&CFuncBrush_wrapper::default_EndTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseEntity::Event_Killed
        
            typedef void ( ::CBaseEntity::*Event_Killed_function_type)( ::CTakeDamageInfo const & ) ;
            typedef void ( CFuncBrush_wrapper::*default_Event_Killed_function_type)( ::CTakeDamageInfo const & ) ;
            
            CFuncBrush_exposer.def( 
                "Event_Killed"
                , Event_Killed_function_type(&::CBaseEntity::Event_Killed)
                , default_Event_Killed_function_type(&CFuncBrush_wrapper::default_Event_Killed)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::Event_KilledOther
        
            typedef void ( ::CBaseEntity::*Event_KilledOther_function_type)( ::CBaseEntity *,::CTakeDamageInfo const & ) ;
            typedef void ( CFuncBrush_wrapper::*default_Event_KilledOther_function_type)( ::CBaseEntity *,::CTakeDamageInfo const & ) ;
            
            CFuncBrush_exposer.def( 
                "Event_KilledOther"
                , Event_KilledOther_function_type(&::CBaseEntity::Event_KilledOther)
                , default_Event_KilledOther_function_type(&CFuncBrush_wrapper::default_Event_KilledOther)
                , ( bp::arg("pVictim"), bp::arg("info") ) );
        
        }
        { //::CBaseEntity::GetTracerType
        
            typedef char const * ( ::CBaseEntity::*GetTracerType_function_type)(  ) ;
            typedef char const * ( CFuncBrush_wrapper::*default_GetTracerType_function_type)(  ) ;
            
            CFuncBrush_exposer.def( 
                "GetTracerType"
                , GetTracerType_function_type(&::CBaseEntity::GetTracerType)
                , default_GetTracerType_function_type(&CFuncBrush_wrapper::default_GetTracerType) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type)( char const *,char const * ) ;
            typedef bool ( CFuncBrush_wrapper::*default_KeyValue_function_type)( char const *,char const * ) ;
            
            CFuncBrush_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CFuncBrush_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("szValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type)( char const *,float ) ;
            typedef bool ( CFuncBrush_wrapper::*default_KeyValue_function_type)( char const *,float ) ;
            
            CFuncBrush_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CFuncBrush_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("flValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type)( char const *,::Vector const & ) ;
            typedef bool ( CFuncBrush_wrapper::*default_KeyValue_function_type)( char const *,::Vector const & ) ;
            
            CFuncBrush_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CFuncBrush_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("vecValue") ) );
        
        }
        { //::CBaseEntity::MakeTracer
        
            typedef void ( ::CBaseEntity::*MakeTracer_function_type)( ::Vector const &,::trace_t const &,int ) ;
            typedef void ( CFuncBrush_wrapper::*default_MakeTracer_function_type)( ::Vector const &,::trace_t const &,int ) ;
            
            CFuncBrush_exposer.def( 
                "MakeTracer"
                , MakeTracer_function_type(&::CBaseEntity::MakeTracer)
                , default_MakeTracer_function_type(&CFuncBrush_wrapper::default_MakeTracer)
                , ( bp::arg("vecTracerSrc"), bp::arg("tr"), bp::arg("iTracerType") ) );
        
        }
        { //::CBaseEntity::ModifyOrAppendCriteria
        
            typedef void ( ::CBaseEntity::*ModifyOrAppendCriteria_function_type)( ::AI_CriteriaSet & ) ;
            typedef void ( CFuncBrush_wrapper::*default_ModifyOrAppendCriteria_function_type)( ::AI_CriteriaSet & ) ;
            
            CFuncBrush_exposer.def( 
                "ModifyOrAppendCriteria"
                , ModifyOrAppendCriteria_function_type(&::CBaseEntity::ModifyOrAppendCriteria)
                , default_ModifyOrAppendCriteria_function_type(&CFuncBrush_wrapper::default_ModifyOrAppendCriteria)
                , ( bp::arg("set") ) );
        
        }
        { //::CBaseEntity::OnRestore
        
            typedef void ( ::CBaseEntity::*OnRestore_function_type)(  ) ;
            typedef void ( CFuncBrush_wrapper::*default_OnRestore_function_type)(  ) ;
            
            CFuncBrush_exposer.def( 
                "OnRestore"
                , OnRestore_function_type(&::CBaseEntity::OnRestore)
                , default_OnRestore_function_type(&CFuncBrush_wrapper::default_OnRestore) );
        
        }
        { //::CBaseEntity::OnTakeDamage
        
            typedef int ( ::CBaseEntity::*OnTakeDamage_function_type)( ::CTakeDamageInfo const & ) ;
            typedef int ( CFuncBrush_wrapper::*default_OnTakeDamage_function_type)( ::CTakeDamageInfo const & ) ;
            
            CFuncBrush_exposer.def( 
                "OnTakeDamage"
                , OnTakeDamage_function_type(&::CBaseEntity::OnTakeDamage)
                , default_OnTakeDamage_function_type(&CFuncBrush_wrapper::default_OnTakeDamage)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::PassesDamageFilter
        
            typedef bool ( ::CBaseEntity::*PassesDamageFilter_function_type)( ::CTakeDamageInfo const & ) ;
            typedef bool ( CFuncBrush_wrapper::*default_PassesDamageFilter_function_type)( ::CTakeDamageInfo const & ) ;
            
            CFuncBrush_exposer.def( 
                "PassesDamageFilter"
                , PassesDamageFilter_function_type(&::CBaseEntity::PassesDamageFilter)
                , default_PassesDamageFilter_function_type(&CFuncBrush_wrapper::default_PassesDamageFilter)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::PostClientActive
        
            typedef void ( ::CBaseEntity::*PostClientActive_function_type)(  ) ;
            typedef void ( CFuncBrush_wrapper::*default_PostClientActive_function_type)(  ) ;
            
            CFuncBrush_exposer.def( 
                "PostClientActive"
                , PostClientActive_function_type(&::CBaseEntity::PostClientActive)
                , default_PostClientActive_function_type(&CFuncBrush_wrapper::default_PostClientActive) );
        
        }
        { //::CBaseEntity::PostConstructor
        
            typedef void ( ::CBaseEntity::*PostConstructor_function_type)( char const * ) ;
            typedef void ( CFuncBrush_wrapper::*default_PostConstructor_function_type)( char const * ) ;
            
            CFuncBrush_exposer.def( 
                "PostConstructor"
                , PostConstructor_function_type(&::CBaseEntity::PostConstructor)
                , default_PostConstructor_function_type(&CFuncBrush_wrapper::default_PostConstructor)
                , ( bp::arg("szClassname") ) );
        
        }
        { //::CBaseEntity::Precache
        
            typedef void ( ::CBaseEntity::*Precache_function_type)(  ) ;
            typedef void ( CFuncBrush_wrapper::*default_Precache_function_type)(  ) ;
            
            CFuncBrush_exposer.def( 
                "Precache"
                , Precache_function_type(&::CBaseEntity::Precache)
                , default_Precache_function_type(&CFuncBrush_wrapper::default_Precache) );
        
        }
        { //::CBaseEntity::Restore
        
            typedef int ( ::CBaseEntity::*Restore_function_type)( ::IRestore & ) ;
            typedef int ( CFuncBrush_wrapper::*default_Restore_function_type)( ::IRestore & ) ;
            
            CFuncBrush_exposer.def( 
                "Restore"
                , Restore_function_type(&::CBaseEntity::Restore)
                , default_Restore_function_type(&CFuncBrush_wrapper::default_Restore)
                , ( bp::arg("restore") ) );
        
        }
        { //::CBaseEntity::StartTouch
        
            typedef void ( ::CBaseEntity::*StartTouch_function_type)( ::CBaseEntity * ) ;
            typedef void ( CFuncBrush_wrapper::*default_StartTouch_function_type)( ::CBaseEntity * ) ;
            
            CFuncBrush_exposer.def( 
                "StartTouch"
                , StartTouch_function_type(&::CBaseEntity::StartTouch)
                , default_StartTouch_function_type(&CFuncBrush_wrapper::default_StartTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseEntity::StopLoopingSounds
        
            typedef void ( ::CBaseEntity::*StopLoopingSounds_function_type)(  ) ;
            typedef void ( CFuncBrush_wrapper::*default_StopLoopingSounds_function_type)(  ) ;
            
            CFuncBrush_exposer.def( 
                "StopLoopingSounds"
                , StopLoopingSounds_function_type(&::CBaseEntity::StopLoopingSounds)
                , default_StopLoopingSounds_function_type(&CFuncBrush_wrapper::default_StopLoopingSounds) );
        
        }
        { //::CBaseEntity::TraceAttack
        
            typedef void ( CFuncBrush_wrapper::*TraceAttack_function_type)( ::CTakeDamageInfo const &,::Vector const &,::trace_t *,::CDmgAccumulator * ) ;
            
            CFuncBrush_exposer.def( 
                "TraceAttack"
                , TraceAttack_function_type( &CFuncBrush_wrapper::TraceAttack )
                , ( bp::arg("info"), bp::arg("vecDir"), bp::arg("ptr"), bp::arg("pAccumulator")=bp::object() ) );
        
        }
        { //::CBaseEntity::UpdateOnRemove
        
            typedef void ( ::CBaseEntity::*UpdateOnRemove_function_type)(  ) ;
            typedef void ( CFuncBrush_wrapper::*default_UpdateOnRemove_function_type)(  ) ;
            
            CFuncBrush_exposer.def( 
                "UpdateOnRemove"
                , UpdateOnRemove_function_type(&::CBaseEntity::UpdateOnRemove)
                , default_UpdateOnRemove_function_type(&CFuncBrush_wrapper::default_UpdateOnRemove) );
        
        }
        { //::CBaseEntity::UpdateTransmitState
        
            typedef int ( ::CBaseEntity::*UpdateTransmitState_function_type)(  ) ;
            typedef int ( CFuncBrush_wrapper::*default_UpdateTransmitState_function_type)(  ) ;
            
            CFuncBrush_exposer.def( 
                "UpdateTransmitState"
                , UpdateTransmitState_function_type(&::CBaseEntity::UpdateTransmitState)
                , default_UpdateTransmitState_function_type(&CFuncBrush_wrapper::default_UpdateTransmitState) );
        
        }
        { //::CBaseEntity::VPhysicsCollision
        
            typedef void ( ::CBaseEntity::*VPhysicsCollision_function_type)( int,::gamevcollisionevent_t * ) ;
            typedef void ( CFuncBrush_wrapper::*default_VPhysicsCollision_function_type)( int,::gamevcollisionevent_t * ) ;
            
            CFuncBrush_exposer.def( 
                "VPhysicsCollision"
                , VPhysicsCollision_function_type(&::CBaseEntity::VPhysicsCollision)
                , default_VPhysicsCollision_function_type(&CFuncBrush_wrapper::default_VPhysicsCollision)
                , ( bp::arg("index"), bp::arg("pEvent") ) );
        
        }
        CFuncBrush_exposer.add_property( "lifestate", &CFuncBrush_wrapper::m_lifeState_Get, &CFuncBrush_wrapper::m_lifeState_Set );
        CFuncBrush_exposer.add_property( "takedamage", &CFuncBrush_wrapper::m_takedamage_Get, &CFuncBrush_wrapper::m_takedamage_Set );
    }

}

