// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "__convenience.pypp.hpp"
#include "__call_policies.pypp.hpp"
#include "cbase.h"
#include "npcevent.h"
#include "srcpy_entities.h"
#include "bone_setup.h"
#include "baseprojectile.h"
#include "basegrenade_shared.h"
#include "SkyCamera.h"
#include "ai_basenpc.h"
#include "modelentities.h"
#include "basetoggle.h"
#include "triggers.h"
#include "AI_Criteria.h"
#include "saverestore.h"
#include "saverestoretypes.h"
#include "vcollide_parse.h"
#include "iservervehicle.h"
#include "gib.h"
#include "spark.h"
#include "filters.h"
#include "EntityFlame.h"
#include "player_resource.h"
#include "props.h"
#include "physics_prop_ragdoll.h"
#include "nav_area.h"
#include "tier0/valve_minmax_off.h"
#include "srcpy.h"
#include "tier0/valve_minmax_on.h"
#include "tier0/memdbgon.h"
#include "CBaseEntity.pypp.hpp"

namespace bp = boost::python;

struct CBaseEntity_wrapper : CBaseEntity, bp::wrapper< CBaseEntity > {

    CBaseEntity_wrapper(bool bServerOnly=false )
    : CBaseEntity( bServerOnly )
      , bp::wrapper< CBaseEntity >(){
        // constructor
    
    }

    virtual void Activate(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, Activate )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, Activate )
        bp::override func_Activate = this->get_override( "Activate" );
        if( func_Activate.ptr() != Py_None )
            try {
                func_Activate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::Activate(  );
            }
        else
            this->CBaseEntity::Activate(  );
    }
    
    void default_Activate(  ) {
        CBaseEntity::Activate( );
    }

    virtual void ComputeWorldSpaceSurroundingBox( ::Vector * pWorldMins, ::Vector * pWorldMaxs ) {
        PY_OVERRIDE_CHECK( CBaseEntity, ComputeWorldSpaceSurroundingBox )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, ComputeWorldSpaceSurroundingBox )
        bp::override func_ComputeWorldSpaceSurroundingBox = this->get_override( "ComputeWorldSpaceSurroundingBox" );
        if( func_ComputeWorldSpaceSurroundingBox.ptr() != Py_None )
            try {
                func_ComputeWorldSpaceSurroundingBox( boost::python::ptr(pWorldMins), boost::python::ptr(pWorldMaxs) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::ComputeWorldSpaceSurroundingBox( pWorldMins, pWorldMaxs );
            }
        else
            this->CBaseEntity::ComputeWorldSpaceSurroundingBox( pWorldMins, pWorldMaxs );
    }
    
    void default_ComputeWorldSpaceSurroundingBox( ::Vector * pWorldMins, ::Vector * pWorldMaxs ) {
        CBaseEntity::ComputeWorldSpaceSurroundingBox( pWorldMins, pWorldMaxs );
    }

    virtual bool CreateVPhysics(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, CreateVPhysics )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, CreateVPhysics )
        bp::override func_CreateVPhysics = this->get_override( "CreateVPhysics" );
        if( func_CreateVPhysics.ptr() != Py_None )
            try {
                return func_CreateVPhysics(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::CreateVPhysics(  );
            }
        else
            return this->CBaseEntity::CreateVPhysics(  );
    }
    
    bool default_CreateVPhysics(  ) {
        return CBaseEntity::CreateVPhysics( );
    }

    virtual void DeathNotice( ::CBaseEntity * pVictim ) {
        PY_OVERRIDE_CHECK( CBaseEntity, DeathNotice )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, DeathNotice )
        bp::override func_DeathNotice = this->get_override( "DeathNotice" );
        if( func_DeathNotice.ptr() != Py_None )
            try {
                func_DeathNotice( pVictim ? pVictim->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DeathNotice( pVictim );
            }
        else
            this->CBaseEntity::DeathNotice( pVictim );
    }
    
    void default_DeathNotice( ::CBaseEntity * pVictim ) {
        CBaseEntity::DeathNotice( pVictim );
    }

    virtual void DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        PY_OVERRIDE_CHECK( CBaseEntity, DoImpactEffect )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, DoImpactEffect )
        bp::override func_DoImpactEffect = this->get_override( "DoImpactEffect" );
        if( func_DoImpactEffect.ptr() != Py_None )
            try {
                func_DoImpactEffect( boost::ref(tr), nDamageType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DoImpactEffect( tr, nDamageType );
            }
        else
            this->CBaseEntity::DoImpactEffect( tr, nDamageType );
    }
    
    void default_DoImpactEffect( ::trace_t & tr, int nDamageType ) {
        CBaseEntity::DoImpactEffect( tr, nDamageType );
    }

    virtual void DrawDebugGeometryOverlays(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, DrawDebugGeometryOverlays )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, DrawDebugGeometryOverlays )
        bp::override func_DrawDebugGeometryOverlays = this->get_override( "DrawDebugGeometryOverlays" );
        if( func_DrawDebugGeometryOverlays.ptr() != Py_None )
            try {
                func_DrawDebugGeometryOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::DrawDebugGeometryOverlays(  );
            }
        else
            this->CBaseEntity::DrawDebugGeometryOverlays(  );
    }
    
    void default_DrawDebugGeometryOverlays(  ) {
        CBaseEntity::DrawDebugGeometryOverlays( );
    }

    virtual int DrawDebugTextOverlays(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, DrawDebugTextOverlays )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, DrawDebugTextOverlays )
        bp::override func_DrawDebugTextOverlays = this->get_override( "DrawDebugTextOverlays" );
        if( func_DrawDebugTextOverlays.ptr() != Py_None )
            try {
                return func_DrawDebugTextOverlays(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::DrawDebugTextOverlays(  );
            }
        else
            return this->CBaseEntity::DrawDebugTextOverlays(  );
    }
    
    int default_DrawDebugTextOverlays(  ) {
        return CBaseEntity::DrawDebugTextOverlays( );
    }

    static boost::python::object EmitSound_044cd926333812abcd0a98b7a6acb45c( ::CBaseEntity & inst, char const * soundname, float soundtime=0.F ){
        float duration2;
        inst.EmitSound(soundname, soundtime, &duration2);
        return bp::object( duration2 );
    }

    static boost::python::object EmitSound_9e167fc1a09029b22b87dc584e2811a7( ::CBaseEntity & inst, char const * soundname, ::HSOUNDSCRIPTHANDLE & handle, float soundtime=0.F ){
        float duration2;
        inst.EmitSound(soundname, handle, soundtime, &duration2);
        return bp::object( duration2 );
    }

    static boost::python::object EmitSound_eb9d7c0d258c876b9a91e34cd0316f22( ::IRecipientFilter & filter, int iEntIndex, char const * soundname, ::Vector const * pOrigin=0, float soundtime=0.F ){
        float duration2;
        ::CBaseEntity::EmitSound(filter, iEntIndex, soundname, pOrigin, soundtime, &duration2);
        return bp::object( duration2 );
    }

    static boost::python::object EmitSound_1c2389c0a40890ff9911d3d83eebfe14( ::IRecipientFilter & filter, int iEntIndex, char const * soundname, ::HSOUNDSCRIPTHANDLE & handle, ::Vector const * pOrigin=0, float soundtime=0.F ){
        float duration2;
        ::CBaseEntity::EmitSound(filter, iEntIndex, soundname, handle, pOrigin, soundtime, &duration2);
        return bp::object( duration2 );
    }

    virtual void EndTouch( ::CBaseEntity * pOther ) {
        PY_OVERRIDE_CHECK( CBaseEntity, EndTouch )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, EndTouch )
        bp::override func_EndTouch = this->get_override( "EndTouch" );
        if( func_EndTouch.ptr() != Py_None )
            try {
                func_EndTouch( pOther ? pOther->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::EndTouch( pOther );
            }
        else
            this->CBaseEntity::EndTouch( pOther );
    }
    
    void default_EndTouch( ::CBaseEntity * pOther ) {
        CBaseEntity::EndTouch( pOther );
    }

    virtual void Event_Killed( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseEntity, Event_Killed )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, Event_Killed )
        bp::override func_Event_Killed = this->get_override( "Event_Killed" );
        if( func_Event_Killed.ptr() != Py_None )
            try {
                func_Event_Killed( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::Event_Killed( info );
            }
        else
            this->CBaseEntity::Event_Killed( info );
    }
    
    void default_Event_Killed( ::CTakeDamageInfo const & info ) {
        CBaseEntity::Event_Killed( info );
    }

    virtual void Event_KilledOther( ::CBaseEntity * pVictim, ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseEntity, Event_KilledOther )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, Event_KilledOther )
        bp::override func_Event_KilledOther = this->get_override( "Event_KilledOther" );
        if( func_Event_KilledOther.ptr() != Py_None )
            try {
                func_Event_KilledOther( pVictim ? pVictim->GetPyHandle() : boost::python::object(), boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::Event_KilledOther( pVictim, info );
            }
        else
            this->CBaseEntity::Event_KilledOther( pVictim, info );
    }
    
    void default_Event_KilledOther( ::CBaseEntity * pVictim, ::CTakeDamageInfo const & info ) {
        CBaseEntity::Event_KilledOther( pVictim, info );
    }

    virtual char const * GetTracerType(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, GetTracerType )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, GetTracerType )
        bp::override func_GetTracerType = this->get_override( "GetTracerType" );
        if( func_GetTracerType.ptr() != Py_None )
            try {
                return func_GetTracerType(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::GetTracerType(  );
            }
        else
            return this->CBaseEntity::GetTracerType(  );
    }
    
    char const * default_GetTracerType(  ) {
        return CBaseEntity::GetTracerType( );
    }

    virtual bool KeyValue( char const * szKeyName, char const * szValue ) {
        PY_OVERRIDE_CHECK( CBaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, szValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, szValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, szValue );
    }
    
    bool default_KeyValue( char const * szKeyName, char const * szValue ) {
        return CBaseEntity::KeyValue( szKeyName, szValue );
    }

    virtual bool KeyValue( char const * szKeyName, float flValue ) {
        PY_OVERRIDE_CHECK( CBaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, flValue );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, flValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, flValue );
    }
    
    bool default_KeyValue( char const * szKeyName, float flValue ) {
        return CBaseEntity::KeyValue( szKeyName, flValue );
    }

    virtual bool KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        PY_OVERRIDE_CHECK( CBaseEntity, KeyValue )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, KeyValue )
        bp::override func_KeyValue = this->get_override( "KeyValue" );
        if( func_KeyValue.ptr() != Py_None )
            try {
                return func_KeyValue( szKeyName, boost::ref(vecValue) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::KeyValue( szKeyName, vecValue );
            }
        else
            return this->CBaseEntity::KeyValue( szKeyName, vecValue );
    }
    
    bool default_KeyValue( char const * szKeyName, ::Vector const & vecValue ) {
        return CBaseEntity::KeyValue( szKeyName, vecValue );
    }

    virtual void MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        PY_OVERRIDE_CHECK( CBaseEntity, MakeTracer )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, MakeTracer )
        bp::override func_MakeTracer = this->get_override( "MakeTracer" );
        if( func_MakeTracer.ptr() != Py_None )
            try {
                func_MakeTracer( boost::ref(vecTracerSrc), boost::ref(tr), iTracerType );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::MakeTracer( vecTracerSrc, tr, iTracerType );
            }
        else
            this->CBaseEntity::MakeTracer( vecTracerSrc, tr, iTracerType );
    }
    
    void default_MakeTracer( ::Vector const & vecTracerSrc, ::trace_t const & tr, int iTracerType ) {
        CBaseEntity::MakeTracer( vecTracerSrc, tr, iTracerType );
    }

    virtual void ModifyOrAppendCriteria( ::AI_CriteriaSet & set ) {
        PY_OVERRIDE_CHECK( CBaseEntity, ModifyOrAppendCriteria )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, ModifyOrAppendCriteria )
        bp::override func_ModifyOrAppendCriteria = this->get_override( "ModifyOrAppendCriteria" );
        if( func_ModifyOrAppendCriteria.ptr() != Py_None )
            try {
                func_ModifyOrAppendCriteria( boost::ref(set) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::ModifyOrAppendCriteria( set );
            }
        else
            this->CBaseEntity::ModifyOrAppendCriteria( set );
    }
    
    void default_ModifyOrAppendCriteria( ::AI_CriteriaSet & set ) {
        CBaseEntity::ModifyOrAppendCriteria( set );
    }

    virtual void OnRestore(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, OnRestore )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, OnRestore )
        bp::override func_OnRestore = this->get_override( "OnRestore" );
        if( func_OnRestore.ptr() != Py_None )
            try {
                func_OnRestore(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::OnRestore(  );
            }
        else
            this->CBaseEntity::OnRestore(  );
    }
    
    void default_OnRestore(  ) {
        CBaseEntity::OnRestore( );
    }

    virtual int OnTakeDamage( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseEntity, OnTakeDamage )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, OnTakeDamage )
        bp::override func_OnTakeDamage = this->get_override( "OnTakeDamage" );
        if( func_OnTakeDamage.ptr() != Py_None )
            try {
                return func_OnTakeDamage( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::OnTakeDamage( info );
            }
        else
            return this->CBaseEntity::OnTakeDamage( info );
    }
    
    int default_OnTakeDamage( ::CTakeDamageInfo const & info ) {
        return CBaseEntity::OnTakeDamage( info );
    }

    virtual bool PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        PY_OVERRIDE_CHECK( CBaseEntity, PassesDamageFilter )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, PassesDamageFilter )
        bp::override func_PassesDamageFilter = this->get_override( "PassesDamageFilter" );
        if( func_PassesDamageFilter.ptr() != Py_None )
            try {
                return func_PassesDamageFilter( boost::ref(info) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::PassesDamageFilter( info );
            }
        else
            return this->CBaseEntity::PassesDamageFilter( info );
    }
    
    bool default_PassesDamageFilter( ::CTakeDamageInfo const & info ) {
        return CBaseEntity::PassesDamageFilter( info );
    }

    virtual void PostClientActive(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, PostClientActive )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, PostClientActive )
        bp::override func_PostClientActive = this->get_override( "PostClientActive" );
        if( func_PostClientActive.ptr() != Py_None )
            try {
                func_PostClientActive(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostClientActive(  );
            }
        else
            this->CBaseEntity::PostClientActive(  );
    }
    
    void default_PostClientActive(  ) {
        CBaseEntity::PostClientActive( );
    }

    virtual void PostConstructor( char const * szClassname ) {
        PY_OVERRIDE_CHECK( CBaseEntity, PostConstructor )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, PostConstructor )
        bp::override func_PostConstructor = this->get_override( "PostConstructor" );
        if( func_PostConstructor.ptr() != Py_None )
            try {
                func_PostConstructor( szClassname );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::PostConstructor( szClassname );
            }
        else
            this->CBaseEntity::PostConstructor( szClassname );
    }
    
    void default_PostConstructor( char const * szClassname ) {
        CBaseEntity::PostConstructor( szClassname );
    }

    virtual void Precache(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, Precache )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, Precache )
        bp::override func_Precache = this->get_override( "Precache" );
        if( func_Precache.ptr() != Py_None )
            try {
                func_Precache(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::Precache(  );
            }
        else
            this->CBaseEntity::Precache(  );
    }
    
    void default_Precache(  ) {
        CBaseEntity::Precache( );
    }

    virtual int Restore( ::IRestore & restore ) {
        PY_OVERRIDE_CHECK( CBaseEntity, Restore )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, Restore )
        bp::override func_Restore = this->get_override( "Restore" );
        if( func_Restore.ptr() != Py_None )
            try {
                return func_Restore( boost::ref(restore) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::Restore( restore );
            }
        else
            return this->CBaseEntity::Restore( restore );
    }
    
    int default_Restore( ::IRestore & restore ) {
        return CBaseEntity::Restore( restore );
    }

    virtual void Spawn(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, Spawn )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, Spawn )
        bp::override func_Spawn = this->get_override( "Spawn" );
        if( func_Spawn.ptr() != Py_None )
            try {
                func_Spawn(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::Spawn(  );
            }
        else
            this->CBaseEntity::Spawn(  );
    }
    
    void default_Spawn(  ) {
        CBaseEntity::Spawn( );
    }

    virtual void StartTouch( ::CBaseEntity * pOther ) {
        PY_OVERRIDE_CHECK( CBaseEntity, StartTouch )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, StartTouch )
        bp::override func_StartTouch = this->get_override( "StartTouch" );
        if( func_StartTouch.ptr() != Py_None )
            try {
                func_StartTouch( pOther ? pOther->GetPyHandle() : boost::python::object() );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StartTouch( pOther );
            }
        else
            this->CBaseEntity::StartTouch( pOther );
    }
    
    void default_StartTouch( ::CBaseEntity * pOther ) {
        CBaseEntity::StartTouch( pOther );
    }

    virtual void StopLoopingSounds(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, StopLoopingSounds )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, StopLoopingSounds )
        bp::override func_StopLoopingSounds = this->get_override( "StopLoopingSounds" );
        if( func_StopLoopingSounds.ptr() != Py_None )
            try {
                func_StopLoopingSounds(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::StopLoopingSounds(  );
            }
        else
            this->CBaseEntity::StopLoopingSounds(  );
    }
    
    void default_StopLoopingSounds(  ) {
        CBaseEntity::StopLoopingSounds( );
    }

    void TraceAttack( ::CTakeDamageInfo const & info, ::Vector const & vecDir, ::trace_t * ptr, ::CDmgAccumulator * pAccumulator=0 ){
        CBaseEntity::TraceAttack( info, vecDir, ptr, pAccumulator );
    }

    virtual void UpdateOnRemove(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, UpdateOnRemove )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, UpdateOnRemove )
        bp::override func_UpdateOnRemove = this->get_override( "UpdateOnRemove" );
        if( func_UpdateOnRemove.ptr() != Py_None )
            try {
                func_UpdateOnRemove(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::UpdateOnRemove(  );
            }
        else
            this->CBaseEntity::UpdateOnRemove(  );
    }
    
    void default_UpdateOnRemove(  ) {
        CBaseEntity::UpdateOnRemove( );
    }

    virtual int UpdateTransmitState(  ) {
        PY_OVERRIDE_CHECK( CBaseEntity, UpdateTransmitState )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, UpdateTransmitState )
        bp::override func_UpdateTransmitState = this->get_override( "UpdateTransmitState" );
        if( func_UpdateTransmitState.ptr() != Py_None )
            try {
                return func_UpdateTransmitState(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CBaseEntity::UpdateTransmitState(  );
            }
        else
            return this->CBaseEntity::UpdateTransmitState(  );
    }
    
    int default_UpdateTransmitState(  ) {
        return CBaseEntity::UpdateTransmitState( );
    }

    virtual void VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        PY_OVERRIDE_CHECK( CBaseEntity, VPhysicsCollision )
        PY_OVERRIDE_LOG( _entities, CBaseEntity, VPhysicsCollision )
        bp::override func_VPhysicsCollision = this->get_override( "VPhysicsCollision" );
        if( func_VPhysicsCollision.ptr() != Py_None )
            try {
                func_VPhysicsCollision( index, boost::python::ptr(pEvent) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CBaseEntity::VPhysicsCollision( index, pEvent );
            }
        else
            this->CBaseEntity::VPhysicsCollision( index, pEvent );
    }
    
    void default_VPhysicsCollision( int index, ::gamevcollisionevent_t * pEvent ) {
        CBaseEntity::VPhysicsCollision( index, pEvent );
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual ServerClass* GetServerClass() {
            PY_OVERRIDE_CHECK( CBaseEntity, GetServerClass )
            if( PyObject_HasAttrString(GetPyInstance().ptr(), "pyServerClass") )
            {
                try
                {
                    ServerClass *pServerClass = boost::python::extract<ServerClass *>( GetPyInstance().attr("pyServerClass") );
                    if( pServerClass )
                        return pServerClass;
                }
                catch( bp::error_already_set & ) 
                {
                    PyErr_Print();
                }
            }
            return CBaseEntity::GetServerClass();
        }

    static int m_lifeState_Get( CBaseEntity const & inst ) { return inst.m_lifeState.Get(); }

    static void m_lifeState_Set( CBaseEntity & inst, int val ) { inst.m_lifeState.Set( val ); }

    static int m_takedamage_Get( CBaseEntity const & inst ) { return inst.m_takedamage.Get(); }

    static void m_takedamage_Set( CBaseEntity & inst, int val ) { inst.m_takedamage.Set( val ); }

};

void register_CBaseEntity_class(){

    { //::CBaseEntity
        typedef bp::class_< CBaseEntity_wrapper, bp::bases< IServerEntity >, boost::noncopyable > CBaseEntity_exposer_t;
        CBaseEntity_exposer_t CBaseEntity_exposer = CBaseEntity_exposer_t( "CBaseEntity", bp::init< bp::optional< bool > >(( bp::arg("bServerOnly")=(bool)(false) )) );
        bp::scope CBaseEntity_scope( CBaseEntity_exposer );
        bp::implicitly_convertible< bool, CBaseEntity >();
        { //::CBaseEntity::AcceptInput
        
            typedef bool ( ::CBaseEntity::*AcceptInput_function_type)( char const *,::CBaseEntity *,::CBaseEntity *,::variant_t,int ) ;
            
            CBaseEntity_exposer.def( 
                "AcceptInput"
                , AcceptInput_function_type( &::CBaseEntity::AcceptInput )
                , ( bp::arg("szInputName"), bp::arg("pActivator"), bp::arg("pCaller"), bp::arg("Value"), bp::arg("outputID") ) );
        
        }
        { //::CBaseEntity::Activate
        
            typedef void ( ::CBaseEntity::*Activate_function_type)(  ) ;
            typedef void ( CBaseEntity_wrapper::*default_Activate_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "Activate"
                , Activate_function_type(&::CBaseEntity::Activate)
                , default_Activate_function_type(&CBaseEntity_wrapper::default_Activate) );
        
        }
        { //::CBaseEntity::AddContext
        
            typedef void ( ::CBaseEntity::*AddContext_function_type)( char const * ) ;
            
            CBaseEntity_exposer.def( 
                "AddContext"
                , AddContext_function_type( &::CBaseEntity::AddContext )
                , ( bp::arg("nameandvalue") ) );
        
        }
        { //::CBaseEntity::AddEFlags
        
            typedef void ( ::CBaseEntity::*AddEFlags_function_type)( int ) ;
            
            CBaseEntity_exposer.def( 
                "AddEFlags"
                , AddEFlags_function_type( &::CBaseEntity::AddEFlags )
                , ( bp::arg("nEFlagMask") ) );
        
        }
        { //::CBaseEntity::AddEffects
        
            typedef void ( ::CBaseEntity::*AddEffects_function_type)( int ) ;
            
            CBaseEntity_exposer.def( 
                "AddEffects"
                , AddEffects_function_type( &::CBaseEntity::AddEffects )
                , ( bp::arg("nEffects") ) );
        
        }
        { //::CBaseEntity::AddFlag
        
            typedef void ( ::CBaseEntity::*AddFlag_function_type)( int ) ;
            
            CBaseEntity_exposer.def( 
                "AddFlag"
                , AddFlag_function_type( &::CBaseEntity::AddFlag )
                , ( bp::arg("flags") ) );
        
        }
        { //::CBaseEntity::AddPoints
        
            typedef void ( ::CBaseEntity::*AddPoints_function_type)( int,bool ) ;
            
            CBaseEntity_exposer.def( 
                "AddPoints"
                , AddPoints_function_type( &::CBaseEntity::AddPoints )
                , ( bp::arg("score"), bp::arg("bAllowNegativeScore") ) );
        
        }
        { //::CBaseEntity::AddPointsToTeam
        
            typedef void ( ::CBaseEntity::*AddPointsToTeam_function_type)( int,bool ) ;
            
            CBaseEntity_exposer.def( 
                "AddPointsToTeam"
                , AddPointsToTeam_function_type( &::CBaseEntity::AddPointsToTeam )
                , ( bp::arg("score"), bp::arg("bAllowNegativeScore") ) );
        
        }
        { //::CBaseEntity::AddSolidFlags
        
            typedef void ( ::CBaseEntity::*AddSolidFlags_function_type)( int ) ;
            
            CBaseEntity_exposer.def( 
                "AddSolidFlags"
                , AddSolidFlags_function_type( &::CBaseEntity::AddSolidFlags )
                , ( bp::arg("flags") ) );
        
        }
        { //::CBaseEntity::AddSpawnFlags
        
            typedef void ( ::CBaseEntity::*AddSpawnFlags_function_type)( int ) ;
            
            CBaseEntity_exposer.def( 
                "AddSpawnFlags"
                , AddSpawnFlags_function_type( &::CBaseEntity::AddSpawnFlags )
                , ( bp::arg("nFlags") ) );
        
        }
        { //::CBaseEntity::AddStepDiscontinuity
        
            typedef bool ( ::CBaseEntity::*AddStepDiscontinuity_function_type)( float,::Vector const &,::QAngle const & ) ;
            
            CBaseEntity_exposer.def( 
                "AddStepDiscontinuity"
                , AddStepDiscontinuity_function_type( &::CBaseEntity::AddStepDiscontinuity )
                , ( bp::arg("flTime"), bp::arg("vecOrigin"), bp::arg("vecAngles") ) );
        
        }
        { //::CBaseEntity::AddTimedOverlay
        
            typedef void ( ::CBaseEntity::*AddTimedOverlay_function_type)( char const *,int ) ;
            
            CBaseEntity_exposer.def( 
                "AddTimedOverlay"
                , AddTimedOverlay_function_type( &::CBaseEntity::AddTimedOverlay )
                , ( bp::arg("msg"), bp::arg("endTime") ) );
        
        }
        { //::CBaseEntity::AdjustDamageDirection
        
            typedef void ( ::CBaseEntity::*AdjustDamageDirection_function_type)( ::CTakeDamageInfo const &,::Vector &,::CBaseEntity * ) ;
            
            CBaseEntity_exposer.def( 
                "AdjustDamageDirection"
                , AdjustDamageDirection_function_type( &::CBaseEntity::AdjustDamageDirection )
                , ( bp::arg("info"), bp::arg("dir"), bp::arg("pEnt") ) );
        
        }
        { //::CBaseEntity::AppendContextToCriteria
        
            typedef void ( ::CBaseEntity::*AppendContextToCriteria_function_type)( ::AI_CriteriaSet &,char const * ) ;
            
            CBaseEntity_exposer.def( 
                "AppendContextToCriteria"
                , AppendContextToCriteria_function_type( &::CBaseEntity::AppendContextToCriteria )
                , ( bp::arg("set"), bp::arg("prefix")="" ) );
        
        }
        { //::CBaseEntity::ApplyAbsVelocityImpulse
        
            typedef void ( ::CBaseEntity::*ApplyAbsVelocityImpulse_function_type)( ::Vector const & ) ;
            
            CBaseEntity_exposer.def( 
                "ApplyAbsVelocityImpulse"
                , ApplyAbsVelocityImpulse_function_type( &::CBaseEntity::ApplyAbsVelocityImpulse )
                , ( bp::arg("vecImpulse") ) );
        
        }
        { //::CBaseEntity::ApplyLocalAngularVelocityImpulse
        
            typedef void ( ::CBaseEntity::*ApplyLocalAngularVelocityImpulse_function_type)( ::AngularImpulse const & ) ;
            
            CBaseEntity_exposer.def( 
                "ApplyLocalAngularVelocityImpulse"
                , ApplyLocalAngularVelocityImpulse_function_type( &::CBaseEntity::ApplyLocalAngularVelocityImpulse )
                , ( bp::arg("angImpulse") ) );
        
        }
        { //::CBaseEntity::ApplyLocalVelocityImpulse
        
            typedef void ( ::CBaseEntity::*ApplyLocalVelocityImpulse_function_type)( ::Vector const & ) ;
            
            CBaseEntity_exposer.def( 
                "ApplyLocalVelocityImpulse"
                , ApplyLocalVelocityImpulse_function_type( &::CBaseEntity::ApplyLocalVelocityImpulse )
                , ( bp::arg("vecImpulse") ) );
        
        }
        { //::CBaseEntity::Blocked
        
            typedef void ( ::CBaseEntity::*Blocked_function_type)( ::CBaseEntity * ) ;
            
            CBaseEntity_exposer.def( 
                "Blocked"
                , Blocked_function_type( &::CBaseEntity::Blocked )
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseEntity::BlocksLOS
        
            typedef bool ( ::CBaseEntity::*BlocksLOS_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "BlocksLOS"
                , BlocksLOS_function_type( &::CBaseEntity::BlocksLOS ) );
        
        }
        { //::CBaseEntity::BloodColor
        
            typedef int ( ::CBaseEntity::*BloodColor_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "BloodColor"
                , BloodColor_function_type( &::CBaseEntity::BloodColor ) );
        
        }
        { //::CBaseEntity::BodyTarget
        
            typedef ::Vector ( ::CBaseEntity::*BodyTarget_function_type)( ::Vector const &,bool ) ;
            
            CBaseEntity_exposer.def( 
                "BodyTarget"
                , BodyTarget_function_type( &::CBaseEntity::BodyTarget )
                , ( bp::arg("posSrc"), bp::arg("bNoisy")=(bool)(true) ) );
        
        }
        { //::CBaseEntity::BoundingRadius
        
            typedef float ( ::CBaseEntity::*BoundingRadius_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "BoundingRadius"
                , BoundingRadius_function_type( &::CBaseEntity::BoundingRadius ) );
        
        }
        { //::CBaseEntity::CalcAbsolutePosition
        
            typedef void ( ::CBaseEntity::*CalcAbsolutePosition_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "CalcAbsolutePosition"
                , CalcAbsolutePosition_function_type( &::CBaseEntity::CalcAbsolutePosition ) );
        
        }
        { //::CBaseEntity::CanBeHitByMeleeAttack
        
            typedef bool ( ::CBaseEntity::*CanBeHitByMeleeAttack_function_type)( ::CBaseEntity * ) ;
            
            CBaseEntity_exposer.def( 
                "CanBeHitByMeleeAttack"
                , CanBeHitByMeleeAttack_function_type( &::CBaseEntity::CanBeHitByMeleeAttack )
                , ( bp::arg("pAttacker") ) );
        
        }
        { //::CBaseEntity::CanBeSeenBy
        
            typedef bool ( ::CBaseEntity::*CanBeSeenBy_function_type)( ::CAI_BaseNPC * ) ;
            
            CBaseEntity_exposer.def( 
                "CanBeSeenBy"
                , CanBeSeenBy_function_type( &::CBaseEntity::CanBeSeenBy )
                , ( bp::arg("pNPC") ) );
        
        }
        { //::CBaseEntity::CanStandOn
        
            typedef bool ( ::CBaseEntity::*CanStandOn_function_type)( ::CBaseEntity * ) const;
            
            CBaseEntity_exposer.def( 
                "CanStandOn"
                , CanStandOn_function_type( &::CBaseEntity::CanStandOn )
                , ( bp::arg("pSurface") ) );
        
        }
        { //::CBaseEntity::ChangeTeam
        
            typedef void ( ::CBaseEntity::*ChangeTeam_function_type)( int ) ;
            
            CBaseEntity_exposer.def( 
                "ChangeTeam"
                , ChangeTeam_function_type( &::CBaseEntity::ChangeTeam )
                , ( bp::arg("iTeamNum") ) );
        
        }
        { //::CBaseEntity::ClassMatches
        
            typedef bool ( ::CBaseEntity::*ClassMatches_function_type)( char const * ) ;
            
            CBaseEntity_exposer.def( 
                "ClassMatches"
                , ClassMatches_function_type( &::CBaseEntity::ClassMatches )
                , ( bp::arg("pszClassOrWildcard") ) );
        
        }
        { //::CBaseEntity::ClassMatches
        
            typedef bool ( ::CBaseEntity::*ClassMatches_function_type)( ::string_t ) ;
            
            CBaseEntity_exposer.def( 
                "ClassMatches"
                , ClassMatches_function_type( &::CBaseEntity::ClassMatches )
                , ( bp::arg("nameStr") ) );
        
        }
        { //::CBaseEntity::Classify
        
            typedef ::Class_T ( ::CBaseEntity::*Classify_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "Classify"
                , Classify_function_type( &::CBaseEntity::Classify ) );
        
        }
        { //::CBaseEntity::ClearEffects
        
            typedef void ( ::CBaseEntity::*ClearEffects_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "ClearEffects"
                , ClearEffects_function_type( &::CBaseEntity::ClearEffects ) );
        
        }
        { //::CBaseEntity::ClearFlags
        
            typedef void ( ::CBaseEntity::*ClearFlags_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "ClearFlags"
                , ClearFlags_function_type( &::CBaseEntity::ClearFlags ) );
        
        }
        { //::CBaseEntity::ClearModelIndexOverrides
        
            typedef void ( ::CBaseEntity::*ClearModelIndexOverrides_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "ClearModelIndexOverrides"
                , ClearModelIndexOverrides_function_type( &::CBaseEntity::ClearModelIndexOverrides ) );
        
        }
        { //::CBaseEntity::ClearNavIgnore
        
            typedef void ( ::CBaseEntity::*ClearNavIgnore_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "ClearNavIgnore"
                , ClearNavIgnore_function_type( &::CBaseEntity::ClearNavIgnore ) );
        
        }
        { //::CBaseEntity::ClearSolidFlags
        
            typedef void ( ::CBaseEntity::*ClearSolidFlags_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "ClearSolidFlags"
                , ClearSolidFlags_function_type( &::CBaseEntity::ClearSolidFlags ) );
        
        }
        { //::CBaseEntity::ClearSpawnFlags
        
            typedef void ( ::CBaseEntity::*ClearSpawnFlags_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "ClearSpawnFlags"
                , ClearSpawnFlags_function_type( &::CBaseEntity::ClearSpawnFlags ) );
        
        }
        { //::CBaseEntity::CollisionProp
        
            typedef ::CCollisionProperty * ( ::CBaseEntity::*CollisionProp_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "CollisionProp"
                , CollisionProp_function_type( &::CBaseEntity::CollisionProp )
                , bp::return_internal_reference< >() );
        
        }
        { //::CBaseEntity::CollisionProp
        
            typedef ::CCollisionProperty const * ( ::CBaseEntity::*CollisionProp_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "CollisionProp"
                , CollisionProp_function_type( &::CBaseEntity::CollisionProp )
                , bp::return_internal_reference< >() );
        
        }
        { //::CBaseEntity::CollisionRulesChanged
        
            typedef void ( ::CBaseEntity::*CollisionRulesChanged_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "CollisionRulesChanged"
                , CollisionRulesChanged_function_type( &::CBaseEntity::CollisionRulesChanged ) );
        
        }
        { //::CBaseEntity::ComputeAbsDirection
        
            typedef void ( ::CBaseEntity::*ComputeAbsDirection_function_type)( ::Vector const &,::Vector * ) ;
            
            CBaseEntity_exposer.def( 
                "ComputeAbsDirection"
                , ComputeAbsDirection_function_type( &::CBaseEntity::ComputeAbsDirection )
                , ( bp::arg("vecLocalDirection"), bp::arg("pAbsDirection") ) );
        
        }
        { //::CBaseEntity::ComputeAbsPosition
        
            typedef void ( ::CBaseEntity::*ComputeAbsPosition_function_type)( ::Vector const &,::Vector * ) ;
            
            CBaseEntity_exposer.def( 
                "ComputeAbsPosition"
                , ComputeAbsPosition_function_type( &::CBaseEntity::ComputeAbsPosition )
                , ( bp::arg("vecLocalPosition"), bp::arg("pAbsPosition") ) );
        
        }
        { //::CBaseEntity::ComputeWorldSpaceSurroundingBox
        
            typedef void ( ::CBaseEntity::*ComputeWorldSpaceSurroundingBox_function_type)( ::Vector *,::Vector * ) ;
            typedef void ( CBaseEntity_wrapper::*default_ComputeWorldSpaceSurroundingBox_function_type)( ::Vector *,::Vector * ) ;
            
            CBaseEntity_exposer.def( 
                "ComputeWorldSpaceSurroundingBox"
                , ComputeWorldSpaceSurroundingBox_function_type(&::CBaseEntity::ComputeWorldSpaceSurroundingBox)
                , default_ComputeWorldSpaceSurroundingBox_function_type(&CBaseEntity_wrapper::default_ComputeWorldSpaceSurroundingBox)
                , ( bp::arg("pWorldMins"), bp::arg("pWorldMaxs") ) );
        
        }
        { //::CBaseEntity::Create
        
            typedef ::CBaseEntity * ( *Create_function_type )( char const *,::Vector const &,::QAngle const &,::CBaseEntity * );
            
            CBaseEntity_exposer.def( 
                "Create"
                , Create_function_type( &::CBaseEntity::Create )
                , ( bp::arg("szName"), bp::arg("vecOrigin"), bp::arg("vecAngles"), bp::arg("pOwner")=bp::object() )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::CreateNoSpawn
        
            typedef ::CBaseEntity * ( *CreateNoSpawn_function_type )( char const *,::Vector const &,::QAngle const &,::CBaseEntity * );
            
            CBaseEntity_exposer.def( 
                "CreateNoSpawn"
                , CreateNoSpawn_function_type( &::CBaseEntity::CreateNoSpawn )
                , ( bp::arg("szName"), bp::arg("vecOrigin"), bp::arg("vecAngles"), bp::arg("pOwner")=bp::object() )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::CreatePredictedEntityByName
        
            typedef ::CBaseEntity * ( *CreatePredictedEntityByName_function_type )( char const *,char const *,int,bool );
            
            CBaseEntity_exposer.def( 
                "CreatePredictedEntityByName"
                , CreatePredictedEntityByName_function_type( &::CBaseEntity::CreatePredictedEntityByName )
                , ( bp::arg("classname"), bp::arg("module"), bp::arg("line"), bp::arg("persist")=(bool)(false) )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::CreateVPhysics
        
            typedef bool ( ::CBaseEntity::*CreateVPhysics_function_type)(  ) ;
            typedef bool ( CBaseEntity_wrapper::*default_CreateVPhysics_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "CreateVPhysics"
                , CreateVPhysics_function_type(&::CBaseEntity::CreateVPhysics)
                , default_CreateVPhysics_function_type(&CBaseEntity_wrapper::default_CreateVPhysics) );
        
        }
        { //::CBaseEntity::DamageDecal
        
            typedef char const * ( ::CBaseEntity::*DamageDecal_function_type)( int,int ) ;
            
            CBaseEntity_exposer.def( 
                "DamageDecal"
                , DamageDecal_function_type( &::CBaseEntity::DamageDecal )
                , ( bp::arg("bitsDamageType"), bp::arg("gameMaterial") ) );
        
        }
        { //::CBaseEntity::DeathNotice
        
            typedef void ( ::CBaseEntity::*DeathNotice_function_type)( ::CBaseEntity * ) ;
            typedef void ( CBaseEntity_wrapper::*default_DeathNotice_function_type)( ::CBaseEntity * ) ;
            
            CBaseEntity_exposer.def( 
                "DeathNotice"
                , DeathNotice_function_type(&::CBaseEntity::DeathNotice)
                , default_DeathNotice_function_type(&CBaseEntity_wrapper::default_DeathNotice)
                , ( bp::arg("pVictim") ) );
        
        }
        { //::CBaseEntity::Debug_IsPaused
        
            typedef bool ( *Debug_IsPaused_function_type )(  );
            
            CBaseEntity_exposer.def( 
                "Debug_IsPaused"
                , Debug_IsPaused_function_type( &::CBaseEntity::Debug_IsPaused ) );
        
        }
        { //::CBaseEntity::Debug_Pause
        
            typedef void ( *Debug_Pause_function_type )( bool );
            
            CBaseEntity_exposer.def( 
                "Debug_Pause"
                , Debug_Pause_function_type( &::CBaseEntity::Debug_Pause )
                , ( bp::arg("bPause") ) );
        
        }
        { //::CBaseEntity::Debug_SetSteps
        
            typedef void ( *Debug_SetSteps_function_type )( int );
            
            CBaseEntity_exposer.def( 
                "Debug_SetSteps"
                , Debug_SetSteps_function_type( &::CBaseEntity::Debug_SetSteps )
                , ( bp::arg("nSteps") ) );
        
        }
        { //::CBaseEntity::Debug_ShouldStep
        
            typedef bool ( *Debug_ShouldStep_function_type )(  );
            
            CBaseEntity_exposer.def( 
                "Debug_ShouldStep"
                , Debug_ShouldStep_function_type( &::CBaseEntity::Debug_ShouldStep ) );
        
        }
        { //::CBaseEntity::Debug_Step
        
            typedef bool ( *Debug_Step_function_type )(  );
            
            CBaseEntity_exposer.def( 
                "Debug_Step"
                , Debug_Step_function_type( &::CBaseEntity::Debug_Step ) );
        
        }
        { //::CBaseEntity::DecalTrace
        
            typedef void ( ::CBaseEntity::*DecalTrace_function_type)( ::trace_t *,char const * ) ;
            
            CBaseEntity_exposer.def( 
                "DecalTrace"
                , DecalTrace_function_type( &::CBaseEntity::DecalTrace )
                , ( bp::arg("pTrace"), bp::arg("decalName") ) );
        
        }
        { //::CBaseEntity::DecrementTransmitStateOwnedCounter
        
            typedef void ( ::CBaseEntity::*DecrementTransmitStateOwnedCounter_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "DecrementTransmitStateOwnedCounter"
                , DecrementTransmitStateOwnedCounter_function_type( &::CBaseEntity::DecrementTransmitStateOwnedCounter ) );
        
        }
        { //::CBaseEntity::Deflected
        
            typedef void ( ::CBaseEntity::*Deflected_function_type)( ::CBaseEntity *,::Vector & ) ;
            
            CBaseEntity_exposer.def( 
                "Deflected"
                , Deflected_function_type( &::CBaseEntity::Deflected )
                , ( bp::arg("pDeflectedBy"), bp::arg("vecDir") ) );
        
        }
        { //::CBaseEntity::DetectInSkybox
        
            typedef bool ( ::CBaseEntity::*DetectInSkybox_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "DetectInSkybox"
                , DetectInSkybox_function_type( &::CBaseEntity::DetectInSkybox ) );
        
        }
        { //::CBaseEntity::DispatchResponse
        
            typedef void ( ::CBaseEntity::*DispatchResponse_function_type)( char const * ) ;
            
            CBaseEntity_exposer.def( 
                "DispatchResponse"
                , DispatchResponse_function_type( &::CBaseEntity::DispatchResponse )
                , ( bp::arg("conceptName") ) );
        
        }
        { //::CBaseEntity::DispatchTraceAttack
        
            typedef void ( ::CBaseEntity::*DispatchTraceAttack_function_type)( ::CTakeDamageInfo const &,::Vector const &,::trace_t *,::CDmgAccumulator * ) ;
            
            CBaseEntity_exposer.def( 
                "DispatchTraceAttack"
                , DispatchTraceAttack_function_type( &::CBaseEntity::DispatchTraceAttack )
                , ( bp::arg("info"), bp::arg("vecDir"), bp::arg("ptr"), bp::arg("pAccumulator")=bp::object() ) );
        
        }
        { //::CBaseEntity::DispatchUpdateTransmitState
        
            typedef int ( ::CBaseEntity::*DispatchUpdateTransmitState_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "DispatchUpdateTransmitState"
                , DispatchUpdateTransmitState_function_type( &::CBaseEntity::DispatchUpdateTransmitState ) );
        
        }
        { //::CBaseEntity::DoImpactEffect
        
            typedef void ( ::CBaseEntity::*DoImpactEffect_function_type)( ::trace_t &,int ) ;
            typedef void ( CBaseEntity_wrapper::*default_DoImpactEffect_function_type)( ::trace_t &,int ) ;
            
            CBaseEntity_exposer.def( 
                "DoImpactEffect"
                , DoImpactEffect_function_type(&::CBaseEntity::DoImpactEffect)
                , default_DoImpactEffect_function_type(&CBaseEntity_wrapper::default_DoImpactEffect)
                , ( bp::arg("tr"), bp::arg("nDamageType") ) );
        
        }
        { //::CBaseEntity::DoesHavePlayerChild
        
            typedef bool ( ::CBaseEntity::*DoesHavePlayerChild_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "DoesHavePlayerChild"
                , DoesHavePlayerChild_function_type( &::CBaseEntity::DoesHavePlayerChild ) );
        
        }
        { //::CBaseEntity::DrawAbsBoxOverlay
        
            typedef void ( ::CBaseEntity::*DrawAbsBoxOverlay_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "DrawAbsBoxOverlay"
                , DrawAbsBoxOverlay_function_type( &::CBaseEntity::DrawAbsBoxOverlay ) );
        
        }
        { //::CBaseEntity::DrawBBoxOverlay
        
            typedef void ( ::CBaseEntity::*DrawBBoxOverlay_function_type)( float ) ;
            
            CBaseEntity_exposer.def( 
                "DrawBBoxOverlay"
                , DrawBBoxOverlay_function_type( &::CBaseEntity::DrawBBoxOverlay )
                , ( bp::arg("flDuration")=0.F ) );
        
        }
        { //::CBaseEntity::DrawDebugGeometryOverlays
        
            typedef void ( ::CBaseEntity::*DrawDebugGeometryOverlays_function_type)(  ) ;
            typedef void ( CBaseEntity_wrapper::*default_DrawDebugGeometryOverlays_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "DrawDebugGeometryOverlays"
                , DrawDebugGeometryOverlays_function_type(&::CBaseEntity::DrawDebugGeometryOverlays)
                , default_DrawDebugGeometryOverlays_function_type(&CBaseEntity_wrapper::default_DrawDebugGeometryOverlays) );
        
        }
        { //::CBaseEntity::DrawDebugTextOverlays
        
            typedef int ( ::CBaseEntity::*DrawDebugTextOverlays_function_type)(  ) ;
            typedef int ( CBaseEntity_wrapper::*default_DrawDebugTextOverlays_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "DrawDebugTextOverlays"
                , DrawDebugTextOverlays_function_type(&::CBaseEntity::DrawDebugTextOverlays)
                , default_DrawDebugTextOverlays_function_type(&CBaseEntity_wrapper::default_DrawDebugTextOverlays) );
        
        }
        { //::CBaseEntity::DrawInputOverlay
        
            typedef void ( ::CBaseEntity::*DrawInputOverlay_function_type)( char const *,::CBaseEntity *,::variant_t ) ;
            
            CBaseEntity_exposer.def( 
                "DrawInputOverlay"
                , DrawInputOverlay_function_type( &::CBaseEntity::DrawInputOverlay )
                , ( bp::arg("szInputName"), bp::arg("pCaller"), bp::arg("Value") ) );
        
        }
        { //::CBaseEntity::DrawRBoxOverlay
        
            typedef void ( ::CBaseEntity::*DrawRBoxOverlay_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "DrawRBoxOverlay"
                , DrawRBoxOverlay_function_type( &::CBaseEntity::DrawRBoxOverlay ) );
        
        }
        { //::CBaseEntity::DrawTimedOverlays
        
            typedef void ( ::CBaseEntity::*DrawTimedOverlays_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "DrawTimedOverlays"
                , DrawTimedOverlays_function_type( &::CBaseEntity::DrawTimedOverlays ) );
        
        }
        { //::CBaseEntity::DumpResponseCriteria
        
            typedef void ( ::CBaseEntity::*DumpResponseCriteria_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "DumpResponseCriteria"
                , DumpResponseCriteria_function_type( &::CBaseEntity::DumpResponseCriteria ) );
        
        }
        { //::CBaseEntity::EarPosition
        
            typedef ::Vector ( ::CBaseEntity::*EarPosition_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "EarPosition"
                , EarPosition_function_type( &::CBaseEntity::EarPosition ) );
        
        }
        { //::CBaseEntity::EarPosition
        
            typedef ::Vector ( ::CBaseEntity::*EarPosition_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "EarPosition"
                , EarPosition_function_type( &::CBaseEntity::EarPosition ) );
        
        }
        { //::CBaseEntity::EmitAmbientSound
        
            typedef void ( *EmitAmbientSound_function_type )( int,::Vector const &,char const *,int,float,float * );
            
            CBaseEntity_exposer.def( 
                "EmitAmbientSound"
                , EmitAmbientSound_function_type( &::CBaseEntity::EmitAmbientSound )
                , ( bp::arg("entindex"), bp::arg("origin"), bp::arg("soundname"), bp::arg("flags")=(int)(0), bp::arg("soundtime")=0.F, bp::arg("duration")=bp::object() ) );
        
        }
        { //::CBaseEntity::EmitCloseCaption
        
            typedef void ( *EmitCloseCaption_function_type )( ::IRecipientFilter &,int,char const *,::CUtlVector< Vector, CUtlMemory< Vector, int > > &,float,bool );
            
            CBaseEntity_exposer.def( 
                "EmitCloseCaption"
                , EmitCloseCaption_function_type( &::CBaseEntity::EmitCloseCaption )
                , ( bp::arg("filter"), bp::arg("entindex"), bp::arg("token"), bp::arg("soundorigins"), bp::arg("duration"), bp::arg("warnifmissing")=(bool)(false) ) );
        
        }
        { //::CBaseEntity::EmitSentenceByIndex
        
            typedef void ( *EmitSentenceByIndex_function_type )( ::IRecipientFilter &,int,int,int,float,::soundlevel_t,int,int,::Vector const *,::Vector const *,bool,float );
            
            CBaseEntity_exposer.def( 
                "EmitSentenceByIndex"
                , EmitSentenceByIndex_function_type( &::CBaseEntity::EmitSentenceByIndex )
                , ( bp::arg("filter"), bp::arg("iEntIndex"), bp::arg("iChannel"), bp::arg("iSentenceIndex"), bp::arg("flVolume"), bp::arg("iSoundlevel"), bp::arg("iFlags")=(int)(0), bp::arg("iPitch")=(int)(100), bp::arg("pOrigin")=bp::object(), bp::arg("pDirection")=bp::object(), bp::arg("bUpdatePositions")=(bool)(true), bp::arg("soundtime")=0.F ) );
        
        }
        { //::CBaseEntity::EmitSound
        
            typedef boost::python::object ( *EmitSound_function_type )( ::CBaseEntity &,char const *,float );
            
            CBaseEntity_exposer.def( 
                "EmitSound"
                , EmitSound_function_type( &CBaseEntity_wrapper::EmitSound_044cd926333812abcd0a98b7a6acb45c )
                , ( bp::arg("inst"), bp::arg("soundname"), bp::arg("soundtime")=0.F ) );
        
        }
        { //::CBaseEntity::EmitSound
        
            typedef boost::python::object ( *EmitSound_function_type )( ::CBaseEntity &,char const *,::HSOUNDSCRIPTHANDLE &,float );
            
            CBaseEntity_exposer.def( 
                "EmitSound"
                , EmitSound_function_type( &CBaseEntity_wrapper::EmitSound_9e167fc1a09029b22b87dc584e2811a7 )
                , ( bp::arg("inst"), bp::arg("soundname"), bp::arg("handle"), bp::arg("soundtime")=0.F ) );
        
        }
        { //::CBaseEntity::EmitSound
        
            typedef boost::python::object ( *EmitSoundFilter_function_type )( ::IRecipientFilter &,int,char const *,::Vector const *,float );
            
            CBaseEntity_exposer.def( 
                "EmitSoundFilter"
                , EmitSoundFilter_function_type( &CBaseEntity_wrapper::EmitSound_eb9d7c0d258c876b9a91e34cd0316f22 )
                , ( bp::arg("filter"), bp::arg("iEntIndex"), bp::arg("soundname"), bp::arg("pOrigin")=bp::object(), bp::arg("soundtime")=0.F ) );
        
        }
        { //::CBaseEntity::EmitSound
        
            typedef boost::python::object ( *EmitSoundFilter_function_type )( ::IRecipientFilter &,int,char const *,::HSOUNDSCRIPTHANDLE &,::Vector const *,float );
            
            CBaseEntity_exposer.def( 
                "EmitSoundFilter"
                , EmitSoundFilter_function_type( &CBaseEntity_wrapper::EmitSound_1c2389c0a40890ff9911d3d83eebfe14 )
                , ( bp::arg("filter"), bp::arg("iEntIndex"), bp::arg("soundname"), bp::arg("handle"), bp::arg("pOrigin")=bp::object(), bp::arg("soundtime")=0.F ) );
        
        }
        { //::CBaseEntity::EmitSound
        
            typedef void ( *EmitSoundFilter_function_type )( ::IRecipientFilter &,int,::EmitSound_t const & );
            
            CBaseEntity_exposer.def( 
                "EmitSoundFilter"
                , EmitSoundFilter_function_type( &::CBaseEntity::EmitSound )
                , ( bp::arg("filter"), bp::arg("iEntIndex"), bp::arg("params") ) );
        
        }
        { //::CBaseEntity::EmitSound
        
            typedef void ( *EmitSoundFilter_function_type )( ::IRecipientFilter &,int,::EmitSound_t const &,::HSOUNDSCRIPTHANDLE & );
            
            CBaseEntity_exposer.def( 
                "EmitSoundFilter"
                , EmitSoundFilter_function_type( &::CBaseEntity::EmitSound )
                , ( bp::arg("filter"), bp::arg("iEntIndex"), bp::arg("params"), bp::arg("handle") ) );
        
        }
        { //::CBaseEntity::EndBlocked
        
            typedef void ( ::CBaseEntity::*EndBlocked_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "EndBlocked"
                , EndBlocked_function_type( &::CBaseEntity::EndBlocked ) );
        
        }
        { //::CBaseEntity::EndGroundContact
        
            typedef void ( ::CBaseEntity::*EndGroundContact_function_type)( ::CBaseEntity * ) ;
            
            CBaseEntity_exposer.def( 
                "EndGroundContact"
                , EndGroundContact_function_type( &::CBaseEntity::EndGroundContact )
                , ( bp::arg("ground") ) );
        
        }
        { //::CBaseEntity::EndTouch
        
            typedef void ( ::CBaseEntity::*EndTouch_function_type)( ::CBaseEntity * ) ;
            typedef void ( CBaseEntity_wrapper::*default_EndTouch_function_type)( ::CBaseEntity * ) ;
            
            CBaseEntity_exposer.def( 
                "EndTouch"
                , EndTouch_function_type(&::CBaseEntity::EndTouch)
                , default_EndTouch_function_type(&CBaseEntity_wrapper::default_EndTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseEntity::EntityText
        
            typedef void ( ::CBaseEntity::*EntityText_function_type)( int,char const *,float,int,int,int,int ) ;
            
            CBaseEntity_exposer.def( 
                "EntityText"
                , EntityText_function_type( &::CBaseEntity::EntityText )
                , ( bp::arg("text_offset"), bp::arg("text"), bp::arg("flDuration"), bp::arg("r")=(int)(255), bp::arg("g")=(int)(255), bp::arg("b")=(int)(255), bp::arg("a")=(int)(255) ) );
        
        }
        { //::CBaseEntity::EntityToWorldSpace
        
            typedef void ( ::CBaseEntity::*EntityToWorldSpace_function_type)( ::Vector const &,::Vector * ) const;
            
            CBaseEntity_exposer.def( 
                "EntityToWorldSpace"
                , EntityToWorldSpace_function_type( &::CBaseEntity::EntityToWorldSpace )
                , ( bp::arg("in"), bp::arg("pOut") ) );
        
        }
        { //::CBaseEntity::EntityToWorldTransform
        
            typedef ::matrix3x4_t & ( ::CBaseEntity::*EntityToWorldTransform_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "EntityToWorldTransform"
                , EntityToWorldTransform_function_type( &::CBaseEntity::EntityToWorldTransform )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::EntityToWorldTransform
        
            typedef ::matrix3x4_t const & ( ::CBaseEntity::*EntityToWorldTransform_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "EntityToWorldTransform"
                , EntityToWorldTransform_function_type( &::CBaseEntity::EntityToWorldTransform )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::Event_Killed
        
            typedef void ( ::CBaseEntity::*Event_Killed_function_type)( ::CTakeDamageInfo const & ) ;
            typedef void ( CBaseEntity_wrapper::*default_Event_Killed_function_type)( ::CTakeDamageInfo const & ) ;
            
            CBaseEntity_exposer.def( 
                "Event_Killed"
                , Event_Killed_function_type(&::CBaseEntity::Event_Killed)
                , default_Event_Killed_function_type(&CBaseEntity_wrapper::default_Event_Killed)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::Event_KilledOther
        
            typedef void ( ::CBaseEntity::*Event_KilledOther_function_type)( ::CBaseEntity *,::CTakeDamageInfo const & ) ;
            typedef void ( CBaseEntity_wrapper::*default_Event_KilledOther_function_type)( ::CBaseEntity *,::CTakeDamageInfo const & ) ;
            
            CBaseEntity_exposer.def( 
                "Event_KilledOther"
                , Event_KilledOther_function_type(&::CBaseEntity::Event_KilledOther)
                , default_Event_KilledOther_function_type(&CBaseEntity_wrapper::default_Event_KilledOther)
                , ( bp::arg("pVictim"), bp::arg("info") ) );
        
        }
        { //::CBaseEntity::EyeAngles
        
            typedef ::QAngle const & ( ::CBaseEntity::*EyeAngles_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "EyeAngles"
                , EyeAngles_function_type( &::CBaseEntity::EyeAngles )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBaseEntity::EyeAngles
        
            typedef ::QAngle const & ( ::CBaseEntity::*EyeAngles_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "EyeAngles"
                , EyeAngles_function_type( &::CBaseEntity::EyeAngles )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBaseEntity::EyePosition
        
            typedef ::Vector ( ::CBaseEntity::*EyePosition_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "EyePosition"
                , EyePosition_function_type( &::CBaseEntity::EyePosition ) );
        
        }
        { //::CBaseEntity::EyePosition
        
            typedef ::Vector ( ::CBaseEntity::*EyePosition_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "EyePosition"
                , EyePosition_function_type( &::CBaseEntity::EyePosition ) );
        
        }
        { //::CBaseEntity::FVisible
        
            typedef bool ( ::CBaseEntity::*FVisible_function_type)( ::CBaseEntity *,int,::CBaseEntity * * ) ;
            
            CBaseEntity_exposer.def( 
                "FVisible"
                , FVisible_function_type( &::CBaseEntity::FVisible )
                , ( bp::arg("pEntity"), bp::arg("traceMask")=(int)((1 | 16384 | 64)), bp::arg("ppBlocker")=bp::object() ) );
        
        }
        { //::CBaseEntity::FVisible
        
            typedef bool ( ::CBaseEntity::*FVisible_function_type)( ::Vector const &,int,::CBaseEntity * * ) ;
            
            CBaseEntity_exposer.def( 
                "FVisible"
                , FVisible_function_type( &::CBaseEntity::FVisible )
                , ( bp::arg("vecTarget"), bp::arg("traceMask")=(int)((1 | 16384 | 64)), bp::arg("ppBlocker")=bp::object() ) );
        
        }
        { //::CBaseEntity::FireBullets
        
            typedef void ( ::CBaseEntity::*FireBullets_function_type)( ::FireBulletsInfo_t const & ) ;
            
            CBaseEntity_exposer.def( 
                "FireBullets"
                , FireBullets_function_type( &::CBaseEntity::FireBullets )
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::FireNamedOutput
        
            typedef void ( ::CBaseEntity::*FireNamedOutput_function_type)( char const *,::variant_t,::CBaseEntity *,::CBaseEntity *,float ) ;
            
            CBaseEntity_exposer.def( 
                "FireNamedOutput"
                , FireNamedOutput_function_type( &::CBaseEntity::FireNamedOutput )
                , ( bp::arg("pszOutput"), bp::arg("variant"), bp::arg("pActivator"), bp::arg("pCaller"), bp::arg("flDelay")=0.F ) );
        
        }
        { //::CBaseEntity::FirstMoveChild
        
            typedef ::CBaseEntity * ( ::CBaseEntity::*FirstMoveChild_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "FirstMoveChild"
                , FirstMoveChild_function_type( &::CBaseEntity::FirstMoveChild )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::FollowEntity
        
            typedef void ( ::CBaseEntity::*FollowEntity_function_type)( ::CBaseEntity *,bool ) ;
            
            CBaseEntity_exposer.def( 
                "FollowEntity"
                , FollowEntity_function_type( &::CBaseEntity::FollowEntity )
                , ( bp::arg("pBaseEntity"), bp::arg("bBoneMerge")=(bool)(true) ) );
        
        }
        { //::CBaseEntity::GenderExpandString
        
            typedef void ( ::CBaseEntity::*GenderExpandString_function_type)( char const *,char *,int ) ;
            
            CBaseEntity_exposer.def( 
                "GenderExpandString"
                , GenderExpandString_function_type( &::CBaseEntity::GenderExpandString )
                , ( bp::arg("in"), bp::arg("out"), bp::arg("maxlen") ) );
        
        }
        { //::CBaseEntity::GetAbsAngles
        
            typedef ::QAngle const & ( ::CBaseEntity::*GetAbsAngles_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetAbsAngles"
                , GetAbsAngles_function_type( &::CBaseEntity::GetAbsAngles )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBaseEntity::GetAbsOrigin
        
            typedef ::Vector const & ( ::CBaseEntity::*GetAbsOrigin_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetAbsOrigin"
                , GetAbsOrigin_function_type( &::CBaseEntity::GetAbsOrigin )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBaseEntity::GetAbsVelocity
        
            typedef ::Vector const & ( ::CBaseEntity::*GetAbsVelocity_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetAbsVelocity"
                , GetAbsVelocity_function_type( &::CBaseEntity::GetAbsVelocity )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBaseEntity::GetAttackDamageScale
        
            typedef float ( ::CBaseEntity::*GetAttackDamageScale_function_type)( ::CBaseEntity * ) ;
            
            CBaseEntity_exposer.def( 
                "GetAttackDamageScale"
                , GetAttackDamageScale_function_type( &::CBaseEntity::GetAttackDamageScale )
                , ( bp::arg("pVictim") ) );
        
        }
        { //::CBaseEntity::GetAutoAimCenter
        
            typedef ::Vector ( ::CBaseEntity::*GetAutoAimCenter_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "GetAutoAimCenter"
                , GetAutoAimCenter_function_type( &::CBaseEntity::GetAutoAimCenter ) );
        
        }
        { //::CBaseEntity::GetAutoAimRadius
        
            typedef float ( ::CBaseEntity::*GetAutoAimRadius_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "GetAutoAimRadius"
                , GetAutoAimRadius_function_type( &::CBaseEntity::GetAutoAimRadius ) );
        
        }
        { //::CBaseEntity::GetBaseVelocity
        
            typedef ::Vector const & ( ::CBaseEntity::*GetBaseVelocity_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetBaseVelocity"
                , GetBaseVelocity_function_type( &::CBaseEntity::GetBaseVelocity )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBaseEntity::GetBeamTraceFilter
        
            typedef ::ITraceFilter * ( ::CBaseEntity::*GetBeamTraceFilter_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "GetBeamTraceFilter"
                , GetBeamTraceFilter_function_type( &::CBaseEntity::GetBeamTraceFilter )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::GetCheckUntouch
        
            typedef bool ( ::CBaseEntity::*GetCheckUntouch_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetCheckUntouch"
                , GetCheckUntouch_function_type( &::CBaseEntity::GetCheckUntouch ) );
        
        }
        { //::CBaseEntity::GetClassname
        
            typedef char const * ( ::CBaseEntity::*GetClassname_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "GetClassname"
                , GetClassname_function_type( &::CBaseEntity::GetClassname ) );
        
        }
        { //::CBaseEntity::GetCollisionGroup
        
            typedef int ( ::CBaseEntity::*GetCollisionGroup_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetCollisionGroup"
                , GetCollisionGroup_function_type( &::CBaseEntity::GetCollisionGroup ) );
        
        }
        { //::CBaseEntity::GetDamage
        
            typedef float ( ::CBaseEntity::*GetDamage_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "GetDamage"
                , GetDamage_function_type( &::CBaseEntity::GetDamage ) );
        
        }
        { //::CBaseEntity::GetDamageType
        
            typedef int ( ::CBaseEntity::*GetDamageType_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetDamageType"
                , GetDamageType_function_type( &::CBaseEntity::GetDamageType ) );
        
        }
        { //::CBaseEntity::GetDebugName
        
            typedef char const * ( ::CBaseEntity::*GetDebugName_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "GetDebugName"
                , GetDebugName_function_type( &::CBaseEntity::GetDebugName ) );
        
        }
        { //::CBaseEntity::GetDelay
        
            typedef float ( ::CBaseEntity::*GetDelay_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "GetDelay"
                , GetDelay_function_type( &::CBaseEntity::GetDelay ) );
        
        }
        { //::CBaseEntity::GetEFlags
        
            typedef int ( ::CBaseEntity::*GetEFlags_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetEFlags"
                , GetEFlags_function_type( &::CBaseEntity::GetEFlags ) );
        
        }
        { //::CBaseEntity::GetEffectEntity
        
            typedef ::CBaseEntity * ( ::CBaseEntity::*GetEffectEntity_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetEffectEntity"
                , GetEffectEntity_function_type( &::CBaseEntity::GetEffectEntity )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::GetEffects
        
            typedef int ( ::CBaseEntity::*GetEffects_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetEffects"
                , GetEffects_function_type( &::CBaseEntity::GetEffects ) );
        
        }
        { //::CBaseEntity::GetElasticity
        
            typedef float ( ::CBaseEntity::*GetElasticity_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetElasticity"
                , GetElasticity_function_type( &::CBaseEntity::GetElasticity ) );
        
        }
        { //::CBaseEntity::GetEnemy
        
            typedef ::CBaseEntity * ( ::CBaseEntity::*GetEnemy_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "GetEnemy"
                , GetEnemy_function_type( &::CBaseEntity::GetEnemy )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::GetEnemy
        
            typedef ::CBaseEntity * ( ::CBaseEntity::*GetEnemy_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetEnemy"
                , GetEnemy_function_type( &::CBaseEntity::GetEnemy )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::GetEntityName
        
            typedef ::string_t ( ::CBaseEntity::*GetEntityName_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "GetEntityName"
                , GetEntityName_function_type( &::CBaseEntity::GetEntityName ) );
        
        }
        { //::CBaseEntity::GetEntitySkybox
        
            typedef ::CSkyCamera * ( ::CBaseEntity::*GetEntitySkybox_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "GetEntitySkybox"
                , GetEntitySkybox_function_type( &::CBaseEntity::GetEntitySkybox )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::GetFirstThinkTick
        
            typedef int ( ::CBaseEntity::*GetFirstThinkTick_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "GetFirstThinkTick"
                , GetFirstThinkTick_function_type( &::CBaseEntity::GetFirstThinkTick ) );
        
        }
        { //::CBaseEntity::GetFlags
        
            typedef int ( ::CBaseEntity::*GetFlags_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetFlags"
                , GetFlags_function_type( &::CBaseEntity::GetFlags ) );
        
        }
        { //::CBaseEntity::GetFollowedEntity
        
            typedef ::CBaseEntity * ( ::CBaseEntity::*GetFollowedEntity_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "GetFollowedEntity"
                , GetFollowedEntity_function_type( &::CBaseEntity::GetFollowedEntity )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::GetFriction
        
            typedef float ( ::CBaseEntity::*GetFriction_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetFriction"
                , GetFriction_function_type( &::CBaseEntity::GetFriction ) );
        
        }
        { //::CBaseEntity::GetGravity
        
            typedef float ( ::CBaseEntity::*GetGravity_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetGravity"
                , GetGravity_function_type( &::CBaseEntity::GetGravity ) );
        
        }
        { //::CBaseEntity::GetGroundChangeTime
        
            typedef float ( ::CBaseEntity::*GetGroundChangeTime_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "GetGroundChangeTime"
                , GetGroundChangeTime_function_type( &::CBaseEntity::GetGroundChangeTime ) );
        
        }
        { //::CBaseEntity::GetGroundEntity
        
            typedef ::CBaseEntity * ( ::CBaseEntity::*GetGroundEntity_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "GetGroundEntity"
                , GetGroundEntity_function_type( &::CBaseEntity::GetGroundEntity )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::GetGroundEntity
        
            typedef ::CBaseEntity * ( ::CBaseEntity::*GetGroundEntity_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetGroundEntity"
                , GetGroundEntity_function_type( &::CBaseEntity::GetGroundEntity )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::GetInputDispatchEffectPosition
        
            typedef void ( ::CBaseEntity::*GetInputDispatchEffectPosition_function_type)( char const *,::Vector &,::QAngle & ) ;
            
            CBaseEntity_exposer.def( 
                "GetInputDispatchEffectPosition"
                , GetInputDispatchEffectPosition_function_type( &::CBaseEntity::GetInputDispatchEffectPosition )
                , ( bp::arg("sInputString"), bp::arg("pOrigin"), bp::arg("pAngles") ) );
        
        }
        { //::CBaseEntity::GetKeyValue
        
            typedef bool ( ::CBaseEntity::*GetKeyValue_function_type)( char const *,char *,int ) ;
            
            CBaseEntity_exposer.def( 
                "GetKeyValue"
                , GetKeyValue_function_type( &::CBaseEntity::GetKeyValue )
                , ( bp::arg("szKeyName"), bp::arg("szValue"), bp::arg("iMaxLen") ) );
        
        }
        { //::CBaseEntity::GetLastThink
        
            typedef float ( ::CBaseEntity::*GetLastThink_function_type)( char const * ) ;
            
            CBaseEntity_exposer.def( 
                "GetLastThink"
                , GetLastThink_function_type( &::CBaseEntity::GetLastThink )
                , ( bp::arg("szContext")=bp::object() ) );
        
        }
        { //::CBaseEntity::GetLastThinkTick
        
            typedef int ( ::CBaseEntity::*GetLastThinkTick_function_type)( char const * ) ;
            
            CBaseEntity_exposer.def( 
                "GetLastThinkTick"
                , GetLastThinkTick_function_type( &::CBaseEntity::GetLastThinkTick )
                , ( bp::arg("szContext")=bp::object() ) );
        
        }
        { //::CBaseEntity::GetLocalAngles
        
            typedef ::QAngle const & ( ::CBaseEntity::*GetLocalAngles_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetLocalAngles"
                , GetLocalAngles_function_type( &::CBaseEntity::GetLocalAngles )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBaseEntity::GetLocalAngularVelocity
        
            typedef ::QAngle const & ( ::CBaseEntity::*GetLocalAngularVelocity_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetLocalAngularVelocity"
                , GetLocalAngularVelocity_function_type( &::CBaseEntity::GetLocalAngularVelocity )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBaseEntity::GetLocalOrigin
        
            typedef ::Vector const & ( ::CBaseEntity::*GetLocalOrigin_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetLocalOrigin"
                , GetLocalOrigin_function_type( &::CBaseEntity::GetLocalOrigin )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBaseEntity::GetLocalTime
        
            typedef float ( ::CBaseEntity::*GetLocalTime_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetLocalTime"
                , GetLocalTime_function_type( &::CBaseEntity::GetLocalTime ) );
        
        }
        { //::CBaseEntity::GetLocalVelocity
        
            typedef ::Vector const & ( ::CBaseEntity::*GetLocalVelocity_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetLocalVelocity"
                , GetLocalVelocity_function_type( &::CBaseEntity::GetLocalVelocity )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBaseEntity::GetModelIndex
        
            typedef int ( ::CBaseEntity::*GetModelIndex_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetModelIndex"
                , GetModelIndex_function_type( &::CBaseEntity::GetModelIndex ) );
        
        }
        { //::CBaseEntity::GetModelName
        
            typedef ::string_t ( ::CBaseEntity::*GetModelName_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetModelName"
                , GetModelName_function_type( &::CBaseEntity::GetModelName ) );
        
        }
        { //::CBaseEntity::GetMoveCollide
        
            typedef ::MoveCollide_t ( ::CBaseEntity::*GetMoveCollide_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetMoveCollide"
                , GetMoveCollide_function_type( &::CBaseEntity::GetMoveCollide ) );
        
        }
        { //::CBaseEntity::GetMoveDoneTime
        
            typedef float ( ::CBaseEntity::*GetMoveDoneTime_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetMoveDoneTime"
                , GetMoveDoneTime_function_type( &::CBaseEntity::GetMoveDoneTime ) );
        
        }
        { //::CBaseEntity::GetMoveParent
        
            typedef ::CBaseEntity * ( ::CBaseEntity::*GetMoveParent_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "GetMoveParent"
                , GetMoveParent_function_type( &::CBaseEntity::GetMoveParent )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::GetMoveType
        
            typedef ::MoveType_t ( ::CBaseEntity::*GetMoveType_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetMoveType"
                , GetMoveType_function_type( &::CBaseEntity::GetMoveType ) );
        
        }
        { //::CBaseEntity::GetNextTarget
        
            typedef ::CBaseEntity * ( ::CBaseEntity::*GetNextTarget_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "GetNextTarget"
                , GetNextTarget_function_type( &::CBaseEntity::GetNextTarget )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::GetNextThink
        
            typedef float ( ::CBaseEntity::*GetNextThink_function_type)( char const * ) ;
            
            CBaseEntity_exposer.def( 
                "GetNextThink"
                , GetNextThink_function_type( &::CBaseEntity::GetNextThink )
                , ( bp::arg("szContext")=bp::object() ) );
        
        }
        { //::CBaseEntity::GetNextThinkTick
        
            typedef int ( ::CBaseEntity::*GetNextThinkTick_function_type)( char const * ) ;
            
            CBaseEntity_exposer.def( 
                "GetNextThinkTick"
                , GetNextThinkTick_function_type( &::CBaseEntity::GetNextThinkTick )
                , ( bp::arg("szContext")=bp::object() ) );
        
        }
        { //::CBaseEntity::GetOwnerEntity
        
            typedef ::CBaseEntity * ( ::CBaseEntity::*GetOwnerEntity_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetOwnerEntity"
                , GetOwnerEntity_function_type( &::CBaseEntity::GetOwnerEntity )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::GetParametersForSound
        
            typedef bool ( *GetParametersForSound_function_type )( char const *,::CSoundParameters &,char const * );
            
            CBaseEntity_exposer.def( 
                "GetParametersForSound"
                , GetParametersForSound_function_type( &::CBaseEntity::GetParametersForSound )
                , ( bp::arg("soundname"), bp::arg("params"), bp::arg("actormodel") ) );
        
        }
        { //::CBaseEntity::GetParametersForSound
        
            typedef bool ( *GetParametersForSound_function_type )( char const *,::HSOUNDSCRIPTHANDLE &,::CSoundParameters &,char const * );
            
            CBaseEntity_exposer.def( 
                "GetParametersForSound"
                , GetParametersForSound_function_type( &::CBaseEntity::GetParametersForSound )
                , ( bp::arg("soundname"), bp::arg("handle"), bp::arg("params"), bp::arg("actormodel") ) );
        
        }
        { //::CBaseEntity::GetParent
        
            typedef ::CBaseEntity * ( ::CBaseEntity::*GetParent_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "GetParent"
                , GetParent_function_type( &::CBaseEntity::GetParent )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::GetParentAttachment
        
            typedef int ( ::CBaseEntity::*GetParentAttachment_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "GetParentAttachment"
                , GetParentAttachment_function_type( &::CBaseEntity::GetParentAttachment ) );
        
        }
        { //::CBaseEntity::GetParentToWorldTransform
        
            typedef ::matrix3x4_t & ( ::CBaseEntity::*GetParentToWorldTransform_function_type)( ::matrix3x4_t & ) ;
            
            CBaseEntity_exposer.def( 
                "GetParentToWorldTransform"
                , GetParentToWorldTransform_function_type( &::CBaseEntity::GetParentToWorldTransform )
                , ( bp::arg("tempMatrix") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::GetPredictionPlayer
        
            typedef ::CBasePlayer * ( *GetPredictionPlayer_function_type )(  );
            
            CBaseEntity_exposer.def( 
                "GetPredictionPlayer"
                , GetPredictionPlayer_function_type( &::CBaseEntity::GetPredictionPlayer )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::GetPredictionRandomSeed
        
            typedef int ( *GetPredictionRandomSeed_function_type )( bool );
            
            CBaseEntity_exposer.def( 
                "GetPredictionRandomSeed"
                , GetPredictionRandomSeed_function_type( &::CBaseEntity::GetPredictionRandomSeed )
                , ( bp::arg("bUseUnSyncedServerPlatTime")=(bool)(false) ) );
        
        }
        { //::CBaseEntity::GetPyHandle
        
            typedef ::boost::python::api::object ( ::CBaseEntity::*GetHandle_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetHandle"
                , GetHandle_function_type( &::CBaseEntity::GetPyHandle ) );
        
        }
        { //::CBaseEntity::GetPyThink
        
            typedef ::boost::python::api::object ( ::CBaseEntity::*GetThink_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "GetThink"
                , GetThink_function_type( &::CBaseEntity::GetPyThink ) );
        
        }
        { //::CBaseEntity::GetReceivedDamageScale
        
            typedef float ( ::CBaseEntity::*GetReceivedDamageScale_function_type)( ::CBaseEntity * ) ;
            
            CBaseEntity_exposer.def( 
                "GetReceivedDamageScale"
                , GetReceivedDamageScale_function_type( &::CBaseEntity::GetReceivedDamageScale )
                , ( bp::arg("pAttacker") ) );
        
        }
        { //::CBaseEntity::GetRenderColor
        
            typedef ::color32 const ( ::CBaseEntity::*GetRenderColor_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetRenderColor"
                , GetRenderColor_function_type( &::CBaseEntity::GetRenderColor ) );
        
        }
        { //::CBaseEntity::GetRenderMode
        
            typedef ::RenderMode_t ( ::CBaseEntity::*GetRenderMode_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetRenderMode"
                , GetRenderMode_function_type( &::CBaseEntity::GetRenderMode ) );
        
        }
        { //::CBaseEntity::GetRootMoveParent
        
            typedef ::CBaseEntity * ( ::CBaseEntity::*GetRootMoveParent_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "GetRootMoveParent"
                , GetRootMoveParent_function_type( &::CBaseEntity::GetRootMoveParent )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::GetSendTable
        
            typedef ::SendTable * ( *GetSendTable_function_type )(  );
            
            CBaseEntity_exposer.def( 
                "GetSendTable"
                , GetSendTable_function_type( &::CBaseEntity::GetSendTable )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::CBaseEntity::GetShadowCastDistance
        
            typedef float ( ::CBaseEntity::*GetShadowCastDistance_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetShadowCastDistance"
                , GetShadowCastDistance_function_type( &::CBaseEntity::GetShadowCastDistance ) );
        
        }
        { //::CBaseEntity::GetSimulatingPlayer
        
            typedef ::CBasePlayer * ( ::CBaseEntity::*GetSimulatingPlayer_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "GetSimulatingPlayer"
                , GetSimulatingPlayer_function_type( &::CBaseEntity::GetSimulatingPlayer )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::GetSmoothedVelocity
        
            typedef ::Vector ( ::CBaseEntity::*GetSmoothedVelocity_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "GetSmoothedVelocity"
                , GetSmoothedVelocity_function_type( &::CBaseEntity::GetSmoothedVelocity ) );
        
        }
        { //::CBaseEntity::GetSolid
        
            typedef ::SolidType_t ( ::CBaseEntity::*GetSolid_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetSolid"
                , GetSolid_function_type( &::CBaseEntity::GetSolid ) );
        
        }
        { //::CBaseEntity::GetSolidFlags
        
            typedef int ( ::CBaseEntity::*GetSolidFlags_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetSolidFlags"
                , GetSolidFlags_function_type( &::CBaseEntity::GetSolidFlags ) );
        
        }
        { //::CBaseEntity::GetSoundDuration
        
            typedef float ( *GetSoundDuration_function_type )( char const *,char const * );
            
            CBaseEntity_exposer.def( 
                "GetSoundDuration"
                , GetSoundDuration_function_type( &::CBaseEntity::GetSoundDuration )
                , ( bp::arg("soundname"), bp::arg("actormodel") ) );
        
        }
        { //::CBaseEntity::GetSoundEmissionOrigin
        
            typedef ::Vector ( ::CBaseEntity::*GetSoundEmissionOrigin_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetSoundEmissionOrigin"
                , GetSoundEmissionOrigin_function_type( &::CBaseEntity::GetSoundEmissionOrigin ) );
        
        }
        { //::CBaseEntity::GetSoundSourceIndex
        
            typedef int ( ::CBaseEntity::*GetSoundSourceIndex_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetSoundSourceIndex"
                , GetSoundSourceIndex_function_type( &::CBaseEntity::GetSoundSourceIndex ) );
        
        }
        { //::CBaseEntity::GetSpawnFlags
        
            typedef int ( ::CBaseEntity::*GetSpawnFlags_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetSpawnFlags"
                , GetSpawnFlags_function_type( &::CBaseEntity::GetSpawnFlags ) );
        
        }
        { //::CBaseEntity::GetTeamNumber
        
            typedef int ( ::CBaseEntity::*GetTeamNumber_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetTeamNumber"
                , GetTeamNumber_function_type( &::CBaseEntity::GetTeamNumber ) );
        
        }
        { //::CBaseEntity::GetTextureFrameIndex
        
            typedef int ( ::CBaseEntity::*GetTextureFrameIndex_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "GetTextureFrameIndex"
                , GetTextureFrameIndex_function_type( &::CBaseEntity::GetTextureFrameIndex ) );
        
        }
        { //::CBaseEntity::GetTouchTrace
        
            typedef ::trace_t const & ( *GetTouchTrace_function_type )(  );
            
            CBaseEntity_exposer.def( 
                "GetTouchTrace"
                , GetTouchTrace_function_type( &::CBaseEntity::GetTouchTrace )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::CBaseEntity::GetTracerAttachment
        
            typedef int ( ::CBaseEntity::*GetTracerAttachment_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "GetTracerAttachment"
                , GetTracerAttachment_function_type( &::CBaseEntity::GetTracerAttachment ) );
        
        }
        { //::CBaseEntity::GetTracerType
        
            typedef char const * ( ::CBaseEntity::*GetTracerType_function_type)(  ) ;
            typedef char const * ( CBaseEntity_wrapper::*default_GetTracerType_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "GetTracerType"
                , GetTracerType_function_type(&::CBaseEntity::GetTracerType)
                , default_GetTracerType_function_type(&CBaseEntity_wrapper::default_GetTracerType) );
        
        }
        { //::CBaseEntity::GetTransmitState
        
            typedef int ( ::CBaseEntity::*GetTransmitState_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "GetTransmitState"
                , GetTransmitState_function_type( &::CBaseEntity::GetTransmitState ) );
        
        }
        { //::CBaseEntity::GetVectors
        
            typedef void ( ::CBaseEntity::*GetVectors_function_type)( ::Vector *,::Vector *,::Vector * ) const;
            
            CBaseEntity_exposer.def( 
                "GetVectors"
                , GetVectors_function_type( &::CBaseEntity::GetVectors )
                , ( bp::arg("forward"), bp::arg("right"), bp::arg("up") ) );
        
        }
        { //::CBaseEntity::GetVelocity
        
            typedef void ( ::CBaseEntity::*GetVelocity_function_type)( ::Vector *,::AngularImpulse * ) ;
            
            CBaseEntity_exposer.def( 
                "GetVelocity"
                , GetVelocity_function_type( &::CBaseEntity::GetVelocity )
                , ( bp::arg("vVelocity"), bp::arg("vAngVelocity")=bp::object() ) );
        
        }
        { //::CBaseEntity::GetViewOffset
        
            typedef ::Vector const & ( ::CBaseEntity::*GetViewOffset_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetViewOffset"
                , GetViewOffset_function_type( &::CBaseEntity::GetViewOffset )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBaseEntity::GetWaterLevel
        
            typedef int ( ::CBaseEntity::*GetWaterLevel_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetWaterLevel"
                , GetWaterLevel_function_type( &::CBaseEntity::GetWaterLevel ) );
        
        }
        { //::CBaseEntity::GetWaterType
        
            typedef int ( ::CBaseEntity::*GetWaterType_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "GetWaterType"
                , GetWaterType_function_type( &::CBaseEntity::GetWaterType ) );
        
        }
        { //::CBaseEntity::HasNPCsOnIt
        
            typedef bool ( ::CBaseEntity::*HasNPCsOnIt_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "HasNPCsOnIt"
                , HasNPCsOnIt_function_type( &::CBaseEntity::HasNPCsOnIt ) );
        
        }
        { //::CBaseEntity::HasPhysicsAttacker
        
            typedef ::CBasePlayer * ( ::CBaseEntity::*HasPhysicsAttacker_function_type)( float ) ;
            
            CBaseEntity_exposer.def( 
                "HasPhysicsAttacker"
                , HasPhysicsAttacker_function_type( &::CBaseEntity::HasPhysicsAttacker )
                , ( bp::arg("dt") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::HasSpawnFlags
        
            typedef bool ( ::CBaseEntity::*HasSpawnFlags_function_type)( int ) const;
            
            CBaseEntity_exposer.def( 
                "HasSpawnFlags"
                , HasSpawnFlags_function_type( &::CBaseEntity::HasSpawnFlags )
                , ( bp::arg("nFlags") ) );
        
        }
        { //::CBaseEntity::HasTarget
        
            typedef bool ( ::CBaseEntity::*HasTarget_function_type)( ::string_t ) ;
            
            CBaseEntity_exposer.def( 
                "HasTarget"
                , HasTarget_function_type( &::CBaseEntity::HasTarget )
                , ( bp::arg("targetname") ) );
        
        }
        { //::CBaseEntity::HeadTarget
        
            typedef ::Vector ( ::CBaseEntity::*HeadTarget_function_type)( ::Vector const & ) ;
            
            CBaseEntity_exposer.def( 
                "HeadTarget"
                , HeadTarget_function_type( &::CBaseEntity::HeadTarget )
                , ( bp::arg("posSrc") ) );
        
        }
        { //::CBaseEntity::HealthFraction
        
            typedef float ( ::CBaseEntity::*HealthFraction_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "HealthFraction"
                , HealthFraction_function_type( &::CBaseEntity::HealthFraction ) );
        
        }
        { //::CBaseEntity::ImpactTrace
        
            typedef void ( ::CBaseEntity::*ImpactTrace_function_type)( ::trace_t *,int,char const * ) ;
            
            CBaseEntity_exposer.def( 
                "ImpactTrace"
                , ImpactTrace_function_type( &::CBaseEntity::ImpactTrace )
                , ( bp::arg("pTrace"), bp::arg("iDamageType"), bp::arg("pCustomImpactName")=bp::object() ) );
        
        }
        { //::CBaseEntity::InSameTeam
        
            typedef bool ( ::CBaseEntity::*InSameTeam_function_type)( ::CBaseEntity * ) const;
            
            CBaseEntity_exposer.def( 
                "InSameTeam"
                , InSameTeam_function_type( &::CBaseEntity::InSameTeam )
                , ( bp::arg("pEntity") ) );
        
        }
        { //::CBaseEntity::IncrementInterpolationFrame
        
            typedef void ( ::CBaseEntity::*IncrementInterpolationFrame_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "IncrementInterpolationFrame"
                , IncrementInterpolationFrame_function_type( &::CBaseEntity::IncrementInterpolationFrame ) );
        
        }
        { //::CBaseEntity::IncrementLocalTime
        
            typedef void ( ::CBaseEntity::*IncrementLocalTime_function_type)( float ) ;
            
            CBaseEntity_exposer.def( 
                "IncrementLocalTime"
                , IncrementLocalTime_function_type( &::CBaseEntity::IncrementLocalTime )
                , ( bp::arg("flTimeDelta") ) );
        
        }
        { //::CBaseEntity::IncrementTransmitStateOwnedCounter
        
            typedef void ( ::CBaseEntity::*IncrementTransmitStateOwnedCounter_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "IncrementTransmitStateOwnedCounter"
                , IncrementTransmitStateOwnedCounter_function_type( &::CBaseEntity::IncrementTransmitStateOwnedCounter ) );
        
        }
        { //::CBaseEntity::InputAddContext
        
            typedef void ( ::CBaseEntity::*InputAddContext_function_type)( ::inputdata_t & ) ;
            
            CBaseEntity_exposer.def( 
                "InputAddContext"
                , InputAddContext_function_type( &::CBaseEntity::InputAddContext )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseEntity::InputAddOutput
        
            typedef void ( ::CBaseEntity::*InputAddOutput_function_type)( ::inputdata_t & ) ;
            
            CBaseEntity_exposer.def( 
                "InputAddOutput"
                , InputAddOutput_function_type( &::CBaseEntity::InputAddOutput )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseEntity::InputAlpha
        
            typedef void ( ::CBaseEntity::*InputAlpha_function_type)( ::inputdata_t & ) ;
            
            CBaseEntity_exposer.def( 
                "InputAlpha"
                , InputAlpha_function_type( &::CBaseEntity::InputAlpha )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseEntity::InputAlternativeSorting
        
            typedef void ( ::CBaseEntity::*InputAlternativeSorting_function_type)( ::inputdata_t & ) ;
            
            CBaseEntity_exposer.def( 
                "InputAlternativeSorting"
                , InputAlternativeSorting_function_type( &::CBaseEntity::InputAlternativeSorting )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseEntity::InputClearContext
        
            typedef void ( ::CBaseEntity::*InputClearContext_function_type)( ::inputdata_t & ) ;
            
            CBaseEntity_exposer.def( 
                "InputClearContext"
                , InputClearContext_function_type( &::CBaseEntity::InputClearContext )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseEntity::InputClearParent
        
            typedef void ( ::CBaseEntity::*InputClearParent_function_type)( ::inputdata_t & ) ;
            
            CBaseEntity_exposer.def( 
                "InputClearParent"
                , InputClearParent_function_type( &::CBaseEntity::InputClearParent )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseEntity::InputColor
        
            typedef void ( ::CBaseEntity::*InputColor_function_type)( ::inputdata_t & ) ;
            
            CBaseEntity_exposer.def( 
                "InputColor"
                , InputColor_function_type( &::CBaseEntity::InputColor )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseEntity::InputDisableDamageForces
        
            typedef void ( ::CBaseEntity::*InputDisableDamageForces_function_type)( ::inputdata_t & ) ;
            
            CBaseEntity_exposer.def( 
                "InputDisableDamageForces"
                , InputDisableDamageForces_function_type( &::CBaseEntity::InputDisableDamageForces )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseEntity::InputDisableShadow
        
            typedef void ( ::CBaseEntity::*InputDisableShadow_function_type)( ::inputdata_t & ) ;
            
            CBaseEntity_exposer.def( 
                "InputDisableShadow"
                , InputDisableShadow_function_type( &::CBaseEntity::InputDisableShadow )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseEntity::InputDispatchEffect
        
            typedef void ( ::CBaseEntity::*InputDispatchEffect_function_type)( ::inputdata_t & ) ;
            
            CBaseEntity_exposer.def( 
                "InputDispatchEffect"
                , InputDispatchEffect_function_type( &::CBaseEntity::InputDispatchEffect )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseEntity::InputDispatchResponse
        
            typedef void ( ::CBaseEntity::*InputDispatchResponse_function_type)( ::inputdata_t & ) ;
            
            CBaseEntity_exposer.def( 
                "InputDispatchResponse"
                , InputDispatchResponse_function_type( &::CBaseEntity::InputDispatchResponse )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseEntity::InputEnableDamageForces
        
            typedef void ( ::CBaseEntity::*InputEnableDamageForces_function_type)( ::inputdata_t & ) ;
            
            CBaseEntity_exposer.def( 
                "InputEnableDamageForces"
                , InputEnableDamageForces_function_type( &::CBaseEntity::InputEnableDamageForces )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseEntity::InputEnableShadow
        
            typedef void ( ::CBaseEntity::*InputEnableShadow_function_type)( ::inputdata_t & ) ;
            
            CBaseEntity_exposer.def( 
                "InputEnableShadow"
                , InputEnableShadow_function_type( &::CBaseEntity::InputEnableShadow )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseEntity::InputFireUser1
        
            typedef void ( ::CBaseEntity::*InputFireUser1_function_type)( ::inputdata_t & ) ;
            
            CBaseEntity_exposer.def( 
                "InputFireUser1"
                , InputFireUser1_function_type( &::CBaseEntity::InputFireUser1 )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseEntity::InputFireUser2
        
            typedef void ( ::CBaseEntity::*InputFireUser2_function_type)( ::inputdata_t & ) ;
            
            CBaseEntity_exposer.def( 
                "InputFireUser2"
                , InputFireUser2_function_type( &::CBaseEntity::InputFireUser2 )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseEntity::InputFireUser3
        
            typedef void ( ::CBaseEntity::*InputFireUser3_function_type)( ::inputdata_t & ) ;
            
            CBaseEntity_exposer.def( 
                "InputFireUser3"
                , InputFireUser3_function_type( &::CBaseEntity::InputFireUser3 )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseEntity::InputFireUser4
        
            typedef void ( ::CBaseEntity::*InputFireUser4_function_type)( ::inputdata_t & ) ;
            
            CBaseEntity_exposer.def( 
                "InputFireUser4"
                , InputFireUser4_function_type( &::CBaseEntity::InputFireUser4 )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseEntity::InputKill
        
            typedef void ( ::CBaseEntity::*InputKill_function_type)( ::inputdata_t & ) ;
            
            CBaseEntity_exposer.def( 
                "InputKill"
                , InputKill_function_type( &::CBaseEntity::InputKill )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseEntity::InputKillHierarchy
        
            typedef void ( ::CBaseEntity::*InputKillHierarchy_function_type)( ::inputdata_t & ) ;
            
            CBaseEntity_exposer.def( 
                "InputKillHierarchy"
                , InputKillHierarchy_function_type( &::CBaseEntity::InputKillHierarchy )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseEntity::InputRemoveContext
        
            typedef void ( ::CBaseEntity::*InputRemoveContext_function_type)( ::inputdata_t & ) ;
            
            CBaseEntity_exposer.def( 
                "InputRemoveContext"
                , InputRemoveContext_function_type( &::CBaseEntity::InputRemoveContext )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseEntity::InputSetDamageFilter
        
            typedef void ( ::CBaseEntity::*InputSetDamageFilter_function_type)( ::inputdata_t & ) ;
            
            CBaseEntity_exposer.def( 
                "InputSetDamageFilter"
                , InputSetDamageFilter_function_type( &::CBaseEntity::InputSetDamageFilter )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseEntity::InputSetParent
        
            typedef void ( ::CBaseEntity::*InputSetParent_function_type)( ::inputdata_t & ) ;
            
            CBaseEntity_exposer.def( 
                "InputSetParent"
                , InputSetParent_function_type( &::CBaseEntity::InputSetParent )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseEntity::InputSetParentAttachment
        
            typedef void ( ::CBaseEntity::*InputSetParentAttachment_function_type)( ::inputdata_t & ) ;
            
            CBaseEntity_exposer.def( 
                "InputSetParentAttachment"
                , InputSetParentAttachment_function_type( &::CBaseEntity::InputSetParentAttachment )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseEntity::InputSetParentAttachmentMaintainOffset
        
            typedef void ( ::CBaseEntity::*InputSetParentAttachmentMaintainOffset_function_type)( ::inputdata_t & ) ;
            
            CBaseEntity_exposer.def( 
                "InputSetParentAttachmentMaintainOffset"
                , InputSetParentAttachmentMaintainOffset_function_type( &::CBaseEntity::InputSetParentAttachmentMaintainOffset )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseEntity::InputSetTeam
        
            typedef void ( ::CBaseEntity::*InputSetTeam_function_type)( ::inputdata_t & ) ;
            
            CBaseEntity_exposer.def( 
                "InputSetTeam"
                , InputSetTeam_function_type( &::CBaseEntity::InputSetTeam )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseEntity::InputUse
        
            typedef void ( ::CBaseEntity::*InputUse_function_type)( ::inputdata_t & ) ;
            
            CBaseEntity_exposer.def( 
                "InputUse"
                , InputUse_function_type( &::CBaseEntity::InputUse )
                , ( bp::arg("inputdata") ) );
        
        }
        { //::CBaseEntity::Instance
        
            typedef ::CBaseEntity * ( *Instance_function_type )( ::CBaseHandle const & );
            
            CBaseEntity_exposer.def( 
                "Instance"
                , Instance_function_type( &::CBaseEntity::Instance )
                , ( bp::arg("hEnt") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::Instance
        
            typedef ::CBaseEntity * ( *Instance_function_type )( int );
            
            CBaseEntity_exposer.def( 
                "Instance"
                , Instance_function_type( &::CBaseEntity::Instance )
                , ( bp::arg("iEnt") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::Intersects
        
            typedef bool ( ::CBaseEntity::*Intersects_function_type)( ::CBaseEntity * ) ;
            
            CBaseEntity_exposer.def( 
                "Intersects"
                , Intersects_function_type( &::CBaseEntity::Intersects )
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseEntity::IsAIWalkable
        
            typedef bool ( ::CBaseEntity::*IsAIWalkable_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "IsAIWalkable"
                , IsAIWalkable_function_type( &::CBaseEntity::IsAIWalkable ) );
        
        }
        { //::CBaseEntity::IsAbsQueriesValid
        
            typedef bool ( *IsAbsQueriesValid_function_type )(  );
            
            CBaseEntity_exposer.def( 
                "IsAbsQueriesValid"
                , IsAbsQueriesValid_function_type( &::CBaseEntity::IsAbsQueriesValid ) );
        
        }
        { //::CBaseEntity::IsAlive
        
            typedef bool ( ::CBaseEntity::*IsAlive_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "IsAlive"
                , IsAlive_function_type( &::CBaseEntity::IsAlive ) );
        
        }
        { //::CBaseEntity::IsAnimatedEveryTick
        
            typedef bool ( ::CBaseEntity::*IsAnimatedEveryTick_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "IsAnimatedEveryTick"
                , IsAnimatedEveryTick_function_type( &::CBaseEntity::IsAnimatedEveryTick ) );
        
        }
        { //::CBaseEntity::IsBSPModel
        
            typedef bool ( ::CBaseEntity::*IsBSPModel_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "IsBSPModel"
                , IsBSPModel_function_type( &::CBaseEntity::IsBSPModel ) );
        
        }
        { //::CBaseEntity::IsBaseCombatWeapon
        
            typedef bool ( ::CBaseEntity::*IsBaseCombatWeapon_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "IsBaseCombatWeapon"
                , IsBaseCombatWeapon_function_type( &::CBaseEntity::IsBaseCombatWeapon ) );
        
        }
        { //::CBaseEntity::IsBaseObject
        
            typedef bool ( ::CBaseEntity::*IsBaseObject_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "IsBaseObject"
                , IsBaseObject_function_type( &::CBaseEntity::IsBaseObject ) );
        
        }
        { //::CBaseEntity::IsBaseTrain
        
            typedef bool ( ::CBaseEntity::*IsBaseTrain_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "IsBaseTrain"
                , IsBaseTrain_function_type( &::CBaseEntity::IsBaseTrain ) );
        
        }
        { //::CBaseEntity::IsCombatCharacter
        
            typedef bool ( ::CBaseEntity::*IsCombatCharacter_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "IsCombatCharacter"
                , IsCombatCharacter_function_type( &::CBaseEntity::IsCombatCharacter ) );
        
        }
        { //::CBaseEntity::IsCombatItem
        
            typedef bool ( ::CBaseEntity::*IsCombatItem_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "IsCombatItem"
                , IsCombatItem_function_type( &::CBaseEntity::IsCombatItem ) );
        
        }
        { //::CBaseEntity::IsCurrentlyTouching
        
            typedef bool ( ::CBaseEntity::*IsCurrentlyTouching_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "IsCurrentlyTouching"
                , IsCurrentlyTouching_function_type( &::CBaseEntity::IsCurrentlyTouching ) );
        
        }
        { //::CBaseEntity::IsDeflectable
        
            typedef bool ( ::CBaseEntity::*IsDeflectable_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "IsDeflectable"
                , IsDeflectable_function_type( &::CBaseEntity::IsDeflectable ) );
        
        }
        { //::CBaseEntity::IsDormant
        
            typedef int ( ::CBaseEntity::*IsDormant_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "IsDormant"
                , IsDormant_function_type( &::CBaseEntity::IsDormant ) );
        
        }
        { //::CBaseEntity::IsDynamicModelLoading
        
            typedef bool ( ::CBaseEntity::*IsDynamicModelLoading_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "IsDynamicModelLoading"
                , IsDynamicModelLoading_function_type( &::CBaseEntity::IsDynamicModelLoading ) );
        
        }
        { //::CBaseEntity::IsEFlagSet
        
            typedef bool ( ::CBaseEntity::*IsEFlagSet_function_type)( int ) const;
            
            CBaseEntity_exposer.def( 
                "IsEFlagSet"
                , IsEFlagSet_function_type( &::CBaseEntity::IsEFlagSet )
                , ( bp::arg("nEFlagMask") ) );
        
        }
        { //::CBaseEntity::IsEdictFree
        
            typedef bool ( ::CBaseEntity::*IsEdictFree_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "IsEdictFree"
                , IsEdictFree_function_type( &::CBaseEntity::IsEdictFree ) );
        
        }
        { //::CBaseEntity::IsEffectActive
        
            typedef bool ( ::CBaseEntity::*IsEffectActive_function_type)( int ) const;
            
            CBaseEntity_exposer.def( 
                "IsEffectActive"
                , IsEffectActive_function_type( &::CBaseEntity::IsEffectActive )
                , ( bp::arg("nEffects") ) );
        
        }
        { //::CBaseEntity::IsFloating
        
            typedef bool ( ::CBaseEntity::*IsFloating_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "IsFloating"
                , IsFloating_function_type( &::CBaseEntity::IsFloating ) );
        
        }
        { //::CBaseEntity::IsFollowingEntity
        
            typedef bool ( ::CBaseEntity::*IsFollowingEntity_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "IsFollowingEntity"
                , IsFollowingEntity_function_type( &::CBaseEntity::IsFollowingEntity ) );
        
        }
        { //::CBaseEntity::IsInAnyTeam
        
            typedef bool ( ::CBaseEntity::*IsInAnyTeam_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "IsInAnyTeam"
                , IsInAnyTeam_function_type( &::CBaseEntity::IsInAnyTeam ) );
        
        }
        { //::CBaseEntity::IsInWorld
        
            typedef bool ( ::CBaseEntity::*IsInWorld_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "IsInWorld"
                , IsInWorld_function_type( &::CBaseEntity::IsInWorld ) );
        
        }
        { //::CBaseEntity::IsLockedByMaster
        
            typedef bool ( ::CBaseEntity::*IsLockedByMaster_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "IsLockedByMaster"
                , IsLockedByMaster_function_type( &::CBaseEntity::IsLockedByMaster ) );
        
        }
        { //::CBaseEntity::IsMarkedForDeletion
        
            typedef bool ( ::CBaseEntity::*IsMarkedForDeletion_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "IsMarkedForDeletion"
                , IsMarkedForDeletion_function_type( &::CBaseEntity::IsMarkedForDeletion ) );
        
        }
        { //::CBaseEntity::IsMoving
        
            typedef bool ( ::CBaseEntity::*IsMoving_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "IsMoving"
                , IsMoving_function_type( &::CBaseEntity::IsMoving ) );
        
        }
        { //::CBaseEntity::IsNPC
        
            typedef bool ( ::CBaseEntity::*IsNPC_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "IsNPC"
                , IsNPC_function_type( &::CBaseEntity::IsNPC ) );
        
        }
        { //::CBaseEntity::IsNavIgnored
        
            typedef bool ( ::CBaseEntity::*IsNavIgnored_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "IsNavIgnored"
                , IsNavIgnored_function_type( &::CBaseEntity::IsNavIgnored ) );
        
        }
        { //::CBaseEntity::IsNetClient
        
            typedef bool ( ::CBaseEntity::*IsNetClient_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "IsNetClient"
                , IsNetClient_function_type( &::CBaseEntity::IsNetClient ) );
        
        }
        { //::CBaseEntity::IsPlayer
        
            typedef bool ( ::CBaseEntity::*IsPlayer_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "IsPlayer"
                , IsPlayer_function_type( &::CBaseEntity::IsPlayer ) );
        
        }
        { //::CBaseEntity::IsPlayerSimulated
        
            typedef bool ( ::CBaseEntity::*IsPlayerSimulated_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "IsPlayerSimulated"
                , IsPlayerSimulated_function_type( &::CBaseEntity::IsPlayerSimulated ) );
        
        }
        { //::CBaseEntity::IsPointSized
        
            typedef bool ( ::CBaseEntity::*IsPointSized_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "IsPointSized"
                , IsPointSized_function_type( &::CBaseEntity::IsPointSized ) );
        
        }
        { //::CBaseEntity::IsPrecacheAllowed
        
            typedef bool ( *IsPrecacheAllowed_function_type )(  );
            
            CBaseEntity_exposer.def( 
                "IsPrecacheAllowed"
                , IsPrecacheAllowed_function_type( &::CBaseEntity::IsPrecacheAllowed ) );
        
        }
        { //::CBaseEntity::IsSimulatedEveryTick
        
            typedef bool ( ::CBaseEntity::*IsSimulatedEveryTick_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "IsSimulatedEveryTick"
                , IsSimulatedEveryTick_function_type( &::CBaseEntity::IsSimulatedEveryTick ) );
        
        }
        { //::CBaseEntity::IsSimulatingOnAlternateTicks
        
            typedef bool ( *IsSimulatingOnAlternateTicks_function_type )(  );
            
            CBaseEntity_exposer.def( 
                "IsSimulatingOnAlternateTicks"
                , IsSimulatingOnAlternateTicks_function_type( &::CBaseEntity::IsSimulatingOnAlternateTicks ) );
        
        }
        { //::CBaseEntity::IsSolid
        
            typedef bool ( ::CBaseEntity::*IsSolid_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "IsSolid"
                , IsSolid_function_type( &::CBaseEntity::IsSolid ) );
        
        }
        { //::CBaseEntity::IsSolidFlagSet
        
            typedef bool ( ::CBaseEntity::*IsSolidFlagSet_function_type)( int ) const;
            
            CBaseEntity_exposer.def( 
                "IsSolidFlagSet"
                , IsSolidFlagSet_function_type( &::CBaseEntity::IsSolidFlagSet )
                , ( bp::arg("flagMask") ) );
        
        }
        { //::CBaseEntity::IsStandable
        
            typedef bool ( ::CBaseEntity::*IsStandable_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "IsStandable"
                , IsStandable_function_type( &::CBaseEntity::IsStandable ) );
        
        }
        { //::CBaseEntity::IsTemplate
        
            typedef bool ( ::CBaseEntity::*IsTemplate_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "IsTemplate"
                , IsTemplate_function_type( &::CBaseEntity::IsTemplate ) );
        
        }
        { //::CBaseEntity::IsTransparent
        
            typedef bool ( ::CBaseEntity::*IsTransparent_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "IsTransparent"
                , IsTransparent_function_type( &::CBaseEntity::IsTransparent ) );
        
        }
        { //::CBaseEntity::IsTriggered
        
            typedef bool ( ::CBaseEntity::*IsTriggered_function_type)( ::CBaseEntity * ) ;
            
            CBaseEntity_exposer.def( 
                "IsTriggered"
                , IsTriggered_function_type( &::CBaseEntity::IsTriggered )
                , ( bp::arg("pActivator") ) );
        
        }
        { //::CBaseEntity::IsViewable
        
            typedef bool ( ::CBaseEntity::*IsViewable_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "IsViewable"
                , IsViewable_function_type( &::CBaseEntity::IsViewable ) );
        
        }
        { //::CBaseEntity::IsWearable
        
            typedef bool ( ::CBaseEntity::*IsWearable_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "IsWearable"
                , IsWearable_function_type( &::CBaseEntity::IsWearable ) );
        
        }
        { //::CBaseEntity::IsWorld
        
            typedef bool ( ::CBaseEntity::*IsWorld_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "IsWorld"
                , IsWorld_function_type( &::CBaseEntity::IsWorld ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type)( char const *,char const * ) ;
            typedef bool ( CBaseEntity_wrapper::*default_KeyValue_function_type)( char const *,char const * ) ;
            
            CBaseEntity_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBaseEntity_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("szValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type)( char const *,float ) ;
            typedef bool ( CBaseEntity_wrapper::*default_KeyValue_function_type)( char const *,float ) ;
            
            CBaseEntity_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBaseEntity_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("flValue") ) );
        
        }
        { //::CBaseEntity::KeyValue
        
            typedef bool ( ::CBaseEntity::*KeyValue_function_type)( char const *,::Vector const & ) ;
            typedef bool ( CBaseEntity_wrapper::*default_KeyValue_function_type)( char const *,::Vector const & ) ;
            
            CBaseEntity_exposer.def( 
                "KeyValue"
                , KeyValue_function_type(&::CBaseEntity::KeyValue)
                , default_KeyValue_function_type(&CBaseEntity_wrapper::default_KeyValue)
                , ( bp::arg("szKeyName"), bp::arg("vecValue") ) );
        
        }
        { //::CBaseEntity::LocalEyeAngles
        
            typedef ::QAngle const & ( ::CBaseEntity::*LocalEyeAngles_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "LocalEyeAngles"
                , LocalEyeAngles_function_type( &::CBaseEntity::LocalEyeAngles )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBaseEntity::LocalEyeAngles
        
            typedef ::QAngle const & ( ::CBaseEntity::*LocalEyeAngles_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "LocalEyeAngles"
                , LocalEyeAngles_function_type( &::CBaseEntity::LocalEyeAngles )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBaseEntity::LookupSoundLevel
        
            typedef ::soundlevel_t ( *LookupSoundLevel_function_type )( char const * );
            
            CBaseEntity_exposer.def( 
                "LookupSoundLevel"
                , LookupSoundLevel_function_type( &::CBaseEntity::LookupSoundLevel )
                , ( bp::arg("soundname") ) );
        
        }
        { //::CBaseEntity::LookupSoundLevel
        
            typedef ::soundlevel_t ( *LookupSoundLevel_function_type )( char const *,::HSOUNDSCRIPTHANDLE & );
            
            CBaseEntity_exposer.def( 
                "LookupSoundLevel"
                , LookupSoundLevel_function_type( &::CBaseEntity::LookupSoundLevel )
                , ( bp::arg("soundname"), bp::arg("handle") ) );
        
        }
        { //::CBaseEntity::MakeDormant
        
            typedef void ( ::CBaseEntity::*MakeDormant_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "MakeDormant"
                , MakeDormant_function_type( &::CBaseEntity::MakeDormant ) );
        
        }
        { //::CBaseEntity::MakeTracer
        
            typedef void ( ::CBaseEntity::*MakeTracer_function_type)( ::Vector const &,::trace_t const &,int ) ;
            typedef void ( CBaseEntity_wrapper::*default_MakeTracer_function_type)( ::Vector const &,::trace_t const &,int ) ;
            
            CBaseEntity_exposer.def( 
                "MakeTracer"
                , MakeTracer_function_type(&::CBaseEntity::MakeTracer)
                , default_MakeTracer_function_type(&CBaseEntity_wrapper::default_MakeTracer)
                , ( bp::arg("vecTracerSrc"), bp::arg("tr"), bp::arg("iTracerType") ) );
        
        }
        { //::CBaseEntity::ModifyEmitSoundParams
        
            typedef void ( ::CBaseEntity::*ModifyEmitSoundParams_function_type)( ::EmitSound_t & ) ;
            
            CBaseEntity_exposer.def( 
                "ModifyEmitSoundParams"
                , ModifyEmitSoundParams_function_type( &::CBaseEntity::ModifyEmitSoundParams )
                , ( bp::arg("params") ) );
        
        }
        { //::CBaseEntity::ModifyFireBulletsDamage
        
            typedef void ( ::CBaseEntity::*ModifyFireBulletsDamage_function_type)( ::CTakeDamageInfo * ) ;
            
            CBaseEntity_exposer.def( 
                "ModifyFireBulletsDamage"
                , ModifyFireBulletsDamage_function_type( &::CBaseEntity::ModifyFireBulletsDamage )
                , ( bp::arg("dmgInfo") ) );
        
        }
        { //::CBaseEntity::ModifyOrAppendCriteria
        
            typedef void ( ::CBaseEntity::*ModifyOrAppendCriteria_function_type)( ::AI_CriteriaSet & ) ;
            typedef void ( CBaseEntity_wrapper::*default_ModifyOrAppendCriteria_function_type)( ::AI_CriteriaSet & ) ;
            
            CBaseEntity_exposer.def( 
                "ModifyOrAppendCriteria"
                , ModifyOrAppendCriteria_function_type(&::CBaseEntity::ModifyOrAppendCriteria)
                , default_ModifyOrAppendCriteria_function_type(&CBaseEntity_wrapper::default_ModifyOrAppendCriteria)
                , ( bp::arg("set") ) );
        
        }
        { //::CBaseEntity::MoveDone
        
            typedef void ( ::CBaseEntity::*MoveDone_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "MoveDone"
                , MoveDone_function_type( &::CBaseEntity::MoveDone ) );
        
        }
        { //::CBaseEntity::NameMatches
        
            typedef bool ( ::CBaseEntity::*NameMatches_function_type)( char const * ) ;
            
            CBaseEntity_exposer.def( 
                "NameMatches"
                , NameMatches_function_type( &::CBaseEntity::NameMatches )
                , ( bp::arg("pszNameOrWildcard") ) );
        
        }
        { //::CBaseEntity::NameMatches
        
            typedef bool ( ::CBaseEntity::*NameMatches_function_type)( ::string_t ) ;
            
            CBaseEntity_exposer.def( 
                "NameMatches"
                , NameMatches_function_type( &::CBaseEntity::NameMatches )
                , ( bp::arg("nameStr") ) );
        
        }
        { //::CBaseEntity::NextMovePeer
        
            typedef ::CBaseEntity * ( ::CBaseEntity::*NextMovePeer_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "NextMovePeer"
                , NextMovePeer_function_type( &::CBaseEntity::NextMovePeer )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::ObjectCaps
        
            typedef int ( ::CBaseEntity::*ObjectCaps_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "ObjectCaps"
                , ObjectCaps_function_type( &::CBaseEntity::ObjectCaps ) );
        
        }
        { //::CBaseEntity::OnControls
        
            typedef bool ( ::CBaseEntity::*OnControls_function_type)( ::CBaseEntity * ) ;
            
            CBaseEntity_exposer.def( 
                "OnControls"
                , OnControls_function_type( &::CBaseEntity::OnControls )
                , ( bp::arg("pControls") ) );
        
        }
        { //::CBaseEntity::OnRestore
        
            typedef void ( ::CBaseEntity::*OnRestore_function_type)(  ) ;
            typedef void ( CBaseEntity_wrapper::*default_OnRestore_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "OnRestore"
                , OnRestore_function_type(&::CBaseEntity::OnRestore)
                , default_OnRestore_function_type(&CBaseEntity_wrapper::default_OnRestore) );
        
        }
        { //::CBaseEntity::OnSave
        
            typedef void ( ::CBaseEntity::*OnSave_function_type)( ::IEntitySaveUtils * ) ;
            
            CBaseEntity_exposer.def( 
                "OnSave"
                , OnSave_function_type( &::CBaseEntity::OnSave )
                , ( bp::arg("pSaveUtils") ) );
        
        }
        { //::CBaseEntity::OnTakeDamage
        
            typedef int ( ::CBaseEntity::*OnTakeDamage_function_type)( ::CTakeDamageInfo const & ) ;
            typedef int ( CBaseEntity_wrapper::*default_OnTakeDamage_function_type)( ::CTakeDamageInfo const & ) ;
            
            CBaseEntity_exposer.def( 
                "OnTakeDamage"
                , OnTakeDamage_function_type(&::CBaseEntity::OnTakeDamage)
                , default_OnTakeDamage_function_type(&CBaseEntity_wrapper::default_OnTakeDamage)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::PassesDamageFilter
        
            typedef bool ( ::CBaseEntity::*PassesDamageFilter_function_type)( ::CTakeDamageInfo const & ) ;
            typedef bool ( CBaseEntity_wrapper::*default_PassesDamageFilter_function_type)( ::CTakeDamageInfo const & ) ;
            
            CBaseEntity_exposer.def( 
                "PassesDamageFilter"
                , PassesDamageFilter_function_type(&::CBaseEntity::PassesDamageFilter)
                , default_PassesDamageFilter_function_type(&CBaseEntity_wrapper::default_PassesDamageFilter)
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::PhysicsCheckForEntityUntouch
        
            typedef void ( ::CBaseEntity::*PhysicsCheckForEntityUntouch_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "PhysicsCheckForEntityUntouch"
                , PhysicsCheckForEntityUntouch_function_type( &::CBaseEntity::PhysicsCheckForEntityUntouch ) );
        
        }
        { //::CBaseEntity::PhysicsCheckWater
        
            typedef bool ( ::CBaseEntity::*PhysicsCheckWater_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "PhysicsCheckWater"
                , PhysicsCheckWater_function_type( &::CBaseEntity::PhysicsCheckWater ) );
        
        }
        { //::CBaseEntity::PhysicsCheckWaterTransition
        
            typedef void ( ::CBaseEntity::*PhysicsCheckWaterTransition_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "PhysicsCheckWaterTransition"
                , PhysicsCheckWaterTransition_function_type( &::CBaseEntity::PhysicsCheckWaterTransition ) );
        
        }
        { //::CBaseEntity::PhysicsImpact
        
            typedef void ( ::CBaseEntity::*PhysicsImpact_function_type)( ::CBaseEntity *,::trace_t & ) ;
            
            CBaseEntity_exposer.def( 
                "PhysicsImpact"
                , PhysicsImpact_function_type( &::CBaseEntity::PhysicsImpact )
                , ( bp::arg("other"), bp::arg("trace") ) );
        
        }
        { //::CBaseEntity::PhysicsMarkEntitiesAsTouching
        
            typedef void ( ::CBaseEntity::*PhysicsMarkEntitiesAsTouching_function_type)( ::CBaseEntity *,::trace_t & ) ;
            
            CBaseEntity_exposer.def( 
                "PhysicsMarkEntitiesAsTouching"
                , PhysicsMarkEntitiesAsTouching_function_type( &::CBaseEntity::PhysicsMarkEntitiesAsTouching )
                , ( bp::arg("other"), bp::arg("trace") ) );
        
        }
        { //::CBaseEntity::PhysicsMarkEntitiesAsTouchingEventDriven
        
            typedef void ( ::CBaseEntity::*PhysicsMarkEntitiesAsTouchingEventDriven_function_type)( ::CBaseEntity *,::trace_t & ) ;
            
            CBaseEntity_exposer.def( 
                "PhysicsMarkEntitiesAsTouchingEventDriven"
                , PhysicsMarkEntitiesAsTouchingEventDriven_function_type( &::CBaseEntity::PhysicsMarkEntitiesAsTouchingEventDriven )
                , ( bp::arg("other"), bp::arg("trace") ) );
        
        }
        { //::CBaseEntity::PhysicsNotifyOtherOfGroundRemoval
        
            typedef void ( *PhysicsNotifyOtherOfGroundRemoval_function_type )( ::CBaseEntity *,::CBaseEntity * );
            
            CBaseEntity_exposer.def( 
                "PhysicsNotifyOtherOfGroundRemoval"
                , PhysicsNotifyOtherOfGroundRemoval_function_type( &::CBaseEntity::PhysicsNotifyOtherOfGroundRemoval )
                , ( bp::arg("ent"), bp::arg("other") ) );
        
        }
        { //::CBaseEntity::PhysicsNotifyOtherOfUntouch
        
            typedef void ( *PhysicsNotifyOtherOfUntouch_function_type )( ::CBaseEntity *,::CBaseEntity * );
            
            CBaseEntity_exposer.def( 
                "PhysicsNotifyOtherOfUntouch"
                , PhysicsNotifyOtherOfUntouch_function_type( &::CBaseEntity::PhysicsNotifyOtherOfUntouch )
                , ( bp::arg("ent"), bp::arg("other") ) );
        
        }
        { //::CBaseEntity::PhysicsPushEntity
        
            typedef void ( ::CBaseEntity::*PhysicsPushEntity_function_type)( ::Vector const &,::trace_t * ) ;
            
            CBaseEntity_exposer.def( 
                "PhysicsPushEntity"
                , PhysicsPushEntity_function_type( &::CBaseEntity::PhysicsPushEntity )
                , ( bp::arg("push"), bp::arg("pTrace") ) );
        
        }
        { //::CBaseEntity::PhysicsPyDispatchThink
        
            typedef void ( ::CBaseEntity::*PhysicsPyDispatchThink_function_type)( ::boost::python::api::object ) ;
            
            CBaseEntity_exposer.def( 
                "PhysicsPyDispatchThink"
                , PhysicsPyDispatchThink_function_type( &::CBaseEntity::PhysicsPyDispatchThink )
                , ( bp::arg("thinkFunc") ) );
        
        }
        { //::CBaseEntity::PhysicsPyRunSpecificThink
        
            typedef bool ( ::CBaseEntity::*PhysicsPyRunSpecificThink_function_type)( int,::boost::python::api::object ) ;
            
            CBaseEntity_exposer.def( 
                "PhysicsPyRunSpecificThink"
                , PhysicsPyRunSpecificThink_function_type( &::CBaseEntity::PhysicsPyRunSpecificThink )
                , ( bp::arg("nContextIndex"), bp::arg("thinkFunc") ) );
        
        }
        { //::CBaseEntity::PhysicsRemoveGroundList
        
            typedef void ( *PhysicsRemoveGroundList_function_type )( ::CBaseEntity * );
            
            CBaseEntity_exposer.def( 
                "PhysicsRemoveGroundList"
                , PhysicsRemoveGroundList_function_type( &::CBaseEntity::PhysicsRemoveGroundList )
                , ( bp::arg("ent") ) );
        
        }
        { //::CBaseEntity::PhysicsRemoveTouchedList
        
            typedef void ( *PhysicsRemoveTouchedList_function_type )( ::CBaseEntity * );
            
            CBaseEntity_exposer.def( 
                "PhysicsRemoveTouchedList"
                , PhysicsRemoveTouchedList_function_type( &::CBaseEntity::PhysicsRemoveTouchedList )
                , ( bp::arg("ent") ) );
        
        }
        { //::CBaseEntity::PhysicsSimulate
        
            typedef void ( ::CBaseEntity::*PhysicsSimulate_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "PhysicsSimulate"
                , PhysicsSimulate_function_type( &::CBaseEntity::PhysicsSimulate ) );
        
        }
        { //::CBaseEntity::PhysicsSolidMaskForEntity
        
            typedef unsigned int ( ::CBaseEntity::*PhysicsSolidMaskForEntity_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "PhysicsSolidMaskForEntity"
                , PhysicsSolidMaskForEntity_function_type( &::CBaseEntity::PhysicsSolidMaskForEntity ) );
        
        }
        { //::CBaseEntity::PhysicsSplash
        
            typedef bool ( ::CBaseEntity::*PhysicsSplash_function_type)( ::Vector const &,::Vector const &,float,float ) ;
            
            CBaseEntity_exposer.def( 
                "PhysicsSplash"
                , PhysicsSplash_function_type( &::CBaseEntity::PhysicsSplash )
                , ( bp::arg("centerPoint"), bp::arg("normal"), bp::arg("rawSpeed"), bp::arg("scaledSpeed") ) );
        
        }
        { //::CBaseEntity::PhysicsStartGroundContact
        
            typedef void ( ::CBaseEntity::*PhysicsStartGroundContact_function_type)( ::CBaseEntity * ) ;
            
            CBaseEntity_exposer.def( 
                "PhysicsStartGroundContact"
                , PhysicsStartGroundContact_function_type( &::CBaseEntity::PhysicsStartGroundContact )
                , ( bp::arg("pentOther") ) );
        
        }
        { //::CBaseEntity::PhysicsStepRecheckGround
        
            typedef void ( ::CBaseEntity::*PhysicsStepRecheckGround_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "PhysicsStepRecheckGround"
                , PhysicsStepRecheckGround_function_type( &::CBaseEntity::PhysicsStepRecheckGround ) );
        
        }
        { //::CBaseEntity::PhysicsTouchTriggers
        
            typedef void ( ::CBaseEntity::*PhysicsTouchTriggers_function_type)( ::Vector const * ) ;
            
            CBaseEntity_exposer.def( 
                "PhysicsTouchTriggers"
                , PhysicsTouchTriggers_function_type( &::CBaseEntity::PhysicsTouchTriggers )
                , ( bp::arg("pPrevAbsOrigin")=bp::object() ) );
        
        }
        { //::CBaseEntity::PostClientActive
        
            typedef void ( ::CBaseEntity::*PostClientActive_function_type)(  ) ;
            typedef void ( CBaseEntity_wrapper::*default_PostClientActive_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "PostClientActive"
                , PostClientActive_function_type(&::CBaseEntity::PostClientActive)
                , default_PostClientActive_function_type(&CBaseEntity_wrapper::default_PostClientActive) );
        
        }
        { //::CBaseEntity::PostConstructor
        
            typedef void ( ::CBaseEntity::*PostConstructor_function_type)( char const * ) ;
            typedef void ( CBaseEntity_wrapper::*default_PostConstructor_function_type)( char const * ) ;
            
            CBaseEntity_exposer.def( 
                "PostConstructor"
                , PostConstructor_function_type(&::CBaseEntity::PostConstructor)
                , default_PostConstructor_function_type(&CBaseEntity_wrapper::default_PostConstructor)
                , ( bp::arg("szClassname") ) );
        
        }
        { //::CBaseEntity::Precache
        
            typedef void ( ::CBaseEntity::*Precache_function_type)(  ) ;
            typedef void ( CBaseEntity_wrapper::*default_Precache_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "Precache"
                , Precache_function_type(&::CBaseEntity::Precache)
                , default_Precache_function_type(&CBaseEntity_wrapper::default_Precache) );
        
        }
        { //::CBaseEntity::PrecacheModel
        
            typedef int ( *PrecacheModel_function_type )( char const *,bool );
            
            CBaseEntity_exposer.def( 
                "PrecacheModel"
                , PrecacheModel_function_type( &::CBaseEntity::PrecacheModel )
                , ( bp::arg("name"), bp::arg("bPreload")=(bool)(true) ) );
        
        }
        { //::CBaseEntity::PrecacheScriptSound
        
            typedef ::HSOUNDSCRIPTHANDLE ( *PrecacheScriptSound_function_type )( char const * );
            
            CBaseEntity_exposer.def( 
                "PrecacheScriptSound"
                , PrecacheScriptSound_function_type( &::CBaseEntity::PrecacheScriptSound )
                , ( bp::arg("soundname") ) );
        
        }
        { //::CBaseEntity::PrecacheSound
        
            typedef bool ( *PrecacheSound_function_type )( char const * );
            
            CBaseEntity_exposer.def( 
                "PrecacheSound"
                , PrecacheSound_function_type( &::CBaseEntity::PrecacheSound )
                , ( bp::arg("name") ) );
        
        }
        { //::CBaseEntity::PrefetchScriptSound
        
            typedef void ( *PrefetchScriptSound_function_type )( char const * );
            
            CBaseEntity_exposer.def( 
                "PrefetchScriptSound"
                , PrefetchScriptSound_function_type( &::CBaseEntity::PrefetchScriptSound )
                , ( bp::arg("soundname") ) );
        
        }
        { //::CBaseEntity::PrefetchSound
        
            typedef void ( *PrefetchSound_function_type )( char const * );
            
            CBaseEntity_exposer.def( 
                "PrefetchSound"
                , PrefetchSound_function_type( &::CBaseEntity::PrefetchSound )
                , ( bp::arg("name") ) );
        
        }
        { //::CBaseEntity::PySendEvent
        
            typedef void ( ::CBaseEntity::*SendEvent_function_type)( ::IRecipientFilter &,int,int ) ;
            
            CBaseEntity_exposer.def( 
                "SendEvent"
                , SendEvent_function_type( &::CBaseEntity::PySendEvent )
                , ( bp::arg("filter"), bp::arg("event"), bp::arg("data")=(int)(0) ) );
        
        }
        { //::CBaseEntity::PySendMessage
        
            typedef void ( ::CBaseEntity::*SendMessage_function_type)( ::boost::python::list,bool ) ;
            
            CBaseEntity_exposer.def( 
                "SendMessage"
                , SendMessage_function_type( &::CBaseEntity::PySendMessage )
                , ( bp::arg("msg"), bp::arg("reliable")=(bool)(false) ) );
        
        }
        { //::CBaseEntity::ReadKeyField
        
            typedef bool ( ::CBaseEntity::*ReadKeyField_function_type)( char const *,::variant_t * ) ;
            
            CBaseEntity_exposer.def( 
                "ReadKeyField"
                , ReadKeyField_function_type( &::CBaseEntity::ReadKeyField )
                , ( bp::arg("varName"), bp::arg("var") ) );
        
        }
        { //::CBaseEntity::RecalcHasPlayerChildBit
        
            typedef void ( ::CBaseEntity::*RecalcHasPlayerChildBit_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "RecalcHasPlayerChildBit"
                , RecalcHasPlayerChildBit_function_type( &::CBaseEntity::RecalcHasPlayerChildBit ) );
        
        }
        { //::CBaseEntity::RegisterThinkContext
        
            typedef int ( ::CBaseEntity::*RegisterThinkContext_function_type)( char const * ) ;
            
            CBaseEntity_exposer.def( 
                "RegisterThinkContext"
                , RegisterThinkContext_function_type( &::CBaseEntity::RegisterThinkContext )
                , ( bp::arg("szContext") ) );
        
        }
        { //::CBaseEntity::Remove
        
            typedef void ( ::CBaseEntity::*Remove_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "Remove"
                , Remove_function_type( &::CBaseEntity::Remove ) );
        
        }
        { //::CBaseEntity::RemoveAllDecals
        
            typedef void ( ::CBaseEntity::*RemoveAllDecals_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "RemoveAllDecals"
                , RemoveAllDecals_function_type( &::CBaseEntity::RemoveAllDecals ) );
        
        }
        { //::CBaseEntity::RemoveDeferred
        
            typedef void ( ::CBaseEntity::*RemoveDeferred_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "RemoveDeferred"
                , RemoveDeferred_function_type( &::CBaseEntity::RemoveDeferred ) );
        
        }
        { //::CBaseEntity::RemoveEFlags
        
            typedef void ( ::CBaseEntity::*RemoveEFlags_function_type)( int ) ;
            
            CBaseEntity_exposer.def( 
                "RemoveEFlags"
                , RemoveEFlags_function_type( &::CBaseEntity::RemoveEFlags )
                , ( bp::arg("nEFlagMask") ) );
        
        }
        { //::CBaseEntity::RemoveEffects
        
            typedef void ( ::CBaseEntity::*RemoveEffects_function_type)( int ) ;
            
            CBaseEntity_exposer.def( 
                "RemoveEffects"
                , RemoveEffects_function_type( &::CBaseEntity::RemoveEffects )
                , ( bp::arg("nEffects") ) );
        
        }
        { //::CBaseEntity::RemoveFlag
        
            typedef void ( ::CBaseEntity::*RemoveFlag_function_type)( int ) ;
            
            CBaseEntity_exposer.def( 
                "RemoveFlag"
                , RemoveFlag_function_type( &::CBaseEntity::RemoveFlag )
                , ( bp::arg("flagsToRemove") ) );
        
        }
        { //::CBaseEntity::RemoveRecipientsIfNotCloseCaptioning
        
            typedef void ( *RemoveRecipientsIfNotCloseCaptioning_function_type )( ::CRecipientFilter & );
            
            CBaseEntity_exposer.def( 
                "RemoveRecipientsIfNotCloseCaptioning"
                , RemoveRecipientsIfNotCloseCaptioning_function_type( &::CBaseEntity::RemoveRecipientsIfNotCloseCaptioning )
                , ( bp::arg("filter") ) );
        
        }
        { //::CBaseEntity::RemoveSolidFlags
        
            typedef void ( ::CBaseEntity::*RemoveSolidFlags_function_type)( int ) ;
            
            CBaseEntity_exposer.def( 
                "RemoveSolidFlags"
                , RemoveSolidFlags_function_type( &::CBaseEntity::RemoveSolidFlags )
                , ( bp::arg("flags") ) );
        
        }
        { //::CBaseEntity::RemoveSpawnFlags
        
            typedef void ( ::CBaseEntity::*RemoveSpawnFlags_function_type)( int ) ;
            
            CBaseEntity_exposer.def( 
                "RemoveSpawnFlags"
                , RemoveSpawnFlags_function_type( &::CBaseEntity::RemoveSpawnFlags )
                , ( bp::arg("nFlags") ) );
        
        }
        { //::CBaseEntity::RequiredEdictIndex
        
            typedef int ( ::CBaseEntity::*RequiredEdictIndex_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "RequiredEdictIndex"
                , RequiredEdictIndex_function_type( &::CBaseEntity::RequiredEdictIndex ) );
        
        }
        { //::CBaseEntity::Respawn
        
            typedef ::CBaseEntity * ( ::CBaseEntity::*Respawn_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "Respawn"
                , Respawn_function_type( &::CBaseEntity::Respawn )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::Restore
        
            typedef int ( ::CBaseEntity::*Restore_function_type)( ::IRestore & ) ;
            typedef int ( CBaseEntity_wrapper::*default_Restore_function_type)( ::IRestore & ) ;
            
            CBaseEntity_exposer.def( 
                "Restore"
                , Restore_function_type(&::CBaseEntity::Restore)
                , default_Restore_function_type(&CBaseEntity_wrapper::default_Restore)
                , ( bp::arg("restore") ) );
        
        }
        { //::CBaseEntity::SUB_AllowedToFade
        
            typedef bool ( ::CBaseEntity::*SUB_AllowedToFade_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "SUB_AllowedToFade"
                , SUB_AllowedToFade_function_type( &::CBaseEntity::SUB_AllowedToFade ) );
        
        }
        { //::CBaseEntity::SUB_CallUseToggle
        
            typedef void ( ::CBaseEntity::*SUB_CallUseToggle_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "SUB_CallUseToggle"
                , SUB_CallUseToggle_function_type( &::CBaseEntity::SUB_CallUseToggle ) );
        
        }
        { //::CBaseEntity::SUB_DoNothing
        
            typedef void ( ::CBaseEntity::*SUB_DoNothing_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "SUB_DoNothing"
                , SUB_DoNothing_function_type( &::CBaseEntity::SUB_DoNothing ) );
        
        }
        { //::CBaseEntity::SUB_FadeOut
        
            typedef void ( ::CBaseEntity::*SUB_FadeOut_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "SUB_FadeOut"
                , SUB_FadeOut_function_type( &::CBaseEntity::SUB_FadeOut ) );
        
        }
        { //::CBaseEntity::SUB_PerformFadeOut
        
            typedef void ( ::CBaseEntity::*SUB_PerformFadeOut_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "SUB_PerformFadeOut"
                , SUB_PerformFadeOut_function_type( &::CBaseEntity::SUB_PerformFadeOut ) );
        
        }
        { //::CBaseEntity::SUB_Remove
        
            typedef void ( ::CBaseEntity::*SUB_Remove_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "SUB_Remove"
                , SUB_Remove_function_type( &::CBaseEntity::SUB_Remove ) );
        
        }
        { //::CBaseEntity::SUB_StartFadeOut
        
            typedef void ( ::CBaseEntity::*SUB_StartFadeOut_function_type)( float,bool ) ;
            
            CBaseEntity_exposer.def( 
                "SUB_StartFadeOut"
                , SUB_StartFadeOut_function_type( &::CBaseEntity::SUB_StartFadeOut )
                , ( bp::arg("delay")=10.F, bp::arg("bNotSolid")=(bool)(true) ) );
        
        }
        { //::CBaseEntity::SUB_StartFadeOutInstant
        
            typedef void ( ::CBaseEntity::*SUB_StartFadeOutInstant_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "SUB_StartFadeOutInstant"
                , SUB_StartFadeOutInstant_function_type( &::CBaseEntity::SUB_StartFadeOutInstant ) );
        
        }
        { //::CBaseEntity::SUB_Vanish
        
            typedef void ( ::CBaseEntity::*SUB_Vanish_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "SUB_Vanish"
                , SUB_Vanish_function_type( &::CBaseEntity::SUB_Vanish ) );
        
        }
        { //::CBaseEntity::Save
        
            typedef int ( ::CBaseEntity::*Save_function_type)( ::ISave & ) ;
            
            CBaseEntity_exposer.def( 
                "Save"
                , Save_function_type( &::CBaseEntity::Save )
                , ( bp::arg("save") ) );
        
        }
        { //::CBaseEntity::SendDebugPivotOverlay
        
            typedef void ( ::CBaseEntity::*SendDebugPivotOverlay_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "SendDebugPivotOverlay"
                , SendDebugPivotOverlay_function_type( &::CBaseEntity::SendDebugPivotOverlay ) );
        
        }
        { //::CBaseEntity::SendOnKilledGameEvent
        
            typedef void ( ::CBaseEntity::*SendOnKilledGameEvent_function_type)( ::CTakeDamageInfo const & ) ;
            
            CBaseEntity_exposer.def( 
                "SendOnKilledGameEvent"
                , SendOnKilledGameEvent_function_type( &::CBaseEntity::SendOnKilledGameEvent )
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::SetAIWalkable
        
            typedef void ( ::CBaseEntity::*SetAIWalkable_function_type)( bool ) ;
            
            CBaseEntity_exposer.def( 
                "SetAIWalkable"
                , SetAIWalkable_function_type( &::CBaseEntity::SetAIWalkable )
                , ( bp::arg("bBlocksLOS") ) );
        
        }
        { //::CBaseEntity::SetAbsAngles
        
            typedef void ( ::CBaseEntity::*SetAbsAngles_function_type)( ::QAngle const & ) ;
            
            CBaseEntity_exposer.def( 
                "SetAbsAngles"
                , SetAbsAngles_function_type( &::CBaseEntity::SetAbsAngles )
                , ( bp::arg("angles") ) );
        
        }
        { //::CBaseEntity::SetAbsOrigin
        
            typedef void ( ::CBaseEntity::*SetAbsOrigin_function_type)( ::Vector const & ) ;
            
            CBaseEntity_exposer.def( 
                "SetAbsOrigin"
                , SetAbsOrigin_function_type( &::CBaseEntity::SetAbsOrigin )
                , ( bp::arg("origin") ) );
        
        }
        { //::CBaseEntity::SetAbsQueriesValid
        
            typedef void ( *SetAbsQueriesValid_function_type )( bool );
            
            CBaseEntity_exposer.def( 
                "SetAbsQueriesValid"
                , SetAbsQueriesValid_function_type( &::CBaseEntity::SetAbsQueriesValid )
                , ( bp::arg("bValid") ) );
        
        }
        { //::CBaseEntity::SetAbsVelocity
        
            typedef void ( ::CBaseEntity::*SetAbsVelocity_function_type)( ::Vector const & ) ;
            
            CBaseEntity_exposer.def( 
                "SetAbsVelocity"
                , SetAbsVelocity_function_type( &::CBaseEntity::SetAbsVelocity )
                , ( bp::arg("vecVelocity") ) );
        
        }
        { //::CBaseEntity::SetAllowPrecache
        
            typedef void ( *SetAllowPrecache_function_type )( bool );
            
            CBaseEntity_exposer.def( 
                "SetAllowPrecache"
                , SetAllowPrecache_function_type( &::CBaseEntity::SetAllowPrecache )
                , ( bp::arg("allow") ) );
        
        }
        { //::CBaseEntity::SetAnimatedEveryTick
        
            typedef void ( ::CBaseEntity::*SetAnimatedEveryTick_function_type)( bool ) ;
            
            CBaseEntity_exposer.def( 
                "SetAnimatedEveryTick"
                , SetAnimatedEveryTick_function_type( &::CBaseEntity::SetAnimatedEveryTick )
                , ( bp::arg("anim") ) );
        
        }
        { //::CBaseEntity::SetBaseVelocity
        
            typedef void ( ::CBaseEntity::*SetBaseVelocity_function_type)( ::Vector const & ) ;
            
            CBaseEntity_exposer.def( 
                "SetBaseVelocity"
                , SetBaseVelocity_function_type( &::CBaseEntity::SetBaseVelocity )
                , ( bp::arg("v") ) );
        
        }
        { //::CBaseEntity::SetBlocksLOS
        
            typedef void ( ::CBaseEntity::*SetBlocksLOS_function_type)( bool ) ;
            
            CBaseEntity_exposer.def( 
                "SetBlocksLOS"
                , SetBlocksLOS_function_type( &::CBaseEntity::SetBlocksLOS )
                , ( bp::arg("bBlocksLOS") ) );
        
        }
        { //::CBaseEntity::SetCheckUntouch
        
            typedef void ( ::CBaseEntity::*SetCheckUntouch_function_type)( bool ) ;
            
            CBaseEntity_exposer.def( 
                "SetCheckUntouch"
                , SetCheckUntouch_function_type( &::CBaseEntity::SetCheckUntouch )
                , ( bp::arg("check") ) );
        
        }
        { //::CBaseEntity::SetClassname
        
            typedef void ( ::CBaseEntity::*SetClassname_function_type)( char const * ) ;
            
            CBaseEntity_exposer.def( 
                "SetClassname"
                , SetClassname_function_type( &::CBaseEntity::SetClassname )
                , ( bp::arg("className") ) );
        
        }
        { //::CBaseEntity::SetCollisionBounds
        
            typedef void ( ::CBaseEntity::*SetCollisionBounds_function_type)( ::Vector const &,::Vector const & ) ;
            
            CBaseEntity_exposer.def( 
                "SetCollisionBounds"
                , SetCollisionBounds_function_type( &::CBaseEntity::SetCollisionBounds )
                , ( bp::arg("mins"), bp::arg("maxs") ) );
        
        }
        { //::CBaseEntity::SetCollisionBoundsFromModel
        
            typedef void ( ::CBaseEntity::*SetCollisionBoundsFromModel_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "SetCollisionBoundsFromModel"
                , SetCollisionBoundsFromModel_function_type( &::CBaseEntity::SetCollisionBoundsFromModel ) );
        
        }
        { //::CBaseEntity::SetCollisionGroup
        
            typedef void ( ::CBaseEntity::*SetCollisionGroup_function_type)( int ) ;
            
            CBaseEntity_exposer.def( 
                "SetCollisionGroup"
                , SetCollisionGroup_function_type( &::CBaseEntity::SetCollisionGroup )
                , ( bp::arg("collisionGroup") ) );
        
        }
        { //::CBaseEntity::SetDamage
        
            typedef void ( ::CBaseEntity::*SetDamage_function_type)( float ) ;
            
            CBaseEntity_exposer.def( 
                "SetDamage"
                , SetDamage_function_type( &::CBaseEntity::SetDamage )
                , ( bp::arg("flDamage") ) );
        
        }
        { //::CBaseEntity::SetEFlags
        
            typedef void ( ::CBaseEntity::*SetEFlags_function_type)( int ) ;
            
            CBaseEntity_exposer.def( 
                "SetEFlags"
                , SetEFlags_function_type( &::CBaseEntity::SetEFlags )
                , ( bp::arg("iEFlags") ) );
        
        }
        { //::CBaseEntity::SetEffectEntity
        
            typedef void ( ::CBaseEntity::*SetEffectEntity_function_type)( ::CBaseEntity * ) ;
            
            CBaseEntity_exposer.def( 
                "SetEffectEntity"
                , SetEffectEntity_function_type( &::CBaseEntity::SetEffectEntity )
                , ( bp::arg("pEffectEnt") ) );
        
        }
        { //::CBaseEntity::SetEffects
        
            typedef void ( ::CBaseEntity::*SetEffects_function_type)( int ) ;
            
            CBaseEntity_exposer.def( 
                "SetEffects"
                , SetEffects_function_type( &::CBaseEntity::SetEffects )
                , ( bp::arg("nEffects") ) );
        
        }
        { //::CBaseEntity::SetElasticity
        
            typedef void ( ::CBaseEntity::*SetElasticity_function_type)( float ) ;
            
            CBaseEntity_exposer.def( 
                "SetElasticity"
                , SetElasticity_function_type( &::CBaseEntity::SetElasticity )
                , ( bp::arg("flElasticity") ) );
        
        }
        { //::CBaseEntity::SetFriction
        
            typedef void ( ::CBaseEntity::*SetFriction_function_type)( float ) ;
            
            CBaseEntity_exposer.def( 
                "SetFriction"
                , SetFriction_function_type( &::CBaseEntity::SetFriction )
                , ( bp::arg("flFriction") ) );
        
        }
        { //::CBaseEntity::SetGravity
        
            typedef void ( ::CBaseEntity::*SetGravity_function_type)( float ) ;
            
            CBaseEntity_exposer.def( 
                "SetGravity"
                , SetGravity_function_type( &::CBaseEntity::SetGravity )
                , ( bp::arg("gravity") ) );
        
        }
        { //::CBaseEntity::SetGroundChangeTime
        
            typedef void ( ::CBaseEntity::*SetGroundChangeTime_function_type)( float ) ;
            
            CBaseEntity_exposer.def( 
                "SetGroundChangeTime"
                , SetGroundChangeTime_function_type( &::CBaseEntity::SetGroundChangeTime )
                , ( bp::arg("flTime") ) );
        
        }
        { //::CBaseEntity::SetGroundEntity
        
            typedef void ( ::CBaseEntity::*SetGroundEntity_function_type)( ::CBaseEntity * ) ;
            
            CBaseEntity_exposer.def( 
                "SetGroundEntity"
                , SetGroundEntity_function_type( &::CBaseEntity::SetGroundEntity )
                , ( bp::arg("ground") ) );
        
        }
        { //::CBaseEntity::SetLocalAngles
        
            typedef void ( ::CBaseEntity::*SetLocalAngles_function_type)( ::QAngle const & ) ;
            
            CBaseEntity_exposer.def( 
                "SetLocalAngles"
                , SetLocalAngles_function_type( &::CBaseEntity::SetLocalAngles )
                , ( bp::arg("angles") ) );
        
        }
        { //::CBaseEntity::SetLocalAngularVelocity
        
            typedef void ( ::CBaseEntity::*SetLocalAngularVelocity_function_type)( ::QAngle const & ) ;
            
            CBaseEntity_exposer.def( 
                "SetLocalAngularVelocity"
                , SetLocalAngularVelocity_function_type( &::CBaseEntity::SetLocalAngularVelocity )
                , ( bp::arg("vecAngVelocity") ) );
        
        }
        { //::CBaseEntity::SetLocalOrigin
        
            typedef void ( ::CBaseEntity::*SetLocalOrigin_function_type)( ::Vector const & ) ;
            
            CBaseEntity_exposer.def( 
                "SetLocalOrigin"
                , SetLocalOrigin_function_type( &::CBaseEntity::SetLocalOrigin )
                , ( bp::arg("origin") ) );
        
        }
        { //::CBaseEntity::SetLocalTransform
        
            typedef void ( ::CBaseEntity::*SetLocalTransform_function_type)( ::matrix3x4_t const & ) ;
            
            CBaseEntity_exposer.def( 
                "SetLocalTransform"
                , SetLocalTransform_function_type( &::CBaseEntity::SetLocalTransform )
                , ( bp::arg("localTransform") ) );
        
        }
        { //::CBaseEntity::SetLocalVelocity
        
            typedef void ( ::CBaseEntity::*SetLocalVelocity_function_type)( ::Vector const & ) ;
            
            CBaseEntity_exposer.def( 
                "SetLocalVelocity"
                , SetLocalVelocity_function_type( &::CBaseEntity::SetLocalVelocity )
                , ( bp::arg("vecVelocity") ) );
        
        }
        { //::CBaseEntity::SetModel
        
            typedef void ( ::CBaseEntity::*SetModel_function_type)( char const * ) ;
            
            CBaseEntity_exposer.def( 
                "SetModel"
                , SetModel_function_type( &::CBaseEntity::SetModel )
                , ( bp::arg("szModelName") ) );
        
        }
        { //::CBaseEntity::SetModelIndex
        
            typedef void ( ::CBaseEntity::*SetModelIndex_function_type)( int ) ;
            
            CBaseEntity_exposer.def( 
                "SetModelIndex"
                , SetModelIndex_function_type( &::CBaseEntity::SetModelIndex )
                , ( bp::arg("index") ) );
        
        }
        { //::CBaseEntity::SetModelIndexOverride
        
            typedef void ( ::CBaseEntity::*SetModelIndexOverride_function_type)( int,int ) ;
            
            CBaseEntity_exposer.def( 
                "SetModelIndexOverride"
                , SetModelIndexOverride_function_type( &::CBaseEntity::SetModelIndexOverride )
                , ( bp::arg("index"), bp::arg("nValue") ) );
        
        }
        { //::CBaseEntity::SetModelName
        
            typedef void ( ::CBaseEntity::*SetModelName_function_type)( ::string_t ) ;
            
            CBaseEntity_exposer.def( 
                "SetModelName"
                , SetModelName_function_type( &::CBaseEntity::SetModelName )
                , ( bp::arg("name") ) );
        
        }
        { //::CBaseEntity::SetMoveCollide
        
            typedef void ( ::CBaseEntity::*SetMoveCollide_function_type)( ::MoveCollide_t ) ;
            
            CBaseEntity_exposer.def( 
                "SetMoveCollide"
                , SetMoveCollide_function_type( &::CBaseEntity::SetMoveCollide )
                , ( bp::arg("val") ) );
        
        }
        { //::CBaseEntity::SetMoveDoneTime
        
            typedef void ( ::CBaseEntity::*SetMoveDoneTime_function_type)( float ) ;
            
            CBaseEntity_exposer.def( 
                "SetMoveDoneTime"
                , SetMoveDoneTime_function_type( &::CBaseEntity::SetMoveDoneTime )
                , ( bp::arg("flTime") ) );
        
        }
        { //::CBaseEntity::SetMoveType
        
            typedef void ( ::CBaseEntity::*SetMoveType_function_type)( ::MoveType_t,::MoveCollide_t ) ;
            
            CBaseEntity_exposer.def( 
                "SetMoveType"
                , SetMoveType_function_type( &::CBaseEntity::SetMoveType )
                , ( bp::arg("val"), bp::arg("moveCollide")=::MoveCollide_t::MOVECOLLIDE_DEFAULT ) );
        
        }
        { //::CBaseEntity::SetName
        
            typedef void ( ::CBaseEntity::*SetName_function_type)( ::string_t ) ;
            
            CBaseEntity_exposer.def( 
                "SetName"
                , SetName_function_type( &::CBaseEntity::SetName )
                , ( bp::arg("newTarget") ) );
        
        }
        { //::CBaseEntity::SetNavIgnore
        
            typedef void ( ::CBaseEntity::*SetNavIgnore_function_type)( float ) ;
            
            CBaseEntity_exposer.def( 
                "SetNavIgnore"
                , SetNavIgnore_function_type( &::CBaseEntity::SetNavIgnore )
                , ( bp::arg("duration")=FLT_MAX ) );
        
        }
        { //::CBaseEntity::SetNextThink
        
            typedef void ( ::CBaseEntity::*SetNextThink_function_type)( float,char const * ) ;
            
            CBaseEntity_exposer.def( 
                "SetNextThink"
                , SetNextThink_function_type( &::CBaseEntity::SetNextThink )
                , ( bp::arg("nextThinkTime"), bp::arg("szContext")=bp::object() ) );
        
        }
        { //::CBaseEntity::SetOwnerEntity
        
            typedef void ( ::CBaseEntity::*SetOwnerEntity_function_type)( ::CBaseEntity * ) ;
            
            CBaseEntity_exposer.def( 
                "SetOwnerEntity"
                , SetOwnerEntity_function_type( &::CBaseEntity::SetOwnerEntity )
                , ( bp::arg("pOwner") ) );
        
        }
        { //::CBaseEntity::SetParent
        
            typedef void ( ::CBaseEntity::*SetParent_function_type)( ::string_t,::CBaseEntity *,int ) ;
            
            CBaseEntity_exposer.def( 
                "SetParent"
                , SetParent_function_type( &::CBaseEntity::SetParent )
                , ( bp::arg("newParent"), bp::arg("pActivator"), bp::arg("iAttachment")=(int)(-1) ) );
        
        }
        { //::CBaseEntity::SetParent
        
            typedef void ( ::CBaseEntity::*SetParent_function_type)( ::CBaseEntity *,int ) ;
            
            CBaseEntity_exposer.def( 
                "SetParent"
                , SetParent_function_type( &::CBaseEntity::SetParent )
                , ( bp::arg("pNewParent"), bp::arg("iAttachment")=(int)(-1) ) );
        
        }
        { //::CBaseEntity::SetParentAttachment
        
            typedef void ( ::CBaseEntity::*SetParentAttachment_function_type)( char const *,char const *,bool ) ;
            
            CBaseEntity_exposer.def( 
                "SetParentAttachment"
                , SetParentAttachment_function_type( &::CBaseEntity::SetParentAttachment )
                , ( bp::arg("szInputName"), bp::arg("szAttachment"), bp::arg("bMaintainOffset") ) );
        
        }
        { //::CBaseEntity::SetPlayerSimulated
        
            typedef void ( ::CBaseEntity::*SetPlayerSimulated_function_type)( ::CBasePlayer * ) ;
            
            CBaseEntity_exposer.def( 
                "SetPlayerSimulated"
                , SetPlayerSimulated_function_type( &::CBaseEntity::SetPlayerSimulated )
                , ( bp::arg("pOwner") ) );
        
        }
        { //::CBaseEntity::SetPredictionEligible
        
            typedef void ( ::CBaseEntity::*SetPredictionEligible_function_type)( bool ) ;
            
            CBaseEntity_exposer.def( 
                "SetPredictionEligible"
                , SetPredictionEligible_function_type( &::CBaseEntity::SetPredictionEligible )
                , ( bp::arg("canpredict") ) );
        
        }
        { //::CBaseEntity::SetPredictionPlayer
        
            typedef void ( *SetPredictionPlayer_function_type )( ::CBasePlayer * );
            
            CBaseEntity_exposer.def( 
                "SetPredictionPlayer"
                , SetPredictionPlayer_function_type( &::CBaseEntity::SetPredictionPlayer )
                , ( bp::arg("player") ) );
        
        }
        { //::CBaseEntity::SetPyThink
        
            typedef void ( ::CBaseEntity::*SetThink_function_type)( ::boost::python::api::object,float,char const * ) ;
            
            CBaseEntity_exposer.def( 
                "SetThink"
                , SetThink_function_type( &::CBaseEntity::SetPyThink )
                , ( bp::arg("think_method"), bp::arg("flNextThinkTime")=0, bp::arg("szContext")=bp::object() ) );
        
        }
        { //::CBaseEntity::SetPyTouch
        
            typedef void ( ::CBaseEntity::*SetTouch_function_type)( ::boost::python::api::object ) ;
            
            CBaseEntity_exposer.def( 
                "SetTouch"
                , SetTouch_function_type( &::CBaseEntity::SetPyTouch )
                , ( bp::arg("touch_method") ) );
        
        }
        { //::CBaseEntity::SetRenderColor
        
            typedef void ( ::CBaseEntity::*SetRenderColor_function_type)( ::byte,::byte,::byte ) ;
            
            CBaseEntity_exposer.def( 
                "SetRenderColor"
                , SetRenderColor_function_type( &::CBaseEntity::SetRenderColor )
                , ( bp::arg("r"), bp::arg("g"), bp::arg("b") ) );
        
        }
        { //::CBaseEntity::SetRenderColor
        
            typedef void ( ::CBaseEntity::*SetRenderColor_function_type)( ::byte,::byte,::byte,::byte ) ;
            
            CBaseEntity_exposer.def( 
                "SetRenderColor"
                , SetRenderColor_function_type( &::CBaseEntity::SetRenderColor )
                , ( bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("a") ) );
        
        }
        { //::CBaseEntity::SetRenderColorA
        
            typedef void ( ::CBaseEntity::*SetRenderColorA_function_type)( ::byte ) ;
            
            CBaseEntity_exposer.def( 
                "SetRenderColorA"
                , SetRenderColorA_function_type( &::CBaseEntity::SetRenderColorA )
                , ( bp::arg("a") ) );
        
        }
        { //::CBaseEntity::SetRenderColorB
        
            typedef void ( ::CBaseEntity::*SetRenderColorB_function_type)( ::byte ) ;
            
            CBaseEntity_exposer.def( 
                "SetRenderColorB"
                , SetRenderColorB_function_type( &::CBaseEntity::SetRenderColorB )
                , ( bp::arg("b") ) );
        
        }
        { //::CBaseEntity::SetRenderColorG
        
            typedef void ( ::CBaseEntity::*SetRenderColorG_function_type)( ::byte ) ;
            
            CBaseEntity_exposer.def( 
                "SetRenderColorG"
                , SetRenderColorG_function_type( &::CBaseEntity::SetRenderColorG )
                , ( bp::arg("g") ) );
        
        }
        { //::CBaseEntity::SetRenderColorR
        
            typedef void ( ::CBaseEntity::*SetRenderColorR_function_type)( ::byte ) ;
            
            CBaseEntity_exposer.def( 
                "SetRenderColorR"
                , SetRenderColorR_function_type( &::CBaseEntity::SetRenderColorR )
                , ( bp::arg("r") ) );
        
        }
        { //::CBaseEntity::SetRenderMode
        
            typedef void ( ::CBaseEntity::*SetRenderMode_function_type)( ::RenderMode_t ) ;
            
            CBaseEntity_exposer.def( 
                "SetRenderMode"
                , SetRenderMode_function_type( &::CBaseEntity::SetRenderMode )
                , ( bp::arg("nRenderMode") ) );
        
        }
        { //::CBaseEntity::SetScaledPhysics
        
            typedef void ( ::CBaseEntity::*SetScaledPhysics_function_type)( ::IPhysicsObject * ) ;
            
            CBaseEntity_exposer.def( 
                "SetScaledPhysics"
                , SetScaledPhysics_function_type( &::CBaseEntity::SetScaledPhysics )
                , ( bp::arg("pNewObject") ) );
        
        }
        { //::CBaseEntity::SetShadowCastDistance
        
            typedef void ( ::CBaseEntity::*SetShadowCastDistance_function_type)( float ) ;
            
            CBaseEntity_exposer.def( 
                "SetShadowCastDistance"
                , SetShadowCastDistance_function_type( &::CBaseEntity::SetShadowCastDistance )
                , ( bp::arg("flDistance") ) );
        
        }
        { //::CBaseEntity::SetShadowCastDistance
        
            typedef void ( ::CBaseEntity::*SetShadowCastDistance_function_type)( float,float ) ;
            
            CBaseEntity_exposer.def( 
                "SetShadowCastDistance"
                , SetShadowCastDistance_function_type( &::CBaseEntity::SetShadowCastDistance )
                , ( bp::arg("flDesiredDistance"), bp::arg("flDelay") ) );
        
        }
        { //::CBaseEntity::SetSimulatedEveryTick
        
            typedef void ( ::CBaseEntity::*SetSimulatedEveryTick_function_type)( bool ) ;
            
            CBaseEntity_exposer.def( 
                "SetSimulatedEveryTick"
                , SetSimulatedEveryTick_function_type( &::CBaseEntity::SetSimulatedEveryTick )
                , ( bp::arg("sim") ) );
        
        }
        { //::CBaseEntity::SetSize
        
            typedef void ( ::CBaseEntity::*SetSize_function_type)( ::Vector const &,::Vector const & ) ;
            
            CBaseEntity_exposer.def( 
                "SetSize"
                , SetSize_function_type( &::CBaseEntity::SetSize )
                , ( bp::arg("vecMin"), bp::arg("vecMax") ) );
        
        }
        { //::CBaseEntity::SetSolid
        
            typedef void ( ::CBaseEntity::*SetSolid_function_type)( ::SolidType_t ) ;
            
            CBaseEntity_exposer.def( 
                "SetSolid"
                , SetSolid_function_type( &::CBaseEntity::SetSolid )
                , ( bp::arg("val") ) );
        
        }
        { //::CBaseEntity::SetSolidFlags
        
            typedef void ( ::CBaseEntity::*SetSolidFlags_function_type)( int ) ;
            
            CBaseEntity_exposer.def( 
                "SetSolidFlags"
                , SetSolidFlags_function_type( &::CBaseEntity::SetSolidFlags )
                , ( bp::arg("flags") ) );
        
        }
        { //::CBaseEntity::SetTextureFrameIndex
        
            typedef void ( ::CBaseEntity::*SetTextureFrameIndex_function_type)( int ) ;
            
            CBaseEntity_exposer.def( 
                "SetTextureFrameIndex"
                , SetTextureFrameIndex_function_type( &::CBaseEntity::SetTextureFrameIndex )
                , ( bp::arg("iIndex") ) );
        
        }
        { //::CBaseEntity::SetTransmitState
        
            typedef int ( ::CBaseEntity::*SetTransmitState_function_type)( int ) ;
            
            CBaseEntity_exposer.def( 
                "SetTransmitState"
                , SetTransmitState_function_type( &::CBaseEntity::SetTransmitState )
                , ( bp::arg("nFlag") ) );
        
        }
        { //::CBaseEntity::SetViewOffset
        
            typedef void ( ::CBaseEntity::*SetViewOffset_function_type)( ::Vector const & ) ;
            
            CBaseEntity_exposer.def( 
                "SetViewOffset"
                , SetViewOffset_function_type( &::CBaseEntity::SetViewOffset )
                , ( bp::arg("v") ) );
        
        }
        { //::CBaseEntity::SetWaterLevel
        
            typedef void ( ::CBaseEntity::*SetWaterLevel_function_type)( int ) ;
            
            CBaseEntity_exposer.def( 
                "SetWaterLevel"
                , SetWaterLevel_function_type( &::CBaseEntity::SetWaterLevel )
                , ( bp::arg("nLevel") ) );
        
        }
        { //::CBaseEntity::SetWaterType
        
            typedef void ( ::CBaseEntity::*SetWaterType_function_type)( int ) ;
            
            CBaseEntity_exposer.def( 
                "SetWaterType"
                , SetWaterType_function_type( &::CBaseEntity::SetWaterType )
                , ( bp::arg("nType") ) );
        
        }
        { //::CBaseEntity::ShouldAttractAutoAim
        
            typedef bool ( ::CBaseEntity::*ShouldAttractAutoAim_function_type)( ::CBaseEntity * ) ;
            
            CBaseEntity_exposer.def( 
                "ShouldAttractAutoAim"
                , ShouldAttractAutoAim_function_type( &::CBaseEntity::ShouldAttractAutoAim )
                , ( bp::arg("pAimingEnt") ) );
        
        }
        { //::CBaseEntity::ShouldBlockNav
        
            typedef bool ( ::CBaseEntity::*ShouldBlockNav_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "ShouldBlockNav"
                , ShouldBlockNav_function_type( &::CBaseEntity::ShouldBlockNav ) );
        
        }
        { //::CBaseEntity::ShouldCollide
        
            typedef bool ( ::CBaseEntity::*ShouldCollide_function_type)( int,int ) const;
            
            CBaseEntity_exposer.def( 
                "ShouldCollide"
                , ShouldCollide_function_type( &::CBaseEntity::ShouldCollide )
                , ( bp::arg("collisionGroup"), bp::arg("contentsMask") ) );
        
        }
        { //::CBaseEntity::ShouldSavePhysics
        
            typedef bool ( ::CBaseEntity::*ShouldSavePhysics_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "ShouldSavePhysics"
                , ShouldSavePhysics_function_type( &::CBaseEntity::ShouldSavePhysics ) );
        
        }
        { //::CBaseEntity::ShouldToggle
        
            typedef int ( ::CBaseEntity::*ShouldToggle_function_type)( ::USE_TYPE,int ) ;
            
            CBaseEntity_exposer.def( 
                "ShouldToggle"
                , ShouldToggle_function_type( &::CBaseEntity::ShouldToggle )
                , ( bp::arg("useType"), bp::arg("currentState") ) );
        
        }
        { //::CBaseEntity::Spawn
        
            typedef void ( ::CBaseEntity::*Spawn_function_type)(  ) ;
            typedef void ( CBaseEntity_wrapper::*default_Spawn_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "Spawn"
                , Spawn_function_type(&::CBaseEntity::Spawn)
                , default_Spawn_function_type(&CBaseEntity_wrapper::default_Spawn) );
        
        }
        { //::CBaseEntity::Splash
        
            typedef void ( ::CBaseEntity::*Splash_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "Splash"
                , Splash_function_type( &::CBaseEntity::Splash ) );
        
        }
        { //::CBaseEntity::StartBlocked
        
            typedef void ( ::CBaseEntity::*StartBlocked_function_type)( ::CBaseEntity * ) ;
            
            CBaseEntity_exposer.def( 
                "StartBlocked"
                , StartBlocked_function_type( &::CBaseEntity::StartBlocked )
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseEntity::StartGroundContact
        
            typedef void ( ::CBaseEntity::*StartGroundContact_function_type)( ::CBaseEntity * ) ;
            
            CBaseEntity_exposer.def( 
                "StartGroundContact"
                , StartGroundContact_function_type( &::CBaseEntity::StartGroundContact )
                , ( bp::arg("ground") ) );
        
        }
        { //::CBaseEntity::StartTouch
        
            typedef void ( ::CBaseEntity::*StartTouch_function_type)( ::CBaseEntity * ) ;
            typedef void ( CBaseEntity_wrapper::*default_StartTouch_function_type)( ::CBaseEntity * ) ;
            
            CBaseEntity_exposer.def( 
                "StartTouch"
                , StartTouch_function_type(&::CBaseEntity::StartTouch)
                , default_StartTouch_function_type(&CBaseEntity_wrapper::default_StartTouch)
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseEntity::StopFollowingEntity
        
            typedef void ( ::CBaseEntity::*StopFollowingEntity_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "StopFollowingEntity"
                , StopFollowingEntity_function_type( &::CBaseEntity::StopFollowingEntity ) );
        
        }
        { //::CBaseEntity::StopLoopingSounds
        
            typedef void ( ::CBaseEntity::*StopLoopingSounds_function_type)(  ) ;
            typedef void ( CBaseEntity_wrapper::*default_StopLoopingSounds_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "StopLoopingSounds"
                , StopLoopingSounds_function_type(&::CBaseEntity::StopLoopingSounds)
                , default_StopLoopingSounds_function_type(&CBaseEntity_wrapper::default_StopLoopingSounds) );
        
        }
        { //::CBaseEntity::StopSound
        
            typedef void ( ::CBaseEntity::*StopSound_function_type)( char const * ) ;
            
            CBaseEntity_exposer.def( 
                "StopSound"
                , StopSound_function_type( &::CBaseEntity::StopSound )
                , ( bp::arg("soundname") ) );
        
        }
        { //::CBaseEntity::StopSound
        
            typedef void ( ::CBaseEntity::*StopSound_function_type)( char const *,::HSOUNDSCRIPTHANDLE & ) ;
            
            CBaseEntity_exposer.def( 
                "StopSound"
                , StopSound_function_type( &::CBaseEntity::StopSound )
                , ( bp::arg("soundname"), bp::arg("handle") ) );
        
        }
        { //::CBaseEntity::StopSound
        
            typedef void ( *StopSoundStatic_function_type )( int,char const * );
            
            CBaseEntity_exposer.def( 
                "StopSoundStatic"
                , StopSoundStatic_function_type( &::CBaseEntity::StopSound )
                , ( bp::arg("iEntIndex"), bp::arg("soundname") ) );
        
        }
        { //::CBaseEntity::StopSound
        
            typedef void ( *StopSoundStatic_function_type )( int,int,char const * );
            
            CBaseEntity_exposer.def( 
                "StopSoundStatic"
                , StopSoundStatic_function_type( &::CBaseEntity::StopSound )
                , ( bp::arg("iEntIndex"), bp::arg("iChannel"), bp::arg("pSample") ) );
        
        }
        { //::CBaseEntity::TakeDamage
        
            typedef int ( ::CBaseEntity::*TakeDamage_function_type)( ::CTakeDamageInfo const & ) ;
            
            CBaseEntity_exposer.def( 
                "TakeDamage"
                , TakeDamage_function_type( &::CBaseEntity::TakeDamage )
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::TakeHealth
        
            typedef int ( ::CBaseEntity::*TakeHealth_function_type)( float,int ) ;
            
            CBaseEntity_exposer.def( 
                "TakeHealth"
                , TakeHealth_function_type( &::CBaseEntity::TakeHealth )
                , ( bp::arg("flHealth"), bp::arg("bitsDamageType") ) );
        
        }
        { //::CBaseEntity::TeamID
        
            typedef char const * ( ::CBaseEntity::*TeamID_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "TeamID"
                , TeamID_function_type( &::CBaseEntity::TeamID ) );
        
        }
        { //::CBaseEntity::Teleport
        
            typedef void ( ::CBaseEntity::*Teleport_function_type)( ::Vector const *,::QAngle const *,::Vector const * ) ;
            
            CBaseEntity_exposer.def( 
                "Teleport"
                , Teleport_function_type( &::CBaseEntity::Teleport )
                , ( bp::arg("newPosition"), bp::arg("newAngles"), bp::arg("newVelocity") ) );
        
        }
        { //::CBaseEntity::Think
        
            typedef void ( ::CBaseEntity::*Think_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "Think"
                , Think_function_type( &::CBaseEntity::Think ) );
        
        }
        { //::CBaseEntity::ToggleFlag
        
            typedef void ( ::CBaseEntity::*ToggleFlag_function_type)( int ) ;
            
            CBaseEntity_exposer.def( 
                "ToggleFlag"
                , ToggleFlag_function_type( &::CBaseEntity::ToggleFlag )
                , ( bp::arg("flagToToggle") ) );
        
        }
        { //::CBaseEntity::Touch
        
            typedef void ( ::CBaseEntity::*Touch_function_type)( ::CBaseEntity * ) ;
            
            CBaseEntity_exposer.def( 
                "Touch"
                , Touch_function_type( &::CBaseEntity::Touch )
                , ( bp::arg("pOther") ) );
        
        }
        { //::CBaseEntity::TraceAttack
        
            typedef void ( CBaseEntity_wrapper::*TraceAttack_function_type)( ::CTakeDamageInfo const &,::Vector const &,::trace_t *,::CDmgAccumulator * ) ;
            
            CBaseEntity_exposer.def( 
                "TraceAttack"
                , TraceAttack_function_type( &CBaseEntity_wrapper::TraceAttack )
                , ( bp::arg("info"), bp::arg("vecDir"), bp::arg("ptr"), bp::arg("pAccumulator")=bp::object() ) );
        
        }
        { //::CBaseEntity::TraceAttackToTriggers
        
            typedef void ( ::CBaseEntity::*TraceAttackToTriggers_function_type)( ::CTakeDamageInfo const &,::Vector const &,::Vector const &,::Vector const & ) ;
            
            CBaseEntity_exposer.def( 
                "TraceAttackToTriggers"
                , TraceAttackToTriggers_function_type( &::CBaseEntity::TraceAttackToTriggers )
                , ( bp::arg("info"), bp::arg("start"), bp::arg("end"), bp::arg("dir") ) );
        
        }
        { //::CBaseEntity::TraceBleed
        
            typedef void ( ::CBaseEntity::*TraceBleed_function_type)( float,::Vector const &,::trace_t *,int ) ;
            
            CBaseEntity_exposer.def( 
                "TraceBleed"
                , TraceBleed_function_type( &::CBaseEntity::TraceBleed )
                , ( bp::arg("flDamage"), bp::arg("vecDir"), bp::arg("ptr"), bp::arg("bitsDamageType") ) );
        
        }
        { //::CBaseEntity::UnsetPlayerSimulated
        
            typedef void ( ::CBaseEntity::*UnsetPlayerSimulated_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "UnsetPlayerSimulated"
                , UnsetPlayerSimulated_function_type( &::CBaseEntity::UnsetPlayerSimulated ) );
        
        }
        { //::CBaseEntity::UpdateOnRemove
        
            typedef void ( ::CBaseEntity::*UpdateOnRemove_function_type)(  ) ;
            typedef void ( CBaseEntity_wrapper::*default_UpdateOnRemove_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "UpdateOnRemove"
                , UpdateOnRemove_function_type(&::CBaseEntity::UpdateOnRemove)
                , default_UpdateOnRemove_function_type(&CBaseEntity_wrapper::default_UpdateOnRemove) );
        
        }
        { //::CBaseEntity::UpdatePhysicsShadowToCurrentPosition
        
            typedef void ( ::CBaseEntity::*UpdatePhysicsShadowToCurrentPosition_function_type)( float ) ;
            
            CBaseEntity_exposer.def( 
                "UpdatePhysicsShadowToCurrentPosition"
                , UpdatePhysicsShadowToCurrentPosition_function_type( &::CBaseEntity::UpdatePhysicsShadowToCurrentPosition )
                , ( bp::arg("deltaTime") ) );
        
        }
        { //::CBaseEntity::UpdateTransmitState
        
            typedef int ( ::CBaseEntity::*UpdateTransmitState_function_type)(  ) ;
            typedef int ( CBaseEntity_wrapper::*default_UpdateTransmitState_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "UpdateTransmitState"
                , UpdateTransmitState_function_type(&::CBaseEntity::UpdateTransmitState)
                , default_UpdateTransmitState_function_type(&CBaseEntity_wrapper::default_UpdateTransmitState) );
        
        }
        { //::CBaseEntity::UpdateWaterState
        
            typedef void ( ::CBaseEntity::*UpdateWaterState_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "UpdateWaterState"
                , UpdateWaterState_function_type( &::CBaseEntity::UpdateWaterState ) );
        
        }
        { //::CBaseEntity::Use
        
            typedef void ( ::CBaseEntity::*Use_function_type)( ::CBaseEntity *,::CBaseEntity *,::USE_TYPE,float ) ;
            
            CBaseEntity_exposer.def( 
                "Use"
                , Use_function_type( &::CBaseEntity::Use )
                , ( bp::arg("pActivator"), bp::arg("pCaller"), bp::arg("useType"), bp::arg("value") ) );
        
        }
        { //::CBaseEntity::UseStepSimulationNetworkAngles
        
            typedef bool ( ::CBaseEntity::*UseStepSimulationNetworkAngles_function_type)( ::QAngle const * * ) ;
            
            CBaseEntity_exposer.def( 
                "UseStepSimulationNetworkAngles"
                , UseStepSimulationNetworkAngles_function_type( &::CBaseEntity::UseStepSimulationNetworkAngles )
                , ( bp::arg("out_a") ) );
        
        }
        { //::CBaseEntity::UseStepSimulationNetworkOrigin
        
            typedef bool ( ::CBaseEntity::*UseStepSimulationNetworkOrigin_function_type)( ::Vector const * * ) ;
            
            CBaseEntity_exposer.def( 
                "UseStepSimulationNetworkOrigin"
                , UseStepSimulationNetworkOrigin_function_type( &::CBaseEntity::UseStepSimulationNetworkOrigin )
                , ( bp::arg("out_v") ) );
        
        }
        { //::CBaseEntity::VPhysicsCollision
        
            typedef void ( ::CBaseEntity::*VPhysicsCollision_function_type)( int,::gamevcollisionevent_t * ) ;
            typedef void ( CBaseEntity_wrapper::*default_VPhysicsCollision_function_type)( int,::gamevcollisionevent_t * ) ;
            
            CBaseEntity_exposer.def( 
                "VPhysicsCollision"
                , VPhysicsCollision_function_type(&::CBaseEntity::VPhysicsCollision)
                , default_VPhysicsCollision_function_type(&CBaseEntity_wrapper::default_VPhysicsCollision)
                , ( bp::arg("index"), bp::arg("pEvent") ) );
        
        }
        { //::CBaseEntity::VPhysicsDestroyObject
        
            typedef void ( ::CBaseEntity::*VPhysicsDestroyObject_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "VPhysicsDestroyObject"
                , VPhysicsDestroyObject_function_type( &::CBaseEntity::VPhysicsDestroyObject ) );
        
        }
        { //::CBaseEntity::VPhysicsFriction
        
            typedef void ( ::CBaseEntity::*VPhysicsFriction_function_type)( ::IPhysicsObject *,float,int,int ) ;
            
            CBaseEntity_exposer.def( 
                "VPhysicsFriction"
                , VPhysicsFriction_function_type( &::CBaseEntity::VPhysicsFriction )
                , ( bp::arg("pObject"), bp::arg("energy"), bp::arg("surfaceProps"), bp::arg("surfacePropsHit") ) );
        
        }
        { //::CBaseEntity::VPhysicsGetObject
        
            typedef ::IPhysicsObject * ( ::CBaseEntity::*VPhysicsGetObject_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "VPhysicsGetObject"
                , VPhysicsGetObject_function_type( &::CBaseEntity::VPhysicsGetObject )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::VPhysicsInitNormal
        
            typedef ::IPhysicsObject * ( ::CBaseEntity::*VPhysicsInitNormal_function_type)( ::SolidType_t,int,bool,::solid_t * ) ;
            
            CBaseEntity_exposer.def( 
                "VPhysicsInitNormal"
                , VPhysicsInitNormal_function_type( &::CBaseEntity::VPhysicsInitNormal )
                , ( bp::arg("solidType"), bp::arg("nSolidFlags"), bp::arg("createAsleep"), bp::arg("pSolid")=bp::object() )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::VPhysicsInitShadow
        
            typedef ::IPhysicsObject * ( ::CBaseEntity::*VPhysicsInitShadow_function_type)( bool,bool,::solid_t * ) ;
            
            CBaseEntity_exposer.def( 
                "VPhysicsInitShadow"
                , VPhysicsInitShadow_function_type( &::CBaseEntity::VPhysicsInitShadow )
                , ( bp::arg("allowPhysicsMovement"), bp::arg("allowPhysicsRotation"), bp::arg("pSolid")=bp::object() )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::VPhysicsInitStatic
        
            typedef ::IPhysicsObject * ( ::CBaseEntity::*VPhysicsInitStatic_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "VPhysicsInitStatic"
                , VPhysicsInitStatic_function_type( &::CBaseEntity::VPhysicsInitStatic )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CBaseEntity::VPhysicsIsFlesh
        
            typedef bool ( ::CBaseEntity::*VPhysicsIsFlesh_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "VPhysicsIsFlesh"
                , VPhysicsIsFlesh_function_type( &::CBaseEntity::VPhysicsIsFlesh ) );
        
        }
        { //::CBaseEntity::VPhysicsSetObject
        
            typedef void ( ::CBaseEntity::*VPhysicsSetObject_function_type)( ::IPhysicsObject * ) ;
            
            CBaseEntity_exposer.def( 
                "VPhysicsSetObject"
                , VPhysicsSetObject_function_type( &::CBaseEntity::VPhysicsSetObject )
                , ( bp::arg("pPhysics") ) );
        
        }
        { //::CBaseEntity::VPhysicsShadowCollision
        
            typedef void ( ::CBaseEntity::*VPhysicsShadowCollision_function_type)( int,::gamevcollisionevent_t * ) ;
            
            CBaseEntity_exposer.def( 
                "VPhysicsShadowCollision"
                , VPhysicsShadowCollision_function_type( &::CBaseEntity::VPhysicsShadowCollision )
                , ( bp::arg("index"), bp::arg("pEvent") ) );
        
        }
        { //::CBaseEntity::VPhysicsShadowUpdate
        
            typedef void ( ::CBaseEntity::*VPhysicsShadowUpdate_function_type)( ::IPhysicsObject * ) ;
            
            CBaseEntity_exposer.def( 
                "VPhysicsShadowUpdate"
                , VPhysicsShadowUpdate_function_type( &::CBaseEntity::VPhysicsShadowUpdate )
                , ( bp::arg("pPhysics") ) );
        
        }
        { //::CBaseEntity::VPhysicsSwapObject
        
            typedef void ( ::CBaseEntity::*VPhysicsSwapObject_function_type)( ::IPhysicsObject * ) ;
            
            CBaseEntity_exposer.def( 
                "VPhysicsSwapObject"
                , VPhysicsSwapObject_function_type( &::CBaseEntity::VPhysicsSwapObject )
                , ( bp::arg("pSwap") ) );
        
        }
        { //::CBaseEntity::VPhysicsTakeDamage
        
            typedef int ( ::CBaseEntity::*VPhysicsTakeDamage_function_type)( ::CTakeDamageInfo const & ) ;
            
            CBaseEntity_exposer.def( 
                "VPhysicsTakeDamage"
                , VPhysicsTakeDamage_function_type( &::CBaseEntity::VPhysicsTakeDamage )
                , ( bp::arg("info") ) );
        
        }
        { //::CBaseEntity::VPhysicsUpdate
        
            typedef void ( ::CBaseEntity::*VPhysicsUpdate_function_type)( ::IPhysicsObject * ) ;
            
            CBaseEntity_exposer.def( 
                "VPhysicsUpdate"
                , VPhysicsUpdate_function_type( &::CBaseEntity::VPhysicsUpdate )
                , ( bp::arg("pPhysics") ) );
        
        }
        { //::CBaseEntity::VPhysicsUpdatePusher
        
            typedef void ( ::CBaseEntity::*VPhysicsUpdatePusher_function_type)( ::IPhysicsObject * ) ;
            
            CBaseEntity_exposer.def( 
                "VPhysicsUpdatePusher"
                , VPhysicsUpdatePusher_function_type( &::CBaseEntity::VPhysicsUpdatePusher )
                , ( bp::arg("pPhysics") ) );
        
        }
        { //::CBaseEntity::ValidateEntityConnections
        
            typedef void ( ::CBaseEntity::*ValidateEntityConnections_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "ValidateEntityConnections"
                , ValidateEntityConnections_function_type( &::CBaseEntity::ValidateEntityConnections ) );
        
        }
        { //::CBaseEntity::VelocityPunch
        
            typedef void ( ::CBaseEntity::*VelocityPunch_function_type)( ::Vector const & ) ;
            
            CBaseEntity_exposer.def( 
                "VelocityPunch"
                , VelocityPunch_function_type( &::CBaseEntity::VelocityPunch )
                , ( bp::arg("vecForce") ) );
        
        }
        { //::CBaseEntity::ViewPunch
        
            typedef void ( ::CBaseEntity::*ViewPunch_function_type)( ::QAngle const & ) ;
            
            CBaseEntity_exposer.def( 
                "ViewPunch"
                , ViewPunch_function_type( &::CBaseEntity::ViewPunch )
                , ( bp::arg("angleOffset") ) );
        
        }
        { //::CBaseEntity::WakeRestingObjects
        
            typedef void ( ::CBaseEntity::*WakeRestingObjects_function_type)(  ) ;
            
            CBaseEntity_exposer.def( 
                "WakeRestingObjects"
                , WakeRestingObjects_function_type( &::CBaseEntity::WakeRestingObjects ) );
        
        }
        { //::CBaseEntity::WorldAlignMaxs
        
            typedef ::Vector const & ( ::CBaseEntity::*WorldAlignMaxs_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "WorldAlignMaxs"
                , WorldAlignMaxs_function_type( &::CBaseEntity::WorldAlignMaxs )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBaseEntity::WorldAlignMins
        
            typedef ::Vector const & ( ::CBaseEntity::*WorldAlignMins_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "WorldAlignMins"
                , WorldAlignMins_function_type( &::CBaseEntity::WorldAlignMins )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBaseEntity::WorldAlignSize
        
            typedef ::Vector const & ( ::CBaseEntity::*WorldAlignSize_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "WorldAlignSize"
                , WorldAlignSize_function_type( &::CBaseEntity::WorldAlignSize )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBaseEntity::WorldSpaceCenter
        
            typedef ::Vector const & ( ::CBaseEntity::*WorldSpaceCenter_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "WorldSpaceCenter"
                , WorldSpaceCenter_function_type( &::CBaseEntity::WorldSpaceCenter )
                , bp::return_value_policy< bp::copy_const_reference >() );
        
        }
        { //::CBaseEntity::WorldToEntitySpace
        
            typedef void ( ::CBaseEntity::*WorldToEntitySpace_function_type)( ::Vector const &,::Vector * ) const;
            
            CBaseEntity_exposer.def( 
                "WorldToEntitySpace"
                , WorldToEntitySpace_function_type( &::CBaseEntity::WorldToEntitySpace )
                , ( bp::arg("in"), bp::arg("pOut") ) );
        
        }
        { //::CBaseEntity::entindex
        
            typedef int ( ::CBaseEntity::*entindex_function_type)(  ) const;
            
            CBaseEntity_exposer.def( 
                "entindex"
                , entindex_function_type( &::CBaseEntity::entindex ) );
        
        }
        CBaseEntity_exposer.def_readwrite( "allowprecache", CBaseEntity::m_bAllowPrecache );
        CBaseEntity_exposer.def_readwrite( "indebugselect", CBaseEntity::m_bInDebugSelect );
        CBaseEntity_exposer.def_readwrite( "debugoverlays", &CBaseEntity::m_debugOverlays );
        CBaseEntity_exposer.def_readwrite( "prevanimtime", &CBaseEntity::m_flPrevAnimTime );
        CBaseEntity_exposer.def_readwrite( "speed", &CBaseEntity::m_flSpeed );
        CBaseEntity_exposer.def_readwrite( "classname", &CBaseEntity::m_iClassname );
        CBaseEntity_exposer.def_readwrite( "globalname", &CBaseEntity::m_iGlobalname );
        CBaseEntity_exposer.def_readwrite( "hammerid", &CBaseEntity::m_iHammerID );
        CBaseEntity_exposer.def_readwrite( "parent", &CBaseEntity::m_iParent );
        CBaseEntity_exposer.def_readwrite( "damagefiltername", &CBaseEntity::m_iszDamageFilterName );
        CBaseEntity_exposer.def_readwrite( "debugplayer", CBaseEntity::m_nDebugPlayer );
        CBaseEntity_exposer.def_readwrite( "lastthinktick", &CBaseEntity::m_nLastThinkTick );
        CBaseEntity_exposer.def_readwrite( "target", &CBaseEntity::m_target );
        CBaseEntity_exposer.staticmethod( "Create" );
        CBaseEntity_exposer.staticmethod( "CreateNoSpawn" );
        CBaseEntity_exposer.staticmethod( "CreatePredictedEntityByName" );
        CBaseEntity_exposer.staticmethod( "Debug_IsPaused" );
        CBaseEntity_exposer.staticmethod( "Debug_Pause" );
        CBaseEntity_exposer.staticmethod( "Debug_SetSteps" );
        CBaseEntity_exposer.staticmethod( "Debug_ShouldStep" );
        CBaseEntity_exposer.staticmethod( "Debug_Step" );
        CBaseEntity_exposer.staticmethod( "EmitAmbientSound" );
        CBaseEntity_exposer.staticmethod( "EmitCloseCaption" );
        CBaseEntity_exposer.staticmethod( "EmitSentenceByIndex" );
        CBaseEntity_exposer.staticmethod( "EmitSoundFilter" );
        CBaseEntity_exposer.staticmethod( "GetParametersForSound" );
        CBaseEntity_exposer.staticmethod( "GetPredictionPlayer" );
        CBaseEntity_exposer.staticmethod( "GetPredictionRandomSeed" );
        CBaseEntity_exposer.staticmethod( "GetSendTable" );
        CBaseEntity_exposer.staticmethod( "GetSoundDuration" );
        CBaseEntity_exposer.staticmethod( "GetTouchTrace" );
        CBaseEntity_exposer.staticmethod( "Instance" );
        CBaseEntity_exposer.staticmethod( "IsAbsQueriesValid" );
        CBaseEntity_exposer.staticmethod( "IsPrecacheAllowed" );
        CBaseEntity_exposer.staticmethod( "IsSimulatingOnAlternateTicks" );
        CBaseEntity_exposer.staticmethod( "LookupSoundLevel" );
        CBaseEntity_exposer.staticmethod( "PhysicsNotifyOtherOfGroundRemoval" );
        CBaseEntity_exposer.staticmethod( "PhysicsNotifyOtherOfUntouch" );
        CBaseEntity_exposer.staticmethod( "PhysicsRemoveGroundList" );
        CBaseEntity_exposer.staticmethod( "PhysicsRemoveTouchedList" );
        CBaseEntity_exposer.staticmethod( "PrecacheModel" );
        CBaseEntity_exposer.staticmethod( "PrecacheScriptSound" );
        CBaseEntity_exposer.staticmethod( "PrecacheSound" );
        CBaseEntity_exposer.staticmethod( "PrefetchScriptSound" );
        CBaseEntity_exposer.staticmethod( "PrefetchSound" );
        CBaseEntity_exposer.staticmethod( "RemoveRecipientsIfNotCloseCaptioning" );
        CBaseEntity_exposer.staticmethod( "SetAbsQueriesValid" );
        CBaseEntity_exposer.staticmethod( "SetAllowPrecache" );
        CBaseEntity_exposer.staticmethod( "SetPredictionPlayer" );
        CBaseEntity_exposer.staticmethod( "StopSoundStatic" );
        { //property "health"[fget=::CBaseEntity::GetHealth, fset=::CBaseEntity::SetHealth]
        
            typedef int ( ::CBaseEntity::*fget)(  ) const;
            typedef void ( ::CBaseEntity::*fset)( int ) ;
            
            CBaseEntity_exposer.add_property( 
                "health"
                , fget( &::CBaseEntity::GetHealth )
                , fset( &::CBaseEntity::SetHealth ) );
        
        }
        { //property "maxhealth"[fget=::CBaseEntity::GetMaxHealth, fset=::CBaseEntity::SetMaxHealth]
        
            typedef int ( ::CBaseEntity::*fget)(  ) const;
            typedef void ( ::CBaseEntity::*fset)( int ) ;
            
            CBaseEntity_exposer.add_property( 
                "maxhealth"
                , fget( &::CBaseEntity::GetMaxHealth )
                , fset( &::CBaseEntity::SetMaxHealth ) );
        
        }
        { //property "animtime"[fget=::CBaseEntity::GetAnimTime, fset=::CBaseEntity::SetAnimTime]
        
            typedef float ( ::CBaseEntity::*fget)(  ) const;
            typedef void ( ::CBaseEntity::*fset)( float ) ;
            
            CBaseEntity_exposer.add_property( 
                "animtime"
                , fget( &::CBaseEntity::GetAnimTime )
                , fset( &::CBaseEntity::SetAnimTime ) );
        
        }
        { //property "simulationtime"[fget=::CBaseEntity::GetSimulationTime, fset=::CBaseEntity::SetSimulationTime]
        
            typedef float ( ::CBaseEntity::*fget)(  ) const;
            typedef void ( ::CBaseEntity::*fset)( float ) ;
            
            CBaseEntity_exposer.add_property( 
                "simulationtime"
                , fget( &::CBaseEntity::GetSimulationTime )
                , fset( &::CBaseEntity::SetSimulationTime ) );
        
        }
        { //property "rendermode"[fget=::CBaseEntity::GetRenderMode, fset=::CBaseEntity::SetRenderMode]
        
            typedef ::RenderMode_t ( ::CBaseEntity::*fget)(  ) const;
            typedef void ( ::CBaseEntity::*fset)( ::RenderMode_t ) ;
            
            CBaseEntity_exposer.add_property( 
                "rendermode"
                , fget( &::CBaseEntity::GetRenderMode )
                , fset( &::CBaseEntity::SetRenderMode ) );
        
        }
        CBaseEntity_exposer.add_property( "lifestate", &CBaseEntity_wrapper::m_lifeState_Get, &CBaseEntity_wrapper::m_lifeState_Set );
        CBaseEntity_exposer.add_property( "takedamage", &CBaseEntity_wrapper::m_takedamage_Get, &CBaseEntity_wrapper::m_takedamage_Set );
    }

}

