// This file has been generated by Py++.

#include "cbase.h"



#include "__convenience.pypp.hpp"

#include "__call_policies.pypp.hpp"

#include "cbase.h"

#include "vgui_controls/Controls.h"

#include "vgui/Cursor.h"

#include "vgui_controls/Panel.h"

#include "view_shared.h"

#include "vgui/IBorder.h"

#include "vgui_controls/AnimationController.h"

#include "vgui/IInput.h"

#include "vgui/ISystem.h"

#include "vgui/IScheme.h"

#include "vgui/ILocalize.h"

#include "iclientmode.h"

#include "vgui_controls/MessageMap.h"

#include "ienginevgui.h"

#include "hud.h"

#include "hudelement.h"

#include "srcpy_vgui.h"

#include "srcpy_hud.h"

#include "srcpy.h"

#include "tier0/memdbgon.h"

namespace bp = boost::python;

struct CHudElement_wrapper : CHudElement, bp::wrapper< CHudElement > {

    CHudElement_wrapper(char const * pElementName )
    : CHudElement( pElementName )
      , bp::wrapper< CHudElement >(){
        // constructor
    
    }

    virtual void FireGameEvent( ::IGameEvent * event ) {
        PY_OVERRIDE_CHECK( CHudElement, FireGameEvent )
        PY_OVERRIDE_LOG( _vgui, CHudElement, FireGameEvent )
        bp::override func_FireGameEvent = this->get_override( "FireGameEvent" );
        if( func_FireGameEvent.ptr() != Py_None )
            try {
                func_FireGameEvent( boost::python::ptr(event) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHudElement::FireGameEvent( event );
            }
        else
            this->CHudElement::FireGameEvent( event );
    }
    
    void default_FireGameEvent( ::IGameEvent * event ) {
        CHudElement::FireGameEvent( event );
    }

    virtual int GetRenderGroupPriority(  ) {
        PY_OVERRIDE_CHECK( CHudElement, GetRenderGroupPriority )
        PY_OVERRIDE_LOG( _vgui, CHudElement, GetRenderGroupPriority )
        bp::override func_GetRenderGroupPriority = this->get_override( "GetRenderGroupPriority" );
        if( func_GetRenderGroupPriority.ptr() != Py_None )
            try {
                return func_GetRenderGroupPriority(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->CHudElement::GetRenderGroupPriority(  );
            }
        else
            return this->CHudElement::GetRenderGroupPriority(  );
    }
    
    int default_GetRenderGroupPriority(  ) {
        return CHudElement::GetRenderGroupPriority( );
    }

    virtual void Init(  ) {
        PY_OVERRIDE_CHECK( CHudElement, Init )
        PY_OVERRIDE_LOG( _vgui, CHudElement, Init )
        bp::override func_Init = this->get_override( "Init" );
        if( func_Init.ptr() != Py_None )
            try {
                func_Init(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHudElement::Init(  );
            }
        else
            this->CHudElement::Init(  );
    }
    
    void default_Init(  ) {
        CHudElement::Init( );
    }

    virtual void LevelInit(  ) {
        PY_OVERRIDE_CHECK( CHudElement, LevelInit )
        PY_OVERRIDE_LOG( _vgui, CHudElement, LevelInit )
        bp::override func_LevelInit = this->get_override( "LevelInit" );
        if( func_LevelInit.ptr() != Py_None )
            try {
                func_LevelInit(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHudElement::LevelInit(  );
            }
        else
            this->CHudElement::LevelInit(  );
    }
    
    void default_LevelInit(  ) {
        CHudElement::LevelInit( );
    }

    virtual void LevelShutdown(  ) {
        PY_OVERRIDE_CHECK( CHudElement, LevelShutdown )
        PY_OVERRIDE_LOG( _vgui, CHudElement, LevelShutdown )
        bp::override func_LevelShutdown = this->get_override( "LevelShutdown" );
        if( func_LevelShutdown.ptr() != Py_None )
            try {
                func_LevelShutdown(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHudElement::LevelShutdown(  );
            }
        else
            this->CHudElement::LevelShutdown(  );
    }
    
    void default_LevelShutdown(  ) {
        CHudElement::LevelShutdown( );
    }

    virtual void Reset(  ) {
        PY_OVERRIDE_CHECK( CHudElement, Reset )
        PY_OVERRIDE_LOG( _vgui, CHudElement, Reset )
        bp::override func_Reset = this->get_override( "Reset" );
        if( func_Reset.ptr() != Py_None )
            try {
                func_Reset(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHudElement::Reset(  );
            }
        else
            this->CHudElement::Reset(  );
    }
    
    void default_Reset(  ) {
        CHudElement::Reset( );
    }

    virtual void SetHiddenBits( int iBits ) {
        PY_OVERRIDE_CHECK( CHudElement, SetHiddenBits )
        PY_OVERRIDE_LOG( _vgui, CHudElement, SetHiddenBits )
        bp::override func_SetHiddenBits = this->get_override( "SetHiddenBits" );
        if( func_SetHiddenBits.ptr() != Py_None )
            try {
                func_SetHiddenBits( iBits );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHudElement::SetHiddenBits( iBits );
            }
        else
            this->CHudElement::SetHiddenBits( iBits );
    }
    
    void default_SetHiddenBits( int iBits ) {
        CHudElement::SetHiddenBits( iBits );
    }

    virtual void VidInit(  ) {
        PY_OVERRIDE_CHECK( CHudElement, VidInit )
        PY_OVERRIDE_LOG( _vgui, CHudElement, VidInit )
        bp::override func_VidInit = this->get_override( "VidInit" );
        if( func_VidInit.ptr() != Py_None )
            try {
                func_VidInit(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->CHudElement::VidInit(  );
            }
        else
            this->CHudElement::VidInit(  );
    }
    
    void default_VidInit(  ) {
        CHudElement::VidInit( );
    }

};

static boost::python::tuple GetAbsPos_d5faf845d94d659c26c9bc9e1a32faab( ::CWrapIPanel & inst, ::vgui::VPANEL vguiPanel ){
    int x2;
    int y2;
    inst.GetAbsPos(vguiPanel, x2, y2);
    return bp::make_tuple( x2, y2 );
}

static boost::python::tuple GetPos_4ec1be556fdc9beb9c2fb3ca43154693( ::CWrapIPanel & inst, ::vgui::VPANEL vguiPanel ){
    int x2;
    int y2;
    inst.GetPos(vguiPanel, x2, y2);
    return bp::make_tuple( x2, y2 );
}

static boost::python::tuple GetSize_fba0e720f363027307b500cd921b3d4d( ::CWrapIPanel & inst, ::vgui::VPANEL vguiPanel ){
    int wide2;
    int tall2;
    inst.GetSize(vguiPanel, wide2, tall2);
    return bp::make_tuple( wide2, tall2 );
}

static boost::python::tuple DrawGetTextPos_92858a1d1df22607f77d7dc97addce72( ::CWrapSurface & inst ){
    int x2;
    int y2;
    inst.DrawGetTextPos(x2, y2);
    return bp::make_tuple( x2, y2 );
}

static boost::python::tuple DrawGetTextureSize_504f17554f7a1586154279f7b497bdc5( ::CWrapSurface & inst, int id ){
    int wide2;
    int tall2;
    inst.DrawGetTextureSize(id, wide2, tall2);
    return bp::make_tuple( wide2, tall2 );
}

static boost::python::tuple GetAbsoluteWindowBounds_4eeabd4192197f16277efab83fa86ec3( ::CWrapSurface & inst ){
    int x2;
    int y2;
    int wide2;
    int tall2;
    inst.GetAbsoluteWindowBounds(x2, y2, wide2, tall2);
    return bp::make_tuple( x2, y2, wide2, tall2 );
}

static boost::python::tuple GetCharABCwide_ef480d0fcafaf3205ebae70db66cb095( ::CWrapSurface & inst, ::vgui::HFont font, int ch ){
    int a2;
    int b2;
    int c2;
    inst.GetCharABCwide(font, ch, a2, b2, c2);
    return bp::make_tuple( a2, b2, c2 );
}

static boost::python::tuple GetProportionalBase_90058266cbe328bbb8669583210ff19f( ::CWrapSurface & inst ){
    int width2;
    int height2;
    inst.GetProportionalBase(width2, height2);
    return bp::make_tuple( width2, height2 );
}

static boost::python::tuple GetScreenSize_c24f87ae2c57535c3d8716f319252d08( ::CWrapSurface & inst ){
    int wide2;
    int tall2;
    inst.GetScreenSize(wide2, tall2);
    return bp::make_tuple( wide2, tall2 );
}

static boost::python::tuple GetWorkspaceBounds_d2722ac443d22323887a859b0a9167bb( ::CWrapSurface & inst ){
    int x2;
    int y2;
    int wide2;
    int tall2;
    inst.GetWorkspaceBounds(x2, y2, wide2, tall2);
    return bp::make_tuple( x2, y2, wide2, tall2 );
}

static boost::python::tuple SurfaceGetCursorPos_85305e292f21cbb771f464ea4d42675c( ::CWrapSurface & inst ){
    int x2;
    int y2;
    inst.SurfaceGetCursorPos(x2, y2);
    return bp::make_tuple( x2, y2 );
}

static boost::python::tuple AdjustEngineViewport_87ddaa1f407679177ff698173425f388( ::IClientMode & inst ){
    int x2;
    int y2;
    int width2;
    int height2;
    inst.AdjustEngineViewport(x2, y2, width2, height2);
    return bp::make_tuple( x2, y2, width2, height2 );
}

static boost::python::tuple GetRegistryInteger_7b85c41418413c1905617b15737023e0( ::vgui::ISystem & inst, char const * key ){
    int value2;
    bool result = inst.GetRegistryInteger(key, value2);
    return bp::make_tuple( result, value2 );
}

static boost::python::tuple GetRegistryString_cc10e70c5f6b49d5963b27442c970b19( ::vgui::ISystem & inst, char const * key ){
    char value2[512];
    bool result = inst.GetRegistryString(key, value2, sizeof(value2));
    return bp::make_tuple( result, value2 );
}

void wrap_AddTickSignal( VPANEL panel, int intervalMilliseconds = 0 )
{
	vgui::ivgui()->AddTickSignal(panel, intervalMilliseconds);
}

void wrap_RemoveTickSignal( VPANEL panel)
{
	vgui::ivgui()->RemoveTickSignal(panel);
}

BOOST_PYTHON_MODULE(_vgui){
    bp::docstring_options doc_options( true, true, false );

    bp::enum_< vgui::CursorCode>("CursorCode")
        .value("dc_user", vgui::dc_user)
        .value("dc_none", vgui::dc_none)
        .value("dc_arrow", vgui::dc_arrow)
        .value("dc_ibeam", vgui::dc_ibeam)
        .value("dc_hourglass", vgui::dc_hourglass)
        .value("dc_waitarrow", vgui::dc_waitarrow)
        .value("dc_crosshair", vgui::dc_crosshair)
        .value("dc_up", vgui::dc_up)
        .value("dc_sizenwse", vgui::dc_sizenwse)
        .value("dc_sizenesw", vgui::dc_sizenesw)
        .value("dc_sizewe", vgui::dc_sizewe)
        .value("dc_sizens", vgui::dc_sizens)
        .value("dc_sizeall", vgui::dc_sizeall)
        .value("dc_no", vgui::dc_no)
        .value("dc_hand", vgui::dc_hand)
        .value("dc_blank", vgui::dc_blank)
        .value("dc_last", vgui::dc_last)
        .value("dc_alwaysvisible_push", vgui::dc_alwaysvisible_push)
        .value("dc_alwaysvisible_pop", vgui::dc_alwaysvisible_pop)
        .export_values()
        ;

    bp::enum_< vgui::DataType_t>("DataType_t")
        .value("DATATYPE_VOID", vgui::DATATYPE_VOID)
        .value("DATATYPE_CONSTCHARPTR", vgui::DATATYPE_CONSTCHARPTR)
        .value("DATATYPE_INT", vgui::DATATYPE_INT)
        .value("DATATYPE_FLOAT", vgui::DATATYPE_FLOAT)
        .value("DATATYPE_PTR", vgui::DATATYPE_PTR)
        .value("DATATYPE_BOOL", vgui::DATATYPE_BOOL)
        .value("DATATYPE_KEYVALUES", vgui::DATATYPE_KEYVALUES)
        .value("DATATYPE_CONSTWCHARPTR", vgui::DATATYPE_CONSTWCHARPTR)
        .value("DATATYPE_UINT64", vgui::DATATYPE_UINT64)
        .value("DATATYPE_HANDLE", vgui::DATATYPE_HANDLE)
        .export_values()
        ;

    bp::enum_< vgui::FontDrawType_t>("FontDrawType_t")
        .value("FONT_DRAW_DEFAULT", vgui::FONT_DRAW_DEFAULT)
        .value("FONT_DRAW_NONADDITIVE", vgui::FONT_DRAW_NONADDITIVE)
        .value("FONT_DRAW_ADDITIVE", vgui::FONT_DRAW_ADDITIVE)
        .value("FONT_DRAW_TYPE_COUNT", vgui::FONT_DRAW_TYPE_COUNT)
        .export_values()
        ;

    bp::enum_< VGuiPanel_t>("VGuiPanel_t")
        .value("PANEL_ROOT", PANEL_ROOT)
        .value("PANEL_GAMEUIDLL", PANEL_GAMEUIDLL)
        .value("PANEL_CLIENTDLL", PANEL_CLIENTDLL)
        .value("PANEL_TOOLS", PANEL_TOOLS)
        .value("PANEL_INGAMESCREENS", PANEL_INGAMESCREENS)
        .value("PANEL_GAMEDLL", PANEL_GAMEDLL)
        .value("PANEL_CLIENTDLL_TOOLS", PANEL_CLIENTDLL_TOOLS)
        .export_values()
        ;

    { //::CHudElement
        typedef bp::class_< CHudElement_wrapper, boost::noncopyable > CHudElement_exposer_t;
        CHudElement_exposer_t CHudElement_exposer = CHudElement_exposer_t( "CHudElement", bp::init< char const * >(( bp::arg("pElementName") )) );
        bp::scope CHudElement_scope( CHudElement_exposer );
        bp::implicitly_convertible< char const *, CHudElement >();
        { //::CHudElement::FireGameEvent
        
            typedef void ( ::CHudElement::*FireGameEvent_function_type)( ::IGameEvent * ) ;
            typedef void ( CHudElement_wrapper::*default_FireGameEvent_function_type)( ::IGameEvent * ) ;
            
            CHudElement_exposer.def( 
                "FireGameEvent"
                , FireGameEvent_function_type(&::CHudElement::FireGameEvent)
                , default_FireGameEvent_function_type(&CHudElement_wrapper::default_FireGameEvent)
                , ( bp::arg("event") ) );
        
        }
        { //::CHudElement::GetRenderGroupPriority
        
            typedef int ( ::CHudElement::*GetRenderGroupPriority_function_type)(  ) ;
            typedef int ( CHudElement_wrapper::*default_GetRenderGroupPriority_function_type)(  ) ;
            
            CHudElement_exposer.def( 
                "GetRenderGroupPriority"
                , GetRenderGroupPriority_function_type(&::CHudElement::GetRenderGroupPriority)
                , default_GetRenderGroupPriority_function_type(&CHudElement_wrapper::default_GetRenderGroupPriority) );
        
        }
        { //::CHudElement::HideLowerPriorityHudElementsInGroup
        
            typedef void ( ::CHudElement::*HideLowerPriorityHudElementsInGroup_function_type)( char const * ) ;
            
            CHudElement_exposer.def( 
                "HideLowerPriorityHudElementsInGroup"
                , HideLowerPriorityHudElementsInGroup_function_type( &::CHudElement::HideLowerPriorityHudElementsInGroup )
                , ( bp::arg("pszGroupName") ) );
        
        }
        { //::CHudElement::Init
        
            typedef void ( ::CHudElement::*Init_function_type)(  ) ;
            typedef void ( CHudElement_wrapper::*default_Init_function_type)(  ) ;
            
            CHudElement_exposer.def( 
                "Init"
                , Init_function_type(&::CHudElement::Init)
                , default_Init_function_type(&CHudElement_wrapper::default_Init) );
        
        }
        { //::CHudElement::IsActive
        
            typedef bool ( ::CHudElement::*IsActive_function_type)(  ) ;
            
            CHudElement_exposer.def( 
                "IsActive"
                , IsActive_function_type( &::CHudElement::IsActive ) );
        
        }
        { //::CHudElement::IsParentedToClientDLLRootPanel
        
            typedef bool ( ::CHudElement::*IsParentedToClientDLLRootPanel_function_type)(  ) const;
            
            CHudElement_exposer.def( 
                "IsParentedToClientDLLRootPanel"
                , IsParentedToClientDLLRootPanel_function_type( &::CHudElement::IsParentedToClientDLLRootPanel ) );
        
        }
        { //::CHudElement::LevelInit
        
            typedef void ( ::CHudElement::*LevelInit_function_type)(  ) ;
            typedef void ( CHudElement_wrapper::*default_LevelInit_function_type)(  ) ;
            
            CHudElement_exposer.def( 
                "LevelInit"
                , LevelInit_function_type(&::CHudElement::LevelInit)
                , default_LevelInit_function_type(&CHudElement_wrapper::default_LevelInit) );
        
        }
        { //::CHudElement::LevelShutdown
        
            typedef void ( ::CHudElement::*LevelShutdown_function_type)(  ) ;
            typedef void ( CHudElement_wrapper::*default_LevelShutdown_function_type)(  ) ;
            
            CHudElement_exposer.def( 
                "LevelShutdown"
                , LevelShutdown_function_type(&::CHudElement::LevelShutdown)
                , default_LevelShutdown_function_type(&CHudElement_wrapper::default_LevelShutdown) );
        
        }
        { //::CHudElement::ProcessInput
        
            typedef void ( ::CHudElement::*ProcessInput_function_type)(  ) ;
            
            CHudElement_exposer.def( 
                "ProcessInput"
                , ProcessInput_function_type( &::CHudElement::ProcessInput ) );
        
        }
        { //::CHudElement::RegisterForRenderGroup
        
            typedef void ( ::CHudElement::*RegisterForRenderGroup_function_type)( char const * ) ;
            
            CHudElement_exposer.def( 
                "RegisterForRenderGroup"
                , RegisterForRenderGroup_function_type( &::CHudElement::RegisterForRenderGroup )
                , ( bp::arg("pszName") ) );
        
        }
        { //::CHudElement::Reset
        
            typedef void ( ::CHudElement::*Reset_function_type)(  ) ;
            typedef void ( CHudElement_wrapper::*default_Reset_function_type)(  ) ;
            
            CHudElement_exposer.def( 
                "Reset"
                , Reset_function_type(&::CHudElement::Reset)
                , default_Reset_function_type(&CHudElement_wrapper::default_Reset) );
        
        }
        { //::CHudElement::SetActive
        
            typedef void ( ::CHudElement::*SetActive_function_type)( bool ) ;
            
            CHudElement_exposer.def( 
                "SetActive"
                , SetActive_function_type( &::CHudElement::SetActive )
                , ( bp::arg("bActive") ) );
        
        }
        { //::CHudElement::SetHiddenBits
        
            typedef void ( ::CHudElement::*SetHiddenBits_function_type)( int ) ;
            typedef void ( CHudElement_wrapper::*default_SetHiddenBits_function_type)( int ) ;
            
            CHudElement_exposer.def( 
                "SetHiddenBits"
                , SetHiddenBits_function_type(&::CHudElement::SetHiddenBits)
                , default_SetHiddenBits_function_type(&CHudElement_wrapper::default_SetHiddenBits)
                , ( bp::arg("iBits") ) );
        
        }
        { //::CHudElement::SetNeedsRemove
        
            typedef void ( ::CHudElement::*SetNeedsRemove_function_type)( bool ) ;
            
            CHudElement_exposer.def( 
                "SetNeedsRemove"
                , SetNeedsRemove_function_type( &::CHudElement::SetNeedsRemove )
                , ( bp::arg("needsremove") ) );
        
        }
        { //::CHudElement::SetParentedToClientDLLRootPanel
        
            typedef void ( ::CHudElement::*SetParentedToClientDLLRootPanel_function_type)( bool ) ;
            
            CHudElement_exposer.def( 
                "SetParentedToClientDLLRootPanel"
                , SetParentedToClientDLLRootPanel_function_type( &::CHudElement::SetParentedToClientDLLRootPanel )
                , ( bp::arg("parented") ) );
        
        }
        { //::CHudElement::ShouldDraw
        
            typedef bool ( ::CHudElement::*ShouldDraw_function_type)(  ) ;
            
            CHudElement_exposer.def( 
                "ShouldDraw"
                , ShouldDraw_function_type( &::CHudElement::ShouldDraw ) );
        
        }
        { //::CHudElement::UnhideLowerPriorityHudElementsInGroup
        
            typedef void ( ::CHudElement::*UnhideLowerPriorityHudElementsInGroup_function_type)( char const * ) ;
            
            CHudElement_exposer.def( 
                "UnhideLowerPriorityHudElementsInGroup"
                , UnhideLowerPriorityHudElementsInGroup_function_type( &::CHudElement::UnhideLowerPriorityHudElementsInGroup )
                , ( bp::arg("pszGroupName") ) );
        
        }
        { //::CHudElement::UnregisterForRenderGroup
        
            typedef void ( ::CHudElement::*UnregisterForRenderGroup_function_type)( char const * ) ;
            
            CHudElement_exposer.def( 
                "UnregisterForRenderGroup"
                , UnregisterForRenderGroup_function_type( &::CHudElement::UnregisterForRenderGroup )
                , ( bp::arg("pszGroupName") ) );
        
        }
        { //::CHudElement::VidInit
        
            typedef void ( ::CHudElement::*VidInit_function_type)(  ) ;
            typedef void ( CHudElement_wrapper::*default_VidInit_function_type)(  ) ;
            
            CHudElement_exposer.def( 
                "VidInit"
                , VidInit_function_type(&::CHudElement::VidInit)
                , default_VidInit_function_type(&CHudElement_wrapper::default_VidInit) );
        
        }
        CHudElement_exposer.def_readwrite( "m_bActive", &CHudElement::m_bActive );
    }

    bp::class_< CHud, boost::noncopyable >( "CHud", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "AddHudElement"
            , (void ( ::CHud::* )( ::CHudElement * ))( &::CHud::AddHudElement )
            , ( bp::arg("pHudElement") ) )    
        .def( 
            "AddHudRenderGroup"
            , (int ( ::CHud::* )( char const * ))( &::CHud::AddHudRenderGroup )
            , ( bp::arg("pszGroupName") ) )    
        .def( 
            "AddSearchableHudIconToList"
            , (::CHudTexture * ( ::CHud::* )( ::CHudTexture & ))( &::CHud::AddSearchableHudIconToList )
            , ( bp::arg("texture") )
            , bp::return_internal_reference< >() )    
        .def( 
            "AddUnsearchableHudIconToList"
            , (::CHudTexture * ( ::CHud::* )( ::CHudTexture & ))( &::CHud::AddUnsearchableHudIconToList )
            , ( bp::arg("texture") )
            , bp::return_internal_reference< >() )    
        .def( 
            "DoesRenderGroupExist"
            , (bool ( ::CHud::* )( int ))( &::CHud::DoesRenderGroupExist )
            , ( bp::arg("iGroupIndex") ) )    
        .def( 
            "DrawIconProgressBar"
            , (void ( ::CHud::* )( int,int,::CHudTexture *,::CHudTexture *,float,::Color &,int ))( &::CHud::DrawIconProgressBar )
            , ( bp::arg("x"), bp::arg("y"), bp::arg("icon"), bp::arg("icon2"), bp::arg("percentage"), bp::arg("clr"), bp::arg("type") ) )    
        .def( 
            "DrawProgressBar"
            , (void ( ::CHud::* )( int,int,int,int,float,::Color &,unsigned char ))( &::CHud::DrawProgressBar )
            , ( bp::arg("x"), bp::arg("y"), bp::arg("width"), bp::arg("height"), bp::arg("percentage"), bp::arg("clr"), bp::arg("type") ) )    
        .def( 
            "FindElement"
            , (::CHudElement * ( ::CHud::* )( char const * ))( &::CHud::FindElement )
            , ( bp::arg("pName") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetFOVSensitivityAdjust"
            , (float ( ::CHud::* )(  ))( &::CHud::GetFOVSensitivityAdjust ) )    
        .def( 
            "GetIcon"
            , (::CHudTexture * ( ::CHud::* )( char const * ))( &::CHud::GetIcon )
            , ( bp::arg("szIcon") )
            , bp::return_internal_reference< >() )    
        .def( 
            "GetSensitivity"
            , (float ( ::CHud::* )(  ))( &::CHud::GetSensitivity ) )    
        .def( 
            "Init"
            , (void ( ::CHud::* )(  ))( &::CHud::Init ) )    
        .def( 
            "InitColors"
            , (void ( ::CHud::* )( ::vgui::IScheme * ))( &::CHud::InitColors )
            , ( bp::arg("pScheme") ) )    
        .def( 
            "IsHidden"
            , (bool ( ::CHud::* )( int ))( &::CHud::IsHidden )
            , ( bp::arg("iHudFlags") ) )    
        .def( 
            "IsRenderGroupLockedFor"
            , (bool ( ::CHud::* )( ::CHudElement *,int ))( &::CHud::IsRenderGroupLockedFor )
            , ( bp::arg("pHudElement"), bp::arg("iGroupIndex") ) )    
        .def( 
            "LevelInit"
            , (void ( ::CHud::* )(  ))( &::CHud::LevelInit ) )    
        .def( 
            "LevelShutdown"
            , (void ( ::CHud::* )(  ))( &::CHud::LevelShutdown ) )    
        .def( 
            "LockRenderGroup"
            , (bool ( ::CHud::* )( int,::CHudElement * ))( &::CHud::LockRenderGroup )
            , ( bp::arg("iGroupIndex"), bp::arg("pLocker")=bp::object() ) )    
        .def( 
            "LookupRenderGroupIndexByName"
            , (int ( ::CHud::* )( char const * ))( &::CHud::LookupRenderGroupIndexByName )
            , ( bp::arg("pszGroupName") ) )    
        .def( 
            "MsgFunc_ResetHUD"
            , (void ( ::CHud::* )( ::bf_read & ))( &::CHud::MsgFunc_ResetHUD )
            , ( bp::arg("msg") ) )    
        .def( 
            "MsgFunc_SendAudio"
            , (void ( ::CHud::* )( ::bf_read & ))( &::CHud::MsgFunc_SendAudio )
            , ( bp::arg("msg") ) )    
        .def( 
            "OnRestore"
            , (void ( ::CHud::* )(  ))( &::CHud::OnRestore ) )    
        .def( 
            "ProcessInput"
            , (void ( ::CHud::* )( bool ))( &::CHud::ProcessInput )
            , ( bp::arg("bActive") ) )    
        .def( 
            "RefreshHudTextures"
            , (void ( ::CHud::* )(  ))( &::CHud::RefreshHudTextures ) )    
        .def( 
            "RegisterForRenderGroup"
            , (int ( ::CHud::* )( char const * ))( &::CHud::RegisterForRenderGroup )
            , ( bp::arg("pszGroupName") ) )    
        .def( 
            "RemoveHudElement"
            , (void ( ::CHud::* )( ::CHudElement * ))( &::CHud::RemoveHudElement )
            , ( bp::arg("pHudElement") ) )    
        .def( 
            "ResetHUD"
            , (void ( ::CHud::* )(  ))( &::CHud::ResetHUD ) )    
        .def( 
            "SetScreenShotTime"
            , (void ( ::CHud::* )( float ))( &::CHud::SetScreenShotTime )
            , ( bp::arg("flTime") ) )    
        .def( 
            "Shutdown"
            , (void ( ::CHud::* )(  ))( &::CHud::Shutdown ) )    
        .def( 
            "Think"
            , (void ( ::CHud::* )(  ))( &::CHud::Think ) )    
        .def( 
            "UnlockRenderGroup"
            , (bool ( ::CHud::* )( int,::CHudElement * ))( &::CHud::UnlockRenderGroup )
            , ( bp::arg("iGroupIndex"), bp::arg("pLocker")=bp::object() ) )    
        .def( 
            "UpdateHud"
            , (void ( ::CHud::* )( bool ))( &::CHud::UpdateHud )
            , ( bp::arg("bActive") ) )    
        .def( 
            "VidInit"
            , (void ( ::CHud::* )(  ))( &::CHud::VidInit ) )    
        .def_readonly( "HUDPB_HORIZONTAL", CHud::HUDPB_HORIZONTAL )    
        .def_readonly( "HUDPB_HORIZONTAL_INV", CHud::HUDPB_HORIZONTAL_INV )    
        .def_readonly( "HUDPB_VERTICAL", CHud::HUDPB_VERTICAL )    
        .def_readwrite( "m_clrCaution", &CHud::m_clrCaution )    
        .def_readwrite( "m_clrNormal", &CHud::m_clrNormal )    
        .def_readwrite( "m_clrYellowish", &CHud::m_clrYellowish )    
        .def_readwrite( "m_flFOVSensitivityAdjust", &CHud::m_flFOVSensitivityAdjust )    
        .def_readwrite( "m_flMouseSensitivity", &CHud::m_flMouseSensitivity )    
        .def_readwrite( "m_flMouseSensitivityFactor", &CHud::m_flMouseSensitivityFactor )    
        .def_readwrite( "m_iKeyBits", &CHud::m_iKeyBits );

    { //::CHudTexture
        typedef bp::class_< CHudTexture > CHudTexture_exposer_t;
        CHudTexture_exposer_t CHudTexture_exposer = CHudTexture_exposer_t( "CHudTexture", bp::init< >() );
        bp::scope CHudTexture_scope( CHudTexture_exposer );
        { //::CHudTexture::DrawSelf
        
            typedef void ( ::CHudTexture::*DrawSelf_function_type)( int,int,::Color const & ) const;
            
            CHudTexture_exposer.def( 
                "DrawSelf"
                , DrawSelf_function_type( &::CHudTexture::DrawSelf )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("clr") ) );
        
        }
        { //::CHudTexture::DrawSelf
        
            typedef void ( ::CHudTexture::*DrawSelf_function_type)( int,int,int,int,::Color const & ) const;
            
            CHudTexture_exposer.def( 
                "DrawSelf"
                , DrawSelf_function_type( &::CHudTexture::DrawSelf )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("w"), bp::arg("h"), bp::arg("clr") ) );
        
        }
        { //::CHudTexture::DrawSelfCropped
        
            typedef void ( ::CHudTexture::*DrawSelfCropped_function_type)( int,int,int,int,int,int,::Color ) const;
            
            CHudTexture_exposer.def( 
                "DrawSelfCropped"
                , DrawSelfCropped_function_type( &::CHudTexture::DrawSelfCropped )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("cropx"), bp::arg("cropy"), bp::arg("cropw"), bp::arg("croph"), bp::arg("clr") ) );
        
        }
        { //::CHudTexture::DrawSelfCropped
        
            typedef void ( ::CHudTexture::*DrawSelfCropped_function_type)( int,int,int,int,int,int,int,int,::Color ) const;
            
            CHudTexture_exposer.def( 
                "DrawSelfCropped"
                , DrawSelfCropped_function_type( &::CHudTexture::DrawSelfCropped )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("cropx"), bp::arg("cropy"), bp::arg("cropw"), bp::arg("croph"), bp::arg("finalWidth"), bp::arg("finalHeight"), bp::arg("clr") ) );
        
        }
        { //::CHudTexture::EffectiveHeight
        
            typedef int ( ::CHudTexture::*EffectiveHeight_function_type)( float ) const;
            
            CHudTexture_exposer.def( 
                "EffectiveHeight"
                , EffectiveHeight_function_type( &::CHudTexture::EffectiveHeight )
                , ( bp::arg("flScale") ) );
        
        }
        { //::CHudTexture::EffectiveWidth
        
            typedef int ( ::CHudTexture::*EffectiveWidth_function_type)( float ) const;
            
            CHudTexture_exposer.def( 
                "EffectiveWidth"
                , EffectiveWidth_function_type( &::CHudTexture::EffectiveWidth )
                , ( bp::arg("flScale") ) );
        
        }
        { //::CHudTexture::Height
        
            typedef int ( ::CHudTexture::*Height_function_type)(  ) const;
            
            CHudTexture_exposer.def( 
                "Height"
                , Height_function_type( &::CHudTexture::Height ) );
        
        }
        { //::CHudTexture::Precache
        
            typedef void ( ::CHudTexture::*Precache_function_type)(  ) ;
            
            CHudTexture_exposer.def( 
                "Precache"
                , Precache_function_type( &::CHudTexture::Precache ) );
        
        }
        { //::CHudTexture::Width
        
            typedef int ( ::CHudTexture::*Width_function_type)(  ) const;
            
            CHudTexture_exposer.def( 
                "Width"
                , Width_function_type( &::CHudTexture::Width ) );
        
        }
        { //::CHudTexture::operator=
        
            typedef ::CHudTexture & ( ::CHudTexture::*assign_function_type)( ::CHudTexture const & ) ;
            
            CHudTexture_exposer.def( 
                "assign"
                , assign_function_type( &::CHudTexture::operator= )
                , ( bp::arg("src") )
                , bp::return_self< >() );
        
        }
    }

    { //::CPyHudElementHelper
        typedef bp::class_< CPyHudElementHelper > CHudElementHelper_exposer_t;
        CHudElementHelper_exposer_t CHudElementHelper_exposer = CHudElementHelper_exposer_t( "CHudElementHelper", bp::init< bp::api::object >(( bp::arg("hud") )) );
        bp::scope CHudElementHelper_scope( CHudElementHelper_exposer );
        bp::implicitly_convertible< bp::api::object, CPyHudElementHelper >();
        { //::CPyHudElementHelper::Get
        
            typedef ::boost::python::api::object ( ::CPyHudElementHelper::*Get_function_type)(  ) ;
            
            CHudElementHelper_exposer.def( 
                "Get"
                , Get_function_type( &::CPyHudElementHelper::Get ) );
        
        }
    }

    bp::class_< CWrapIPanel >( "IPanel" )    
        .def( 
            "GetAbsPos"
            , (boost::python::tuple (*)( ::CWrapIPanel &,::vgui::VPANEL ))( &GetAbsPos_d5faf845d94d659c26c9bc9e1a32faab )
            , ( bp::arg("inst"), bp::arg("vguiPanel") ) )    
        .def( 
            "GetChild"
            , (::vgui::VPANEL ( ::CWrapIPanel::* )( ::vgui::VPANEL,int ))( &::CWrapIPanel::GetChild )
            , ( bp::arg("vguiPanel"), bp::arg("index") ) )    
        .def( 
            "GetChildCount"
            , (int ( ::CWrapIPanel::* )( ::vgui::VPANEL ))( &::CWrapIPanel::GetChildCount )
            , ( bp::arg("vguiPanel") ) )    
        .def( 
            "GetClassName"
            , (char const * ( ::CWrapIPanel::* )( ::vgui::VPANEL ))( &::CWrapIPanel::GetClassName )
            , ( bp::arg("vguiPanel") ) )    
        .def( 
            "GetClipRect"
            , (void ( ::CWrapIPanel::* )( ::vgui::VPANEL,int &,int &,int &,int & ))( &::CWrapIPanel::GetClipRect )
            , ( bp::arg("vguiPanel"), bp::arg("x0"), bp::arg("y0"), bp::arg("x1"), bp::arg("y1") ) )    
        .def( 
            "GetCurrentKeyFocus"
            , (::vgui::VPANEL ( ::CWrapIPanel::* )( ::vgui::VPANEL ))( &::CWrapIPanel::GetCurrentKeyFocus )
            , ( bp::arg("vguiPanel") ) )    
        .def( 
            "GetInset"
            , (void ( ::CWrapIPanel::* )( ::vgui::VPANEL,int &,int &,int &,int & ))( &::CWrapIPanel::GetInset )
            , ( bp::arg("vguiPanel"), bp::arg("left"), bp::arg("top"), bp::arg("right"), bp::arg("bottom") ) )    
        .def( 
            "GetMinimumSize"
            , (void ( ::CWrapIPanel::* )( ::vgui::VPANEL,int &,int & ))( &::CWrapIPanel::GetMinimumSize )
            , ( bp::arg("vguiPanel"), bp::arg("wide"), bp::arg("tall") ) )    
        .def( 
            "GetName"
            , (char const * ( ::CWrapIPanel::* )( ::vgui::VPANEL ))( &::CWrapIPanel::GetName )
            , ( bp::arg("vguiPanel") ) )    
        .def( 
            "GetPanel"
            , (::vgui::Panel * ( ::CWrapIPanel::* )( ::vgui::VPANEL,char const * ))( &::CWrapIPanel::GetPanel )
            , ( bp::arg("vguiPanel"), bp::arg("destinationModule") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetParent"
            , (::vgui::VPANEL ( ::CWrapIPanel::* )( ::vgui::VPANEL ))( &::CWrapIPanel::GetParent )
            , ( bp::arg("vguiPanel") ) )    
        .def( 
            "GetPos"
            , (boost::python::tuple (*)( ::CWrapIPanel &,::vgui::VPANEL ))( &GetPos_4ec1be556fdc9beb9c2fb3ca43154693 )
            , ( bp::arg("inst"), bp::arg("vguiPanel") ) )    
        .def( 
            "GetScheme"
            , (::vgui::HScheme ( ::CWrapIPanel::* )( ::vgui::VPANEL ))( &::CWrapIPanel::GetScheme )
            , ( bp::arg("vguiPanel") ) )    
        .def( 
            "GetSize"
            , (boost::python::tuple (*)( ::CWrapIPanel &,::vgui::VPANEL ))( &GetSize_fba0e720f363027307b500cd921b3d4d )
            , ( bp::arg("inst"), bp::arg("vguiPanel") ) )    
        .def( 
            "GetTabPosition"
            , (int ( ::CWrapIPanel::* )( ::vgui::VPANEL ))( &::CWrapIPanel::GetTabPosition )
            , ( bp::arg("vguiPanel") ) )    
        .def( 
            "GetZPos"
            , (int ( ::CWrapIPanel::* )( ::vgui::VPANEL ))( &::CWrapIPanel::GetZPos )
            , ( bp::arg("vguiPanel") ) )    
        .def( 
            "HasParent"
            , (bool ( ::CWrapIPanel::* )( ::vgui::VPANEL,::vgui::VPANEL ))( &::CWrapIPanel::HasParent )
            , ( bp::arg("vguiPanel"), bp::arg("potentialParent") ) )    
        .def( 
            "InternalFocusChanged"
            , (void ( ::CWrapIPanel::* )( ::vgui::VPANEL,bool ))( &::CWrapIPanel::InternalFocusChanged )
            , ( bp::arg("vguiPanel"), bp::arg("lost") ) )    
        .def( 
            "IsEnabled"
            , (bool ( ::CWrapIPanel::* )( ::vgui::VPANEL ))( &::CWrapIPanel::IsEnabled )
            , ( bp::arg("vguiPanel") ) )    
        .def( 
            "IsFullyVisible"
            , (bool ( ::CWrapIPanel::* )( ::vgui::VPANEL ))( &::CWrapIPanel::IsFullyVisible )
            , ( bp::arg("vguiPanel") ) )    
        .def( 
            "IsKeyBoardInputEnabled"
            , (bool ( ::CWrapIPanel::* )( ::vgui::VPANEL ))( &::CWrapIPanel::IsKeyBoardInputEnabled )
            , ( bp::arg("vguiPanel") ) )    
        .def( 
            "IsMouseInputEnabled"
            , (bool ( ::CWrapIPanel::* )( ::vgui::VPANEL ))( &::CWrapIPanel::IsMouseInputEnabled )
            , ( bp::arg("vguiPanel") ) )    
        .def( 
            "IsPopup"
            , (bool ( ::CWrapIPanel::* )( ::vgui::VPANEL ))( &::CWrapIPanel::IsPopup )
            , ( bp::arg("vguiPanel") ) )    
        .def( 
            "IsProportional"
            , (bool ( ::CWrapIPanel::* )( ::vgui::VPANEL ))( &::CWrapIPanel::IsProportional )
            , ( bp::arg("vguiPanel") ) )    
        .def( 
            "IsTopmostPopup"
            , (bool ( ::CWrapIPanel::* )( ::vgui::VPANEL ))( &::CWrapIPanel::IsTopmostPopup )
            , ( bp::arg("vguiPanel") ) )    
        .def( 
            "IsVisible"
            , (bool ( ::CWrapIPanel::* )( ::vgui::VPANEL ))( &::CWrapIPanel::IsVisible )
            , ( bp::arg("vguiPanel") ) )    
        .def( 
            "IsWithinTraverse"
            , (::vgui::VPANEL ( ::CWrapIPanel::* )( ::vgui::VPANEL,int,int,bool ))( &::CWrapIPanel::IsWithinTraverse )
            , ( bp::arg("vguiPanel"), bp::arg("x"), bp::arg("y"), bp::arg("traversePopups") ) )    
        .def( 
            "MoveToBack"
            , (void ( ::CWrapIPanel::* )( ::vgui::VPANEL ))( &::CWrapIPanel::MoveToBack )
            , ( bp::arg("vguiPanel") ) )    
        .def( 
            "MoveToFront"
            , (void ( ::CWrapIPanel::* )( ::vgui::VPANEL ))( &::CWrapIPanel::MoveToFront )
            , ( bp::arg("vguiPanel") ) )    
        .def( 
            "OnChildAdded"
            , (void ( ::CWrapIPanel::* )( ::vgui::VPANEL,::vgui::VPANEL ))( &::CWrapIPanel::OnChildAdded )
            , ( bp::arg("vguiPanel"), bp::arg("child") ) )    
        .def( 
            "OnSizeChanged"
            , (void ( ::CWrapIPanel::* )( ::vgui::VPANEL,int,int ))( &::CWrapIPanel::OnSizeChanged )
            , ( bp::arg("vguiPanel"), bp::arg("newWide"), bp::arg("newTall") ) )    
        .def( 
            "PaintTraverse"
            , (void ( ::CWrapIPanel::* )( ::vgui::VPANEL,bool,bool ))( &::CWrapIPanel::PaintTraverse )
            , ( bp::arg("vguiPanel"), bp::arg("forceRepaint"), bp::arg("allowForce")=(bool)(true) ) )    
        .def( 
            "PerformApplySchemeSettings"
            , (void ( ::CWrapIPanel::* )( ::vgui::VPANEL ))( &::CWrapIPanel::PerformApplySchemeSettings )
            , ( bp::arg("vguiPanel") ) )    
        .def( 
            "Repaint"
            , (void ( ::CWrapIPanel::* )( ::vgui::VPANEL ))( &::CWrapIPanel::Repaint )
            , ( bp::arg("vguiPanel") ) )    
        .def( 
            "RequestFocus"
            , (void ( ::CWrapIPanel::* )( ::vgui::VPANEL,int ))( &::CWrapIPanel::RequestFocus )
            , ( bp::arg("vguiPanel"), bp::arg("direction")=(int)(0) ) )    
        .def( 
            "RequestFocusNext"
            , (bool ( ::CWrapIPanel::* )( ::vgui::VPANEL,::vgui::VPANEL ))( &::CWrapIPanel::RequestFocusNext )
            , ( bp::arg("vguiPanel"), bp::arg("existingPanel") ) )    
        .def( 
            "RequestFocusPrev"
            , (bool ( ::CWrapIPanel::* )( ::vgui::VPANEL,::vgui::VPANEL ))( &::CWrapIPanel::RequestFocusPrev )
            , ( bp::arg("vguiPanel"), bp::arg("existingPanel") ) )    
        .def( 
            "RequestInfo"
            , (bool ( ::CWrapIPanel::* )( ::vgui::VPANEL,::KeyValues * ))( &::CWrapIPanel::RequestInfo )
            , ( bp::arg("vguiPanel"), bp::arg("outputData") ) )    
        .def( 
            "SendMessage"
            , (void ( ::CWrapIPanel::* )( ::vgui::VPANEL,::KeyValues *,::vgui::VPANEL ))( &::CWrapIPanel::SendMessage )
            , ( bp::arg("vguiPanel"), bp::arg("params"), bp::arg("ifromPanel") ) )    
        .def( 
            "SetEnabled"
            , (void ( ::CWrapIPanel::* )( ::vgui::VPANEL,bool ))( &::CWrapIPanel::SetEnabled )
            , ( bp::arg("vguiPanel"), bp::arg("state") ) )    
        .def( 
            "SetInset"
            , (void ( ::CWrapIPanel::* )( ::vgui::VPANEL,int,int,int,int ))( &::CWrapIPanel::SetInset )
            , ( bp::arg("vguiPanel"), bp::arg("left"), bp::arg("top"), bp::arg("right"), bp::arg("bottom") ) )    
        .def( 
            "SetKeyBoardInputEnabled"
            , (void ( ::CWrapIPanel::* )( ::vgui::VPANEL,bool ))( &::CWrapIPanel::SetKeyBoardInputEnabled )
            , ( bp::arg("vguiPanel"), bp::arg("state") ) )    
        .def( 
            "SetMinimumSize"
            , (void ( ::CWrapIPanel::* )( ::vgui::VPANEL,int,int ))( &::CWrapIPanel::SetMinimumSize )
            , ( bp::arg("vguiPanel"), bp::arg("wide"), bp::arg("tall") ) )    
        .def( 
            "SetMouseInputEnabled"
            , (void ( ::CWrapIPanel::* )( ::vgui::VPANEL,bool ))( &::CWrapIPanel::SetMouseInputEnabled )
            , ( bp::arg("vguiPanel"), bp::arg("state") ) )    
        .def( 
            "SetParent"
            , (void ( ::CWrapIPanel::* )( ::vgui::VPANEL,::vgui::VPANEL ))( &::CWrapIPanel::SetParent )
            , ( bp::arg("vguiPanel"), bp::arg("newParent") ) )    
        .def( 
            "SetPopup"
            , (void ( ::CWrapIPanel::* )( ::vgui::VPANEL,bool ))( &::CWrapIPanel::SetPopup )
            , ( bp::arg("vguiPanel"), bp::arg("state") ) )    
        .def( 
            "SetPos"
            , (void ( ::CWrapIPanel::* )( ::vgui::VPANEL,int,int ))( &::CWrapIPanel::SetPos )
            , ( bp::arg("vguiPanel"), bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "SetSize"
            , (void ( ::CWrapIPanel::* )( ::vgui::VPANEL,int,int ))( &::CWrapIPanel::SetSize )
            , ( bp::arg("vguiPanel"), bp::arg("wide"), bp::arg("tall") ) )    
        .def( 
            "SetTopmostPopup"
            , (void ( ::CWrapIPanel::* )( ::vgui::VPANEL,bool ))( &::CWrapIPanel::SetTopmostPopup )
            , ( bp::arg("vguiPanel"), bp::arg("state") ) )    
        .def( 
            "SetVisible"
            , (void ( ::CWrapIPanel::* )( ::vgui::VPANEL,bool ))( &::CWrapIPanel::SetVisible )
            , ( bp::arg("vguiPanel"), bp::arg("state") ) )    
        .def( 
            "SetZPos"
            , (void ( ::CWrapIPanel::* )( ::vgui::VPANEL,int ))( &::CWrapIPanel::SetZPos )
            , ( bp::arg("vguiPanel"), bp::arg("z") ) )    
        .def( 
            "Solve"
            , (void ( ::CWrapIPanel::* )( ::vgui::VPANEL ))( &::CWrapIPanel::Solve )
            , ( bp::arg("vguiPanel") ) )    
        .def( 
            "Think"
            , (void ( ::CWrapIPanel::* )( ::vgui::VPANEL ))( &::CWrapIPanel::Think )
            , ( bp::arg("vguiPanel") ) );

    { //::CWrapSurface
        typedef bp::class_< CWrapSurface > ISurface_exposer_t;
        ISurface_exposer_t ISurface_exposer = ISurface_exposer_t( "ISurface" );
        bp::scope ISurface_scope( ISurface_exposer );
        bp::enum_< CWrapSurface::EFontFlags>("EFontFlags")
            .value("FONTFLAG_NONE", CWrapSurface::FONTFLAG_NONE)
            .value("FONTFLAG_ITALIC", CWrapSurface::FONTFLAG_ITALIC)
            .value("FONTFLAG_UNDERLINE", CWrapSurface::FONTFLAG_UNDERLINE)
            .value("FONTFLAG_STRIKEOUT", CWrapSurface::FONTFLAG_STRIKEOUT)
            .value("FONTFLAG_SYMBOL", CWrapSurface::FONTFLAG_SYMBOL)
            .value("FONTFLAG_ANTIALIAS", CWrapSurface::FONTFLAG_ANTIALIAS)
            .value("FONTFLAG_GAUSSIANBLUR", CWrapSurface::FONTFLAG_GAUSSIANBLUR)
            .value("FONTFLAG_ROTARY", CWrapSurface::FONTFLAG_ROTARY)
            .value("FONTFLAG_DROPSHADOW", CWrapSurface::FONTFLAG_DROPSHADOW)
            .value("FONTFLAG_ADDITIVE", CWrapSurface::FONTFLAG_ADDITIVE)
            .value("FONTFLAG_OUTLINE", CWrapSurface::FONTFLAG_OUTLINE)
            .value("FONTFLAG_CUSTOM", CWrapSurface::FONTFLAG_CUSTOM)
            .value("FONTFLAG_BITMAP", CWrapSurface::FONTFLAG_BITMAP)
            .export_values()
            ;
        bp::enum_< CWrapSurface::ETextureFormat>("ETextureFormat")
            .value("eTextureFormat_RGBA", CWrapSurface::eTextureFormat_RGBA)
            .value("eTextureFormat_BGRA", CWrapSurface::eTextureFormat_BGRA)
            .value("eTextureFormat_BGRA_Opaque", CWrapSurface::eTextureFormat_BGRA_Opaque)
            .export_values()
            ;
        bp::enum_< CWrapSurface::SurfaceFeature_e>("SurfaceFeature_e")
            .value("ANTIALIASED_FONTS", CWrapSurface::ANTIALIASED_FONTS)
            .value("DROPSHADOW_FONTS", CWrapSurface::DROPSHADOW_FONTS)
            .value("ESCAPE_KEY", CWrapSurface::ESCAPE_KEY)
            .value("OPENING_NEW_HTML_WINDOWS", CWrapSurface::OPENING_NEW_HTML_WINDOWS)
            .value("FRAME_MINIMIZE_MAXIMIZE", CWrapSurface::FRAME_MINIMIZE_MAXIMIZE)
            .value("OUTLINE_FONTS", CWrapSurface::OUTLINE_FONTS)
            .value("DIRECT_HWND_RENDER", CWrapSurface::DIRECT_HWND_RENDER)
            .export_values()
            ;
        { //::CWrapSurface::AddBitmapFontFile
        
            typedef bool ( ::CWrapSurface::*AddBitmapFontFile_function_type)( char const * ) ;
            
            ISurface_exposer.def( 
                "AddBitmapFontFile"
                , AddBitmapFontFile_function_type( &::CWrapSurface::AddBitmapFontFile )
                , ( bp::arg("fontFileName") ) );
        
        }
        { //::CWrapSurface::AddCustomFontFile
        
            typedef bool ( ::CWrapSurface::*AddCustomFontFile_function_type)( char const *,char const * ) ;
            
            ISurface_exposer.def( 
                "AddCustomFontFile"
                , AddCustomFontFile_function_type( &::CWrapSurface::AddCustomFontFile )
                , ( bp::arg("fontName"), bp::arg("fontFileName") ) );
        
        }
        { //::CWrapSurface::AddPanel
        
            typedef void ( ::CWrapSurface::*AddPanel_function_type)( ::vgui::VPANEL ) ;
            
            ISurface_exposer.def( 
                "AddPanel"
                , AddPanel_function_type( &::CWrapSurface::AddPanel )
                , ( bp::arg("panel") ) );
        
        }
        { //::CWrapSurface::ApplyChanges
        
            typedef void ( ::CWrapSurface::*ApplyChanges_function_type)(  ) ;
            
            ISurface_exposer.def( 
                "ApplyChanges"
                , ApplyChanges_function_type( &::CWrapSurface::ApplyChanges ) );
        
        }
        { //::CWrapSurface::BringToFront
        
            typedef void ( ::CWrapSurface::*BringToFront_function_type)( ::vgui::VPANEL ) ;
            
            ISurface_exposer.def( 
                "BringToFront"
                , BringToFront_function_type( &::CWrapSurface::BringToFront )
                , ( bp::arg("panel") ) );
        
        }
        { //::CWrapSurface::CalculateMouseVisible
        
            typedef void ( ::CWrapSurface::*CalculateMouseVisible_function_type)(  ) ;
            
            ISurface_exposer.def( 
                "CalculateMouseVisible"
                , CalculateMouseVisible_function_type( &::CWrapSurface::CalculateMouseVisible ) );
        
        }
        { //::CWrapSurface::ClearTemporaryFontCache
        
            typedef void ( ::CWrapSurface::*ClearTemporaryFontCache_function_type)(  ) ;
            
            ISurface_exposer.def( 
                "ClearTemporaryFontCache"
                , ClearTemporaryFontCache_function_type( &::CWrapSurface::ClearTemporaryFontCache ) );
        
        }
        { //::CWrapSurface::CreateCursorFromFile
        
            typedef ::vgui::HCursor ( ::CWrapSurface::*CreateCursorFromFile_function_type)( char const *,char const * ) ;
            
            ISurface_exposer.def( 
                "CreateCursorFromFile"
                , CreateCursorFromFile_function_type( &::CWrapSurface::CreateCursorFromFile )
                , ( bp::arg("curOrAniFile"), bp::arg("pPathID")=bp::object() ) );
        
        }
        { //::CWrapSurface::CreateFont
        
            typedef ::vgui::HFont ( ::CWrapSurface::*CreateFont_function_type)(  ) ;
            
            ISurface_exposer.def( 
                "CreateFont"
                , CreateFont_function_type( &::CWrapSurface::CreateFont ) );
        
        }
        { //::CWrapSurface::CreateHTMLWindow
        
            typedef ::vgui::IHTML * ( ::CWrapSurface::*CreateHTMLWindow_function_type)( ::vgui::IHTMLEvents *,::vgui::VPANEL ) ;
            
            ISurface_exposer.def( 
                "CreateHTMLWindow"
                , CreateHTMLWindow_function_type( &::CWrapSurface::CreateHTMLWindow )
                , ( bp::arg("events"), bp::arg("context") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::CWrapSurface::CreateNewTextureID
        
            typedef int ( ::CWrapSurface::*CreateNewTextureID_function_type)( bool ) ;
            
            ISurface_exposer.def( 
                "CreateNewTextureID"
                , CreateNewTextureID_function_type( &::CWrapSurface::CreateNewTextureID )
                , ( bp::arg("procedural")=(bool)(false) ) );
        
        }
        { //::CWrapSurface::CreatePopup
        
            typedef void ( ::CWrapSurface::*CreatePopup_function_type)( ::vgui::VPANEL,bool,bool,bool,bool,bool ) ;
            
            ISurface_exposer.def( 
                "CreatePopup"
                , CreatePopup_function_type( &::CWrapSurface::CreatePopup )
                , ( bp::arg("panel"), bp::arg("minimised"), bp::arg("showTaskbarIcon")=(bool)(true), bp::arg("disabled")=(bool)(false), bp::arg("mouseInput")=(bool)(true), bp::arg("kbInput")=(bool)(true) ) );
        
        }
        { //::CWrapSurface::DeleteHTMLWindow
        
            typedef void ( ::CWrapSurface::*DeleteHTMLWindow_function_type)( ::vgui::IHTML * ) ;
            
            ISurface_exposer.def( 
                "DeleteHTMLWindow"
                , DeleteHTMLWindow_function_type( &::CWrapSurface::DeleteHTMLWindow )
                , ( bp::arg("htmlwin") ) );
        
        }
        { //::CWrapSurface::DeleteTextureByID
        
            typedef bool ( ::CWrapSurface::*DeleteTextureByID_function_type)( int ) ;
            
            ISurface_exposer.def( 
                "DeleteTextureByID"
                , DeleteTextureByID_function_type( &::CWrapSurface::DeleteTextureByID )
                , ( bp::arg("id") ) );
        
        }
        { //::CWrapSurface::DestroyTextureID
        
            typedef void ( ::CWrapSurface::*DestroyTextureID_function_type)( int ) ;
            
            ISurface_exposer.def( 
                "DestroyTextureID"
                , DestroyTextureID_function_type( &::CWrapSurface::DestroyTextureID )
                , ( bp::arg("id") ) );
        
        }
        { //::CWrapSurface::DrawFilledRect
        
            typedef void ( ::CWrapSurface::*DrawFilledRect_function_type)( int,int,int,int ) ;
            
            ISurface_exposer.def( 
                "DrawFilledRect"
                , DrawFilledRect_function_type( &::CWrapSurface::DrawFilledRect )
                , ( bp::arg("x0"), bp::arg("y0"), bp::arg("x1"), bp::arg("y1") ) );
        
        }
        { //::CWrapSurface::DrawFilledRectArray
        
            typedef void ( ::CWrapSurface::*DrawFilledRectArray_function_type)( ::boost::python::list ) ;
            
            ISurface_exposer.def( 
                "DrawFilledRectArray"
                , DrawFilledRectArray_function_type( &::CWrapSurface::DrawFilledRectArray )
                , ( bp::arg("rects") ) );
        
        }
        { //::CWrapSurface::DrawFilledRectFade
        
            typedef void ( ::CWrapSurface::*DrawFilledRectFade_function_type)( int,int,int,int,unsigned int,unsigned int,bool ) ;
            
            ISurface_exposer.def( 
                "DrawFilledRectFade"
                , DrawFilledRectFade_function_type( &::CWrapSurface::DrawFilledRectFade )
                , ( bp::arg("x0"), bp::arg("y0"), bp::arg("x1"), bp::arg("y1"), bp::arg("alpha0"), bp::arg("alpha1"), bp::arg("bHorizontal") ) );
        
        }
        { //::CWrapSurface::DrawFlushText
        
            typedef void ( ::CWrapSurface::*DrawFlushText_function_type)(  ) ;
            
            ISurface_exposer.def( 
                "DrawFlushText"
                , DrawFlushText_function_type( &::CWrapSurface::DrawFlushText ) );
        
        }
        { //::CWrapSurface::DrawGetAlphaMultiplier
        
            typedef float ( ::CWrapSurface::*DrawGetAlphaMultiplier_function_type)(  ) ;
            
            ISurface_exposer.def( 
                "DrawGetAlphaMultiplier"
                , DrawGetAlphaMultiplier_function_type( &::CWrapSurface::DrawGetAlphaMultiplier ) );
        
        }
        { //::CWrapSurface::DrawGetTextPos
        
            typedef boost::python::tuple ( *DrawGetTextPos_function_type )( ::CWrapSurface & );
            
            ISurface_exposer.def( 
                "DrawGetTextPos"
                , DrawGetTextPos_function_type( &DrawGetTextPos_92858a1d1df22607f77d7dc97addce72 )
                , ( bp::arg("inst") ) );
        
        }
        { //::CWrapSurface::DrawGetTextureFile
        
            typedef bool ( ::CWrapSurface::*DrawGetTextureFile_function_type)( int,char *,int ) ;
            
            ISurface_exposer.def( 
                "DrawGetTextureFile"
                , DrawGetTextureFile_function_type( &::CWrapSurface::DrawGetTextureFile )
                , ( bp::arg("id"), bp::arg("filename"), bp::arg("maxlen") ) );
        
        }
        { //::CWrapSurface::DrawGetTextureId
        
            typedef int ( ::CWrapSurface::*DrawGetTextureId_function_type)( char const * ) ;
            
            ISurface_exposer.def( 
                "DrawGetTextureId"
                , DrawGetTextureId_function_type( &::CWrapSurface::DrawGetTextureId )
                , ( bp::arg("filename") ) );
        
        }
        { //::CWrapSurface::DrawGetTextureMatInfoFactory
        
            typedef ::IVguiMatInfo * ( ::CWrapSurface::*DrawGetTextureMatInfoFactory_function_type)( int ) ;
            
            ISurface_exposer.def( 
                "DrawGetTextureMatInfoFactory"
                , DrawGetTextureMatInfoFactory_function_type( &::CWrapSurface::DrawGetTextureMatInfoFactory )
                , ( bp::arg("id") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::CWrapSurface::DrawGetTextureSize
        
            typedef boost::python::tuple ( *DrawGetTextureSize_function_type )( ::CWrapSurface &,int );
            
            ISurface_exposer.def( 
                "DrawGetTextureSize"
                , DrawGetTextureSize_function_type( &DrawGetTextureSize_504f17554f7a1586154279f7b497bdc5 )
                , ( bp::arg("inst"), bp::arg("id") ) );
        
        }
        { //::CWrapSurface::DrawGetUnicodeCharRenderInfo
        
            typedef bool ( ::CWrapSurface::*DrawGetUnicodeCharRenderInfo_function_type)( wchar_t,::vgui::CharRenderInfo & ) ;
            
            ISurface_exposer.def( 
                "DrawGetUnicodeCharRenderInfo"
                , DrawGetUnicodeCharRenderInfo_function_type( &::CWrapSurface::DrawGetUnicodeCharRenderInfo )
                , ( bp::arg("ch"), bp::arg("info") ) );
        
        }
        { //::CWrapSurface::DrawLine
        
            typedef void ( ::CWrapSurface::*DrawLine_function_type)( int,int,int,int ) ;
            
            ISurface_exposer.def( 
                "DrawLine"
                , DrawLine_function_type( &::CWrapSurface::DrawLine )
                , ( bp::arg("x0"), bp::arg("y0"), bp::arg("x1"), bp::arg("y1") ) );
        
        }
        { //::CWrapSurface::DrawOutlinedCircle
        
            typedef void ( ::CWrapSurface::*DrawOutlinedCircle_function_type)( int,int,int,int ) ;
            
            ISurface_exposer.def( 
                "DrawOutlinedCircle"
                , DrawOutlinedCircle_function_type( &::CWrapSurface::DrawOutlinedCircle )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("radius"), bp::arg("segments") ) );
        
        }
        { //::CWrapSurface::DrawOutlinedRect
        
            typedef void ( ::CWrapSurface::*DrawOutlinedRect_function_type)( int,int,int,int ) ;
            
            ISurface_exposer.def( 
                "DrawOutlinedRect"
                , DrawOutlinedRect_function_type( &::CWrapSurface::DrawOutlinedRect )
                , ( bp::arg("x0"), bp::arg("y0"), bp::arg("x1"), bp::arg("y1") ) );
        
        }
        { //::CWrapSurface::DrawPolyLine
        
            typedef void ( ::CWrapSurface::*DrawPolyLine_function_type)( int *,int *,int ) ;
            
            ISurface_exposer.def( 
                "DrawPolyLine"
                , DrawPolyLine_function_type( &::CWrapSurface::DrawPolyLine )
                , ( bp::arg("px"), bp::arg("py"), bp::arg("numPoints") ) );
        
        }
        { //::CWrapSurface::DrawRenderCharFromInfo
        
            typedef void ( ::CWrapSurface::*DrawRenderCharFromInfo_function_type)( ::vgui::CharRenderInfo const & ) ;
            
            ISurface_exposer.def( 
                "DrawRenderCharFromInfo"
                , DrawRenderCharFromInfo_function_type( &::CWrapSurface::DrawRenderCharFromInfo )
                , ( bp::arg("info") ) );
        
        }
        { //::CWrapSurface::DrawSetAlphaMultiplier
        
            typedef void ( ::CWrapSurface::*DrawSetAlphaMultiplier_function_type)( float ) ;
            
            ISurface_exposer.def( 
                "DrawSetAlphaMultiplier"
                , DrawSetAlphaMultiplier_function_type( &::CWrapSurface::DrawSetAlphaMultiplier )
                , ( bp::arg("alpha") ) );
        
        }
        { //::CWrapSurface::DrawSetColor
        
            typedef void ( ::CWrapSurface::*DrawSetColor_function_type)( int,int,int,int ) ;
            
            ISurface_exposer.def( 
                "DrawSetColor"
                , DrawSetColor_function_type( &::CWrapSurface::DrawSetColor )
                , ( bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("a") ) );
        
        }
        { //::CWrapSurface::DrawSetColor
        
            typedef void ( ::CWrapSurface::*DrawSetColor_function_type)( ::Color ) ;
            
            ISurface_exposer.def( 
                "DrawSetColor"
                , DrawSetColor_function_type( &::CWrapSurface::DrawSetColor )
                , ( bp::arg("col") ) );
        
        }
        { //::CWrapSurface::DrawSetTextColor
        
            typedef void ( ::CWrapSurface::*DrawSetTextColor_function_type)( int,int,int,int ) ;
            
            ISurface_exposer.def( 
                "DrawSetTextColor"
                , DrawSetTextColor_function_type( &::CWrapSurface::DrawSetTextColor )
                , ( bp::arg("r"), bp::arg("g"), bp::arg("b"), bp::arg("a") ) );
        
        }
        { //::CWrapSurface::DrawSetTextColor
        
            typedef void ( ::CWrapSurface::*DrawSetTextColor_function_type)( ::Color ) ;
            
            ISurface_exposer.def( 
                "DrawSetTextColor"
                , DrawSetTextColor_function_type( &::CWrapSurface::DrawSetTextColor )
                , ( bp::arg("col") ) );
        
        }
        { //::CWrapSurface::DrawSetTextFont
        
            typedef void ( ::CWrapSurface::*DrawSetTextFont_function_type)( ::vgui::HFont ) ;
            
            ISurface_exposer.def( 
                "DrawSetTextFont"
                , DrawSetTextFont_function_type( &::CWrapSurface::DrawSetTextFont )
                , ( bp::arg("font") ) );
        
        }
        { //::CWrapSurface::DrawSetTextPos
        
            typedef void ( ::CWrapSurface::*DrawSetTextPos_function_type)( int,int ) ;
            
            ISurface_exposer.def( 
                "DrawSetTextPos"
                , DrawSetTextPos_function_type( &::CWrapSurface::DrawSetTextPos )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::CWrapSurface::DrawSetTextScale
        
            typedef void ( ::CWrapSurface::*DrawSetTextScale_function_type)( float,float ) ;
            
            ISurface_exposer.def( 
                "DrawSetTextScale"
                , DrawSetTextScale_function_type( &::CWrapSurface::DrawSetTextScale )
                , ( bp::arg("sx"), bp::arg("sy") ) );
        
        }
        { //::CWrapSurface::DrawSetTexture
        
            typedef void ( ::CWrapSurface::*DrawSetTexture_function_type)( int ) ;
            
            ISurface_exposer.def( 
                "DrawSetTexture"
                , DrawSetTexture_function_type( &::CWrapSurface::DrawSetTexture )
                , ( bp::arg("id") ) );
        
        }
        { //::CWrapSurface::DrawSetTextureFile
        
            typedef void ( ::CWrapSurface::*DrawSetTextureFile_function_type)( int,char const *,int,bool ) ;
            
            ISurface_exposer.def( 
                "DrawSetTextureFile"
                , DrawSetTextureFile_function_type( &::CWrapSurface::DrawSetTextureFile )
                , ( bp::arg("id"), bp::arg("filename"), bp::arg("hardwareFilter"), bp::arg("forceReload") ) );
        
        }
        { //::CWrapSurface::DrawSetTextureFrame
        
            typedef void ( ::CWrapSurface::*DrawSetTextureFrame_function_type)( int,int,unsigned int * ) ;
            
            ISurface_exposer.def( 
                "DrawSetTextureFrame"
                , DrawSetTextureFrame_function_type( &::CWrapSurface::DrawSetTextureFrame )
                , ( bp::arg("id"), bp::arg("nFrame"), bp::arg("pFrameCache") ) );
        
        }
        { //::CWrapSurface::DrawTexturedLine
        
            typedef void ( ::CWrapSurface::*DrawTexturedLine_function_type)( ::vgui::Vertex_t const &,::vgui::Vertex_t const & ) ;
            
            ISurface_exposer.def( 
                "DrawTexturedLine"
                , DrawTexturedLine_function_type( &::CWrapSurface::DrawTexturedLine )
                , ( bp::arg("a"), bp::arg("b") ) );
        
        }
        { //::CWrapSurface::DrawTexturedPolyLine
        
            typedef void ( ::CWrapSurface::*DrawTexturedPolyLine_function_type)( ::boost::python::list ) ;
            
            ISurface_exposer.def( 
                "DrawTexturedPolyLine"
                , DrawTexturedPolyLine_function_type( &::CWrapSurface::DrawTexturedPolyLine )
                , ( bp::arg("vertices") ) );
        
        }
        { //::CWrapSurface::DrawTexturedPolygon
        
            typedef void ( ::CWrapSurface::*DrawTexturedPolygon_function_type)( ::boost::python::list ) ;
            
            ISurface_exposer.def( 
                "DrawTexturedPolygon"
                , DrawTexturedPolygon_function_type( &::CWrapSurface::DrawTexturedPolygon )
                , ( bp::arg("vertices") ) );
        
        }
        { //::CWrapSurface::DrawTexturedRect
        
            typedef void ( ::CWrapSurface::*DrawTexturedRect_function_type)( int,int,int,int ) ;
            
            ISurface_exposer.def( 
                "DrawTexturedRect"
                , DrawTexturedRect_function_type( &::CWrapSurface::DrawTexturedRect )
                , ( bp::arg("x0"), bp::arg("y0"), bp::arg("x1"), bp::arg("y1") ) );
        
        }
        { //::CWrapSurface::DrawTexturedSubRect
        
            typedef void ( ::CWrapSurface::*DrawTexturedSubRect_function_type)( int,int,int,int,float,float,float,float ) ;
            
            ISurface_exposer.def( 
                "DrawTexturedSubRect"
                , DrawTexturedSubRect_function_type( &::CWrapSurface::DrawTexturedSubRect )
                , ( bp::arg("x0"), bp::arg("y0"), bp::arg("x1"), bp::arg("y1"), bp::arg("texs0"), bp::arg("text0"), bp::arg("texs1"), bp::arg("text1") ) );
        
        }
        { //::CWrapSurface::DrawUnicodeChar
        
            typedef void ( ::CWrapSurface::*DrawUnicodeChar_function_type)( wchar_t,int ) ;
            
            ISurface_exposer.def( 
                "DrawUnicodeChar"
                , DrawUnicodeChar_function_type( &::CWrapSurface::DrawUnicodeChar )
                , ( bp::arg("wch"), bp::arg("drawType")=(int)(FONT_DRAW_DEFAULT) ) );
        
        }
        { //::CWrapSurface::DrawUnicodeString
        
            typedef void ( ::CWrapSurface::*DrawUnicodeString_function_type)( ::boost::python::api::object,::vgui::FontDrawType_t ) ;
            
            ISurface_exposer.def( 
                "DrawUnicodeString"
                , DrawUnicodeString_function_type( &::CWrapSurface::DrawUnicodeString )
                , ( bp::arg("unistr"), bp::arg("drawType")=::vgui::FontDrawType_t::FONT_DRAW_DEFAULT ) );
        
        }
        { //::CWrapSurface::DrawUpdateRegionTextureRGBA
        
            typedef void ( ::CWrapSurface::*DrawUpdateRegionTextureRGBA_function_type)( int,int,int,unsigned char const *,int,int,::ImageFormat ) ;
            
            ISurface_exposer.def( 
                "DrawUpdateRegionTextureRGBA"
                , DrawUpdateRegionTextureRGBA_function_type( &::CWrapSurface::DrawUpdateRegionTextureRGBA )
                , ( bp::arg("nTextureID"), bp::arg("x"), bp::arg("y"), bp::arg("pchData"), bp::arg("wide"), bp::arg("tall"), bp::arg("imageFormat") ) );
        
        }
        { //::CWrapSurface::EnableMouseCapture
        
            typedef void ( ::CWrapSurface::*EnableMouseCapture_function_type)( ::vgui::VPANEL,bool ) ;
            
            ISurface_exposer.def( 
                "EnableMouseCapture"
                , EnableMouseCapture_function_type( &::CWrapSurface::EnableMouseCapture )
                , ( bp::arg("panel"), bp::arg("state") ) );
        
        }
        { //::CWrapSurface::FlashWindow
        
            typedef void ( ::CWrapSurface::*FlashWindow_function_type)( ::vgui::VPANEL,bool ) ;
            
            ISurface_exposer.def( 
                "FlashWindow"
                , FlashWindow_function_type( &::CWrapSurface::FlashWindow )
                , ( bp::arg("panel"), bp::arg("state") ) );
        
        }
        { //::CWrapSurface::ForceScreenPosOffset
        
            typedef bool ( ::CWrapSurface::*ForceScreenPosOffset_function_type)( bool,int,int ) ;
            
            ISurface_exposer.def( 
                "ForceScreenPosOffset"
                , ForceScreenPosOffset_function_type( &::CWrapSurface::ForceScreenPosOffset )
                , ( bp::arg("bState"), bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::CWrapSurface::ForceScreenSizeOverride
        
            typedef bool ( ::CWrapSurface::*ForceScreenSizeOverride_function_type)( bool,int,int ) ;
            
            ISurface_exposer.def( 
                "ForceScreenSizeOverride"
                , ForceScreenSizeOverride_function_type( &::CWrapSurface::ForceScreenSizeOverride )
                , ( bp::arg("bState"), bp::arg("wide"), bp::arg("tall") ) );
        
        }
        { //::CWrapSurface::GetAbsoluteWindowBounds
        
            typedef boost::python::tuple ( *GetAbsoluteWindowBounds_function_type )( ::CWrapSurface & );
            
            ISurface_exposer.def( 
                "GetAbsoluteWindowBounds"
                , GetAbsoluteWindowBounds_function_type( &GetAbsoluteWindowBounds_4eeabd4192197f16277efab83fa86ec3 )
                , ( bp::arg("inst") ) );
        
        }
        { //::CWrapSurface::GetBitmapFontName
        
            typedef char const * ( ::CWrapSurface::*GetBitmapFontName_function_type)( char const * ) ;
            
            ISurface_exposer.def( 
                "GetBitmapFontName"
                , GetBitmapFontName_function_type( &::CWrapSurface::GetBitmapFontName )
                , ( bp::arg("pName") ) );
        
        }
        { //::CWrapSurface::GetCharABCwide
        
            typedef boost::python::tuple ( *GetCharABCwide_function_type )( ::CWrapSurface &,::vgui::HFont,int );
            
            ISurface_exposer.def( 
                "GetCharABCwide"
                , GetCharABCwide_function_type( &GetCharABCwide_ef480d0fcafaf3205ebae70db66cb095 )
                , ( bp::arg("inst"), bp::arg("font"), bp::arg("ch") ) );
        
        }
        { //::CWrapSurface::GetCharacterWidth
        
            typedef int ( ::CWrapSurface::*GetCharacterWidth_function_type)( ::vgui::HFont,int ) ;
            
            ISurface_exposer.def( 
                "GetCharacterWidth"
                , GetCharacterWidth_function_type( &::CWrapSurface::GetCharacterWidth )
                , ( bp::arg("font"), bp::arg("ch") ) );
        
        }
        { //::CWrapSurface::GetEmbeddedPanel
        
            typedef ::vgui::VPANEL ( ::CWrapSurface::*GetEmbeddedPanel_function_type)(  ) ;
            
            ISurface_exposer.def( 
                "GetEmbeddedPanel"
                , GetEmbeddedPanel_function_type( &::CWrapSurface::GetEmbeddedPanel ) );
        
        }
        { //::CWrapSurface::GetFontAscent
        
            typedef int ( ::CWrapSurface::*GetFontAscent_function_type)( ::vgui::HFont,wchar_t ) ;
            
            ISurface_exposer.def( 
                "GetFontAscent"
                , GetFontAscent_function_type( &::CWrapSurface::GetFontAscent )
                , ( bp::arg("font"), bp::arg("wch") ) );
        
        }
        { //::CWrapSurface::GetFontFamilyName
        
            typedef char const * ( ::CWrapSurface::*GetFontFamilyName_function_type)( ::vgui::HFont ) ;
            
            ISurface_exposer.def( 
                "GetFontFamilyName"
                , GetFontFamilyName_function_type( &::CWrapSurface::GetFontFamilyName )
                , ( bp::arg("font") ) );
        
        }
        { //::CWrapSurface::GetFontName
        
            typedef char const * ( ::CWrapSurface::*GetFontName_function_type)( ::vgui::HFont ) ;
            
            ISurface_exposer.def( 
                "GetFontName"
                , GetFontName_function_type( &::CWrapSurface::GetFontName )
                , ( bp::arg("font") ) );
        
        }
        { //::CWrapSurface::GetFontTall
        
            typedef int ( ::CWrapSurface::*GetFontTall_function_type)( ::vgui::HFont ) ;
            
            ISurface_exposer.def( 
                "GetFontTall"
                , GetFontTall_function_type( &::CWrapSurface::GetFontTall )
                , ( bp::arg("font") ) );
        
        }
        { //::CWrapSurface::GetFontTallRequested
        
            typedef int ( ::CWrapSurface::*GetFontTallRequested_function_type)( ::vgui::HFont ) ;
            
            ISurface_exposer.def( 
                "GetFontTallRequested"
                , GetFontTallRequested_function_type( &::CWrapSurface::GetFontTallRequested )
                , ( bp::arg("font") ) );
        
        }
        { //::CWrapSurface::GetFullscreenViewport
        
            typedef void ( ::CWrapSurface::*GetFullscreenViewport_function_type)( int &,int &,int &,int & ) ;
            
            ISurface_exposer.def( 
                "GetFullscreenViewport"
                , GetFullscreenViewport_function_type( &::CWrapSurface::GetFullscreenViewport )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("w"), bp::arg("h") ) );
        
        }
        { //::CWrapSurface::GetIconImageForFullPath
        
            typedef ::vgui::IImage * ( ::CWrapSurface::*GetIconImageForFullPath_function_type)( char const * ) ;
            
            ISurface_exposer.def( 
                "GetIconImageForFullPath"
                , GetIconImageForFullPath_function_type( &::CWrapSurface::GetIconImageForFullPath )
                , ( bp::arg("pFullPath") )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::CWrapSurface::GetKernedCharWidth
        
            typedef void ( ::CWrapSurface::*GetKernedCharWidth_function_type)( ::vgui::HFont,wchar_t,wchar_t,wchar_t,float &,float & ) ;
            
            ISurface_exposer.def( 
                "GetKernedCharWidth"
                , GetKernedCharWidth_function_type( &::CWrapSurface::GetKernedCharWidth )
                , ( bp::arg("font"), bp::arg("ch"), bp::arg("chBefore"), bp::arg("chAfter"), bp::arg("wide"), bp::arg("abcA") ) );
        
        }
        { //::CWrapSurface::GetModalPanel
        
            typedef ::vgui::VPANEL ( ::CWrapSurface::*GetModalPanel_function_type)(  ) ;
            
            ISurface_exposer.def( 
                "GetModalPanel"
                , GetModalPanel_function_type( &::CWrapSurface::GetModalPanel ) );
        
        }
        { //::CWrapSurface::GetNotifyPanel
        
            typedef ::vgui::VPANEL ( ::CWrapSurface::*GetNotifyPanel_function_type)(  ) ;
            
            ISurface_exposer.def( 
                "GetNotifyPanel"
                , GetNotifyPanel_function_type( &::CWrapSurface::GetNotifyPanel ) );
        
        }
        { //::CWrapSurface::GetPopup
        
            typedef ::vgui::VPANEL ( ::CWrapSurface::*GetPopup_function_type)( int ) ;
            
            ISurface_exposer.def( 
                "GetPopup"
                , GetPopup_function_type( &::CWrapSurface::GetPopup )
                , ( bp::arg("index") ) );
        
        }
        { //::CWrapSurface::GetPopupCount
        
            typedef int ( ::CWrapSurface::*GetPopupCount_function_type)(  ) ;
            
            ISurface_exposer.def( 
                "GetPopupCount"
                , GetPopupCount_function_type( &::CWrapSurface::GetPopupCount ) );
        
        }
        { //::CWrapSurface::GetProportionalBase
        
            typedef boost::python::tuple ( *GetProportionalBase_function_type )( ::CWrapSurface & );
            
            ISurface_exposer.def( 
                "GetProportionalBase"
                , GetProportionalBase_function_type( &GetProportionalBase_90058266cbe328bbb8669583210ff19f )
                , ( bp::arg("inst") ) );
        
        }
        { //::CWrapSurface::GetResolutionKey
        
            typedef char const * ( ::CWrapSurface::*GetResolutionKey_function_type)(  ) const;
            
            ISurface_exposer.def( 
                "GetResolutionKey"
                , GetResolutionKey_function_type( &::CWrapSurface::GetResolutionKey ) );
        
        }
        { //::CWrapSurface::GetScreenSize
        
            typedef boost::python::tuple ( *GetScreenSize_function_type )( ::CWrapSurface & );
            
            ISurface_exposer.def( 
                "GetScreenSize"
                , GetScreenSize_function_type( &GetScreenSize_c24f87ae2c57535c3d8716f319252d08 )
                , ( bp::arg("inst") ) );
        
        }
        { //::CWrapSurface::GetTextSize
        
            typedef ::boost::python::tuple ( ::CWrapSurface::*GetTextSize_function_type)( ::vgui::HFont,::boost::python::api::object ) ;
            
            ISurface_exposer.def( 
                "GetTextSize"
                , GetTextSize_function_type( &::CWrapSurface::GetTextSize )
                , ( bp::arg("font"), bp::arg("unistr") ) );
        
        }
        { //::CWrapSurface::GetTextureNumFrames
        
            typedef int ( ::CWrapSurface::*GetTextureNumFrames_function_type)( int ) ;
            
            ISurface_exposer.def( 
                "GetTextureNumFrames"
                , GetTextureNumFrames_function_type( &::CWrapSurface::GetTextureNumFrames )
                , ( bp::arg("id") ) );
        
        }
        { //::CWrapSurface::GetTitle
        
            typedef wchar_t const * ( ::CWrapSurface::*GetTitle_function_type)( ::vgui::VPANEL ) ;
            
            ISurface_exposer.def( 
                "GetTitle"
                , GetTitle_function_type( &::CWrapSurface::GetTitle )
                , ( bp::arg("panel") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::CWrapSurface::GetTopmostPopup
        
            typedef ::vgui::VPANEL ( ::CWrapSurface::*GetTopmostPopup_function_type)(  ) ;
            
            ISurface_exposer.def( 
                "GetTopmostPopup"
                , GetTopmostPopup_function_type( &::CWrapSurface::GetTopmostPopup ) );
        
        }
        { //::CWrapSurface::GetWebkitHTMLUserAgentString
        
            typedef char const * ( ::CWrapSurface::*GetWebkitHTMLUserAgentString_function_type)(  ) ;
            
            ISurface_exposer.def( 
                "GetWebkitHTMLUserAgentString"
                , GetWebkitHTMLUserAgentString_function_type( &::CWrapSurface::GetWebkitHTMLUserAgentString ) );
        
        }
        { //::CWrapSurface::GetWorkspaceBounds
        
            typedef boost::python::tuple ( *GetWorkspaceBounds_function_type )( ::CWrapSurface & );
            
            ISurface_exposer.def( 
                "GetWorkspaceBounds"
                , GetWorkspaceBounds_function_type( &GetWorkspaceBounds_d2722ac443d22323887a859b0a9167bb )
                , ( bp::arg("inst") ) );
        
        }
        { //::CWrapSurface::GetZPos
        
            typedef float ( ::CWrapSurface::*GetZPos_function_type)(  ) const;
            
            ISurface_exposer.def( 
                "GetZPos"
                , GetZPos_function_type( &::CWrapSurface::GetZPos ) );
        
        }
        { //::CWrapSurface::HasCursorPosFunctions
        
            typedef bool ( ::CWrapSurface::*HasCursorPosFunctions_function_type)(  ) ;
            
            ISurface_exposer.def( 
                "HasCursorPosFunctions"
                , HasCursorPosFunctions_function_type( &::CWrapSurface::HasCursorPosFunctions ) );
        
        }
        { //::CWrapSurface::HasFocus
        
            typedef bool ( ::CWrapSurface::*HasFocus_function_type)(  ) ;
            
            ISurface_exposer.def( 
                "HasFocus"
                , HasFocus_function_type( &::CWrapSurface::HasFocus ) );
        
        }
        { //::CWrapSurface::Invalidate
        
            typedef void ( ::CWrapSurface::*Invalidate_function_type)( ::vgui::VPANEL ) ;
            
            ISurface_exposer.def( 
                "Invalidate"
                , Invalidate_function_type( &::CWrapSurface::Invalidate )
                , ( bp::arg("panel") ) );
        
        }
        { //::CWrapSurface::IsCursorLocked
        
            typedef bool ( ::CWrapSurface::*IsCursorLocked_function_type)(  ) const;
            
            ISurface_exposer.def( 
                "IsCursorLocked"
                , IsCursorLocked_function_type( &::CWrapSurface::IsCursorLocked ) );
        
        }
        { //::CWrapSurface::IsCursorVisible
        
            typedef bool ( ::CWrapSurface::*IsCursorVisible_function_type)(  ) ;
            
            ISurface_exposer.def( 
                "IsCursorVisible"
                , IsCursorVisible_function_type( &::CWrapSurface::IsCursorVisible ) );
        
        }
        { //::CWrapSurface::IsFontAdditive
        
            typedef bool ( ::CWrapSurface::*IsFontAdditive_function_type)( ::vgui::HFont ) ;
            
            ISurface_exposer.def( 
                "IsFontAdditive"
                , IsFontAdditive_function_type( &::CWrapSurface::IsFontAdditive )
                , ( bp::arg("font") ) );
        
        }
        { //::CWrapSurface::IsMinimized
        
            typedef bool ( ::CWrapSurface::*IsMinimized_function_type)( ::vgui::VPANEL ) ;
            
            ISurface_exposer.def( 
                "IsMinimized"
                , IsMinimized_function_type( &::CWrapSurface::IsMinimized )
                , ( bp::arg("panel") ) );
        
        }
        { //::CWrapSurface::IsScreenPosOverrideActive
        
            typedef bool ( ::CWrapSurface::*IsScreenPosOverrideActive_function_type)(  ) ;
            
            ISurface_exposer.def( 
                "IsScreenPosOverrideActive"
                , IsScreenPosOverrideActive_function_type( &::CWrapSurface::IsScreenPosOverrideActive ) );
        
        }
        { //::CWrapSurface::IsScreenSizeOverrideActive
        
            typedef bool ( ::CWrapSurface::*IsScreenSizeOverrideActive_function_type)(  ) ;
            
            ISurface_exposer.def( 
                "IsScreenSizeOverrideActive"
                , IsScreenSizeOverrideActive_function_type( &::CWrapSurface::IsScreenSizeOverrideActive ) );
        
        }
        { //::CWrapSurface::IsTextureIDValid
        
            typedef bool ( ::CWrapSurface::*IsTextureIDValid_function_type)( int ) ;
            
            ISurface_exposer.def( 
                "IsTextureIDValid"
                , IsTextureIDValid_function_type( &::CWrapSurface::IsTextureIDValid )
                , ( bp::arg("id") ) );
        
        }
        { //::CWrapSurface::IsWithin
        
            typedef bool ( ::CWrapSurface::*IsWithin_function_type)( int,int ) ;
            
            ISurface_exposer.def( 
                "IsWithin"
                , IsWithin_function_type( &::CWrapSurface::IsWithin )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::CWrapSurface::LockCursor
        
            typedef void ( ::CWrapSurface::*LockCursor_function_type)(  ) ;
            
            ISurface_exposer.def( 
                "LockCursor"
                , LockCursor_function_type( &::CWrapSurface::LockCursor ) );
        
        }
        { //::CWrapSurface::MovePopupToBack
        
            typedef void ( ::CWrapSurface::*MovePopupToBack_function_type)( ::vgui::VPANEL ) ;
            
            ISurface_exposer.def( 
                "MovePopupToBack"
                , MovePopupToBack_function_type( &::CWrapSurface::MovePopupToBack )
                , ( bp::arg("panel") ) );
        
        }
        { //::CWrapSurface::MovePopupToFront
        
            typedef void ( ::CWrapSurface::*MovePopupToFront_function_type)( ::vgui::VPANEL ) ;
            
            ISurface_exposer.def( 
                "MovePopupToFront"
                , MovePopupToFront_function_type( &::CWrapSurface::MovePopupToFront )
                , ( bp::arg("panel") ) );
        
        }
        { //::CWrapSurface::NeedKBInput
        
            typedef bool ( ::CWrapSurface::*NeedKBInput_function_type)(  ) ;
            
            ISurface_exposer.def( 
                "NeedKBInput"
                , NeedKBInput_function_type( &::CWrapSurface::NeedKBInput ) );
        
        }
        { //::CWrapSurface::OffsetAbsPos
        
            typedef void ( ::CWrapSurface::*OffsetAbsPos_function_type)( int &,int & ) ;
            
            ISurface_exposer.def( 
                "OffsetAbsPos"
                , OffsetAbsPos_function_type( &::CWrapSurface::OffsetAbsPos )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::CWrapSurface::OnScreenSizeChanged
        
            typedef void ( ::CWrapSurface::*OnScreenSizeChanged_function_type)( int,int ) ;
            
            ISurface_exposer.def( 
                "OnScreenSizeChanged"
                , OnScreenSizeChanged_function_type( &::CWrapSurface::OnScreenSizeChanged )
                , ( bp::arg("nOldWidth"), bp::arg("nOldHeight") ) );
        
        }
        { //::CWrapSurface::PaintHTMLWindow
        
            typedef void ( ::CWrapSurface::*PaintHTMLWindow_function_type)( ::vgui::IHTML * ) ;
            
            ISurface_exposer.def( 
                "PaintHTMLWindow"
                , PaintHTMLWindow_function_type( &::CWrapSurface::PaintHTMLWindow )
                , ( bp::arg("htmlwin") ) );
        
        }
        { //::CWrapSurface::PaintSoftwareCursor
        
            typedef void ( ::CWrapSurface::*PaintSoftwareCursor_function_type)(  ) ;
            
            ISurface_exposer.def( 
                "PaintSoftwareCursor"
                , PaintSoftwareCursor_function_type( &::CWrapSurface::PaintSoftwareCursor ) );
        
        }
        { //::CWrapSurface::PaintTraverse
        
            typedef void ( ::CWrapSurface::*PaintTraverse_function_type)( ::vgui::VPANEL ) ;
            
            ISurface_exposer.def( 
                "PaintTraverse"
                , PaintTraverse_function_type( &::CWrapSurface::PaintTraverse )
                , ( bp::arg("panel") ) );
        
        }
        { //::CWrapSurface::PaintTraverseEx
        
            typedef void ( ::CWrapSurface::*PaintTraverseEx_function_type)( ::vgui::VPANEL,bool ) ;
            
            ISurface_exposer.def( 
                "PaintTraverseEx"
                , PaintTraverseEx_function_type( &::CWrapSurface::PaintTraverseEx )
                , ( bp::arg("panel"), bp::arg("paintPopups")=(bool)(false) ) );
        
        }
        { //::CWrapSurface::PlaySound
        
            typedef void ( ::CWrapSurface::*PlaySound_function_type)( char const * ) ;
            
            ISurface_exposer.def( 
                "PlaySound"
                , PlaySound_function_type( &::CWrapSurface::PlaySound )
                , ( bp::arg("fileName") ) );
        
        }
        { //::CWrapSurface::PopFullscreenViewport
        
            typedef void ( ::CWrapSurface::*PopFullscreenViewport_function_type)(  ) ;
            
            ISurface_exposer.def( 
                "PopFullscreenViewport"
                , PopFullscreenViewport_function_type( &::CWrapSurface::PopFullscreenViewport ) );
        
        }
        { //::CWrapSurface::PopMakeCurrent
        
            typedef void ( ::CWrapSurface::*PopMakeCurrent_function_type)( ::vgui::VPANEL ) ;
            
            ISurface_exposer.def( 
                "PopMakeCurrent"
                , PopMakeCurrent_function_type( &::CWrapSurface::PopMakeCurrent )
                , ( bp::arg("panel") ) );
        
        }
        { //::CWrapSurface::PrecacheFontCharacters
        
            typedef void ( ::CWrapSurface::*PrecacheFontCharacters_function_type)( ::vgui::HFont,wchar_t const * ) ;
            
            ISurface_exposer.def( 
                "PrecacheFontCharacters"
                , PrecacheFontCharacters_function_type( &::CWrapSurface::PrecacheFontCharacters )
                , ( bp::arg("font"), bp::arg("pCharacters") ) );
        
        }
        { //::CWrapSurface::PushFullscreenViewport
        
            typedef void ( ::CWrapSurface::*PushFullscreenViewport_function_type)(  ) ;
            
            ISurface_exposer.def( 
                "PushFullscreenViewport"
                , PushFullscreenViewport_function_type( &::CWrapSurface::PushFullscreenViewport ) );
        
        }
        { //::CWrapSurface::PushMakeCurrent
        
            typedef void ( ::CWrapSurface::*PushMakeCurrent_function_type)( ::vgui::VPANEL,bool ) ;
            
            ISurface_exposer.def( 
                "PushMakeCurrent"
                , PushMakeCurrent_function_type( &::CWrapSurface::PushMakeCurrent )
                , ( bp::arg("panel"), bp::arg("useInsets") ) );
        
        }
        { //::CWrapSurface::RecreateContext
        
            typedef bool ( ::CWrapSurface::*RecreateContext_function_type)( ::vgui::VPANEL ) ;
            
            ISurface_exposer.def( 
                "RecreateContext"
                , RecreateContext_function_type( &::CWrapSurface::RecreateContext )
                , ( bp::arg("panel") ) );
        
        }
        { //::CWrapSurface::ReleasePanel
        
            typedef void ( ::CWrapSurface::*ReleasePanel_function_type)( ::vgui::VPANEL ) ;
            
            ISurface_exposer.def( 
                "ReleasePanel"
                , ReleasePanel_function_type( &::CWrapSurface::ReleasePanel )
                , ( bp::arg("panel") ) );
        
        }
        { //::CWrapSurface::ResetFontCaches
        
            typedef void ( ::CWrapSurface::*ResetFontCaches_function_type)(  ) ;
            
            ISurface_exposer.def( 
                "ResetFontCaches"
                , ResetFontCaches_function_type( &::CWrapSurface::ResetFontCaches ) );
        
        }
        { //::CWrapSurface::RestrictPaintToSinglePanel
        
            typedef void ( ::CWrapSurface::*RestrictPaintToSinglePanel_function_type)( ::vgui::VPANEL ) ;
            
            ISurface_exposer.def( 
                "RestrictPaintToSinglePanel"
                , RestrictPaintToSinglePanel_function_type( &::CWrapSurface::RestrictPaintToSinglePanel )
                , ( bp::arg("panel") ) );
        
        }
        { //::CWrapSurface::SetAllowHTMLJavaScript
        
            typedef void ( ::CWrapSurface::*SetAllowHTMLJavaScript_function_type)( bool ) ;
            
            ISurface_exposer.def( 
                "SetAllowHTMLJavaScript"
                , SetAllowHTMLJavaScript_function_type( &::CWrapSurface::SetAllowHTMLJavaScript )
                , ( bp::arg("state") ) );
        
        }
        { //::CWrapSurface::SetAsToolBar
        
            typedef void ( ::CWrapSurface::*SetAsToolBar_function_type)( ::vgui::VPANEL,bool ) ;
            
            ISurface_exposer.def( 
                "SetAsToolBar"
                , SetAsToolBar_function_type( &::CWrapSurface::SetAsToolBar )
                , ( bp::arg("panel"), bp::arg("state") ) );
        
        }
        { //::CWrapSurface::SetAsTopMost
        
            typedef void ( ::CWrapSurface::*SetAsTopMost_function_type)( ::vgui::VPANEL,bool ) ;
            
            ISurface_exposer.def( 
                "SetAsTopMost"
                , SetAsTopMost_function_type( &::CWrapSurface::SetAsTopMost )
                , ( bp::arg("panel"), bp::arg("state") ) );
        
        }
        { //::CWrapSurface::SetBitmapFontGlyphSet
        
            typedef bool ( ::CWrapSurface::*SetBitmapFontGlyphSet_function_type)( ::vgui::HFont,char const *,float,float,int ) ;
            
            ISurface_exposer.def( 
                "SetBitmapFontGlyphSet"
                , SetBitmapFontGlyphSet_function_type( &::CWrapSurface::SetBitmapFontGlyphSet )
                , ( bp::arg("font"), bp::arg("windowsFontName"), bp::arg("scalex"), bp::arg("scaley"), bp::arg("flags") ) );
        
        }
        { //::CWrapSurface::SetBitmapFontName
        
            typedef void ( ::CWrapSurface::*SetBitmapFontName_function_type)( char const *,char const * ) ;
            
            ISurface_exposer.def( 
                "SetBitmapFontName"
                , SetBitmapFontName_function_type( &::CWrapSurface::SetBitmapFontName )
                , ( bp::arg("pName"), bp::arg("pFontFilename") ) );
        
        }
        { //::CWrapSurface::SetCursor
        
            typedef void ( ::CWrapSurface::*SetCursor_function_type)( ::vgui::HCursor ) ;
            
            ISurface_exposer.def( 
                "SetCursor"
                , SetCursor_function_type( &::CWrapSurface::SetCursor )
                , ( bp::arg("cursor") ) );
        
        }
        { //::CWrapSurface::SetCursorAlwaysVisible
        
            typedef void ( ::CWrapSurface::*SetCursorAlwaysVisible_function_type)( bool ) ;
            
            ISurface_exposer.def( 
                "SetCursorAlwaysVisible"
                , SetCursorAlwaysVisible_function_type( &::CWrapSurface::SetCursorAlwaysVisible )
                , ( bp::arg("visible") ) );
        
        }
        { //::CWrapSurface::SetEmbeddedPanel
        
            typedef void ( ::CWrapSurface::*SetEmbeddedPanel_function_type)( ::vgui::VPANEL ) ;
            
            ISurface_exposer.def( 
                "SetEmbeddedPanel"
                , SetEmbeddedPanel_function_type( &::CWrapSurface::SetEmbeddedPanel )
                , ( bp::arg("pPanel") ) );
        
        }
        { //::CWrapSurface::SetFontGlyphSet
        
            typedef bool ( ::CWrapSurface::*SetFontGlyphSet_function_type)( ::vgui::HFont,char const *,int,int,int,int,int,int,int ) ;
            
            ISurface_exposer.def( 
                "SetFontGlyphSet"
                , SetFontGlyphSet_function_type( &::CWrapSurface::SetFontGlyphSet )
                , ( bp::arg("font"), bp::arg("windowsFontName"), bp::arg("tall"), bp::arg("weight"), bp::arg("blur"), bp::arg("scanlines"), bp::arg("flags"), bp::arg("nRangeMin")=(int)(0), bp::arg("nRangeMax")=(int)(0) ) );
        
        }
        { //::CWrapSurface::SetForegroundWindow
        
            typedef void ( ::CWrapSurface::*SetForegroundWindow_function_type)( ::vgui::VPANEL ) ;
            
            ISurface_exposer.def( 
                "SetForegroundWindow"
                , SetForegroundWindow_function_type( &::CWrapSurface::SetForegroundWindow )
                , ( bp::arg("panel") ) );
        
        }
        { //::CWrapSurface::SetFullscreenViewport
        
            typedef void ( ::CWrapSurface::*SetFullscreenViewport_function_type)( int,int,int,int ) ;
            
            ISurface_exposer.def( 
                "SetFullscreenViewport"
                , SetFullscreenViewport_function_type( &::CWrapSurface::SetFullscreenViewport )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("w"), bp::arg("h") ) );
        
        }
        { //::CWrapSurface::SetMinimized
        
            typedef void ( ::CWrapSurface::*SetMinimized_function_type)( ::vgui::VPANEL,bool ) ;
            
            ISurface_exposer.def( 
                "SetMinimized"
                , SetMinimized_function_type( &::CWrapSurface::SetMinimized )
                , ( bp::arg("panel"), bp::arg("state") ) );
        
        }
        { //::CWrapSurface::SetModalPanel
        
            typedef void ( ::CWrapSurface::*SetModalPanel_function_type)( ::vgui::VPANEL ) ;
            
            ISurface_exposer.def( 
                "SetModalPanel"
                , SetModalPanel_function_type( &::CWrapSurface::SetModalPanel )
                , ( bp::arg("panel") ) );
        
        }
        { //::CWrapSurface::SetNotifyIcon
        
            typedef void ( ::CWrapSurface::*SetNotifyIcon_function_type)( ::vgui::VPANEL,::vgui::HTexture,::vgui::VPANEL,char const * ) ;
            
            ISurface_exposer.def( 
                "SetNotifyIcon"
                , SetNotifyIcon_function_type( &::CWrapSurface::SetNotifyIcon )
                , ( bp::arg("context"), bp::arg("icon"), bp::arg("panelToReceiveMessages"), bp::arg("text") ) );
        
        }
        { //::CWrapSurface::SetPanelForInput
        
            typedef void ( ::CWrapSurface::*SetPanelForInput_function_type)( ::vgui::VPANEL ) ;
            
            ISurface_exposer.def( 
                "SetPanelForInput"
                , SetPanelForInput_function_type( &::CWrapSurface::SetPanelForInput )
                , ( bp::arg("vpanel") ) );
        
        }
        { //::CWrapSurface::SetPanelVisible
        
            typedef void ( ::CWrapSurface::*SetPanelVisible_function_type)( ::vgui::VPANEL,bool ) ;
            
            ISurface_exposer.def( 
                "SetPanelVisible"
                , SetPanelVisible_function_type( &::CWrapSurface::SetPanelVisible )
                , ( bp::arg("panel"), bp::arg("state") ) );
        
        }
        { //::CWrapSurface::SetSoftwareCursor
        
            typedef void ( ::CWrapSurface::*SetSoftwareCursor_function_type)( bool ) ;
            
            ISurface_exposer.def( 
                "SetSoftwareCursor"
                , SetSoftwareCursor_function_type( &::CWrapSurface::SetSoftwareCursor )
                , ( bp::arg("bUseSoftwareCursor") ) );
        
        }
        { //::CWrapSurface::SetTitle
        
            typedef void ( ::CWrapSurface::*SetTitle_function_type)( ::vgui::VPANEL,wchar_t const * ) ;
            
            ISurface_exposer.def( 
                "SetTitle"
                , SetTitle_function_type( &::CWrapSurface::SetTitle )
                , ( bp::arg("panel"), bp::arg("title") ) );
        
        }
        { //::CWrapSurface::SetTopLevelFocus
        
            typedef void ( ::CWrapSurface::*SetTopLevelFocus_function_type)( ::vgui::VPANEL ) ;
            
            ISurface_exposer.def( 
                "SetTopLevelFocus"
                , SetTopLevelFocus_function_type( &::CWrapSurface::SetTopLevelFocus )
                , ( bp::arg("panel") ) );
        
        }
        { //::CWrapSurface::SetTranslateExtendedKeys
        
            typedef void ( ::CWrapSurface::*SetTranslateExtendedKeys_function_type)( bool ) ;
            
            ISurface_exposer.def( 
                "SetTranslateExtendedKeys"
                , SetTranslateExtendedKeys_function_type( &::CWrapSurface::SetTranslateExtendedKeys )
                , ( bp::arg("state") ) );
        
        }
        { //::CWrapSurface::SetWorkspaceInsets
        
            typedef void ( ::CWrapSurface::*SetWorkspaceInsets_function_type)( int,int,int,int ) ;
            
            ISurface_exposer.def( 
                "SetWorkspaceInsets"
                , SetWorkspaceInsets_function_type( &::CWrapSurface::SetWorkspaceInsets )
                , ( bp::arg("left"), bp::arg("top"), bp::arg("right"), bp::arg("bottom") ) );
        
        }
        { //::CWrapSurface::ShouldPaintChildPanel
        
            typedef bool ( ::CWrapSurface::*ShouldPaintChildPanel_function_type)( ::vgui::VPANEL ) ;
            
            ISurface_exposer.def( 
                "ShouldPaintChildPanel"
                , ShouldPaintChildPanel_function_type( &::CWrapSurface::ShouldPaintChildPanel )
                , ( bp::arg("childPanel") ) );
        
        }
        { //::CWrapSurface::SolveTraverse
        
            typedef void ( ::CWrapSurface::*SolveTraverse_function_type)( ::vgui::VPANEL,bool ) ;
            
            ISurface_exposer.def( 
                "SolveTraverse"
                , SolveTraverse_function_type( &::CWrapSurface::SolveTraverse )
                , ( bp::arg("panel"), bp::arg("forceApplySchemeSettings")=(bool)(false) ) );
        
        }
        { //::CWrapSurface::SupportsFeature
        
            typedef bool ( ::CWrapSurface::*SupportsFeature_function_type)( ::CWrapSurface::SurfaceFeature_e ) ;
            
            ISurface_exposer.def( 
                "SupportsFeature"
                , SupportsFeature_function_type( &::CWrapSurface::SupportsFeature )
                , ( bp::arg("feature") ) );
        
        }
        { //::CWrapSurface::SurfaceGetCursorPos
        
            typedef boost::python::tuple ( *SurfaceGetCursorPos_function_type )( ::CWrapSurface & );
            
            ISurface_exposer.def( 
                "SurfaceGetCursorPos"
                , SurfaceGetCursorPos_function_type( &SurfaceGetCursorPos_85305e292f21cbb771f464ea4d42675c )
                , ( bp::arg("inst") ) );
        
        }
        { //::CWrapSurface::SurfaceSetCursorPos
        
            typedef void ( ::CWrapSurface::*SurfaceSetCursorPos_function_type)( int,int ) ;
            
            ISurface_exposer.def( 
                "SurfaceSetCursorPos"
                , SurfaceSetCursorPos_function_type( &::CWrapSurface::SurfaceSetCursorPos )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::CWrapSurface::SwapBuffers
        
            typedef void ( ::CWrapSurface::*SwapBuffers_function_type)( ::vgui::VPANEL ) ;
            
            ISurface_exposer.def( 
                "SwapBuffers"
                , SwapBuffers_function_type( &::CWrapSurface::SwapBuffers )
                , ( bp::arg("panel") ) );
        
        }
        { //::CWrapSurface::UnlockCursor
        
            typedef void ( ::CWrapSurface::*UnlockCursor_function_type)(  ) ;
            
            ISurface_exposer.def( 
                "UnlockCursor"
                , UnlockCursor_function_type( &::CWrapSurface::UnlockCursor ) );
        
        }
    }

    bp::class_< IClientMode, boost::noncopyable >( "IClientMode", bp::no_init )    
        .def( 
            "ActivateInGameVGuiContext"
            , (void ( ::IClientMode::* )( ::vgui::Panel * ))( &::IClientMode::ActivateInGameVGuiContext )
            , ( bp::arg("pPanel") ) )    
        .def( 
            "AdjustEngineViewport"
            , (boost::python::tuple (*)( ::IClientMode & ))( &AdjustEngineViewport_87ddaa1f407679177ff698173425f388 )
            , ( bp::arg("inst") ) )    
        .def( 
            "CanRecordDemo"
            , (bool ( ::IClientMode::* )( char *,int )const)( &::IClientMode::CanRecordDemo )
            , ( bp::arg("errorMsg"), bp::arg("length") ) )    
        .def( 
            "ComputeVguiResConditions"
            , (void ( ::IClientMode::* )( ::KeyValues * ))( &::IClientMode::ComputeVguiResConditions )
            , ( bp::arg("pkvConditions") ) )    
        .def( 
            "CreateMove"
            , (bool ( ::IClientMode::* )( float,::CUserCmd * ))( &::IClientMode::CreateMove )
            , ( bp::arg("flInputSampleTime"), bp::arg("cmd") ) )    
        .def( 
            "DeactivateInGameVGuiContext"
            , (void ( ::IClientMode::* )(  ))( &::IClientMode::DeactivateInGameVGuiContext ) )    
        .def( 
            "Disable"
            , (void ( ::IClientMode::* )(  ))( &::IClientMode::Disable ) )    
        .def( 
            "DisplayReplayMessage"
            , (void ( ::IClientMode::* )( char const *,float,bool,char const *,bool ))( &::IClientMode::DisplayReplayMessage )
            , ( bp::arg("pLocalizeName"), bp::arg("flDuration"), bp::arg("bUrgent"), bp::arg("pSound"), bp::arg("bDlg") ) )    
        .def( 
            "DoPostScreenSpaceEffects"
            , (bool ( ::IClientMode::* )( ::CViewSetup const * ))( &::IClientMode::DoPostScreenSpaceEffects )
            , ( bp::arg("pSetup") ) )    
        .def( 
            "Enable"
            , (void ( ::IClientMode::* )(  ))( &::IClientMode::Enable ) )    
        .def( 
            "GetMessagePanel"
            , (::vgui::Panel * ( ::IClientMode::* )(  ))( &::IClientMode::GetMessagePanel )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "GetViewModelFOV"
            , (float ( ::IClientMode::* )(  ))( &::IClientMode::GetViewModelFOV ) )    
        .def( 
            "GetViewport"
            , (::vgui::Panel * ( ::IClientMode::* )(  ))( &::IClientMode::GetViewport )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "GetViewportAnimationController"
            , (::vgui::AnimationController * ( ::IClientMode::* )(  ))( &::IClientMode::GetViewportAnimationController )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "InfoPanelDisplayed"
            , (void ( ::IClientMode::* )(  ))( &::IClientMode::InfoPanelDisplayed ) )    
        .def( 
            "Init"
            , (void ( ::IClientMode::* )(  ))( &::IClientMode::Init ) )    
        .def( 
            "InitViewport"
            , (void ( ::IClientMode::* )(  ))( &::IClientMode::InitViewport ) )    
        .def( 
            "IsHTMLInfoPanelAllowed"
            , (bool ( ::IClientMode::* )(  ))( &::IClientMode::IsHTMLInfoPanelAllowed ) )    
        .def( 
            "IsInfoPanelAllowed"
            , (bool ( ::IClientMode::* )(  ))( &::IClientMode::IsInfoPanelAllowed ) )    
        .def( 
            "KeyInput"
            , (int ( ::IClientMode::* )( int,::ButtonCode_t,char const * ))( &::IClientMode::KeyInput )
            , ( bp::arg("down"), bp::arg("keynum"), bp::arg("pszCurrentBinding") ) )    
        .def( 
            "Layout"
            , (void ( ::IClientMode::* )(  ))( &::IClientMode::Layout ) )    
        .def( 
            "LevelInit"
            , (void ( ::IClientMode::* )( char const * ))( &::IClientMode::LevelInit )
            , ( bp::arg("newmap") ) )    
        .def( 
            "LevelShutdown"
            , (void ( ::IClientMode::* )(  ))( &::IClientMode::LevelShutdown ) )    
        .def( 
            "OverrideMouseInput"
            , (void ( ::IClientMode::* )( float *,float * ))( &::IClientMode::OverrideMouseInput )
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "OverrideView"
            , (void ( ::IClientMode::* )( ::CViewSetup * ))( &::IClientMode::OverrideView )
            , ( bp::arg("pSetup") ) )    
        .def( 
            "PostRender"
            , (void ( ::IClientMode::* )(  ))( &::IClientMode::PostRender ) )    
        .def( 
            "PostRenderVGui"
            , (void ( ::IClientMode::* )(  ))( &::IClientMode::PostRenderVGui ) )    
        .def( 
            "PreRender"
            , (void ( ::IClientMode::* )( ::CViewSetup * ))( &::IClientMode::PreRender )
            , ( bp::arg("pSetup") ) )    
        .def( 
            "ProcessInput"
            , (void ( ::IClientMode::* )( bool ))( &::IClientMode::ProcessInput )
            , ( bp::arg("bActive") ) )    
        .def( 
            "SetMapName"
            , (void ( ::IClientMode::* )( wchar_t * ))( &::IClientMode::SetMapName )
            , ( bp::arg("name") ) )    
        .def( 
            "SetServerName"
            , (void ( ::IClientMode::* )( wchar_t * ))( &::IClientMode::SetServerName )
            , ( bp::arg("name") ) )    
        .def( 
            "ShouldBlackoutAroundHUD"
            , (bool ( ::IClientMode::* )(  ))( &::IClientMode::ShouldBlackoutAroundHUD ) )    
        .def( 
            "ShouldDrawCrosshair"
            , (bool ( ::IClientMode::* )(  ))( &::IClientMode::ShouldDrawCrosshair ) )    
        .def( 
            "ShouldDrawDetailObjects"
            , (bool ( ::IClientMode::* )(  ))( &::IClientMode::ShouldDrawDetailObjects ) )    
        .def( 
            "ShouldDrawEntity"
            , (bool ( ::IClientMode::* )( ::C_BaseEntity * ))( &::IClientMode::ShouldDrawEntity )
            , ( bp::arg("pEnt") ) )    
        .def( 
            "ShouldDrawFog"
            , (bool ( ::IClientMode::* )(  ))( &::IClientMode::ShouldDrawFog ) )    
        .def( 
            "ShouldDrawLocalPlayer"
            , (bool ( ::IClientMode::* )( ::C_BasePlayer * ))( &::IClientMode::ShouldDrawLocalPlayer )
            , ( bp::arg("pPlayer") ) )    
        .def( 
            "ShouldDrawParticles"
            , (bool ( ::IClientMode::* )(  ))( &::IClientMode::ShouldDrawParticles ) )    
        .def( 
            "ShouldDrawViewModel"
            , (bool ( ::IClientMode::* )(  ))( &::IClientMode::ShouldDrawViewModel ) )    
        .def( 
            "ShouldOverrideHeadtrackControl"
            , (::HeadtrackMovementMode_t ( ::IClientMode::* )(  ))( &::IClientMode::ShouldOverrideHeadtrackControl ) )    
        .def( 
            "Shutdown"
            , (void ( ::IClientMode::* )(  ))( &::IClientMode::Shutdown ) )    
        .def( 
            "StartMessageMode"
            , (void ( ::IClientMode::* )( int ))( &::IClientMode::StartMessageMode )
            , ( bp::arg("iMessageModeType") ) )    
        .def( 
            "Update"
            , (void ( ::IClientMode::* )(  ))( &::IClientMode::Update ) )    
        .def( 
            "VGui_Shutdown"
            , (void ( ::IClientMode::* )(  ))( &::IClientMode::VGui_Shutdown ) );

    bp::class_< PyLocalize >( "Localize" )    
        .def( 
            "AddFile"
            , (bool ( ::PyLocalize::* )( char const *,char const *,bool ))( &::PyLocalize::AddFile )
            , ( bp::arg("fileName"), bp::arg("pPathID")=bp::object(), bp::arg("bIncludeFallbackSearchPaths")=(bool)(false) ) )    
        .def( 
            "AddString"
            , (void ( ::PyLocalize::* )( char const *,wchar_t *,char const * ))( &::PyLocalize::AddString )
            , ( bp::arg("tokenName"), bp::arg("unicodeString"), bp::arg("fileName") ) )    
        .def( 
            "ConstructString"
            , (::boost::python::api::object ( ::PyLocalize::* )( char const *,::KeyValues * ))( &::PyLocalize::ConstructString )
            , ( bp::arg("tokenName"), bp::arg("localizationVariables") ) )    
        .def( 
            "ConstructString"
            , (::boost::python::api::object ( ::PyLocalize::* )( ::StringIndex_t,::KeyValues * ))( &::PyLocalize::ConstructString )
            , ( bp::arg("unlocalizedTextSymbol"), bp::arg("localizationVariables") ) )    
        .def( 
            "ConvertANSIToUnicode"
            , (::boost::python::tuple ( ::PyLocalize::* )( char const * ))( &::PyLocalize::ConvertANSIToUnicode )
            , ( bp::arg("ansi") ) )    
        .def( 
            "ConvertUnicodeToANSI"
            , (::boost::python::tuple ( ::PyLocalize::* )( wchar_t const * ))( &::PyLocalize::ConvertUnicodeToANSI )
            , ( bp::arg("unicode") ) )    
        .def( 
            "Find"
            , (wchar_t * ( ::PyLocalize::* )( char const * ))( &::PyLocalize::Find )
            , ( bp::arg("tokenName") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "FindIndex"
            , (::StringIndex_t ( ::PyLocalize::* )( char const * ))( &::PyLocalize::FindIndex )
            , ( bp::arg("tokenName") ) )    
        .def( 
            "GetFileNameByIndex"
            , (char const * ( ::PyLocalize::* )( ::StringIndex_t ))( &::PyLocalize::GetFileNameByIndex )
            , ( bp::arg("index") ) )    
        .def( 
            "GetFirstStringIndex"
            , (::StringIndex_t ( ::PyLocalize::* )(  ))( &::PyLocalize::GetFirstStringIndex ) )    
        .def( 
            "GetLocalizationFileCount"
            , (int ( ::PyLocalize::* )(  ))( &::PyLocalize::GetLocalizationFileCount ) )    
        .def( 
            "GetLocalizationFileName"
            , (char const * ( ::PyLocalize::* )( int ))( &::PyLocalize::GetLocalizationFileName )
            , ( bp::arg("index") ) )    
        .def( 
            "GetNameByIndex"
            , (char const * ( ::PyLocalize::* )( ::StringIndex_t ))( &::PyLocalize::GetNameByIndex )
            , ( bp::arg("index") ) )    
        .def( 
            "GetNextStringIndex"
            , (::StringIndex_t ( ::PyLocalize::* )( ::StringIndex_t ))( &::PyLocalize::GetNextStringIndex )
            , ( bp::arg("index") ) )    
        .def( 
            "GetValueByIndex"
            , (wchar_t * ( ::PyLocalize::* )( ::StringIndex_t ))( &::PyLocalize::GetValueByIndex )
            , ( bp::arg("index") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "ReloadLocalizationFiles"
            , (void ( ::PyLocalize::* )(  ))( &::PyLocalize::ReloadLocalizationFiles ) )    
        .def( 
            "RemoveAll"
            , (void ( ::PyLocalize::* )(  ))( &::PyLocalize::RemoveAll ) )    
        .def( 
            "SaveToFile"
            , (bool ( ::PyLocalize::* )( char const * ))( &::PyLocalize::SaveToFile )
            , ( bp::arg("fileName") ) )    
        .def( 
            "SetValueByIndex"
            , (void ( ::PyLocalize::* )( ::StringIndex_t,wchar_t * ))( &::PyLocalize::SetValueByIndex )
            , ( bp::arg("index"), bp::arg("newValue") ) );

    bp::class_< vgui::IInput, boost::noncopyable >( "IInput", bp::no_init )    
        .def( 
            "CandidateListStartsAtOne"
            , (bool ( ::vgui::IInput::* )(  ))( &::vgui::IInput::CandidateListStartsAtOne ) )    
        .def( 
            "GetAppModalSurface"
            , (::vgui::VPANEL ( ::vgui::IInput::* )(  ))( &::vgui::IInput::GetAppModalSurface ) )    
        .def( 
            "GetCalculatedFocus"
            , (::vgui::VPANEL ( ::vgui::IInput::* )(  ))( &::vgui::IInput::GetCalculatedFocus ) )    
        .def( 
            "GetCandidate"
            , (void ( ::vgui::IInput::* )( int,wchar_t *,int ))( &::vgui::IInput::GetCandidate )
            , ( bp::arg("num"), bp::arg("dest"), bp::arg("destSizeBytes") ) )    
        .def( 
            "GetCandidateListCount"
            , (int ( ::vgui::IInput::* )(  ))( &::vgui::IInput::GetCandidateListCount ) )    
        .def( 
            "GetCandidateListPageSize"
            , (int ( ::vgui::IInput::* )(  ))( &::vgui::IInput::GetCandidateListPageSize ) )    
        .def( 
            "GetCandidateListPageStart"
            , (int ( ::vgui::IInput::* )(  ))( &::vgui::IInput::GetCandidateListPageStart ) )    
        .def( 
            "GetCandidateListSelectedItem"
            , (int ( ::vgui::IInput::* )(  ))( &::vgui::IInput::GetCandidateListSelectedItem ) )    
        .def( 
            "GetCurrentIMEHandle"
            , (int ( ::vgui::IInput::* )(  ))( &::vgui::IInput::GetCurrentIMEHandle ) )    
        .def( 
            "GetCursorOveride"
            , (::vgui::HCursor ( ::vgui::IInput::* )(  ))( &::vgui::IInput::GetCursorOveride ) )    
        .def( 
            "GetCursorPos"
            , (void ( ::vgui::IInput::* )( int &,int & ))( &::vgui::IInput::GetCursorPos )
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "GetCursorPosition"
            , (void ( ::vgui::IInput::* )( int &,int & ))( &::vgui::IInput::GetCursorPosition )
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "GetEnglishIMEHandle"
            , (int ( ::vgui::IInput::* )(  ))( &::vgui::IInput::GetEnglishIMEHandle ) )    
        .def( 
            "GetFocus"
            , (::vgui::VPANEL ( ::vgui::IInput::* )(  ))( &::vgui::IInput::GetFocus ) )    
        .def( 
            "GetIMELanguageName"
            , (void ( ::vgui::IInput::* )( wchar_t *,int ))( &::vgui::IInput::GetIMELanguageName )
            , ( bp::arg("buf"), bp::arg("unicodeBufferSizeInBytes") ) )    
        .def( 
            "GetKeyCodeText"
            , (void ( ::vgui::IInput::* )( ::vgui::KeyCode,char *,int ))( &::vgui::IInput::GetKeyCodeText )
            , ( bp::arg("code"), bp::arg("buf"), bp::arg("buflen") ) )    
        .def( 
            "GetModalSubTree"
            , (::vgui::VPANEL ( ::vgui::IInput::* )(  ))( &::vgui::IInput::GetModalSubTree ) )    
        .def( 
            "GetMouseCapture"
            , (::vgui::VPANEL ( ::vgui::IInput::* )(  ))( &::vgui::IInput::GetMouseCapture ) )    
        .def( 
            "GetMouseOver"
            , (::vgui::VPANEL ( ::vgui::IInput::* )(  ))( &::vgui::IInput::GetMouseOver ) )    
        .def( 
            "GetShouldInvertCompositionString"
            , (bool ( ::vgui::IInput::* )(  ))( &::vgui::IInput::GetShouldInvertCompositionString ) )    
        .def( 
            "IsKeyDown"
            , (bool ( ::vgui::IInput::* )( ::vgui::KeyCode ))( &::vgui::IInput::IsKeyDown )
            , ( bp::arg("code") ) )    
        .def( 
            "IsMouseDown"
            , (bool ( ::vgui::IInput::* )( ::vgui::MouseCode ))( &::vgui::IInput::IsMouseDown )
            , ( bp::arg("code") ) )    
        .def( 
            "OnChangeIME"
            , (void ( ::vgui::IInput::* )( bool ))( &::vgui::IInput::OnChangeIME )
            , ( bp::arg("forward") ) )    
        .def( 
            "OnChangeIMEByHandle"
            , (void ( ::vgui::IInput::* )( int ))( &::vgui::IInput::OnChangeIMEByHandle )
            , ( bp::arg("handleValue") ) )    
        .def( 
            "OnChangeIMEConversionModeByHandle"
            , (void ( ::vgui::IInput::* )( int ))( &::vgui::IInput::OnChangeIMEConversionModeByHandle )
            , ( bp::arg("handleValue") ) )    
        .def( 
            "OnChangeIMESentenceModeByHandle"
            , (void ( ::vgui::IInput::* )( int ))( &::vgui::IInput::OnChangeIMESentenceModeByHandle )
            , ( bp::arg("handleValue") ) )    
        .def( 
            "OnIMEChangeCandidates"
            , (void ( ::vgui::IInput::* )(  ))( &::vgui::IInput::OnIMEChangeCandidates ) )    
        .def( 
            "OnIMECloseCandidates"
            , (void ( ::vgui::IInput::* )(  ))( &::vgui::IInput::OnIMECloseCandidates ) )    
        .def( 
            "OnIMEComposition"
            , (void ( ::vgui::IInput::* )( int ))( &::vgui::IInput::OnIMEComposition )
            , ( bp::arg("flags") ) )    
        .def( 
            "OnIMEEndComposition"
            , (void ( ::vgui::IInput::* )(  ))( &::vgui::IInput::OnIMEEndComposition ) )    
        .def( 
            "OnIMERecomputeModes"
            , (void ( ::vgui::IInput::* )(  ))( &::vgui::IInput::OnIMERecomputeModes ) )    
        .def( 
            "OnIMEShowCandidates"
            , (void ( ::vgui::IInput::* )(  ))( &::vgui::IInput::OnIMEShowCandidates ) )    
        .def( 
            "OnIMEStartComposition"
            , (void ( ::vgui::IInput::* )(  ))( &::vgui::IInput::OnIMEStartComposition ) )    
        .def( 
            "OnInputLanguageChanged"
            , (void ( ::vgui::IInput::* )(  ))( &::vgui::IInput::OnInputLanguageChanged ) )    
        .def( 
            "OnKeyCodeUnhandled"
            , (void ( ::vgui::IInput::* )( int ))( &::vgui::IInput::OnKeyCodeUnhandled )
            , ( bp::arg("keyCode") ) )    
        .def( 
            "RegisterKeyCodeUnhandledListener"
            , (void ( ::vgui::IInput::* )( ::vgui::VPANEL ))( &::vgui::IInput::RegisterKeyCodeUnhandledListener )
            , ( bp::arg("panel") ) )    
        .def( 
            "ReleaseAppModalSurface"
            , (void ( ::vgui::IInput::* )(  ))( &::vgui::IInput::ReleaseAppModalSurface ) )    
        .def( 
            "ReleaseModalSubTree"
            , (void ( ::vgui::IInput::* )(  ))( &::vgui::IInput::ReleaseModalSubTree ) )    
        .def( 
            "SetAppModalSurface"
            , (void ( ::vgui::IInput::* )( ::vgui::VPANEL ))( &::vgui::IInput::SetAppModalSurface )
            , ( bp::arg("panel") ) )    
        .def( 
            "SetCandidateListPageStart"
            , (void ( ::vgui::IInput::* )( int ))( &::vgui::IInput::SetCandidateListPageStart )
            , ( bp::arg("start") ) )    
        .def( 
            "SetCandidateWindowPos"
            , (void ( ::vgui::IInput::* )( int,int ))( &::vgui::IInput::SetCandidateWindowPos )
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "SetCursorOveride"
            , (void ( ::vgui::IInput::* )( ::vgui::HCursor ))( &::vgui::IInput::SetCursorOveride )
            , ( bp::arg("cursor") ) )    
        .def( 
            "SetCursorPos"
            , (void ( ::vgui::IInput::* )( int,int ))( &::vgui::IInput::SetCursorPos )
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "SetModalSubTree"
            , (void ( ::vgui::IInput::* )( ::vgui::VPANEL,::vgui::VPANEL,bool ))( &::vgui::IInput::SetModalSubTree )
            , ( bp::arg("subTree"), bp::arg("unhandledMouseClickListener"), bp::arg("restrictMessagesToSubTree")=(bool)(true) ) )    
        .def( 
            "SetModalSubTreeReceiveMessages"
            , (void ( ::vgui::IInput::* )( bool ))( &::vgui::IInput::SetModalSubTreeReceiveMessages )
            , ( bp::arg("state") ) )    
        .def( 
            "SetMouseCapture"
            , (void ( ::vgui::IInput::* )( ::vgui::VPANEL ))( &::vgui::IInput::SetMouseCapture )
            , ( bp::arg("panel") ) )    
        .def( 
            "SetMouseCaptureEx"
            , (void ( ::vgui::IInput::* )( ::vgui::VPANEL,::vgui::MouseCode ))( &::vgui::IInput::SetMouseCaptureEx )
            , ( bp::arg("panel"), bp::arg("captureStartMouseCode") ) )    
        .def( 
            "SetMouseFocus"
            , (void ( ::vgui::IInput::* )( ::vgui::VPANEL ))( &::vgui::IInput::SetMouseFocus )
            , ( bp::arg("newMouseFocus") ) )    
        .def( 
            "ShouldModalSubTreeReceiveMessages"
            , (bool ( ::vgui::IInput::* )(  )const)( &::vgui::IInput::ShouldModalSubTreeReceiveMessages ) )    
        .def( 
            "UnregisterKeyCodeUnhandledListener"
            , (void ( ::vgui::IInput::* )( ::vgui::VPANEL ))( &::vgui::IInput::UnregisterKeyCodeUnhandledListener )
            , ( bp::arg("panel") ) )    
        .def( 
            "WasKeyPressed"
            , (bool ( ::vgui::IInput::* )( ::vgui::KeyCode ))( &::vgui::IInput::WasKeyPressed )
            , ( bp::arg("code") ) )    
        .def( 
            "WasKeyReleased"
            , (bool ( ::vgui::IInput::* )( ::vgui::KeyCode ))( &::vgui::IInput::WasKeyReleased )
            , ( bp::arg("code") ) )    
        .def( 
            "WasKeyTyped"
            , (bool ( ::vgui::IInput::* )( ::vgui::KeyCode ))( &::vgui::IInput::WasKeyTyped )
            , ( bp::arg("code") ) )    
        .def( 
            "WasMouseDoublePressed"
            , (bool ( ::vgui::IInput::* )( ::vgui::MouseCode ))( &::vgui::IInput::WasMouseDoublePressed )
            , ( bp::arg("code") ) )    
        .def( 
            "WasMousePressed"
            , (bool ( ::vgui::IInput::* )( ::vgui::MouseCode ))( &::vgui::IInput::WasMousePressed )
            , ( bp::arg("code") ) )    
        .def( 
            "WasMouseReleased"
            , (bool ( ::vgui::IInput::* )( ::vgui::MouseCode ))( &::vgui::IInput::WasMouseReleased )
            , ( bp::arg("code") ) );

    bp::class_< vgui::IScheme, boost::noncopyable >( "IScheme", bp::no_init )    
        .def( 
            "GetBorder"
            , (::vgui::IBorder * ( ::vgui::IScheme::* )( char const * ))( &::vgui::IScheme::GetBorder )
            , ( bp::arg("borderName") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "GetBorderAtIndex"
            , (::vgui::IBorder * ( ::vgui::IScheme::* )( int ))( &::vgui::IScheme::GetBorderAtIndex )
            , ( bp::arg("iIndex") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "GetBorderCount"
            , (int ( ::vgui::IScheme::* )(  )const)( &::vgui::IScheme::GetBorderCount ) )    
        .def( 
            "GetColor"
            , (::Color ( ::vgui::IScheme::* )( char const *,::Color ))( &::vgui::IScheme::GetColor )
            , ( bp::arg("colorName"), bp::arg("defaultColor") ) )    
        .def( 
            "GetColorData"
            , (::KeyValues const * ( ::vgui::IScheme::* )(  )const)( &::vgui::IScheme::GetColorData )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetFont"
            , (::vgui::HFont ( ::vgui::IScheme::* )( char const *,bool ))( &::vgui::IScheme::GetFont )
            , ( bp::arg("fontName"), bp::arg("proportional")=(bool)(false) ) )    
        .def( 
            "GetFontAtIndex"
            , (::vgui::HFont ( ::vgui::IScheme::* )( int ))( &::vgui::IScheme::GetFontAtIndex )
            , ( bp::arg("iIndex") ) )    
        .def( 
            "GetFontCount"
            , (int ( ::vgui::IScheme::* )(  )const)( &::vgui::IScheme::GetFontCount ) )    
        .def( 
            "GetFontName"
            , (char const * ( ::vgui::IScheme::* )( ::vgui::HFont const & ))( &::vgui::IScheme::GetFontName )
            , ( bp::arg("font") ) )    
        .def( 
            "GetResourceString"
            , (char const * ( ::vgui::IScheme::* )( char const * ))( &::vgui::IScheme::GetResourceString )
            , ( bp::arg("stringName") ) );

    bp::class_< vgui::ISchemeManager, boost::noncopyable >( "ISchemeManager", bp::no_init )    
        .def( 
            "DeleteImage"
            , (bool ( ::vgui::ISchemeManager::* )( char const * ))( &::vgui::ISchemeManager::DeleteImage )
            , ( bp::arg("pImageName") ) )    
        .def( 
            "GetDefaultScheme"
            , (::vgui::HScheme ( ::vgui::ISchemeManager::* )(  ))( &::vgui::ISchemeManager::GetDefaultScheme ) )    
        .def( 
            "GetIScheme"
            , (::vgui::IScheme * ( ::vgui::ISchemeManager::* )( ::vgui::HScheme ))( &::vgui::ISchemeManager::GetIScheme )
            , ( bp::arg("scheme") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "GetImage"
            , (::vgui::IImage * ( ::vgui::ISchemeManager::* )( char const *,bool ))( &::vgui::ISchemeManager::GetImage )
            , ( bp::arg("imageName"), bp::arg("hardwareFiltered") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "GetImageID"
            , (::vgui::HTexture ( ::vgui::ISchemeManager::* )( char const *,bool ))( &::vgui::ISchemeManager::GetImageID )
            , ( bp::arg("imageName"), bp::arg("hardwareFiltered") ) )    
        .def( 
            "GetProportionalNormalizedValue"
            , (int ( ::vgui::ISchemeManager::* )( int ))( &::vgui::ISchemeManager::GetProportionalNormalizedValue )
            , ( bp::arg("scaledValue") ) )    
        .def( 
            "GetProportionalNormalizedValueEx"
            , (int ( ::vgui::ISchemeManager::* )( ::vgui::HScheme,int ))( &::vgui::ISchemeManager::GetProportionalNormalizedValueEx )
            , ( bp::arg("scheme"), bp::arg("scaledValue") ) )    
        .def( 
            "GetProportionalScaledValue"
            , (int ( ::vgui::ISchemeManager::* )( int ))( &::vgui::ISchemeManager::GetProportionalScaledValue )
            , ( bp::arg("normalizedValue") ) )    
        .def( 
            "GetProportionalScaledValueEx"
            , (int ( ::vgui::ISchemeManager::* )( ::vgui::HScheme,int ))( &::vgui::ISchemeManager::GetProportionalScaledValueEx )
            , ( bp::arg("scheme"), bp::arg("normalizedValue") ) )    
        .def( 
            "GetScheme"
            , (::vgui::HScheme ( ::vgui::ISchemeManager::* )( char const * ))( &::vgui::ISchemeManager::GetScheme )
            , ( bp::arg("tag") ) )    
        .def( 
            "LoadSchemeFromFile"
            , (::vgui::HScheme ( ::vgui::ISchemeManager::* )( char const *,char const * ))( &::vgui::ISchemeManager::LoadSchemeFromFile )
            , ( bp::arg("fileName"), bp::arg("tag") ) )    
        .def( 
            "LoadSchemeFromFileEx"
            , (::vgui::HScheme ( ::vgui::ISchemeManager::* )( ::vgui::VPANEL,char const *,char const * ))( &::vgui::ISchemeManager::LoadSchemeFromFileEx )
            , ( bp::arg("sizingPanel"), bp::arg("fileName"), bp::arg("tag") ) )    
        .def( 
            "ReloadFonts"
            , (void ( ::vgui::ISchemeManager::* )(  ))( &::vgui::ISchemeManager::ReloadFonts ) )    
        .def( 
            "ReloadSchemes"
            , (void ( ::vgui::ISchemeManager::* )(  ))( &::vgui::ISchemeManager::ReloadSchemes ) )    
        .def( 
            "Shutdown"
            , (void ( ::vgui::ISchemeManager::* )( bool ))( &::vgui::ISchemeManager::Shutdown )
            , ( bp::arg("full")=(bool)(true) ) );

    bp::class_< vgui::ISystem, boost::noncopyable >( "ISystem", bp::no_init )    
        .def( 
            "CommandLineParamExists"
            , (bool ( ::vgui::ISystem::* )( char const * ))( &::vgui::ISystem::CommandLineParamExists )
            , ( bp::arg("paramName") ) )    
        .def( 
            "CreateShortcut"
            , (bool ( ::vgui::ISystem::* )( char const *,char const *,char const *,char const *,char const * ))( &::vgui::ISystem::CreateShortcut )
            , ( bp::arg("linkFileName"), bp::arg("targetPath"), bp::arg("arguments"), bp::arg("workingDirectory"), bp::arg("iconFile") ) )    
        .def( 
            "GetAvailableDrives"
            , (int ( ::vgui::ISystem::* )( char *,int ))( &::vgui::ISystem::GetAvailableDrives )
            , ( bp::arg("buf"), bp::arg("bufLen") ) )    
        .def( 
            "GetClipboardText"
            , (int ( ::vgui::ISystem::* )( int,char *,int ))( &::vgui::ISystem::GetClipboardText )
            , ( bp::arg("offset"), bp::arg("buf"), bp::arg("bufLen") ) )    
        .def( 
            "GetClipboardText"
            , (int ( ::vgui::ISystem::* )( int,wchar_t *,int ))( &::vgui::ISystem::GetClipboardText )
            , ( bp::arg("offset"), bp::arg("buf"), bp::arg("bufLen") ) )    
        .def( 
            "GetClipboardTextCount"
            , (int ( ::vgui::ISystem::* )(  ))( &::vgui::ISystem::GetClipboardTextCount ) )    
        .def( 
            "GetCommandLineParamValue"
            , (bool ( ::vgui::ISystem::* )( char const *,char *,int ))( &::vgui::ISystem::GetCommandLineParamValue )
            , ( bp::arg("paramName"), bp::arg("value"), bp::arg("valueBufferSize") ) )    
        .def( 
            "GetCurrentTime"
            , (double ( ::vgui::ISystem::* )(  ))( &::vgui::ISystem::GetCurrentTime ) )    
        .def( 
            "GetCurrentTimeAndDate"
            , (bool ( ::vgui::ISystem::* )( int *,int *,int *,int *,int *,int *,int * ))( &::vgui::ISystem::GetCurrentTimeAndDate )
            , ( bp::arg("year"), bp::arg("month"), bp::arg("dayOfWeek"), bp::arg("day"), bp::arg("hour"), bp::arg("minute"), bp::arg("second") ) )    
        .def( 
            "GetDesktopFolderPath"
            , (char const * ( ::vgui::ISystem::* )(  ))( &::vgui::ISystem::GetDesktopFolderPath ) )    
        .def( 
            "GetFrameTime"
            , (double ( ::vgui::ISystem::* )(  ))( &::vgui::ISystem::GetFrameTime ) )    
        .def( 
            "GetFreeDiskSpace"
            , (double ( ::vgui::ISystem::* )( char const * ))( &::vgui::ISystem::GetFreeDiskSpace )
            , ( bp::arg("path") ) )    
        .def( 
            "GetFullCommandLine"
            , (char const * ( ::vgui::ISystem::* )(  ))( &::vgui::ISystem::GetFullCommandLine ) )    
        .def( 
            "GetRegistryInteger"
            , (boost::python::tuple (*)( ::vgui::ISystem &,char const * ))( &GetRegistryInteger_7b85c41418413c1905617b15737023e0 )
            , ( bp::arg("inst"), bp::arg("key") ) )    
        .def( 
            "GetShortcutTarget"
            , (bool ( ::vgui::ISystem::* )( char const *,char *,char *,int ))( &::vgui::ISystem::GetShortcutTarget )
            , ( bp::arg("linkFileName"), bp::arg("targetPath"), bp::arg("arguments"), bp::arg("destBufferSizes") ) )    
        .def( 
            "GetTimeMillis"
            , (long int ( ::vgui::ISystem::* )(  ))( &::vgui::ISystem::GetTimeMillis ) )    
        .def( 
            "GetTimeSinceLastUse"
            , (double ( ::vgui::ISystem::* )(  ))( &::vgui::ISystem::GetTimeSinceLastUse ) )    
        .def( 
            "GetUserConfigFileData"
            , (::KeyValues * ( ::vgui::ISystem::* )( char const *,int ))( &::vgui::ISystem::GetUserConfigFileData )
            , ( bp::arg("dialogName"), bp::arg("dialogID") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "KeyCode_VirtualKeyToVGUI"
            , (::vgui::KeyCode ( ::vgui::ISystem::* )( int ))( &::vgui::ISystem::KeyCode_VirtualKeyToVGUI )
            , ( bp::arg("keyCode") ) )    
        .def( 
            "ModifyShortcutTarget"
            , (bool ( ::vgui::ISystem::* )( char const *,char const *,char const *,char const * ))( &::vgui::ISystem::ModifyShortcutTarget )
            , ( bp::arg("linkFileName"), bp::arg("targetPath"), bp::arg("arguments"), bp::arg("workingDirectory") ) )    
        .def( 
            "RunFrame"
            , (void ( ::vgui::ISystem::* )(  ))( &::vgui::ISystem::RunFrame ) )    
        .def( 
            "SaveUserConfigFile"
            , (void ( ::vgui::ISystem::* )(  ))( &::vgui::ISystem::SaveUserConfigFile ) )    
        .def( 
            "SetClipboardText"
            , (void ( ::vgui::ISystem::* )( char const *,int ))( &::vgui::ISystem::SetClipboardText )
            , ( bp::arg("text"), bp::arg("textLen") ) )    
        .def( 
            "SetClipboardText"
            , (void ( ::vgui::ISystem::* )( wchar_t const *,int ))( &::vgui::ISystem::SetClipboardText )
            , ( bp::arg("text"), bp::arg("textLen") ) )    
        .def( 
            "SetUserConfigFile"
            , (void ( ::vgui::ISystem::* )( char const *,char const * ))( &::vgui::ISystem::SetUserConfigFile )
            , ( bp::arg("fileName"), bp::arg("pathName") ) )    
        .def( 
            "SetWatchForComputerUse"
            , (bool ( ::vgui::ISystem::* )( bool ))( &::vgui::ISystem::SetWatchForComputerUse )
            , ( bp::arg("state") ) )    
        .def( 
            "ShellExecute"
            , (void ( ::vgui::ISystem::* )( char const *,char const * ))( &::vgui::ISystem::ShellExecute )
            , ( bp::arg("command"), bp::arg("file") ) )    
        .def( 
            "ShellExecuteEx"
            , (void ( ::vgui::ISystem::* )( char const *,char const *,char const * ))( &::vgui::ISystem::ShellExecuteEx )
            , ( bp::arg("command"), bp::arg("file"), bp::arg("pParams") ) )    
        .def( 
            "Shutdown"
            , (void ( ::vgui::ISystem::* )(  ))( &::vgui::ISystem::Shutdown ) )    
        .def( 
                    "GetRegistryString"
                    , (boost::python::tuple (*)( ::vgui::ISystem &,char const * ))( &GetRegistryString_cc10e70c5f6b49d5963b27442c970b19 )
                    , ( bp::arg("inst"), bp::arg("key") ) );

    bp::class_< vgui::IntRect >( "IntRect" )    
        .def_readwrite( "x0", &vgui::IntRect::x0 )    
        .def_readwrite( "x1", &vgui::IntRect::x1 )    
        .def_readwrite( "y0", &vgui::IntRect::y0 )    
        .def_readwrite( "y1", &vgui::IntRect::y1 );

    { //::vgui::Vertex_t
        typedef bp::class_< vgui::Vertex_t > Vertex_t_exposer_t;
        Vertex_t_exposer_t Vertex_t_exposer = Vertex_t_exposer_t( "Vertex_t", bp::init< >() );
        bp::scope Vertex_t_scope( Vertex_t_exposer );
        Vertex_t_exposer.def( bp::init< Vector2D const &, bp::optional< Vector2D const & > >(( bp::arg("pos"), bp::arg("coord")=::Vector2D( 0, 0 ) )) );
        bp::implicitly_convertible< Vector2D const &, vgui::Vertex_t >();
        { //::vgui::Vertex_t::Init
        
            typedef void ( ::vgui::Vertex_t::*Init_function_type)( ::Vector2D const &,::Vector2D const & ) ;
            
            Vertex_t_exposer.def( 
                "Init"
                , Init_function_type( &::vgui::Vertex_t::Init )
                , ( bp::arg("pos"), bp::arg("coord")=::Vector2D( 0, 0 ) ) );
        
        }
        Vertex_t_exposer.def_readwrite( "m_Position", &vgui::Vertex_t::m_Position );
        Vertex_t_exposer.def_readwrite( "m_TexCoord", &vgui::Vertex_t::m_TexCoord );
    }

    { //::vgui::GetAnimationController
    
        typedef ::vgui::AnimationController * ( *GetAnimationController_function_type )(  );
        
        bp::def( 
            "GetAnimationController"
            , GetAnimationController_function_type( &::vgui::GetAnimationController )
            , bp::return_value_policy< bp::reference_existing_object >() );
    
    }

    { //::PyGetPanel
    
        typedef ::vgui::VPANEL ( *GetPanel_function_type )( ::VGuiPanel_t );
        
        bp::def( 
            "GetPanel"
            , GetPanel_function_type( &::PyGetPanel )
            , ( bp::arg("type") ) );
    
    }

    { //::PyInput_GetCursorPos
    
        typedef ::boost::python::tuple ( *PyInput_GetCursorPos_function_type )(  );
        
        bp::def( 
            "PyInput_GetCursorPos"
            , PyInput_GetCursorPos_function_type( &::PyInput_GetCursorPos ) );
    
    }

    { //::PyInput_GetCursorPosition
    
        typedef ::boost::python::tuple ( *PyInput_GetCursorPosition_function_type )(  );
        
        bp::def( 
            "PyInput_GetCursorPosition"
            , PyInput_GetCursorPosition_function_type( &::PyInput_GetCursorPosition ) );
    
    }

    { //::PyIsGameUIVisible
    
        typedef bool ( *IsGameUIVisible_function_type )(  );
        
        bp::def( 
            "IsGameUIVisible"
            , IsGameUIVisible_function_type( &::PyIsGameUIVisible ) );
    
    }

    { //::vgui::input
    
        typedef ::vgui::IInput * ( *vgui_input_function_type )(  );
        
        bp::def( 
            "vgui_input"
            , vgui_input_function_type( &::vgui::input )
            , bp::return_value_policy< bp::reference_existing_object >() );
    
    }

    { //::vgui::scheme
    
        typedef ::vgui::ISchemeManager * ( *scheme_function_type )(  );
        
        bp::def( 
            "scheme"
            , scheme_function_type( &::vgui::scheme )
            , bp::return_value_policy< bp::reference_existing_object >() );
    
    }

    { //::vgui::system
    
        typedef ::vgui::ISystem * ( *vgui_system_function_type )(  );
        
        bp::def( 
            "vgui_system"
            , vgui_system_function_type( &::vgui::system )
            , bp::return_value_policy< bp::reference_existing_object >() );
    
    }

    { //::wrapipanel
    
        typedef ::CWrapIPanel * ( *ipanel_function_type )(  );
        
        bp::def( 
            "ipanel"
            , ipanel_function_type( &::wrapipanel )
            , bp::return_value_policy< bp::reference_existing_object >() );
    
    }

    { //::wrapsurface
    
        typedef ::CWrapSurface * ( *surface_function_type )(  );
        
        bp::def( 
            "surface"
            , surface_function_type( &::wrapsurface )
            , bp::return_value_policy< bp::reference_existing_object >() );
    
    }

    bp::scope().attr( "localize" ) = boost::ref(g_pylocalize);

    bp::def( "AddTickSignal", wrap_AddTickSignal, (bp::arg("panel"), bp::arg("intervalMilliseconds")=0 ) );

    bp::def( "RemoveTickSignal", wrap_RemoveTickSignal, bp::arg("panel") );

    bp::scope().attr( "INVALID_FONT" ) = (int)0;

    bp::scope().attr( "INVALID_PANEL" ) = (int)0xffffffff;

    bp::scope().attr("gHUD") = bp::object( boost::ref( gHUD ) );
}
