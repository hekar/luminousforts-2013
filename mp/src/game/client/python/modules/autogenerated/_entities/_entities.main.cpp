// This file has been generated by Py++.

#include "cbase.h"
// This file has been generated by Py++.

#include "__convenience.pypp.hpp"

#include "__call_policies.pypp.hpp"

#include "cbase.h"

#include "npcevent.h"

#include "srcpy_entities.h"

#include "bone_setup.h"

#include "baseprojectile.h"

#include "basegrenade_shared.h"

#include "takedamageinfo.h"

#include "c_ai_basenpc.h"

#include "soundinfo.h"

#include "saverestore.h"

#include "saverestoretypes.h"

#include "vcollide_parse.h"

#include "iclientvehicle.h"

#include "steam/steamclientpublic.h"

#include "view_shared.h"

#include "c_playerresource.h"

#include "c_breakableprop.h"

#include "tier0/valve_minmax_off.h"

#include "srcpy.h"

#include "tier0/valve_minmax_on.h"

#include "tier0/memdbgon.h"

#include "../../game/client/python/modules/autogenerated/_entities/CBaseHandle.pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_BaseAnimating.pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_BaseAnimatingOverlay.pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_BaseCombatCharacter.pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_BaseCombatWeapon.pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_BaseEntity.pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_BaseFlex.pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_BaseGrenade.pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_BasePlayer.pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_BaseProjectile.pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_BreakableProp.pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/C_PlayerResource.pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/DeadEntity.pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/IClientEntity.pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/IClientUnknown.pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/IHandleEntity.pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/PyHandle.pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/_entities_enumerations.pypp.hpp"

#include "../../game/client/python/modules/autogenerated/_entities/_entities_free_functions.pypp.hpp"

namespace bp = boost::python;

struct handle_to_IHandleEntity
{
    handle_to_IHandleEntity()
    {
        bp::converter::registry::insert(
            &extract_IHandleEntity, 
            bp::type_id<IHandleEntity>()
            );
    }

    static void* extract_IHandleEntity(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< C_BaseEntity > C_BaseEntityHANDLE;

struct ptr_C_BaseEntity_to_handle : bp::to_python_converter<C_BaseEntity *, ptr_C_BaseEntity_to_handle>
{
    static PyObject* convert(C_BaseEntity *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BaseEntity_to_handle : bp::to_python_converter<C_BaseEntity, C_BaseEntity_to_handle>
{
    static PyObject* convert(const C_BaseEntity &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BaseEntity
{
    handle_to_C_BaseEntity()
    {
        bp::converter::registry::insert(
            &extract_C_BaseEntity, 
            bp::type_id<C_BaseEntity>()
            );
    }

    static void* extract_C_BaseEntity(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< C_BaseAnimating > C_BaseAnimatingHANDLE;

struct ptr_C_BaseAnimating_to_handle : bp::to_python_converter<C_BaseAnimating *, ptr_C_BaseAnimating_to_handle>
{
    static PyObject* convert(C_BaseAnimating *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BaseAnimating_to_handle : bp::to_python_converter<C_BaseAnimating, C_BaseAnimating_to_handle>
{
    static PyObject* convert(const C_BaseAnimating &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BaseAnimating
{
    handle_to_C_BaseAnimating()
    {
        bp::converter::registry::insert(
            &extract_C_BaseAnimating, 
            bp::type_id<C_BaseAnimating>()
            );
    }

    static void* extract_C_BaseAnimating(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< C_BaseAnimatingOverlay > C_BaseAnimatingOverlayHANDLE;

struct ptr_C_BaseAnimatingOverlay_to_handle : bp::to_python_converter<C_BaseAnimatingOverlay *, ptr_C_BaseAnimatingOverlay_to_handle>
{
    static PyObject* convert(C_BaseAnimatingOverlay *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BaseAnimatingOverlay_to_handle : bp::to_python_converter<C_BaseAnimatingOverlay, C_BaseAnimatingOverlay_to_handle>
{
    static PyObject* convert(const C_BaseAnimatingOverlay &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BaseAnimatingOverlay
{
    handle_to_C_BaseAnimatingOverlay()
    {
        bp::converter::registry::insert(
            &extract_C_BaseAnimatingOverlay, 
            bp::type_id<C_BaseAnimatingOverlay>()
            );
    }

    static void* extract_C_BaseAnimatingOverlay(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< C_BaseFlex > C_BaseFlexHANDLE;

struct ptr_C_BaseFlex_to_handle : bp::to_python_converter<C_BaseFlex *, ptr_C_BaseFlex_to_handle>
{
    static PyObject* convert(C_BaseFlex *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BaseFlex_to_handle : bp::to_python_converter<C_BaseFlex, C_BaseFlex_to_handle>
{
    static PyObject* convert(const C_BaseFlex &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BaseFlex
{
    handle_to_C_BaseFlex()
    {
        bp::converter::registry::insert(
            &extract_C_BaseFlex, 
            bp::type_id<C_BaseFlex>()
            );
    }

    static void* extract_C_BaseFlex(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< C_BaseCombatCharacter > C_BaseCombatCharacterHANDLE;

struct ptr_C_BaseCombatCharacter_to_handle : bp::to_python_converter<C_BaseCombatCharacter *, ptr_C_BaseCombatCharacter_to_handle>
{
    static PyObject* convert(C_BaseCombatCharacter *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BaseCombatCharacter_to_handle : bp::to_python_converter<C_BaseCombatCharacter, C_BaseCombatCharacter_to_handle>
{
    static PyObject* convert(const C_BaseCombatCharacter &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BaseCombatCharacter
{
    handle_to_C_BaseCombatCharacter()
    {
        bp::converter::registry::insert(
            &extract_C_BaseCombatCharacter, 
            bp::type_id<C_BaseCombatCharacter>()
            );
    }

    static void* extract_C_BaseCombatCharacter(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< C_BaseCombatWeapon > C_BaseCombatWeaponHANDLE;

struct ptr_C_BaseCombatWeapon_to_handle : bp::to_python_converter<C_BaseCombatWeapon *, ptr_C_BaseCombatWeapon_to_handle>
{
    static PyObject* convert(C_BaseCombatWeapon *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BaseCombatWeapon_to_handle : bp::to_python_converter<C_BaseCombatWeapon, C_BaseCombatWeapon_to_handle>
{
    static PyObject* convert(const C_BaseCombatWeapon &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BaseCombatWeapon
{
    handle_to_C_BaseCombatWeapon()
    {
        bp::converter::registry::insert(
            &extract_C_BaseCombatWeapon, 
            bp::type_id<C_BaseCombatWeapon>()
            );
    }

    static void* extract_C_BaseCombatWeapon(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< C_BaseProjectile > C_BaseProjectileHANDLE;

struct ptr_C_BaseProjectile_to_handle : bp::to_python_converter<C_BaseProjectile *, ptr_C_BaseProjectile_to_handle>
{
    static PyObject* convert(C_BaseProjectile *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BaseProjectile_to_handle : bp::to_python_converter<C_BaseProjectile, C_BaseProjectile_to_handle>
{
    static PyObject* convert(const C_BaseProjectile &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BaseProjectile
{
    handle_to_C_BaseProjectile()
    {
        bp::converter::registry::insert(
            &extract_C_BaseProjectile, 
            bp::type_id<C_BaseProjectile>()
            );
    }

    static void* extract_C_BaseProjectile(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< C_BaseGrenade > C_BaseGrenadeHANDLE;

struct ptr_C_BaseGrenade_to_handle : bp::to_python_converter<C_BaseGrenade *, ptr_C_BaseGrenade_to_handle>
{
    static PyObject* convert(C_BaseGrenade *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BaseGrenade_to_handle : bp::to_python_converter<C_BaseGrenade, C_BaseGrenade_to_handle>
{
    static PyObject* convert(const C_BaseGrenade &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BaseGrenade
{
    handle_to_C_BaseGrenade()
    {
        bp::converter::registry::insert(
            &extract_C_BaseGrenade, 
            bp::type_id<C_BaseGrenade>()
            );
    }

    static void* extract_C_BaseGrenade(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< C_BasePlayer > C_BasePlayerHANDLE;

struct ptr_C_BasePlayer_to_handle : bp::to_python_converter<C_BasePlayer *, ptr_C_BasePlayer_to_handle>
{
    static PyObject* convert(C_BasePlayer *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BasePlayer_to_handle : bp::to_python_converter<C_BasePlayer, C_BasePlayer_to_handle>
{
    static PyObject* convert(const C_BasePlayer &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BasePlayer
{
    handle_to_C_BasePlayer()
    {
        bp::converter::registry::insert(
            &extract_C_BasePlayer, 
            bp::type_id<C_BasePlayer>()
            );
    }

    static void* extract_C_BasePlayer(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< C_PlayerResource > C_PlayerResourceHANDLE;

struct ptr_C_PlayerResource_to_handle : bp::to_python_converter<C_PlayerResource *, ptr_C_PlayerResource_to_handle>
{
    static PyObject* convert(C_PlayerResource *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_PlayerResource_to_handle : bp::to_python_converter<C_PlayerResource, C_PlayerResource_to_handle>
{
    static PyObject* convert(const C_PlayerResource &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_PlayerResource
{
    handle_to_C_PlayerResource()
    {
        bp::converter::registry::insert(
            &extract_C_PlayerResource, 
            bp::type_id<C_PlayerResource>()
            );
    }

    static void* extract_C_PlayerResource(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

typedef CEPyHandle< C_BreakableProp > C_BreakablePropHANDLE;

struct ptr_C_BreakableProp_to_handle : bp::to_python_converter<C_BreakableProp *, ptr_C_BreakableProp_to_handle>
{
    static PyObject* convert(C_BreakableProp *s)
    {
        return s ? bp::incref(s->GetPyHandle().ptr()) : bp::incref(Py_None);
    }
};

struct C_BreakableProp_to_handle : bp::to_python_converter<C_BreakableProp, C_BreakableProp_to_handle>
{
    static PyObject* convert(const C_BreakableProp &s)
    {
        return bp::incref(s.GetPyHandle().ptr());
    }
};

struct handle_to_C_BreakableProp
{
    handle_to_C_BreakableProp()
    {
        bp::converter::registry::insert(
            &extract_C_BreakableProp, 
            bp::type_id<C_BreakableProp>()
            );
    }

    static void* extract_C_BreakableProp(PyObject* op){
       CBaseHandle h = bp::extract<CBaseHandle>(op);
       if( h.Get() == NULL ) {
           return Py_None;
       }
       return h.Get();
    }
};

C_PlayerResource *wrap_PlayerResource( void )
{
	return g_PR;
}

BOOST_PYTHON_MODULE(_entities){
    _entities_register_enumerations();

    bp::docstring_options doc_options( true, true, false );

    register_CBaseHandle_class();

    register_IHandleEntity_class();

    register_IClientUnknown_class();

    register_IClientEntity_class();

    register_C_BaseEntity_class();

    register_C_BaseAnimating_class();

    register_C_BaseAnimatingOverlay_class();

    register_C_BaseFlex_class();

    register_C_BaseCombatCharacter_class();

    register_C_BaseCombatWeapon_class();

    register_C_BaseProjectile_class();

    register_C_BaseGrenade_class();

    register_C_BasePlayer_class();

    register_C_BreakableProp_class();

    register_C_PlayerResource_class();

    register_DeadEntity_class();

    register_PyHandle_class();

    handle_to_IHandleEntity();

    { //::C_BaseEntityHANDLE
            typedef bp::class_< C_BaseEntityHANDLE, bp::bases< CBaseHandle > > C_BaseEntityHANDLE_exposer_t;
            C_BaseEntityHANDLE_exposer_t C_BaseEntityHANDLE_exposer = C_BaseEntityHANDLE_exposer_t( "C_BaseEntityHANDLE", bp::init< >() );
            C_BaseEntityHANDLE_exposer.def( bp::init< C_BaseEntity * >(( bp::arg("pVal") )) );
            C_BaseEntityHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::C_BaseEntityHANDLE::GetAttr
            
                typedef bp::object ( ::C_BaseEntityHANDLE::*GetAttr_function_type )( const char * ) const;
                
                C_BaseEntityHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::C_BaseEntityHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::C_BaseEntityHANDLE::Cmp
            
                typedef bool ( ::C_BaseEntityHANDLE::*Cmp_function_type )( bp::object ) const;
                
                C_BaseEntityHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::C_BaseEntityHANDLE::Cmp )
                );
            
            }
            { //::C_BaseEntityHANDLE::NonZero
            
                typedef bool ( ::C_BaseEntityHANDLE::*NonZero_function_type )( ) const;
                
                C_BaseEntityHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::C_BaseEntityHANDLE::NonZero )
                );
            }
    #else
            { //::C_BaseEntityHANDLE::Bool
            
                typedef bool ( ::C_BaseEntityHANDLE::*Bool_function_type )( ) const;
                
                C_BaseEntityHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::C_BaseEntityHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::C_BaseEntityHANDLE::Hash
            
                typedef Py_hash_t ( ::C_BaseEntityHANDLE::*Hash_function_type )( ) const;
                
                C_BaseEntityHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::C_BaseEntityHANDLE::Hash )
                );
            }
            { //::C_BaseEntityHANDLE::Set
            
                typedef void ( ::C_BaseEntityHANDLE::*Set_function_type )( C_BaseEntity * ) const;
                
                C_BaseEntityHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::C_BaseEntityHANDLE::Set )
                );
            
            }
            { //::C_BaseEntityHANDLE::GetSerialNumber
            
                typedef int ( ::C_BaseEntityHANDLE::*GetSerialNumber_function_type )( ) const;
                
                C_BaseEntityHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::C_BaseEntityHANDLE::GetSerialNumber )
                );
            
            }
            { //::C_BaseEntityHANDLE::GetEntryIndex
            
                typedef int ( ::C_BaseEntityHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                C_BaseEntityHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::C_BaseEntityHANDLE::GetEntryIndex )
                );
            
            }
            C_BaseEntityHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            C_BaseEntityHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_C_BaseEntity_to_handle();

    C_BaseEntity_to_handle();

    handle_to_C_BaseEntity();

    { //::C_BaseAnimatingHANDLE
            typedef bp::class_< C_BaseAnimatingHANDLE, bp::bases< CBaseHandle > > C_BaseAnimatingHANDLE_exposer_t;
            C_BaseAnimatingHANDLE_exposer_t C_BaseAnimatingHANDLE_exposer = C_BaseAnimatingHANDLE_exposer_t( "C_BaseAnimatingHANDLE", bp::init< >() );
            C_BaseAnimatingHANDLE_exposer.def( bp::init< C_BaseAnimating * >(( bp::arg("pVal") )) );
            C_BaseAnimatingHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::C_BaseAnimatingHANDLE::GetAttr
            
                typedef bp::object ( ::C_BaseAnimatingHANDLE::*GetAttr_function_type )( const char * ) const;
                
                C_BaseAnimatingHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::C_BaseAnimatingHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::C_BaseAnimatingHANDLE::Cmp
            
                typedef bool ( ::C_BaseAnimatingHANDLE::*Cmp_function_type )( bp::object ) const;
                
                C_BaseAnimatingHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::C_BaseAnimatingHANDLE::Cmp )
                );
            
            }
            { //::C_BaseAnimatingHANDLE::NonZero
            
                typedef bool ( ::C_BaseAnimatingHANDLE::*NonZero_function_type )( ) const;
                
                C_BaseAnimatingHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::C_BaseAnimatingHANDLE::NonZero )
                );
            }
    #else
            { //::C_BaseAnimatingHANDLE::Bool
            
                typedef bool ( ::C_BaseAnimatingHANDLE::*Bool_function_type )( ) const;
                
                C_BaseAnimatingHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::C_BaseAnimatingHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::C_BaseAnimatingHANDLE::Hash
            
                typedef Py_hash_t ( ::C_BaseAnimatingHANDLE::*Hash_function_type )( ) const;
                
                C_BaseAnimatingHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::C_BaseAnimatingHANDLE::Hash )
                );
            }
            { //::C_BaseAnimatingHANDLE::Set
            
                typedef void ( ::C_BaseAnimatingHANDLE::*Set_function_type )( C_BaseAnimating * ) const;
                
                C_BaseAnimatingHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::C_BaseAnimatingHANDLE::Set )
                );
            
            }
            { //::C_BaseAnimatingHANDLE::GetSerialNumber
            
                typedef int ( ::C_BaseAnimatingHANDLE::*GetSerialNumber_function_type )( ) const;
                
                C_BaseAnimatingHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::C_BaseAnimatingHANDLE::GetSerialNumber )
                );
            
            }
            { //::C_BaseAnimatingHANDLE::GetEntryIndex
            
                typedef int ( ::C_BaseAnimatingHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                C_BaseAnimatingHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::C_BaseAnimatingHANDLE::GetEntryIndex )
                );
            
            }
            C_BaseAnimatingHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            C_BaseAnimatingHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_C_BaseAnimating_to_handle();

    C_BaseAnimating_to_handle();

    handle_to_C_BaseAnimating();

    { //::C_BaseAnimatingOverlayHANDLE
            typedef bp::class_< C_BaseAnimatingOverlayHANDLE, bp::bases< CBaseHandle > > C_BaseAnimatingOverlayHANDLE_exposer_t;
            C_BaseAnimatingOverlayHANDLE_exposer_t C_BaseAnimatingOverlayHANDLE_exposer = C_BaseAnimatingOverlayHANDLE_exposer_t( "C_BaseAnimatingOverlayHANDLE", bp::init< >() );
            C_BaseAnimatingOverlayHANDLE_exposer.def( bp::init< C_BaseAnimatingOverlay * >(( bp::arg("pVal") )) );
            C_BaseAnimatingOverlayHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::C_BaseAnimatingOverlayHANDLE::GetAttr
            
                typedef bp::object ( ::C_BaseAnimatingOverlayHANDLE::*GetAttr_function_type )( const char * ) const;
                
                C_BaseAnimatingOverlayHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::C_BaseAnimatingOverlayHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::C_BaseAnimatingOverlayHANDLE::Cmp
            
                typedef bool ( ::C_BaseAnimatingOverlayHANDLE::*Cmp_function_type )( bp::object ) const;
                
                C_BaseAnimatingOverlayHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::C_BaseAnimatingOverlayHANDLE::Cmp )
                );
            
            }
            { //::C_BaseAnimatingOverlayHANDLE::NonZero
            
                typedef bool ( ::C_BaseAnimatingOverlayHANDLE::*NonZero_function_type )( ) const;
                
                C_BaseAnimatingOverlayHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::C_BaseAnimatingOverlayHANDLE::NonZero )
                );
            }
    #else
            { //::C_BaseAnimatingOverlayHANDLE::Bool
            
                typedef bool ( ::C_BaseAnimatingOverlayHANDLE::*Bool_function_type )( ) const;
                
                C_BaseAnimatingOverlayHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::C_BaseAnimatingOverlayHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::C_BaseAnimatingOverlayHANDLE::Hash
            
                typedef Py_hash_t ( ::C_BaseAnimatingOverlayHANDLE::*Hash_function_type )( ) const;
                
                C_BaseAnimatingOverlayHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::C_BaseAnimatingOverlayHANDLE::Hash )
                );
            }
            { //::C_BaseAnimatingOverlayHANDLE::Set
            
                typedef void ( ::C_BaseAnimatingOverlayHANDLE::*Set_function_type )( C_BaseAnimatingOverlay * ) const;
                
                C_BaseAnimatingOverlayHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::C_BaseAnimatingOverlayHANDLE::Set )
                );
            
            }
            { //::C_BaseAnimatingOverlayHANDLE::GetSerialNumber
            
                typedef int ( ::C_BaseAnimatingOverlayHANDLE::*GetSerialNumber_function_type )( ) const;
                
                C_BaseAnimatingOverlayHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::C_BaseAnimatingOverlayHANDLE::GetSerialNumber )
                );
            
            }
            { //::C_BaseAnimatingOverlayHANDLE::GetEntryIndex
            
                typedef int ( ::C_BaseAnimatingOverlayHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                C_BaseAnimatingOverlayHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::C_BaseAnimatingOverlayHANDLE::GetEntryIndex )
                );
            
            }
            C_BaseAnimatingOverlayHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            C_BaseAnimatingOverlayHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_C_BaseAnimatingOverlay_to_handle();

    C_BaseAnimatingOverlay_to_handle();

    handle_to_C_BaseAnimatingOverlay();

    { //::C_BaseFlexHANDLE
            typedef bp::class_< C_BaseFlexHANDLE, bp::bases< CBaseHandle > > C_BaseFlexHANDLE_exposer_t;
            C_BaseFlexHANDLE_exposer_t C_BaseFlexHANDLE_exposer = C_BaseFlexHANDLE_exposer_t( "C_BaseFlexHANDLE", bp::init< >() );
            C_BaseFlexHANDLE_exposer.def( bp::init< C_BaseFlex * >(( bp::arg("pVal") )) );
            C_BaseFlexHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::C_BaseFlexHANDLE::GetAttr
            
                typedef bp::object ( ::C_BaseFlexHANDLE::*GetAttr_function_type )( const char * ) const;
                
                C_BaseFlexHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::C_BaseFlexHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::C_BaseFlexHANDLE::Cmp
            
                typedef bool ( ::C_BaseFlexHANDLE::*Cmp_function_type )( bp::object ) const;
                
                C_BaseFlexHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::C_BaseFlexHANDLE::Cmp )
                );
            
            }
            { //::C_BaseFlexHANDLE::NonZero
            
                typedef bool ( ::C_BaseFlexHANDLE::*NonZero_function_type )( ) const;
                
                C_BaseFlexHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::C_BaseFlexHANDLE::NonZero )
                );
            }
    #else
            { //::C_BaseFlexHANDLE::Bool
            
                typedef bool ( ::C_BaseFlexHANDLE::*Bool_function_type )( ) const;
                
                C_BaseFlexHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::C_BaseFlexHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::C_BaseFlexHANDLE::Hash
            
                typedef Py_hash_t ( ::C_BaseFlexHANDLE::*Hash_function_type )( ) const;
                
                C_BaseFlexHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::C_BaseFlexHANDLE::Hash )
                );
            }
            { //::C_BaseFlexHANDLE::Set
            
                typedef void ( ::C_BaseFlexHANDLE::*Set_function_type )( C_BaseFlex * ) const;
                
                C_BaseFlexHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::C_BaseFlexHANDLE::Set )
                );
            
            }
            { //::C_BaseFlexHANDLE::GetSerialNumber
            
                typedef int ( ::C_BaseFlexHANDLE::*GetSerialNumber_function_type )( ) const;
                
                C_BaseFlexHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::C_BaseFlexHANDLE::GetSerialNumber )
                );
            
            }
            { //::C_BaseFlexHANDLE::GetEntryIndex
            
                typedef int ( ::C_BaseFlexHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                C_BaseFlexHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::C_BaseFlexHANDLE::GetEntryIndex )
                );
            
            }
            C_BaseFlexHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            C_BaseFlexHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_C_BaseFlex_to_handle();

    C_BaseFlex_to_handle();

    handle_to_C_BaseFlex();

    { //::C_BaseCombatCharacterHANDLE
            typedef bp::class_< C_BaseCombatCharacterHANDLE, bp::bases< CBaseHandle > > C_BaseCombatCharacterHANDLE_exposer_t;
            C_BaseCombatCharacterHANDLE_exposer_t C_BaseCombatCharacterHANDLE_exposer = C_BaseCombatCharacterHANDLE_exposer_t( "C_BaseCombatCharacterHANDLE", bp::init< >() );
            C_BaseCombatCharacterHANDLE_exposer.def( bp::init< C_BaseCombatCharacter * >(( bp::arg("pVal") )) );
            C_BaseCombatCharacterHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::C_BaseCombatCharacterHANDLE::GetAttr
            
                typedef bp::object ( ::C_BaseCombatCharacterHANDLE::*GetAttr_function_type )( const char * ) const;
                
                C_BaseCombatCharacterHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::C_BaseCombatCharacterHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::C_BaseCombatCharacterHANDLE::Cmp
            
                typedef bool ( ::C_BaseCombatCharacterHANDLE::*Cmp_function_type )( bp::object ) const;
                
                C_BaseCombatCharacterHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::C_BaseCombatCharacterHANDLE::Cmp )
                );
            
            }
            { //::C_BaseCombatCharacterHANDLE::NonZero
            
                typedef bool ( ::C_BaseCombatCharacterHANDLE::*NonZero_function_type )( ) const;
                
                C_BaseCombatCharacterHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::C_BaseCombatCharacterHANDLE::NonZero )
                );
            }
    #else
            { //::C_BaseCombatCharacterHANDLE::Bool
            
                typedef bool ( ::C_BaseCombatCharacterHANDLE::*Bool_function_type )( ) const;
                
                C_BaseCombatCharacterHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::C_BaseCombatCharacterHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::C_BaseCombatCharacterHANDLE::Hash
            
                typedef Py_hash_t ( ::C_BaseCombatCharacterHANDLE::*Hash_function_type )( ) const;
                
                C_BaseCombatCharacterHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::C_BaseCombatCharacterHANDLE::Hash )
                );
            }
            { //::C_BaseCombatCharacterHANDLE::Set
            
                typedef void ( ::C_BaseCombatCharacterHANDLE::*Set_function_type )( C_BaseCombatCharacter * ) const;
                
                C_BaseCombatCharacterHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::C_BaseCombatCharacterHANDLE::Set )
                );
            
            }
            { //::C_BaseCombatCharacterHANDLE::GetSerialNumber
            
                typedef int ( ::C_BaseCombatCharacterHANDLE::*GetSerialNumber_function_type )( ) const;
                
                C_BaseCombatCharacterHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::C_BaseCombatCharacterHANDLE::GetSerialNumber )
                );
            
            }
            { //::C_BaseCombatCharacterHANDLE::GetEntryIndex
            
                typedef int ( ::C_BaseCombatCharacterHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                C_BaseCombatCharacterHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::C_BaseCombatCharacterHANDLE::GetEntryIndex )
                );
            
            }
            C_BaseCombatCharacterHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            C_BaseCombatCharacterHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_C_BaseCombatCharacter_to_handle();

    C_BaseCombatCharacter_to_handle();

    handle_to_C_BaseCombatCharacter();

    { //::C_BaseCombatWeaponHANDLE
            typedef bp::class_< C_BaseCombatWeaponHANDLE, bp::bases< CBaseHandle > > C_BaseCombatWeaponHANDLE_exposer_t;
            C_BaseCombatWeaponHANDLE_exposer_t C_BaseCombatWeaponHANDLE_exposer = C_BaseCombatWeaponHANDLE_exposer_t( "C_BaseCombatWeaponHANDLE", bp::init< >() );
            C_BaseCombatWeaponHANDLE_exposer.def( bp::init< C_BaseCombatWeapon * >(( bp::arg("pVal") )) );
            C_BaseCombatWeaponHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::C_BaseCombatWeaponHANDLE::GetAttr
            
                typedef bp::object ( ::C_BaseCombatWeaponHANDLE::*GetAttr_function_type )( const char * ) const;
                
                C_BaseCombatWeaponHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::C_BaseCombatWeaponHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::C_BaseCombatWeaponHANDLE::Cmp
            
                typedef bool ( ::C_BaseCombatWeaponHANDLE::*Cmp_function_type )( bp::object ) const;
                
                C_BaseCombatWeaponHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::C_BaseCombatWeaponHANDLE::Cmp )
                );
            
            }
            { //::C_BaseCombatWeaponHANDLE::NonZero
            
                typedef bool ( ::C_BaseCombatWeaponHANDLE::*NonZero_function_type )( ) const;
                
                C_BaseCombatWeaponHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::C_BaseCombatWeaponHANDLE::NonZero )
                );
            }
    #else
            { //::C_BaseCombatWeaponHANDLE::Bool
            
                typedef bool ( ::C_BaseCombatWeaponHANDLE::*Bool_function_type )( ) const;
                
                C_BaseCombatWeaponHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::C_BaseCombatWeaponHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::C_BaseCombatWeaponHANDLE::Hash
            
                typedef Py_hash_t ( ::C_BaseCombatWeaponHANDLE::*Hash_function_type )( ) const;
                
                C_BaseCombatWeaponHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::C_BaseCombatWeaponHANDLE::Hash )
                );
            }
            { //::C_BaseCombatWeaponHANDLE::Set
            
                typedef void ( ::C_BaseCombatWeaponHANDLE::*Set_function_type )( C_BaseCombatWeapon * ) const;
                
                C_BaseCombatWeaponHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::C_BaseCombatWeaponHANDLE::Set )
                );
            
            }
            { //::C_BaseCombatWeaponHANDLE::GetSerialNumber
            
                typedef int ( ::C_BaseCombatWeaponHANDLE::*GetSerialNumber_function_type )( ) const;
                
                C_BaseCombatWeaponHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::C_BaseCombatWeaponHANDLE::GetSerialNumber )
                );
            
            }
            { //::C_BaseCombatWeaponHANDLE::GetEntryIndex
            
                typedef int ( ::C_BaseCombatWeaponHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                C_BaseCombatWeaponHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::C_BaseCombatWeaponHANDLE::GetEntryIndex )
                );
            
            }
            C_BaseCombatWeaponHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            C_BaseCombatWeaponHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_C_BaseCombatWeapon_to_handle();

    C_BaseCombatWeapon_to_handle();

    handle_to_C_BaseCombatWeapon();

    { //::C_BaseProjectileHANDLE
            typedef bp::class_< C_BaseProjectileHANDLE, bp::bases< CBaseHandle > > C_BaseProjectileHANDLE_exposer_t;
            C_BaseProjectileHANDLE_exposer_t C_BaseProjectileHANDLE_exposer = C_BaseProjectileHANDLE_exposer_t( "C_BaseProjectileHANDLE", bp::init< >() );
            C_BaseProjectileHANDLE_exposer.def( bp::init< C_BaseProjectile * >(( bp::arg("pVal") )) );
            C_BaseProjectileHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::C_BaseProjectileHANDLE::GetAttr
            
                typedef bp::object ( ::C_BaseProjectileHANDLE::*GetAttr_function_type )( const char * ) const;
                
                C_BaseProjectileHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::C_BaseProjectileHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::C_BaseProjectileHANDLE::Cmp
            
                typedef bool ( ::C_BaseProjectileHANDLE::*Cmp_function_type )( bp::object ) const;
                
                C_BaseProjectileHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::C_BaseProjectileHANDLE::Cmp )
                );
            
            }
            { //::C_BaseProjectileHANDLE::NonZero
            
                typedef bool ( ::C_BaseProjectileHANDLE::*NonZero_function_type )( ) const;
                
                C_BaseProjectileHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::C_BaseProjectileHANDLE::NonZero )
                );
            }
    #else
            { //::C_BaseProjectileHANDLE::Bool
            
                typedef bool ( ::C_BaseProjectileHANDLE::*Bool_function_type )( ) const;
                
                C_BaseProjectileHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::C_BaseProjectileHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::C_BaseProjectileHANDLE::Hash
            
                typedef Py_hash_t ( ::C_BaseProjectileHANDLE::*Hash_function_type )( ) const;
                
                C_BaseProjectileHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::C_BaseProjectileHANDLE::Hash )
                );
            }
            { //::C_BaseProjectileHANDLE::Set
            
                typedef void ( ::C_BaseProjectileHANDLE::*Set_function_type )( C_BaseProjectile * ) const;
                
                C_BaseProjectileHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::C_BaseProjectileHANDLE::Set )
                );
            
            }
            { //::C_BaseProjectileHANDLE::GetSerialNumber
            
                typedef int ( ::C_BaseProjectileHANDLE::*GetSerialNumber_function_type )( ) const;
                
                C_BaseProjectileHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::C_BaseProjectileHANDLE::GetSerialNumber )
                );
            
            }
            { //::C_BaseProjectileHANDLE::GetEntryIndex
            
                typedef int ( ::C_BaseProjectileHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                C_BaseProjectileHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::C_BaseProjectileHANDLE::GetEntryIndex )
                );
            
            }
            C_BaseProjectileHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            C_BaseProjectileHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_C_BaseProjectile_to_handle();

    C_BaseProjectile_to_handle();

    handle_to_C_BaseProjectile();

    { //::C_BaseGrenadeHANDLE
            typedef bp::class_< C_BaseGrenadeHANDLE, bp::bases< CBaseHandle > > C_BaseGrenadeHANDLE_exposer_t;
            C_BaseGrenadeHANDLE_exposer_t C_BaseGrenadeHANDLE_exposer = C_BaseGrenadeHANDLE_exposer_t( "C_BaseGrenadeHANDLE", bp::init< >() );
            C_BaseGrenadeHANDLE_exposer.def( bp::init< C_BaseGrenade * >(( bp::arg("pVal") )) );
            C_BaseGrenadeHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::C_BaseGrenadeHANDLE::GetAttr
            
                typedef bp::object ( ::C_BaseGrenadeHANDLE::*GetAttr_function_type )( const char * ) const;
                
                C_BaseGrenadeHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::C_BaseGrenadeHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::C_BaseGrenadeHANDLE::Cmp
            
                typedef bool ( ::C_BaseGrenadeHANDLE::*Cmp_function_type )( bp::object ) const;
                
                C_BaseGrenadeHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::C_BaseGrenadeHANDLE::Cmp )
                );
            
            }
            { //::C_BaseGrenadeHANDLE::NonZero
            
                typedef bool ( ::C_BaseGrenadeHANDLE::*NonZero_function_type )( ) const;
                
                C_BaseGrenadeHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::C_BaseGrenadeHANDLE::NonZero )
                );
            }
    #else
            { //::C_BaseGrenadeHANDLE::Bool
            
                typedef bool ( ::C_BaseGrenadeHANDLE::*Bool_function_type )( ) const;
                
                C_BaseGrenadeHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::C_BaseGrenadeHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::C_BaseGrenadeHANDLE::Hash
            
                typedef Py_hash_t ( ::C_BaseGrenadeHANDLE::*Hash_function_type )( ) const;
                
                C_BaseGrenadeHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::C_BaseGrenadeHANDLE::Hash )
                );
            }
            { //::C_BaseGrenadeHANDLE::Set
            
                typedef void ( ::C_BaseGrenadeHANDLE::*Set_function_type )( C_BaseGrenade * ) const;
                
                C_BaseGrenadeHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::C_BaseGrenadeHANDLE::Set )
                );
            
            }
            { //::C_BaseGrenadeHANDLE::GetSerialNumber
            
                typedef int ( ::C_BaseGrenadeHANDLE::*GetSerialNumber_function_type )( ) const;
                
                C_BaseGrenadeHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::C_BaseGrenadeHANDLE::GetSerialNumber )
                );
            
            }
            { //::C_BaseGrenadeHANDLE::GetEntryIndex
            
                typedef int ( ::C_BaseGrenadeHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                C_BaseGrenadeHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::C_BaseGrenadeHANDLE::GetEntryIndex )
                );
            
            }
            C_BaseGrenadeHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            C_BaseGrenadeHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_C_BaseGrenade_to_handle();

    C_BaseGrenade_to_handle();

    handle_to_C_BaseGrenade();

    { //::C_BasePlayerHANDLE
            typedef bp::class_< C_BasePlayerHANDLE, bp::bases< CBaseHandle > > C_BasePlayerHANDLE_exposer_t;
            C_BasePlayerHANDLE_exposer_t C_BasePlayerHANDLE_exposer = C_BasePlayerHANDLE_exposer_t( "C_BasePlayerHANDLE", bp::init< >() );
            C_BasePlayerHANDLE_exposer.def( bp::init< C_BasePlayer * >(( bp::arg("pVal") )) );
            C_BasePlayerHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::C_BasePlayerHANDLE::GetAttr
            
                typedef bp::object ( ::C_BasePlayerHANDLE::*GetAttr_function_type )( const char * ) const;
                
                C_BasePlayerHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::C_BasePlayerHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::C_BasePlayerHANDLE::Cmp
            
                typedef bool ( ::C_BasePlayerHANDLE::*Cmp_function_type )( bp::object ) const;
                
                C_BasePlayerHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::C_BasePlayerHANDLE::Cmp )
                );
            
            }
            { //::C_BasePlayerHANDLE::NonZero
            
                typedef bool ( ::C_BasePlayerHANDLE::*NonZero_function_type )( ) const;
                
                C_BasePlayerHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::C_BasePlayerHANDLE::NonZero )
                );
            }
    #else
            { //::C_BasePlayerHANDLE::Bool
            
                typedef bool ( ::C_BasePlayerHANDLE::*Bool_function_type )( ) const;
                
                C_BasePlayerHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::C_BasePlayerHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::C_BasePlayerHANDLE::Hash
            
                typedef Py_hash_t ( ::C_BasePlayerHANDLE::*Hash_function_type )( ) const;
                
                C_BasePlayerHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::C_BasePlayerHANDLE::Hash )
                );
            }
            { //::C_BasePlayerHANDLE::Set
            
                typedef void ( ::C_BasePlayerHANDLE::*Set_function_type )( C_BasePlayer * ) const;
                
                C_BasePlayerHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::C_BasePlayerHANDLE::Set )
                );
            
            }
            { //::C_BasePlayerHANDLE::GetSerialNumber
            
                typedef int ( ::C_BasePlayerHANDLE::*GetSerialNumber_function_type )( ) const;
                
                C_BasePlayerHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::C_BasePlayerHANDLE::GetSerialNumber )
                );
            
            }
            { //::C_BasePlayerHANDLE::GetEntryIndex
            
                typedef int ( ::C_BasePlayerHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                C_BasePlayerHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::C_BasePlayerHANDLE::GetEntryIndex )
                );
            
            }
            C_BasePlayerHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            C_BasePlayerHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_C_BasePlayer_to_handle();

    C_BasePlayer_to_handle();

    handle_to_C_BasePlayer();

    { //::C_PlayerResourceHANDLE
            typedef bp::class_< C_PlayerResourceHANDLE, bp::bases< CBaseHandle > > C_PlayerResourceHANDLE_exposer_t;
            C_PlayerResourceHANDLE_exposer_t C_PlayerResourceHANDLE_exposer = C_PlayerResourceHANDLE_exposer_t( "C_PlayerResourceHANDLE", bp::init< >() );
            C_PlayerResourceHANDLE_exposer.def( bp::init< C_PlayerResource * >(( bp::arg("pVal") )) );
            C_PlayerResourceHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::C_PlayerResourceHANDLE::GetAttr
            
                typedef bp::object ( ::C_PlayerResourceHANDLE::*GetAttr_function_type )( const char * ) const;
                
                C_PlayerResourceHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::C_PlayerResourceHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::C_PlayerResourceHANDLE::Cmp
            
                typedef bool ( ::C_PlayerResourceHANDLE::*Cmp_function_type )( bp::object ) const;
                
                C_PlayerResourceHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::C_PlayerResourceHANDLE::Cmp )
                );
            
            }
            { //::C_PlayerResourceHANDLE::NonZero
            
                typedef bool ( ::C_PlayerResourceHANDLE::*NonZero_function_type )( ) const;
                
                C_PlayerResourceHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::C_PlayerResourceHANDLE::NonZero )
                );
            }
    #else
            { //::C_PlayerResourceHANDLE::Bool
            
                typedef bool ( ::C_PlayerResourceHANDLE::*Bool_function_type )( ) const;
                
                C_PlayerResourceHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::C_PlayerResourceHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::C_PlayerResourceHANDLE::Hash
            
                typedef Py_hash_t ( ::C_PlayerResourceHANDLE::*Hash_function_type )( ) const;
                
                C_PlayerResourceHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::C_PlayerResourceHANDLE::Hash )
                );
            }
            { //::C_PlayerResourceHANDLE::Set
            
                typedef void ( ::C_PlayerResourceHANDLE::*Set_function_type )( C_PlayerResource * ) const;
                
                C_PlayerResourceHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::C_PlayerResourceHANDLE::Set )
                );
            
            }
            { //::C_PlayerResourceHANDLE::GetSerialNumber
            
                typedef int ( ::C_PlayerResourceHANDLE::*GetSerialNumber_function_type )( ) const;
                
                C_PlayerResourceHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::C_PlayerResourceHANDLE::GetSerialNumber )
                );
            
            }
            { //::C_PlayerResourceHANDLE::GetEntryIndex
            
                typedef int ( ::C_PlayerResourceHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                C_PlayerResourceHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::C_PlayerResourceHANDLE::GetEntryIndex )
                );
            
            }
            C_PlayerResourceHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            C_PlayerResourceHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_C_PlayerResource_to_handle();

    C_PlayerResource_to_handle();

    handle_to_C_PlayerResource();

    { //::C_BreakablePropHANDLE
            typedef bp::class_< C_BreakablePropHANDLE, bp::bases< CBaseHandle > > C_BreakablePropHANDLE_exposer_t;
            C_BreakablePropHANDLE_exposer_t C_BreakablePropHANDLE_exposer = C_BreakablePropHANDLE_exposer_t( "C_BreakablePropHANDLE", bp::init< >() );
            C_BreakablePropHANDLE_exposer.def( bp::init< C_BreakableProp * >(( bp::arg("pVal") )) );
            C_BreakablePropHANDLE_exposer.def( bp::init< int, int >(( bp::arg("iEntry"), bp::arg("iSerialNumber") )) );
            { //::C_BreakablePropHANDLE::GetAttr
            
                typedef bp::object ( ::C_BreakablePropHANDLE::*GetAttr_function_type )( const char * ) const;
                
                C_BreakablePropHANDLE_exposer.def( 
                    "__getattr__"
                    , GetAttr_function_type( &::C_BreakablePropHANDLE::GetAttr )
                );
            
            }
    #if PY_VERSION_HEX < 0x03000000
            { //::C_BreakablePropHANDLE::Cmp
            
                typedef bool ( ::C_BreakablePropHANDLE::*Cmp_function_type )( bp::object ) const;
                
                C_BreakablePropHANDLE_exposer.def( 
                    "__cmp__"
                    , Cmp_function_type( &::C_BreakablePropHANDLE::Cmp )
                );
            
            }
            { //::C_BreakablePropHANDLE::NonZero
            
                typedef bool ( ::C_BreakablePropHANDLE::*NonZero_function_type )( ) const;
                
                C_BreakablePropHANDLE_exposer.def( 
                    "__nonzero__"
                    , NonZero_function_type( &::C_BreakablePropHANDLE::NonZero )
                );
            }
    #else
            { //::C_BreakablePropHANDLE::Bool
            
                typedef bool ( ::C_BreakablePropHANDLE::*Bool_function_type )( ) const;
                
                C_BreakablePropHANDLE_exposer.def( 
                    "__bool__"
                    , Bool_function_type( &::C_BreakablePropHANDLE::Bool )
                );
            }
    #endif // PY_VERSION_HEX < 0x03000000
            { //::C_BreakablePropHANDLE::Hash
            
                typedef Py_hash_t ( ::C_BreakablePropHANDLE::*Hash_function_type )( ) const;
                
                C_BreakablePropHANDLE_exposer.def( 
                    "__hash__"
                    , Hash_function_type( &::C_BreakablePropHANDLE::Hash )
                );
            }
            { //::C_BreakablePropHANDLE::Set
            
                typedef void ( ::C_BreakablePropHANDLE::*Set_function_type )( C_BreakableProp * ) const;
                
                C_BreakablePropHANDLE_exposer.def( 
                    "Set"
                    , Set_function_type( &::C_BreakablePropHANDLE::Set )
                );
            
            }
            { //::C_BreakablePropHANDLE::GetSerialNumber
            
                typedef int ( ::C_BreakablePropHANDLE::*GetSerialNumber_function_type )( ) const;
                
                C_BreakablePropHANDLE_exposer.def( 
                    "GetSerialNumber"
                    , GetSerialNumber_function_type( &::C_BreakablePropHANDLE::GetSerialNumber )
                );
            
            }
            { //::C_BreakablePropHANDLE::GetEntryIndex
            
                typedef int ( ::C_BreakablePropHANDLE::*GetEntryIndex_function_type )(  ) const;
                
                C_BreakablePropHANDLE_exposer.def( 
                    "GetEntryIndex"
                    , GetEntryIndex_function_type( &::C_BreakablePropHANDLE::GetEntryIndex )
                );
            
            }
            C_BreakablePropHANDLE_exposer.def( bp::self != bp::other< bp::api::object >() );
            C_BreakablePropHANDLE_exposer.def( bp::self == bp::other< bp::api::object >() );
        }

    ptr_C_BreakableProp_to_handle();

    C_BreakableProp_to_handle();

    handle_to_C_BreakableProp();

    bp::scope().attr( "CLIENT_THINK_ALWAYS" ) = CLIENT_THINK_ALWAYS;

    bp::scope().attr( "CLIENT_THINK_NEVER" ) = CLIENT_THINK_NEVER;

    bp::def( "PlayerResource", wrap_PlayerResource, bp::return_value_policy< bp::return_by_value >() );

    _entities_register_free_functions();
}


