// This file has been generated by Py++.

#include "cbase.h"



#include "__convenience.pypp.hpp"

#include "__call_policies.pypp.hpp"

#include "__array_1.pypp.hpp"

#include "vgui/Cursor.h"

#include "inputsystem/ButtonCode.h"

#include "kbutton.h"

#include "cbase.h"

#include "input.h"

#include "srcpy.h"

#include "tier0/memdbgon.h"

namespace bp = boost::python;

static boost::python::tuple CAM_OrthographicSize_8e8117cefaa05e9e21a2c25c96813d09( ::CInput const & inst ){
    float w2;
    float h2;
    inst.CAM_OrthographicSize(w2, h2);
    return bp::make_tuple( w2, h2 );
}

struct kbutton_t_wrapper : kbutton_t, bp::wrapper< kbutton_t > {

    kbutton_t_wrapper(kbutton_t const & arg )
    : kbutton_t( arg )
      , bp::wrapper< kbutton_t >(){
        // copy constructor
        
    }

    kbutton_t_wrapper()
    : kbutton_t()
      , bp::wrapper< kbutton_t >(){
        // null constructor
        
    }

    static pyplusplus::containers::static_sized::array_1_t< int, 2>
    pyplusplus_down_wrapper( ::kbutton_t & inst ){
        return pyplusplus::containers::static_sized::array_1_t< int, 2>( inst.down );
    }

};

CInput *wrap_Input()
{
	return (CInput *)::input;
}

BOOST_PYTHON_MODULE(_input){
    bp::docstring_options doc_options( true, true, false );

    bp::enum_< ButtonCode_t>("ButtonCode_t")
        .value("BUTTON_CODE_INVALID", BUTTON_CODE_INVALID)
        .value("BUTTON_CODE_NONE", BUTTON_CODE_NONE)
        .value("KEY_FIRST", KEY_FIRST)
        .value("KEY_NONE", KEY_NONE)
        .value("KEY_0", KEY_0)
        .value("KEY_1", KEY_1)
        .value("KEY_2", KEY_2)
        .value("KEY_3", KEY_3)
        .value("KEY_4", KEY_4)
        .value("KEY_5", KEY_5)
        .value("KEY_6", KEY_6)
        .value("KEY_7", KEY_7)
        .value("KEY_8", KEY_8)
        .value("KEY_9", KEY_9)
        .value("KEY_A", KEY_A)
        .value("KEY_B", KEY_B)
        .value("KEY_C", KEY_C)
        .value("KEY_D", KEY_D)
        .value("KEY_E", KEY_E)
        .value("KEY_F", KEY_F)
        .value("KEY_G", KEY_G)
        .value("KEY_H", KEY_H)
        .value("KEY_I", KEY_I)
        .value("KEY_J", KEY_J)
        .value("KEY_K", KEY_K)
        .value("KEY_L", KEY_L)
        .value("KEY_M", KEY_M)
        .value("KEY_N", KEY_N)
        .value("KEY_O", KEY_O)
        .value("KEY_P", KEY_P)
        .value("KEY_Q", KEY_Q)
        .value("KEY_R", KEY_R)
        .value("KEY_S", KEY_S)
        .value("KEY_T", KEY_T)
        .value("KEY_U", KEY_U)
        .value("KEY_V", KEY_V)
        .value("KEY_W", KEY_W)
        .value("KEY_X", KEY_X)
        .value("KEY_Y", KEY_Y)
        .value("KEY_Z", KEY_Z)
        .value("KEY_PAD_0", KEY_PAD_0)
        .value("KEY_PAD_1", KEY_PAD_1)
        .value("KEY_PAD_2", KEY_PAD_2)
        .value("KEY_PAD_3", KEY_PAD_3)
        .value("KEY_PAD_4", KEY_PAD_4)
        .value("KEY_PAD_5", KEY_PAD_5)
        .value("KEY_PAD_6", KEY_PAD_6)
        .value("KEY_PAD_7", KEY_PAD_7)
        .value("KEY_PAD_8", KEY_PAD_8)
        .value("KEY_PAD_9", KEY_PAD_9)
        .value("KEY_PAD_DIVIDE", KEY_PAD_DIVIDE)
        .value("KEY_PAD_MULTIPLY", KEY_PAD_MULTIPLY)
        .value("KEY_PAD_MINUS", KEY_PAD_MINUS)
        .value("KEY_PAD_PLUS", KEY_PAD_PLUS)
        .value("KEY_PAD_ENTER", KEY_PAD_ENTER)
        .value("KEY_PAD_DECIMAL", KEY_PAD_DECIMAL)
        .value("KEY_LBRACKET", KEY_LBRACKET)
        .value("KEY_RBRACKET", KEY_RBRACKET)
        .value("KEY_SEMICOLON", KEY_SEMICOLON)
        .value("KEY_APOSTROPHE", KEY_APOSTROPHE)
        .value("KEY_BACKQUOTE", KEY_BACKQUOTE)
        .value("KEY_COMMA", KEY_COMMA)
        .value("KEY_PERIOD", KEY_PERIOD)
        .value("KEY_SLASH", KEY_SLASH)
        .value("KEY_BACKSLASH", KEY_BACKSLASH)
        .value("KEY_MINUS", KEY_MINUS)
        .value("KEY_EQUAL", KEY_EQUAL)
        .value("KEY_ENTER", KEY_ENTER)
        .value("KEY_SPACE", KEY_SPACE)
        .value("KEY_BACKSPACE", KEY_BACKSPACE)
        .value("KEY_TAB", KEY_TAB)
        .value("KEY_CAPSLOCK", KEY_CAPSLOCK)
        .value("KEY_NUMLOCK", KEY_NUMLOCK)
        .value("KEY_ESCAPE", KEY_ESCAPE)
        .value("KEY_SCROLLLOCK", KEY_SCROLLLOCK)
        .value("KEY_INSERT", KEY_INSERT)
        .value("KEY_DELETE", KEY_DELETE)
        .value("KEY_HOME", KEY_HOME)
        .value("KEY_END", KEY_END)
        .value("KEY_PAGEUP", KEY_PAGEUP)
        .value("KEY_PAGEDOWN", KEY_PAGEDOWN)
        .value("KEY_BREAK", KEY_BREAK)
        .value("KEY_LSHIFT", KEY_LSHIFT)
        .value("KEY_RSHIFT", KEY_RSHIFT)
        .value("KEY_LALT", KEY_LALT)
        .value("KEY_RALT", KEY_RALT)
        .value("KEY_LCONTROL", KEY_LCONTROL)
        .value("KEY_RCONTROL", KEY_RCONTROL)
        .value("KEY_LWIN", KEY_LWIN)
        .value("KEY_RWIN", KEY_RWIN)
        .value("KEY_APP", KEY_APP)
        .value("KEY_UP", KEY_UP)
        .value("KEY_LEFT", KEY_LEFT)
        .value("KEY_DOWN", KEY_DOWN)
        .value("KEY_RIGHT", KEY_RIGHT)
        .value("KEY_F1", KEY_F1)
        .value("KEY_F2", KEY_F2)
        .value("KEY_F3", KEY_F3)
        .value("KEY_F4", KEY_F4)
        .value("KEY_F5", KEY_F5)
        .value("KEY_F6", KEY_F6)
        .value("KEY_F7", KEY_F7)
        .value("KEY_F8", KEY_F8)
        .value("KEY_F9", KEY_F9)
        .value("KEY_F10", KEY_F10)
        .value("KEY_F11", KEY_F11)
        .value("KEY_F12", KEY_F12)
        .value("KEY_CAPSLOCKTOGGLE", KEY_CAPSLOCKTOGGLE)
        .value("KEY_NUMLOCKTOGGLE", KEY_NUMLOCKTOGGLE)
        .value("KEY_SCROLLLOCKTOGGLE", KEY_SCROLLLOCKTOGGLE)
        .value("KEY_LAST", KEY_LAST)
        .value("KEY_COUNT", KEY_COUNT)
        .value("MOUSE_FIRST", MOUSE_FIRST)
        .value("MOUSE_LEFT", MOUSE_LEFT)
        .value("MOUSE_RIGHT", MOUSE_RIGHT)
        .value("MOUSE_MIDDLE", MOUSE_MIDDLE)
        .value("MOUSE_4", MOUSE_4)
        .value("MOUSE_5", MOUSE_5)
        .value("MOUSE_WHEEL_UP", MOUSE_WHEEL_UP)
        .value("MOUSE_WHEEL_DOWN", MOUSE_WHEEL_DOWN)
        .value("MOUSE_LAST", MOUSE_LAST)
        .value("MOUSE_COUNT", MOUSE_COUNT)
        .value("JOYSTICK_FIRST", JOYSTICK_FIRST)
        .value("JOYSTICK_FIRST_BUTTON", JOYSTICK_FIRST_BUTTON)
        .value("JOYSTICK_LAST_BUTTON", JOYSTICK_LAST_BUTTON)
        .value("JOYSTICK_FIRST_POV_BUTTON", JOYSTICK_FIRST_POV_BUTTON)
        .value("JOYSTICK_LAST_POV_BUTTON", JOYSTICK_LAST_POV_BUTTON)
        .value("JOYSTICK_FIRST_AXIS_BUTTON", JOYSTICK_FIRST_AXIS_BUTTON)
        .value("JOYSTICK_LAST_AXIS_BUTTON", JOYSTICK_LAST_AXIS_BUTTON)
        .value("JOYSTICK_LAST", JOYSTICK_LAST)
        .value("NOVINT_FIRST", NOVINT_FIRST)
        .value("NOVINT_LOGO_0", NOVINT_LOGO_0)
        .value("NOVINT_TRIANGLE_0", NOVINT_TRIANGLE_0)
        .value("NOVINT_BOLT_0", NOVINT_BOLT_0)
        .value("NOVINT_PLUS_0", NOVINT_PLUS_0)
        .value("NOVINT_LOGO_1", NOVINT_LOGO_1)
        .value("NOVINT_TRIANGLE_1", NOVINT_TRIANGLE_1)
        .value("NOVINT_BOLT_1", NOVINT_BOLT_1)
        .value("NOVINT_PLUS_1", NOVINT_PLUS_1)
        .value("NOVINT_LAST", NOVINT_LAST)
        .value("BUTTON_CODE_LAST", BUTTON_CODE_LAST)
        .value("BUTTON_CODE_COUNT", BUTTON_CODE_COUNT)
        .value("KEY_XBUTTON_UP", KEY_XBUTTON_UP)
        .value("KEY_XBUTTON_RIGHT", KEY_XBUTTON_RIGHT)
        .value("KEY_XBUTTON_DOWN", KEY_XBUTTON_DOWN)
        .value("KEY_XBUTTON_LEFT", KEY_XBUTTON_LEFT)
        .value("KEY_XBUTTON_A", KEY_XBUTTON_A)
        .value("KEY_XBUTTON_B", KEY_XBUTTON_B)
        .value("KEY_XBUTTON_X", KEY_XBUTTON_X)
        .value("KEY_XBUTTON_Y", KEY_XBUTTON_Y)
        .value("KEY_XBUTTON_LEFT_SHOULDER", KEY_XBUTTON_LEFT_SHOULDER)
        .value("KEY_XBUTTON_RIGHT_SHOULDER", KEY_XBUTTON_RIGHT_SHOULDER)
        .value("KEY_XBUTTON_BACK", KEY_XBUTTON_BACK)
        .value("KEY_XBUTTON_START", KEY_XBUTTON_START)
        .value("KEY_XBUTTON_STICK1", KEY_XBUTTON_STICK1)
        .value("KEY_XBUTTON_STICK2", KEY_XBUTTON_STICK2)
        .value("KEY_XSTICK1_RIGHT", KEY_XSTICK1_RIGHT)
        .value("KEY_XSTICK1_LEFT", KEY_XSTICK1_LEFT)
        .value("KEY_XSTICK1_DOWN", KEY_XSTICK1_DOWN)
        .value("KEY_XSTICK1_UP", KEY_XSTICK1_UP)
        .value("KEY_XBUTTON_LTRIGGER", KEY_XBUTTON_LTRIGGER)
        .value("KEY_XBUTTON_RTRIGGER", KEY_XBUTTON_RTRIGGER)
        .value("KEY_XSTICK2_RIGHT", KEY_XSTICK2_RIGHT)
        .value("KEY_XSTICK2_LEFT", KEY_XSTICK2_LEFT)
        .value("KEY_XSTICK2_DOWN", KEY_XSTICK2_DOWN)
        .value("KEY_XSTICK2_UP", KEY_XSTICK2_UP)
        .export_values()
        ;

    bp::class_< CInput, boost::noncopyable >( "CInput", bp::no_init )    
        .def( bp::init< >() )    
        .def( 
            "AccumulateMouse"
            , (void ( ::CInput::* )(  ))( &::CInput::AccumulateMouse ) )    
        .def( 
            "ActivateMouse"
            , (void ( ::CInput::* )(  ))( &::CInput::ActivateMouse ) )    
        .def( 
            "AddIKGroundContactInfo"
            , (void ( ::CInput::* )( int,float,float ))( &::CInput::AddIKGroundContactInfo )
            , ( bp::arg("entindex"), bp::arg("minheight"), bp::arg("maxheight") ) )    
        .def( 
            "CAM_CameraThirdThink"
            , (void ( ::CInput::* )(  ))( &::CInput::CAM_CameraThirdThink ) )    
        .def( 
            "CAM_CapPitch"
            , (float ( ::CInput::* )( float )const)( &::CInput::CAM_CapPitch )
            , ( bp::arg("fVal") ) )    
        .def( 
            "CAM_CapYaw"
            , (float ( ::CInput::* )( float )const)( &::CInput::CAM_CapYaw )
            , ( bp::arg("fVal") ) )    
        .def( 
            "CAM_EndDistance"
            , (void ( ::CInput::* )(  ))( &::CInput::CAM_EndDistance ) )    
        .def( 
            "CAM_EndMouseMove"
            , (void ( ::CInput::* )(  ))( &::CInput::CAM_EndMouseMove ) )    
        .def( 
            "CAM_InterceptingMouse"
            , (int ( ::CInput::* )(  ))( &::CInput::CAM_InterceptingMouse ) )    
        .def( 
            "CAM_IsOrthographic"
            , (bool ( ::CInput::* )(  )const)( &::CInput::CAM_IsOrthographic ) )    
        .def( 
            "CAM_IsThirdPerson"
            , (int ( ::CInput::* )(  ))( &::CInput::CAM_IsThirdPerson ) )    
        .def( 
            "CAM_OrthographicSize"
            , (boost::python::tuple (*)( ::CInput const & ))( &CAM_OrthographicSize_8e8117cefaa05e9e21a2c25c96813d09 )
            , ( bp::arg("inst") ) )    
        .def( 
            "CAM_SetCameraThirdData"
            , (void ( ::CInput::* )( ::CameraThirdData_t *,::QAngle const & ))( &::CInput::CAM_SetCameraThirdData )
            , ( bp::arg("pCameraData"), bp::arg("vecCameraOffset") ) )    
        .def( 
            "CAM_StartDistance"
            , (void ( ::CInput::* )(  ))( &::CInput::CAM_StartDistance ) )    
        .def( 
            "CAM_StartMouseMove"
            , (void ( ::CInput::* )(  ))( &::CInput::CAM_StartMouseMove ) )    
        .def( 
            "CAM_Think"
            , (void ( ::CInput::* )(  ))( &::CInput::CAM_Think ) )    
        .def( 
            "CAM_ToFirstPerson"
            , (void ( ::CInput::* )(  ))( &::CInput::CAM_ToFirstPerson ) )    
        .def( 
            "CAM_ToOrthographic"
            , (void ( ::CInput::* )(  ))( &::CInput::CAM_ToOrthographic ) )    
        .def( 
            "CAM_ToThirdPerson"
            , (void ( ::CInput::* )(  ))( &::CInput::CAM_ToThirdPerson ) )    
        .def( 
            "ClearInputButton"
            , (void ( ::CInput::* )( int ))( &::CInput::ClearInputButton )
            , ( bp::arg("bits") ) )    
        .def( 
            "ClearStates"
            , (void ( ::CInput::* )(  ))( &::CInput::ClearStates ) )    
        .def( 
            "ControllerCommands"
            , (void ( ::CInput::* )(  ))( &::CInput::ControllerCommands ) )    
        .def( 
            "CreateMove"
            , (void ( ::CInput::* )( int,float,bool ))( &::CInput::CreateMove )
            , ( bp::arg("sequence_number"), bp::arg("input_sample_frametime"), bp::arg("active") ) )    
        .def( 
            "DeactivateMouse"
            , (void ( ::CInput::* )(  ))( &::CInput::DeactivateMouse ) )    
        .def( 
            "DecodeUserCmdFromBuffer"
            , (void ( ::CInput::* )( ::bf_read &,int ))( &::CInput::DecodeUserCmdFromBuffer )
            , ( bp::arg("buf"), bp::arg("slot") ) )    
        .def( 
            "EnableJoystickMode"
            , (bool ( ::CInput::* )(  ))( &::CInput::EnableJoystickMode ) )    
        .def( 
            "EncodeUserCmdToBuffer"
            , (void ( ::CInput::* )( ::bf_write &,int ))( &::CInput::EncodeUserCmdToBuffer )
            , ( bp::arg("buf"), bp::arg("slot") ) )    
        .def( 
            "ExtraMouseSample"
            , (void ( ::CInput::* )( float,bool ))( &::CInput::ExtraMouseSample )
            , ( bp::arg("frametime"), bp::arg("active") ) )    
        .def( 
            "FindKey"
            , (::kbutton_t * ( ::CInput::* )( char const * ))( &::CInput::FindKey )
            , ( bp::arg("name") )
            , bp::return_value_policy< bp::manage_new_object >() )    
        .def( 
            "GetButtonBits"
            , (int ( ::CInput::* )( int ))( &::CInput::GetButtonBits )
            , ( bp::arg("arg0") ) )    
        .def( 
            "GetFullscreenMousePos"
            , (void ( ::CInput::* )( int *,int *,int *,int * ))( &::CInput::GetFullscreenMousePos )
            , ( bp::arg("mx"), bp::arg("my"), bp::arg("unclampedx")=bp::object(), bp::arg("unclampedy")=bp::object() ) )    
        .def( 
            "GetLastForwardMove"
            , (float ( ::CInput::* )(  ))( &::CInput::GetLastForwardMove ) )    
        .def( 
            "GetLookSpring"
            , (float ( ::CInput::* )(  ))( &::CInput::GetLookSpring ) )    
        .def( 
            "GetUserCmd"
            , (::CUserCmd * ( ::CInput::* )( int ))( &::CInput::GetUserCmd )
            , ( bp::arg("sequence_number") )
            , bp::return_value_policy< bp::reference_existing_object >() )    
        .def( 
            "IN_SetSampleTime"
            , (void ( ::CInput::* )( float ))( &::CInput::IN_SetSampleTime )
            , ( bp::arg("frametime") ) )    
        .def( 
            "Init_All"
            , (void ( ::CInput::* )(  ))( &::CInput::Init_All ) )    
        .def( 
            "Joystick_Advanced"
            , (void ( ::CInput::* )(  ))( &::CInput::Joystick_Advanced ) )    
        .def( 
            "Joystick_GetForward"
            , (float ( ::CInput::* )(  ))( &::CInput::Joystick_GetForward ) )    
        .def( 
            "Joystick_GetPitch"
            , (float ( ::CInput::* )(  ))( &::CInput::Joystick_GetPitch ) )    
        .def( 
            "Joystick_GetSide"
            , (float ( ::CInput::* )(  ))( &::CInput::Joystick_GetSide ) )    
        .def( 
            "Joystick_GetYaw"
            , (float ( ::CInput::* )(  ))( &::CInput::Joystick_GetYaw ) )    
        .def( 
            "Joystick_SetSampleTime"
            , (void ( ::CInput::* )( float ))( &::CInput::Joystick_SetSampleTime )
            , ( bp::arg("frametime") ) )    
        .def( 
            "KeyEvent"
            , (int ( ::CInput::* )( int,::ButtonCode_t,char const * ))( &::CInput::KeyEvent )
            , ( bp::arg("down"), bp::arg("keynum"), bp::arg("pszCurrentBinding") ) )    
        .def( 
            "KeyState"
            , (float ( ::CInput::* )( ::kbutton_t * ))( &::CInput::KeyState )
            , ( bp::arg("key") ) )    
        .def( 
            "LevelInit"
            , (void ( ::CInput::* )(  ))( &::CInput::LevelInit ) )    
        .def( 
            "MakeWeaponSelection"
            , (void ( ::CInput::* )( ::C_BaseCombatWeapon * ))( &::CInput::MakeWeaponSelection )
            , ( bp::arg("weapon") ) )    
        .def( 
            "ResetMouse"
            , (void ( ::CInput::* )(  ))( &::CInput::ResetMouse ) )    
        .def( 
            "SetFullscreenMousePos"
            , (void ( ::CInput::* )( int,int ))( &::CInput::SetFullscreenMousePos )
            , ( bp::arg("mx"), bp::arg("my") ) )    
        .def( 
            "Shutdown_All"
            , (void ( ::CInput::* )(  ))( &::CInput::Shutdown_All ) )    
        .def( 
            "WriteUsercmdDeltaToBuffer"
            , (bool ( ::CInput::* )( ::bf_write *,int,int,bool ))( &::CInput::WriteUsercmdDeltaToBuffer )
            , ( bp::arg("buf"), bp::arg("from"), bp::arg("to"), bp::arg("isnewcommand") ) );

    bp::def( "input", wrap_Input, bp::return_value_policy<bp::reference_existing_object>() );

    { //::kbutton_t
        typedef bp::class_< kbutton_t_wrapper > kbutton_t_exposer_t;
        kbutton_t_exposer_t kbutton_t_exposer = kbutton_t_exposer_t( "kbutton_t" );
        bp::scope kbutton_t_scope( kbutton_t_exposer );
        pyplusplus::containers::static_sized::register_array_1< int, 2 >( "__array_1_int_2" );
        { //kbutton_t::down [variable], type=int [2]
        
            typedef pyplusplus::containers::static_sized::array_1_t< int, 2> ( *array_wrapper_creator )( ::kbutton_t & );
            
            kbutton_t_exposer.add_property( "down"
                , bp::make_function( array_wrapper_creator(&kbutton_t_wrapper::pyplusplus_down_wrapper)
                                    , bp::with_custodian_and_ward_postcall< 0, 1 >() ) );
        }
        kbutton_t_exposer.def_readwrite( "state", &kbutton_t::state );
    }
}
