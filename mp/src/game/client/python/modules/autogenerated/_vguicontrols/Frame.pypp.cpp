// This file has been generated by Py++.

#include "cbase.h"
#include "__convenience.pypp.hpp"
#include "__call_policies.pypp.hpp"
#include "cbase.h"
#include "vgui_controls/Panel.h"
#include "vgui_controls/AnimationController.h"
#include "vgui_controls/EditablePanel.h"
#include "vgui_controls/AnalogBar.h"
#include "vgui_controls/Image.h"
#include "vgui_controls/TextImage.h"
#include "vgui_controls/ScrollBar.h"
#include "vgui_controls/ScrollBarSlider.h"
#include "vgui_controls/Menu.h"
#include "vgui_controls/MenuButton.h"
#include "vgui_controls/Frame.h"
#include "vgui_controls/TextEntry.h"
#include "vgui_controls/RichText.h"
#include "vgui_controls/Tooltip.h"
#include "vgui/IBorder.h"
#include "vgui_bitmapimage.h"
#include "vgui_avatarimage.h"
#include "srcpy_vgui.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "Frame.pypp.hpp"

namespace bp = boost::python;

struct Frame_wrapper : vgui::Frame, bp::wrapper< vgui::Frame > {

    Frame_wrapper(::vgui::Panel * parent, char const * panelName, bool showTaskbarIcon=true, bool bPopup=true )
    : vgui::Frame( parent, panelName, showTaskbarIcon, bPopup )
      , bp::wrapper< vgui::Frame >(){
        // constructor
    	g_PythonPanelCount++;
    }

    virtual void Activate(  ) {
        PY_OVERRIDE_CHECK( vgui::Frame, Activate )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, Activate )
        bp::override func_Activate = this->get_override( "Activate" );
        if( func_Activate.ptr() != Py_None )
            try {
                func_Activate(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::Activate(  );
            }
        else
            this->vgui::Frame::Activate(  );
    }
    
    void default_Activate(  ) {
        vgui::Frame::Activate( );
    }

    virtual void ActivateMinimized(  ) {
        PY_OVERRIDE_CHECK( vgui::Frame, ActivateMinimized )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, ActivateMinimized )
        bp::override func_ActivateMinimized = this->get_override( "ActivateMinimized" );
        if( func_ActivateMinimized.ptr() != Py_None )
            try {
                func_ActivateMinimized(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::ActivateMinimized(  );
            }
        else
            this->vgui::Frame::ActivateMinimized(  );
    }
    
    void default_ActivateMinimized(  ) {
        vgui::Frame::ActivateMinimized( );
    }

    virtual void ApplySchemeSettings( ::vgui::IScheme * pScheme ){
        PY_OVERRIDE_CHECK( vgui::Frame, ApplySchemeSettings )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, ApplySchemeSettings )
        bp::override func_ApplySchemeSettings = this->get_override( "ApplySchemeSettings" );
        if( func_ApplySchemeSettings.ptr() != Py_None )
            try {
                func_ApplySchemeSettings( boost::python::ptr(pScheme) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::ApplySchemeSettings( pScheme );
            }
        else
            this->vgui::Frame::ApplySchemeSettings( pScheme );
    }
    
    virtual void default_ApplySchemeSettings( ::vgui::IScheme * pScheme ){
        vgui::Frame::ApplySchemeSettings( pScheme );
    }

    void ApplySettings( ::KeyValues * inResourceData ){
        vgui::Frame::ApplySettings( inResourceData );
    }

    void ApplyUserConfigSettings( ::KeyValues * userConfig ){
        vgui::Frame::ApplyUserConfigSettings( userConfig );
    }

    virtual void Close(  ) {
        PY_OVERRIDE_CHECK( vgui::Frame, Close )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, Close )
        bp::override func_Close = this->get_override( "Close" );
        if( func_Close.ptr() != Py_None )
            try {
                func_Close(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::Close(  );
            }
        else
            this->vgui::Frame::Close(  );
    }
    
    void default_Close(  ) {
        vgui::Frame::Close( );
    }

    virtual void CloseModal(  ) {
        PY_OVERRIDE_CHECK( vgui::Frame, CloseModal )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, CloseModal )
        bp::override func_CloseModal = this->get_override( "CloseModal" );
        if( func_CloseModal.ptr() != Py_None )
            try {
                func_CloseModal(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::CloseModal(  );
            }
        else
            this->vgui::Frame::CloseModal(  );
    }
    
    void default_CloseModal(  ) {
        vgui::Frame::CloseModal( );
    }

    virtual void DoModal(  ) {
        PY_OVERRIDE_CHECK( vgui::Frame, DoModal )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, DoModal )
        bp::override func_DoModal = this->get_override( "DoModal" );
        if( func_DoModal.ptr() != Py_None )
            try {
                func_DoModal(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::DoModal(  );
            }
        else
            this->vgui::Frame::DoModal(  );
    }
    
    void default_DoModal(  ) {
        vgui::Frame::DoModal( );
    }

    virtual void FlashWindow(  ) {
        PY_OVERRIDE_CHECK( vgui::Frame, FlashWindow )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, FlashWindow )
        bp::override func_FlashWindow = this->get_override( "FlashWindow" );
        if( func_FlashWindow.ptr() != Py_None )
            try {
                func_FlashWindow(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::FlashWindow(  );
            }
        else
            this->vgui::Frame::FlashWindow(  );
    }
    
    void default_FlashWindow(  ) {
        vgui::Frame::FlashWindow( );
    }

    virtual void FlashWindowStop(  ) {
        PY_OVERRIDE_CHECK( vgui::Frame, FlashWindowStop )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, FlashWindowStop )
        bp::override func_FlashWindowStop = this->get_override( "FlashWindowStop" );
        if( func_FlashWindowStop.ptr() != Py_None )
            try {
                func_FlashWindowStop(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::FlashWindowStop(  );
            }
        else
            this->vgui::Frame::FlashWindowStop(  );
    }
    
    void default_FlashWindowStop(  ) {
        vgui::Frame::FlashWindowStop( );
    }

    void GetClientArea( int & x, int & y, int & wide, int & tall ){
        vgui::Frame::GetClientArea( x, y, wide, tall );
    }

    virtual bool GetDefaultScreenPosition( int & x, int & y, int & wide, int & tall ){
        PY_OVERRIDE_CHECK( vgui::Frame, GetDefaultScreenPosition )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, GetDefaultScreenPosition )
        bp::override func_GetDefaultScreenPosition = this->get_override( "GetDefaultScreenPosition" );
        if( func_GetDefaultScreenPosition.ptr() != Py_None )
            try {
                return func_GetDefaultScreenPosition( x, y, wide, tall );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                return this->vgui::Frame::GetDefaultScreenPosition( x, y, wide, tall );
            }
        else
            return this->vgui::Frame::GetDefaultScreenPosition( x, y, wide, tall );
    }
    
    virtual bool default_GetDefaultScreenPosition( int & x, int & y, int & wide, int & tall ){
        return vgui::Frame::GetDefaultScreenPosition( x, y, wide, tall );
    }

    char const * GetDescription(  ){
        return vgui::Frame::GetDescription(  );
    }

    void GetSettings( ::KeyValues * outResourceData ){
        vgui::Frame::GetSettings( outResourceData );
    }

    void GetUserConfigSettings( ::KeyValues * userConfig ){
        vgui::Frame::GetUserConfigSettings( userConfig );
    }

    bool HasUserConfigSettings(  ){
        return vgui::Frame::HasUserConfigSettings(  );
    }

    virtual void OnChildAdded( ::vgui::VPANEL child ){
        PY_OVERRIDE_CHECK( vgui::Frame, OnChildAdded )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, OnChildAdded )
        bp::override func_OnChildAdded = this->get_override( "OnChildAdded" );
        if( func_OnChildAdded.ptr() != Py_None )
            try {
                func_OnChildAdded( child );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::OnChildAdded( child );
            }
        else
            this->vgui::Frame::OnChildAdded( child );
    }
    
    virtual void default_OnChildAdded( ::vgui::VPANEL child ){
        vgui::Frame::OnChildAdded( child );
    }

    virtual void OnClose(  ){
        PY_OVERRIDE_CHECK( vgui::Frame, OnClose )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, OnClose )
        bp::override func_OnClose = this->get_override( "OnClose" );
        if( func_OnClose.ptr() != Py_None )
            try {
                func_OnClose(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::OnClose(  );
            }
        else
            this->vgui::Frame::OnClose(  );
    }
    
    virtual void default_OnClose(  ){
        vgui::Frame::OnClose( );
    }

    virtual void OnCloseFrameButtonPressed(  ){
        PY_OVERRIDE_CHECK( vgui::Frame, OnCloseFrameButtonPressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, OnCloseFrameButtonPressed )
        bp::override func_OnCloseFrameButtonPressed = this->get_override( "OnCloseFrameButtonPressed" );
        if( func_OnCloseFrameButtonPressed.ptr() != Py_None )
            try {
                func_OnCloseFrameButtonPressed(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::OnCloseFrameButtonPressed(  );
            }
        else
            this->vgui::Frame::OnCloseFrameButtonPressed(  );
    }
    
    virtual void default_OnCloseFrameButtonPressed(  ){
        vgui::Frame::OnCloseFrameButtonPressed( );
    }

    virtual void OnCommand( char const * command ) {
        PY_OVERRIDE_CHECK( vgui::Frame, OnCommand )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, OnCommand )
        bp::override func_OnCommand = this->get_override( "OnCommand" );
        if( func_OnCommand.ptr() != Py_None )
            try {
                func_OnCommand( command );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::OnCommand( command );
            }
        else
            this->vgui::Frame::OnCommand( command );
    }
    
    void default_OnCommand( char const * command ) {
        vgui::Frame::OnCommand( command );
    }

    virtual void OnFinishedClose(  ){
        PY_OVERRIDE_CHECK( vgui::Frame, OnFinishedClose )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, OnFinishedClose )
        bp::override func_OnFinishedClose = this->get_override( "OnFinishedClose" );
        if( func_OnFinishedClose.ptr() != Py_None )
            try {
                func_OnFinishedClose(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::OnFinishedClose(  );
            }
        else
            this->vgui::Frame::OnFinishedClose(  );
    }
    
    virtual void default_OnFinishedClose(  ){
        vgui::Frame::OnFinishedClose( );
    }

    virtual void OnKeyCodeReleased( ::vgui::KeyCode code ){
        PY_OVERRIDE_CHECK( vgui::Frame, OnKeyCodeReleased )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, OnKeyCodeReleased )
        bp::override func_OnKeyCodeReleased = this->get_override( "OnKeyCodeReleased" );
        if( func_OnKeyCodeReleased.ptr() != Py_None )
            try {
                func_OnKeyCodeReleased( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::OnKeyCodeReleased( code );
            }
        else
            this->vgui::Frame::OnKeyCodeReleased( code );
    }
    
    virtual void default_OnKeyCodeReleased( ::vgui::KeyCode code ){
        vgui::Frame::OnKeyCodeReleased( code );
    }

    virtual void OnKeyCodeTyped( ::vgui::KeyCode code ){
        PY_OVERRIDE_CHECK( vgui::Frame, OnKeyCodeTyped )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, OnKeyCodeTyped )
        bp::override func_OnKeyCodeTyped = this->get_override( "OnKeyCodeTyped" );
        if( func_OnKeyCodeTyped.ptr() != Py_None )
            try {
                func_OnKeyCodeTyped( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::OnKeyCodeTyped( code );
            }
        else
            this->vgui::Frame::OnKeyCodeTyped( code );
    }
    
    virtual void default_OnKeyCodeTyped( ::vgui::KeyCode code ){
        vgui::Frame::OnKeyCodeTyped( code );
    }

    virtual void OnKeyFocusTicked(  ){
        PY_OVERRIDE_CHECK( vgui::Frame, OnKeyFocusTicked )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, OnKeyFocusTicked )
        bp::override func_OnKeyFocusTicked = this->get_override( "OnKeyFocusTicked" );
        if( func_OnKeyFocusTicked.ptr() != Py_None )
            try {
                func_OnKeyFocusTicked(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::OnKeyFocusTicked(  );
            }
        else
            this->vgui::Frame::OnKeyFocusTicked(  );
    }
    
    virtual void default_OnKeyFocusTicked(  ){
        vgui::Frame::OnKeyFocusTicked( );
    }

    virtual void OnMinimize(  ){
        PY_OVERRIDE_CHECK( vgui::Frame, OnMinimize )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, OnMinimize )
        bp::override func_OnMinimize = this->get_override( "OnMinimize" );
        if( func_OnMinimize.ptr() != Py_None )
            try {
                func_OnMinimize(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::OnMinimize(  );
            }
        else
            this->vgui::Frame::OnMinimize(  );
    }
    
    virtual void default_OnMinimize(  ){
        vgui::Frame::OnMinimize( );
    }

    virtual void OnMinimizeToSysTray(  ){
        PY_OVERRIDE_CHECK( vgui::Frame, OnMinimizeToSysTray )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, OnMinimizeToSysTray )
        bp::override func_OnMinimizeToSysTray = this->get_override( "OnMinimizeToSysTray" );
        if( func_OnMinimizeToSysTray.ptr() != Py_None )
            try {
                func_OnMinimizeToSysTray(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::OnMinimizeToSysTray(  );
            }
        else
            this->vgui::Frame::OnMinimizeToSysTray(  );
    }
    
    virtual void default_OnMinimizeToSysTray(  ){
        vgui::Frame::OnMinimizeToSysTray( );
    }

    virtual void OnMousePressed( ::vgui::MouseCode code ){
        PY_OVERRIDE_CHECK( vgui::Frame, OnMousePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, OnMousePressed )
        bp::override func_OnMousePressed = this->get_override( "OnMousePressed" );
        if( func_OnMousePressed.ptr() != Py_None )
            try {
                func_OnMousePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::OnMousePressed( code );
            }
        else
            this->vgui::Frame::OnMousePressed( code );
    }
    
    virtual void default_OnMousePressed( ::vgui::MouseCode code ){
        vgui::Frame::OnMousePressed( code );
    }

    virtual void OnScreenSizeChanged( int iOldWide, int iOldTall ){
        PY_OVERRIDE_CHECK( vgui::Frame, OnScreenSizeChanged )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, OnScreenSizeChanged )
        bp::override func_OnScreenSizeChanged = this->get_override( "OnScreenSizeChanged" );
        if( func_OnScreenSizeChanged.ptr() != Py_None )
            try {
                func_OnScreenSizeChanged( iOldWide, iOldTall );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::OnScreenSizeChanged( iOldWide, iOldTall );
            }
        else
            this->vgui::Frame::OnScreenSizeChanged( iOldWide, iOldTall );
    }
    
    virtual void default_OnScreenSizeChanged( int iOldWide, int iOldTall ){
        vgui::Frame::OnScreenSizeChanged( iOldWide, iOldTall );
    }

    virtual void OnThink(  ){
        PY_OVERRIDE_CHECK( vgui::Frame, OnThink )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, OnThink )
        bp::override func_OnThink = this->get_override( "OnThink" );
        if( func_OnThink.ptr() != Py_None )
            try {
                func_OnThink(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::OnThink(  );
            }
        else
            this->vgui::Frame::OnThink(  );
    }
    
    virtual void default_OnThink(  ){
        vgui::Frame::OnThink( );
    }

    virtual void PaintBackground(  ){
        PY_OVERRIDE_CHECK( vgui::Frame, PaintBackground )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, PaintBackground )
        bp::override func_PaintBackground = this->get_override( "PaintBackground" );
        if( func_PaintBackground.ptr() != Py_None )
            try {
                func_PaintBackground(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::PaintBackground(  );
            }
        else
            this->vgui::Frame::PaintBackground(  );
    }
    
    virtual void default_PaintBackground(  ){
        vgui::Frame::PaintBackground( );
    }

    virtual void PerformLayout(  ){
        PY_OVERRIDE_CHECK( vgui::Frame, PerformLayout )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, PerformLayout )
        bp::override func_PerformLayout = this->get_override( "PerformLayout" );
        if( func_PerformLayout.ptr() != Py_None )
            try {
                func_PerformLayout(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::PerformLayout(  );
            }
        else
            this->vgui::Frame::PerformLayout(  );
    }
    
    virtual void default_PerformLayout(  ){
        vgui::Frame::PerformLayout( );
    }

    virtual void SetClipToParent( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Frame, SetClipToParent )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, SetClipToParent )
        bp::override func_SetClipToParent = this->get_override( "SetClipToParent" );
        if( func_SetClipToParent.ptr() != Py_None )
            try {
                func_SetClipToParent( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::SetClipToParent( state );
            }
        else
            this->vgui::Frame::SetClipToParent( state );
    }
    
    void default_SetClipToParent( bool state ) {
        vgui::Frame::SetClipToParent( state );
    }

    virtual void SetCloseButtonVisible( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Frame, SetCloseButtonVisible )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, SetCloseButtonVisible )
        bp::override func_SetCloseButtonVisible = this->get_override( "SetCloseButtonVisible" );
        if( func_SetCloseButtonVisible.ptr() != Py_None )
            try {
                func_SetCloseButtonVisible( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::SetCloseButtonVisible( state );
            }
        else
            this->vgui::Frame::SetCloseButtonVisible( state );
    }
    
    void default_SetCloseButtonVisible( bool state ) {
        vgui::Frame::SetCloseButtonVisible( state );
    }

    virtual void SetMaximizeButtonVisible( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Frame, SetMaximizeButtonVisible )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, SetMaximizeButtonVisible )
        bp::override func_SetMaximizeButtonVisible = this->get_override( "SetMaximizeButtonVisible" );
        if( func_SetMaximizeButtonVisible.ptr() != Py_None )
            try {
                func_SetMaximizeButtonVisible( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::SetMaximizeButtonVisible( state );
            }
        else
            this->vgui::Frame::SetMaximizeButtonVisible( state );
    }
    
    void default_SetMaximizeButtonVisible( bool state ) {
        vgui::Frame::SetMaximizeButtonVisible( state );
    }

    virtual void SetMenuButtonVisible( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Frame, SetMenuButtonVisible )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, SetMenuButtonVisible )
        bp::override func_SetMenuButtonVisible = this->get_override( "SetMenuButtonVisible" );
        if( func_SetMenuButtonVisible.ptr() != Py_None )
            try {
                func_SetMenuButtonVisible( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::SetMenuButtonVisible( state );
            }
        else
            this->vgui::Frame::SetMenuButtonVisible( state );
    }
    
    void default_SetMenuButtonVisible( bool state ) {
        vgui::Frame::SetMenuButtonVisible( state );
    }

    virtual void SetMinimizeButtonVisible( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Frame, SetMinimizeButtonVisible )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, SetMinimizeButtonVisible )
        bp::override func_SetMinimizeButtonVisible = this->get_override( "SetMinimizeButtonVisible" );
        if( func_SetMinimizeButtonVisible.ptr() != Py_None )
            try {
                func_SetMinimizeButtonVisible( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::SetMinimizeButtonVisible( state );
            }
        else
            this->vgui::Frame::SetMinimizeButtonVisible( state );
    }
    
    void default_SetMinimizeButtonVisible( bool state ) {
        vgui::Frame::SetMinimizeButtonVisible( state );
    }

    virtual void SetMinimizeToSysTrayButtonVisible( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Frame, SetMinimizeToSysTrayButtonVisible )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, SetMinimizeToSysTrayButtonVisible )
        bp::override func_SetMinimizeToSysTrayButtonVisible = this->get_override( "SetMinimizeToSysTrayButtonVisible" );
        if( func_SetMinimizeToSysTrayButtonVisible.ptr() != Py_None )
            try {
                func_SetMinimizeToSysTrayButtonVisible( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::SetMinimizeToSysTrayButtonVisible( state );
            }
        else
            this->vgui::Frame::SetMinimizeToSysTrayButtonVisible( state );
    }
    
    void default_SetMinimizeToSysTrayButtonVisible( bool state ) {
        vgui::Frame::SetMinimizeToSysTrayButtonVisible( state );
    }

    virtual void SetMoveable( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Frame, SetMoveable )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, SetMoveable )
        bp::override func_SetMoveable = this->get_override( "SetMoveable" );
        if( func_SetMoveable.ptr() != Py_None )
            try {
                func_SetMoveable( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::SetMoveable( state );
            }
        else
            this->vgui::Frame::SetMoveable( state );
    }
    
    void default_SetMoveable( bool state ) {
        vgui::Frame::SetMoveable( state );
    }

    virtual void SetSizeable( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Frame, SetSizeable )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, SetSizeable )
        bp::override func_SetSizeable = this->get_override( "SetSizeable" );
        if( func_SetSizeable.ptr() != Py_None )
            try {
                func_SetSizeable( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::SetSizeable( state );
            }
        else
            this->vgui::Frame::SetSizeable( state );
    }
    
    void default_SetSizeable( bool state ) {
        vgui::Frame::SetSizeable( state );
    }

    virtual void SetSmallCaption( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Frame, SetSmallCaption )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, SetSmallCaption )
        bp::override func_SetSmallCaption = this->get_override( "SetSmallCaption" );
        if( func_SetSmallCaption.ptr() != Py_None )
            try {
                func_SetSmallCaption( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::SetSmallCaption( state );
            }
        else
            this->vgui::Frame::SetSmallCaption( state );
    }
    
    void default_SetSmallCaption( bool state ) {
        vgui::Frame::SetSmallCaption( state );
    }

    virtual void SetTitle( char const * title, bool surfaceTitle ) {
        PY_OVERRIDE_CHECK( vgui::Frame, SetTitle )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, SetTitle )
        bp::override func_SetTitle = this->get_override( "SetTitle" );
        if( func_SetTitle.ptr() != Py_None )
            try {
                func_SetTitle( title, surfaceTitle );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::SetTitle( title, surfaceTitle );
            }
        else
            this->vgui::Frame::SetTitle( title, surfaceTitle );
    }
    
    void default_SetTitle( char const * title, bool surfaceTitle ) {
        vgui::Frame::SetTitle( title, surfaceTitle );
    }

    virtual void SetTitle( wchar_t const * title, bool surfaceTitle ) {
        PY_OVERRIDE_CHECK( vgui::Frame, SetTitle )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, SetTitle )
        bp::override func_SetTitle = this->get_override( "SetTitle" );
        if( func_SetTitle.ptr() != Py_None )
            try {
                func_SetTitle( title, surfaceTitle );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::SetTitle( title, surfaceTitle );
            }
        else
            this->vgui::Frame::SetTitle( title, surfaceTitle );
    }
    
    void default_SetTitle( wchar_t const * title, bool surfaceTitle ) {
        vgui::Frame::SetTitle( title, surfaceTitle );
    }

    virtual void SetTitleBarVisible( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Frame, SetTitleBarVisible )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Frame, SetTitleBarVisible )
        bp::override func_SetTitleBarVisible = this->get_override( "SetTitleBarVisible" );
        if( func_SetTitleBarVisible.ptr() != Py_None )
            try {
                func_SetTitleBarVisible( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Frame::SetTitleBarVisible( state );
            }
        else
            this->vgui::Frame::SetTitleBarVisible( state );
    }
    
    void default_SetTitleBarVisible( bool state ) {
        vgui::Frame::SetTitleBarVisible( state );
    }

    void AddToOverridableColors( ::Color * pColor, char const * scriptname ){
        vgui::Panel::AddToOverridableColors( pColor, scriptname );
    }

    void ApplyOverridableColors(  ){
        vgui::Panel::ApplyOverridableColors(  );
    }

    void CreateDragData(  ){
        vgui::Panel::CreateDragData(  );
    }

    void DragDropStartDragging(  ){
        vgui::Panel::DragDropStartDragging(  );
    }

    ::vgui::Panel * GetNavActivatePanel(  ){
        return vgui::Panel::GetNavActivatePanel(  );
    }

    ::vgui::Panel * GetNavBackPanel(  ){
        return vgui::Panel::GetNavBackPanel(  );
    }

    ::vgui::Panel * GetNavDownPanel(  ){
        return vgui::Panel::GetNavDownPanel(  );
    }

    ::vgui::Panel * GetNavLeftPanel(  ){
        return vgui::Panel::GetNavLeftPanel(  );
    }

    ::vgui::Panel * GetNavRightPanel(  ){
        return vgui::Panel::GetNavRightPanel(  );
    }

    ::vgui::Panel * GetNavToRelayPanel(  ){
        return vgui::Panel::GetNavToRelayPanel(  );
    }

    ::vgui::Panel * GetNavUpPanel(  ){
        return vgui::Panel::GetNavUpPanel(  );
    }

    virtual void InvalidateLayout( bool layoutNow=false, bool reloadScheme=false ) {
        PY_OVERRIDE_CHECK( vgui::Panel, InvalidateLayout )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, InvalidateLayout )
        bp::override func_InvalidateLayout = this->get_override( "InvalidateLayout" );
        if( func_InvalidateLayout.ptr() != Py_None )
            try {
                func_InvalidateLayout( layoutNow, reloadScheme );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::InvalidateLayout( layoutNow, reloadScheme );
            }
        else
            this->vgui::Panel::InvalidateLayout( layoutNow, reloadScheme );
    }
    
    void default_InvalidateLayout( bool layoutNow=false, bool reloadScheme=false ) {
        vgui::Panel::InvalidateLayout( layoutNow, reloadScheme );
    }

    void OnChildSettingsApplied( ::KeyValues * pInResourceData, ::vgui::Panel * pChild ){
        vgui::Panel::OnChildSettingsApplied( pInResourceData, pChild );
    }

    void OnContinueDragging(  ){
        vgui::Panel::OnContinueDragging(  );
    }

    void OnCurrentDefaultButtonSet( ::vgui::VPANEL button ){
        vgui::EditablePanel::OnCurrentDefaultButtonSet( button );
    }

    virtual void OnCursorEntered(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnCursorEntered )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnCursorEntered )
        bp::override func_OnCursorEntered = this->get_override( "OnCursorEntered" );
        if( func_OnCursorEntered.ptr() != Py_None )
            try {
                func_OnCursorEntered(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnCursorEntered(  );
            }
        else
            this->vgui::Panel::OnCursorEntered(  );
    }
    
    void default_OnCursorEntered(  ) {
        vgui::Panel::OnCursorEntered( );
    }

    virtual void OnCursorExited(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnCursorExited )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnCursorExited )
        bp::override func_OnCursorExited = this->get_override( "OnCursorExited" );
        if( func_OnCursorExited.ptr() != Py_None )
            try {
                func_OnCursorExited(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnCursorExited(  );
            }
        else
            this->vgui::Panel::OnCursorExited(  );
    }
    
    void default_OnCursorExited(  ) {
        vgui::Panel::OnCursorExited( );
    }

    virtual void OnCursorMoved( int x, int y ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnCursorMoved )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnCursorMoved )
        bp::override func_OnCursorMoved = this->get_override( "OnCursorMoved" );
        if( func_OnCursorMoved.ptr() != Py_None )
            try {
                func_OnCursorMoved( x, y );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnCursorMoved( x, y );
            }
        else
            this->vgui::Panel::OnCursorMoved( x, y );
    }
    
    void default_OnCursorMoved( int x, int y ) {
        vgui::Panel::OnCursorMoved( x, y );
    }

    void OnDefaultButtonSet( ::vgui::VPANEL button ){
        vgui::EditablePanel::OnDefaultButtonSet( button );
    }

    void OnFindDefaultButton(  ){
        vgui::EditablePanel::OnFindDefaultButton(  );
    }

    void OnFinishDragging( bool mousereleased, ::vgui::MouseCode code, bool aborted=false ){
        vgui::Panel::OnFinishDragging( mousereleased, code, aborted );
    }

    virtual void OnKeyCodePressed( ::vgui::KeyCode code ) {
        PY_OVERRIDE_CHECK( vgui::EditablePanel, OnKeyCodePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::EditablePanel, OnKeyCodePressed )
        bp::override func_OnKeyCodePressed = this->get_override( "OnKeyCodePressed" );
        if( func_OnKeyCodePressed.ptr() != Py_None )
            try {
                func_OnKeyCodePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::EditablePanel::OnKeyCodePressed( code );
            }
        else
            this->vgui::EditablePanel::OnKeyCodePressed( code );
    }
    
    void default_OnKeyCodePressed( ::vgui::KeyCode code ) {
        vgui::EditablePanel::OnKeyCodePressed( code );
    }

    virtual void OnKillFocus(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnKillFocus )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnKillFocus )
        bp::override func_OnKillFocus = this->get_override( "OnKillFocus" );
        if( func_OnKillFocus.ptr() != Py_None )
            try {
                func_OnKillFocus(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnKillFocus(  );
            }
        else
            this->vgui::Panel::OnKillFocus(  );
    }
    
    void default_OnKillFocus(  ) {
        vgui::Panel::OnKillFocus( );
    }

    virtual void OnMouseCaptureLost(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMouseCaptureLost )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMouseCaptureLost )
        bp::override func_OnMouseCaptureLost = this->get_override( "OnMouseCaptureLost" );
        if( func_OnMouseCaptureLost.ptr() != Py_None )
            try {
                func_OnMouseCaptureLost(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMouseCaptureLost(  );
            }
        else
            this->vgui::Panel::OnMouseCaptureLost(  );
    }
    
    void default_OnMouseCaptureLost(  ) {
        vgui::Panel::OnMouseCaptureLost( );
    }

    virtual void OnMouseDoublePressed( ::vgui::MouseCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMouseDoublePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMouseDoublePressed )
        bp::override func_OnMouseDoublePressed = this->get_override( "OnMouseDoublePressed" );
        if( func_OnMouseDoublePressed.ptr() != Py_None )
            try {
                func_OnMouseDoublePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMouseDoublePressed( code );
            }
        else
            this->vgui::Panel::OnMouseDoublePressed( code );
    }
    
    void default_OnMouseDoublePressed( ::vgui::MouseCode code ) {
        vgui::Panel::OnMouseDoublePressed( code );
    }

    virtual void OnMouseFocusTicked(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMouseFocusTicked )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMouseFocusTicked )
        bp::override func_OnMouseFocusTicked = this->get_override( "OnMouseFocusTicked" );
        if( func_OnMouseFocusTicked.ptr() != Py_None )
            try {
                func_OnMouseFocusTicked(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMouseFocusTicked(  );
            }
        else
            this->vgui::Panel::OnMouseFocusTicked(  );
    }
    
    void default_OnMouseFocusTicked(  ) {
        vgui::Panel::OnMouseFocusTicked( );
    }

    virtual void OnMouseReleased( ::vgui::MouseCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMouseReleased )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMouseReleased )
        bp::override func_OnMouseReleased = this->get_override( "OnMouseReleased" );
        if( func_OnMouseReleased.ptr() != Py_None )
            try {
                func_OnMouseReleased( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMouseReleased( code );
            }
        else
            this->vgui::Panel::OnMouseReleased( code );
    }
    
    void default_OnMouseReleased( ::vgui::MouseCode code ) {
        vgui::Panel::OnMouseReleased( code );
    }

    virtual void OnMouseTriplePressed( ::vgui::MouseCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMouseTriplePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMouseTriplePressed )
        bp::override func_OnMouseTriplePressed = this->get_override( "OnMouseTriplePressed" );
        if( func_OnMouseTriplePressed.ptr() != Py_None )
            try {
                func_OnMouseTriplePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMouseTriplePressed( code );
            }
        else
            this->vgui::Panel::OnMouseTriplePressed( code );
    }
    
    void default_OnMouseTriplePressed( ::vgui::MouseCode code ) {
        vgui::Panel::OnMouseTriplePressed( code );
    }

    virtual void OnMouseWheeled( int delta ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMouseWheeled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMouseWheeled )
        bp::override func_OnMouseWheeled = this->get_override( "OnMouseWheeled" );
        if( func_OnMouseWheeled.ptr() != Py_None )
            try {
                func_OnMouseWheeled( delta );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMouseWheeled( delta );
            }
        else
            this->vgui::Panel::OnMouseWheeled( delta );
    }
    
    void default_OnMouseWheeled( int delta ) {
        vgui::Panel::OnMouseWheeled( delta );
    }

    virtual void OnRequestFocus( ::vgui::VPANEL subFocus, ::vgui::VPANEL defaultPanel ) {
        PY_OVERRIDE_CHECK( vgui::EditablePanel, OnRequestFocus )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::EditablePanel, OnRequestFocus )
        bp::override func_OnRequestFocus = this->get_override( "OnRequestFocus" );
        if( func_OnRequestFocus.ptr() != Py_None )
            try {
                func_OnRequestFocus( subFocus, defaultPanel );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::EditablePanel::OnRequestFocus( subFocus, defaultPanel );
            }
        else
            this->vgui::EditablePanel::OnRequestFocus( subFocus, defaultPanel );
    }
    
    void default_OnRequestFocus( ::vgui::VPANEL subFocus, ::vgui::VPANEL defaultPanel ) {
        vgui::EditablePanel::OnRequestFocus( subFocus, defaultPanel );
    }

    virtual void OnSetFocus(  ) {
        PY_OVERRIDE_CHECK( vgui::EditablePanel, OnSetFocus )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::EditablePanel, OnSetFocus )
        bp::override func_OnSetFocus = this->get_override( "OnSetFocus" );
        if( func_OnSetFocus.ptr() != Py_None )
            try {
                func_OnSetFocus(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::EditablePanel::OnSetFocus(  );
            }
        else
            this->vgui::EditablePanel::OnSetFocus(  );
    }
    
    void default_OnSetFocus(  ) {
        vgui::EditablePanel::OnSetFocus( );
    }

    virtual void OnSizeChanged( int wide, int tall ){
        PY_OVERRIDE_CHECK( vgui::EditablePanel, OnSizeChanged )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::EditablePanel, OnSizeChanged )
        bp::override func_OnSizeChanged = this->get_override( "OnSizeChanged" );
        if( func_OnSizeChanged.ptr() != Py_None )
            try {
                func_OnSizeChanged( wide, tall );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::EditablePanel::OnSizeChanged( wide, tall );
            }
        else
            this->vgui::EditablePanel::OnSizeChanged( wide, tall );
    }
    
    virtual void default_OnSizeChanged( int wide, int tall ){
        vgui::EditablePanel::OnSizeChanged( wide, tall );
    }

    void OnStartDragging(  ){
        vgui::Panel::OnStartDragging(  );
    }

    virtual void OnTick(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnTick )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnTick )
        bp::override func_OnTick = this->get_override( "OnTick" );
        if( func_OnTick.ptr() != Py_None )
            try {
                func_OnTick(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnTick(  );
            }
        else
            this->vgui::Panel::OnTick(  );
    }
    
    void default_OnTick(  ) {
        vgui::Panel::OnTick( );
    }

    virtual void Paint(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, Paint )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, Paint )
        bp::override func_Paint = this->get_override( "Paint" );
        if( func_Paint.ptr() != Py_None )
            try {
                func_Paint(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::Paint(  );
            }
        else
            this->vgui::Panel::Paint(  );
    }
    
    void default_Paint(  ) {
        vgui::Panel::Paint( );
    }

    virtual void PaintBuildOverlay(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, PaintBuildOverlay )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, PaintBuildOverlay )
        bp::override func_PaintBuildOverlay = this->get_override( "PaintBuildOverlay" );
        if( func_PaintBuildOverlay.ptr() != Py_None )
            try {
                func_PaintBuildOverlay(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::PaintBuildOverlay(  );
            }
        else
            this->vgui::Panel::PaintBuildOverlay(  );
    }
    
    void default_PaintBuildOverlay(  ) {
        vgui::Panel::PaintBuildOverlay( );
    }

    void PaintTraverse( bool Repaint, bool allowForce=true ){
        vgui::Panel::PaintTraverse( Repaint, allowForce );
    }

    virtual void PostChildPaint(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, PostChildPaint )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, PostChildPaint )
        bp::override func_PostChildPaint = this->get_override( "PostChildPaint" );
        if( func_PostChildPaint.ptr() != Py_None )
            try {
                func_PostChildPaint(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::PostChildPaint(  );
            }
        else
            this->vgui::Panel::PostChildPaint(  );
    }
    
    void default_PostChildPaint(  ) {
        vgui::Panel::PostChildPaint( );
    }

    virtual void SetBgColor( ::Color color ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetBgColor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetBgColor )
        bp::override func_SetBgColor = this->get_override( "SetBgColor" );
        if( func_SetBgColor.ptr() != Py_None )
            try {
                func_SetBgColor( color );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetBgColor( color );
            }
        else
            this->vgui::Panel::SetBgColor( color );
    }
    
    void default_SetBgColor( ::Color color ) {
        vgui::Panel::SetBgColor( color );
    }

    virtual void SetBorder( ::vgui::IBorder * border ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetBorder )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetBorder )
        bp::override func_SetBorder = this->get_override( "SetBorder" );
        if( func_SetBorder.ptr() != Py_None )
            try {
                func_SetBorder( boost::python::ptr(border) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetBorder( border );
            }
        else
            this->vgui::Panel::SetBorder( border );
    }
    
    void default_SetBorder( ::vgui::IBorder * border ) {
        vgui::Panel::SetBorder( border );
    }

    virtual void SetCursor( ::vgui::HCursor cursor ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetCursor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetCursor )
        bp::override func_SetCursor = this->get_override( "SetCursor" );
        if( func_SetCursor.ptr() != Py_None )
            try {
                func_SetCursor( cursor );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetCursor( cursor );
            }
        else
            this->vgui::Panel::SetCursor( cursor );
    }
    
    void default_SetCursor( ::vgui::HCursor cursor ) {
        vgui::Panel::SetCursor( cursor );
    }

    virtual void SetDragEnabled( bool enabled ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetDragEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetDragEnabled )
        bp::override func_SetDragEnabled = this->get_override( "SetDragEnabled" );
        if( func_SetDragEnabled.ptr() != Py_None )
            try {
                func_SetDragEnabled( enabled );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetDragEnabled( enabled );
            }
        else
            this->vgui::Panel::SetDragEnabled( enabled );
    }
    
    void default_SetDragEnabled( bool enabled ) {
        vgui::Panel::SetDragEnabled( enabled );
    }

    virtual void SetEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetEnabled )
        bp::override func_SetEnabled = this->get_override( "SetEnabled" );
        if( func_SetEnabled.ptr() != Py_None )
            try {
                func_SetEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetEnabled( state );
            }
        else
            this->vgui::Panel::SetEnabled( state );
    }
    
    void default_SetEnabled( bool state ) {
        vgui::Panel::SetEnabled( state );
    }

    virtual void SetFgColor( ::Color color ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetFgColor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetFgColor )
        bp::override func_SetFgColor = this->get_override( "SetFgColor" );
        if( func_SetFgColor.ptr() != Py_None )
            try {
                func_SetFgColor( color );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetFgColor( color );
            }
        else
            this->vgui::Panel::SetFgColor( color );
    }
    
    void default_SetFgColor( ::Color color ) {
        vgui::Panel::SetFgColor( color );
    }

    virtual void SetKeyBoardInputEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetKeyBoardInputEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetKeyBoardInputEnabled )
        bp::override func_SetKeyBoardInputEnabled = this->get_override( "SetKeyBoardInputEnabled" );
        if( func_SetKeyBoardInputEnabled.ptr() != Py_None )
            try {
                func_SetKeyBoardInputEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetKeyBoardInputEnabled( state );
            }
        else
            this->vgui::Panel::SetKeyBoardInputEnabled( state );
    }
    
    void default_SetKeyBoardInputEnabled( bool state ) {
        vgui::Panel::SetKeyBoardInputEnabled( state );
    }

    virtual void SetMouseInputEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetMouseInputEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetMouseInputEnabled )
        bp::override func_SetMouseInputEnabled = this->get_override( "SetMouseInputEnabled" );
        if( func_SetMouseInputEnabled.ptr() != Py_None )
            try {
                func_SetMouseInputEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetMouseInputEnabled( state );
            }
        else
            this->vgui::Panel::SetMouseInputEnabled( state );
    }
    
    void default_SetMouseInputEnabled( bool state ) {
        vgui::Panel::SetMouseInputEnabled( state );
    }

    void SetOverridableColor( ::Color * pColor, ::Color const & newColor ){
        vgui::Panel::SetOverridableColor( pColor, newColor );
    }

    virtual void SetPaintBackgroundEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintBackgroundEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintBackgroundEnabled )
        bp::override func_SetPaintBackgroundEnabled = this->get_override( "SetPaintBackgroundEnabled" );
        if( func_SetPaintBackgroundEnabled.ptr() != Py_None )
            try {
                func_SetPaintBackgroundEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintBackgroundEnabled( state );
            }
        else
            this->vgui::Panel::SetPaintBackgroundEnabled( state );
    }
    
    void default_SetPaintBackgroundEnabled( bool state ) {
        vgui::Panel::SetPaintBackgroundEnabled( state );
    }

    virtual void SetPaintBackgroundType( int type ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintBackgroundType )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintBackgroundType )
        bp::override func_SetPaintBackgroundType = this->get_override( "SetPaintBackgroundType" );
        if( func_SetPaintBackgroundType.ptr() != Py_None )
            try {
                func_SetPaintBackgroundType( type );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintBackgroundType( type );
            }
        else
            this->vgui::Panel::SetPaintBackgroundType( type );
    }
    
    void default_SetPaintBackgroundType( int type ) {
        vgui::Panel::SetPaintBackgroundType( type );
    }

    virtual void SetPaintBorderEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintBorderEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintBorderEnabled )
        bp::override func_SetPaintBorderEnabled = this->get_override( "SetPaintBorderEnabled" );
        if( func_SetPaintBorderEnabled.ptr() != Py_None )
            try {
                func_SetPaintBorderEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintBorderEnabled( state );
            }
        else
            this->vgui::Panel::SetPaintBorderEnabled( state );
    }
    
    void default_SetPaintBorderEnabled( bool state ) {
        vgui::Panel::SetPaintBorderEnabled( state );
    }

    virtual void SetPaintEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintEnabled )
        bp::override func_SetPaintEnabled = this->get_override( "SetPaintEnabled" );
        if( func_SetPaintEnabled.ptr() != Py_None )
            try {
                func_SetPaintEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintEnabled( state );
            }
        else
            this->vgui::Panel::SetPaintEnabled( state );
    }
    
    void default_SetPaintEnabled( bool state ) {
        vgui::Panel::SetPaintEnabled( state );
    }

    virtual void SetParent( ::vgui::Panel * newParent ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetParent )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetParent )
        bp::override func_SetParent = this->get_override( "SetParent" );
        if( func_SetParent.ptr() != Py_None )
            try {
                func_SetParent( boost::python::object(*newParent) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetParent( newParent );
            }
        else
            this->vgui::Panel::SetParent( newParent );
    }
    
    void default_SetParent( ::vgui::Panel * newParent ) {
        vgui::Panel::SetParent( newParent );
    }

    virtual void SetParent( ::vgui::VPANEL newParent ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetParent )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetParent )
        bp::override func_SetParent = this->get_override( "SetParent" );
        if( func_SetParent.ptr() != Py_None )
            try {
                func_SetParent( newParent );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetParent( newParent );
            }
        else
            this->vgui::Panel::SetParent( newParent );
    }
    
    void default_SetParent( ::vgui::VPANEL newParent ) {
        vgui::Panel::SetParent( newParent );
    }

    virtual void SetScheme( char const * tag ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetScheme )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetScheme )
        bp::override func_SetScheme = this->get_override( "SetScheme" );
        if( func_SetScheme.ptr() != Py_None )
            try {
                func_SetScheme( tag );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetScheme( tag );
            }
        else
            this->vgui::Panel::SetScheme( tag );
    }
    
    void default_SetScheme( char const * tag ) {
        vgui::Panel::SetScheme( tag );
    }

    virtual void SetScheme( ::vgui::HScheme scheme ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetScheme )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetScheme )
        bp::override func_SetScheme = this->get_override( "SetScheme" );
        if( func_SetScheme.ptr() != Py_None )
            try {
                func_SetScheme( scheme );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetScheme( scheme );
            }
        else
            this->vgui::Panel::SetScheme( scheme );
    }
    
    void default_SetScheme( ::vgui::HScheme scheme ) {
        vgui::Panel::SetScheme( scheme );
    }

    virtual void SetVisible( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetVisible )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetVisible )
        bp::override func_SetVisible = this->get_override( "SetVisible" );
        if( func_SetVisible.ptr() != Py_None )
            try {
                func_SetVisible( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetVisible( state );
            }
        else
            this->vgui::Panel::SetVisible( state );
    }
    
    void default_SetVisible( bool state ) {
        vgui::Panel::SetVisible( state );
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual bool IsPythonManaged() { return true; }

    ~Frame_wrapper( void ) { g_PythonPanelCount--; /*::PyDeletePanel( this, this );*/ }

};

void register_Frame_class(){

    bp::class_< Frame_wrapper, bp::bases< vgui::EditablePanel >, boost::noncopyable >( "Frame", bp::init< vgui::Panel *, char const *, bp::optional< bool, bool > >(( bp::arg("parent"), bp::arg("panelName"), bp::arg("showTaskbarIcon")=(bool)(true), bp::arg("bPopup")=(bool)(true) )) )    
        .def( 
            "Activate"
            , (void ( ::vgui::Frame::* )(  ))(&::vgui::Frame::Activate)
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::default_Activate) )    
        .def( 
            "ActivateMinimized"
            , (void ( ::vgui::Frame::* )(  ))(&::vgui::Frame::ActivateMinimized)
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::default_ActivateMinimized) )    
        .def( 
            "ApplySchemeSettings"
            , (void ( Frame_wrapper::* )( ::vgui::IScheme * ))(&Frame_wrapper::default_ApplySchemeSettings)
            , ( bp::arg("pScheme") ) )    
        .def( 
            "ApplySettings"
            , (void ( Frame_wrapper::* )( ::KeyValues * ))(&Frame_wrapper::ApplySettings)
            , ( bp::arg("inResourceData") ) )    
        .def( 
            "ApplyUserConfigSettings"
            , (void ( Frame_wrapper::* )( ::KeyValues * ))(&Frame_wrapper::ApplyUserConfigSettings)
            , ( bp::arg("userConfig") ) )    
        .def( 
            "CanChainKeysToParent"
            , (bool ( ::vgui::Frame::* )(  )const)( &::vgui::Frame::CanChainKeysToParent ) )    
        .def( 
            "Close"
            , (void ( ::vgui::Frame::* )(  ))(&::vgui::Frame::Close)
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::default_Close) )    
        .def( 
            "CloseModal"
            , (void ( ::vgui::Frame::* )(  ))(&::vgui::Frame::CloseModal)
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::default_CloseModal) )    
        .def( 
            "DisableFadeEffect"
            , (void ( ::vgui::Frame::* )(  ))( &::vgui::Frame::DisableFadeEffect ) )    
        .def( 
            "DoModal"
            , (void ( ::vgui::Frame::* )(  ))(&::vgui::Frame::DoModal)
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::default_DoModal) )    
        .def( 
            "FlashWindow"
            , (void ( ::vgui::Frame::* )(  ))(&::vgui::Frame::FlashWindow)
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::default_FlashWindow) )    
        .def( 
            "FlashWindowStop"
            , (void ( ::vgui::Frame::* )(  ))(&::vgui::Frame::FlashWindowStop)
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::default_FlashWindowStop) )    
        .def( 
            "GetBottomRightSize"
            , (int ( ::vgui::Frame::* )(  ))( &::vgui::Frame::GetBottomRightSize ) )    
        .def( 
            "GetCaptionHeight"
            , (int ( ::vgui::Frame::* )(  ))( &::vgui::Frame::GetCaptionHeight ) )    
        .def( 
            "GetClientArea"
            , (void ( Frame_wrapper::* )( int &,int &,int &,int & ))(&Frame_wrapper::GetClientArea)
            , ( bp::arg("x"), bp::arg("y"), bp::arg("wide"), bp::arg("tall") ) )    
        .def( 
            "GetClipToParent"
            , (bool ( ::vgui::Frame::* )(  )const)( &::vgui::Frame::GetClipToParent ) )    
        .def( 
            "GetCornerSize"
            , (int ( ::vgui::Frame::* )(  ))( &::vgui::Frame::GetCornerSize ) )    
        .def( 
            "GetDefaultScreenPosition"
            , (bool ( Frame_wrapper::* )( int &,int &,int &,int & ))(&Frame_wrapper::default_GetDefaultScreenPosition)
            , ( bp::arg("x"), bp::arg("y"), bp::arg("wide"), bp::arg("tall") ) )    
        .def( 
            "GetDescription"
            , (char const * ( Frame_wrapper::* )(  ))(&Frame_wrapper::GetDescription) )    
        .def( 
            "GetDraggerSize"
            , (int ( ::vgui::Frame::* )(  ))( &::vgui::Frame::GetDraggerSize ) )    
        .def( 
            "GetPanelBaseClassName"
            , (char const * (*)(  ))( &::vgui::Frame::GetPanelBaseClassName ) )    
        .def( 
            "GetPanelClassName"
            , (char const * (*)(  ))( &::vgui::Frame::GetPanelClassName ) )    
        .def( 
            "GetSettings"
            , (void ( Frame_wrapper::* )( ::KeyValues * ))(&Frame_wrapper::GetSettings)
            , ( bp::arg("outResourceData") ) )    
        .def( 
            "GetUserConfigSettings"
            , (void ( Frame_wrapper::* )( ::KeyValues * ))(&Frame_wrapper::GetUserConfigSettings)
            , ( bp::arg("userConfig") ) )    
        .def( 
            "HasUserConfigSettings"
            , (bool ( Frame_wrapper::* )(  ))(&Frame_wrapper::HasUserConfigSettings) )    
        .def( 
            "IsMinimized"
            , (bool ( ::vgui::Frame::* )(  ))( &::vgui::Frame::IsMinimized ) )    
        .def( 
            "IsMoveable"
            , (bool ( ::vgui::Frame::* )(  ))( &::vgui::Frame::IsMoveable ) )    
        .def( 
            "IsSizeable"
            , (bool ( ::vgui::Frame::* )(  ))( &::vgui::Frame::IsSizeable ) )    
        .def( 
            "IsSmallCaption"
            , (bool ( ::vgui::Frame::* )(  )const)( &::vgui::Frame::IsSmallCaption ) )    
        .def( 
            "LoadControlSettings"
            , (void ( ::vgui::Frame::* )( char const *,char const *,::KeyValues *,::KeyValues * ))( &::vgui::Frame::LoadControlSettings )
            , ( bp::arg("dialogResourceName"), bp::arg("pathID")=bp::object(), bp::arg("pPreloadedKeyValues")=bp::object(), bp::arg("pConditions")=bp::object() ) )    
        .def( 
            "MoveToCenterOfScreen"
            , (void ( ::vgui::Frame::* )(  ))( &::vgui::Frame::MoveToCenterOfScreen ) )    
        .def( 
            "OnChildAdded"
            , (void ( Frame_wrapper::* )( ::vgui::VPANEL ))(&Frame_wrapper::default_OnChildAdded)
            , ( bp::arg("child") ) )    
        .def( 
            "OnClose"
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::default_OnClose) )    
        .def( 
            "OnCloseFrameButtonPressed"
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::default_OnCloseFrameButtonPressed) )    
        .def( 
            "OnCommand"
            , (void ( ::vgui::Frame::* )( char const * ))(&::vgui::Frame::OnCommand)
            , (void ( Frame_wrapper::* )( char const * ))(&Frame_wrapper::default_OnCommand)
            , ( bp::arg("command") ) )    
        .def( 
            "OnFinishedClose"
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::default_OnFinishedClose) )    
        .def( 
            "OnKeyCodeReleased"
            , (void ( Frame_wrapper::* )( ::vgui::KeyCode ))(&Frame_wrapper::default_OnKeyCodeReleased)
            , ( bp::arg("code") ) )    
        .def( 
            "OnKeyCodeTyped"
            , (void ( Frame_wrapper::* )( ::vgui::KeyCode ))(&Frame_wrapper::default_OnKeyCodeTyped)
            , ( bp::arg("code") ) )    
        .def( 
            "OnKeyFocusTicked"
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::default_OnKeyFocusTicked) )    
        .def( 
            "OnMinimize"
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::default_OnMinimize) )    
        .def( 
            "OnMinimizeToSysTray"
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::default_OnMinimizeToSysTray) )    
        .def( 
            "OnMousePressed"
            , (void ( Frame_wrapper::* )( ::vgui::MouseCode ))(&Frame_wrapper::default_OnMousePressed)
            , ( bp::arg("code") ) )    
        .def( 
            "OnScreenSizeChanged"
            , (void ( Frame_wrapper::* )( int,int ))(&Frame_wrapper::default_OnScreenSizeChanged)
            , ( bp::arg("iOldWide"), bp::arg("iOldTall") ) )    
        .def( 
            "OnThink"
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::default_OnThink) )    
        .def( 
            "PaintBackground"
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::default_PaintBackground) )    
        .def( 
            "PerformLayout"
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::default_PerformLayout) )    
        .def( 
            "PlaceUnderCursor"
            , (void ( ::vgui::Frame::* )(  ))( &::vgui::Frame::PlaceUnderCursor ) )    
        .def( 
            "SetChainKeysToParent"
            , (void ( ::vgui::Frame::* )( bool ))( &::vgui::Frame::SetChainKeysToParent )
            , ( bp::arg("state") ) )    
        .def( 
            "SetClipToParent"
            , (void ( ::vgui::Frame::* )( bool ))(&::vgui::Frame::SetClipToParent)
            , (void ( Frame_wrapper::* )( bool ))(&Frame_wrapper::default_SetClipToParent)
            , ( bp::arg("state") ) )    
        .def( 
            "SetCloseButtonVisible"
            , (void ( ::vgui::Frame::* )( bool ))(&::vgui::Frame::SetCloseButtonVisible)
            , (void ( Frame_wrapper::* )( bool ))(&Frame_wrapper::default_SetCloseButtonVisible)
            , ( bp::arg("state") ) )    
        .def( 
            "SetFadeEffectDisableOverride"
            , (void ( ::vgui::Frame::* )( bool ))( &::vgui::Frame::SetFadeEffectDisableOverride )
            , ( bp::arg("disabled") ) )    
        .def( 
            "SetImages"
            , (void ( ::vgui::Frame::* )( char const *,char const * ))( &::vgui::Frame::SetImages )
            , ( bp::arg("pEnabledImage"), bp::arg("pDisabledImage")=bp::object() ) )    
        .def( 
            "SetMaximizeButtonVisible"
            , (void ( ::vgui::Frame::* )( bool ))(&::vgui::Frame::SetMaximizeButtonVisible)
            , (void ( Frame_wrapper::* )( bool ))(&Frame_wrapper::default_SetMaximizeButtonVisible)
            , ( bp::arg("state") ) )    
        .def( 
            "SetMenuButtonResponsive"
            , (void ( ::vgui::Frame::* )( bool ))( &::vgui::Frame::SetMenuButtonResponsive )
            , ( bp::arg("state") ) )    
        .def( 
            "SetMenuButtonVisible"
            , (void ( ::vgui::Frame::* )( bool ))(&::vgui::Frame::SetMenuButtonVisible)
            , (void ( Frame_wrapper::* )( bool ))(&Frame_wrapper::default_SetMenuButtonVisible)
            , ( bp::arg("state") ) )    
        .def( 
            "SetMinimizeButtonVisible"
            , (void ( ::vgui::Frame::* )( bool ))(&::vgui::Frame::SetMinimizeButtonVisible)
            , (void ( Frame_wrapper::* )( bool ))(&Frame_wrapper::default_SetMinimizeButtonVisible)
            , ( bp::arg("state") ) )    
        .def( 
            "SetMinimizeToSysTrayButtonVisible"
            , (void ( ::vgui::Frame::* )( bool ))(&::vgui::Frame::SetMinimizeToSysTrayButtonVisible)
            , (void ( Frame_wrapper::* )( bool ))(&Frame_wrapper::default_SetMinimizeToSysTrayButtonVisible)
            , ( bp::arg("state") ) )    
        .def( 
            "SetMoveable"
            , (void ( ::vgui::Frame::* )( bool ))(&::vgui::Frame::SetMoveable)
            , (void ( Frame_wrapper::* )( bool ))(&Frame_wrapper::default_SetMoveable)
            , ( bp::arg("state") ) )    
        .def( 
            "SetSizeable"
            , (void ( ::vgui::Frame::* )( bool ))(&::vgui::Frame::SetSizeable)
            , (void ( Frame_wrapper::* )( bool ))(&Frame_wrapper::default_SetSizeable)
            , ( bp::arg("state") ) )    
        .def( 
            "SetSmallCaption"
            , (void ( ::vgui::Frame::* )( bool ))(&::vgui::Frame::SetSmallCaption)
            , (void ( Frame_wrapper::* )( bool ))(&Frame_wrapper::default_SetSmallCaption)
            , ( bp::arg("state") ) )    
        .def( 
            "SetTitle"
            , (void ( ::vgui::Frame::* )( char const *,bool ))(&::vgui::Frame::SetTitle)
            , (void ( Frame_wrapper::* )( char const *,bool ))(&Frame_wrapper::default_SetTitle)
            , ( bp::arg("title"), bp::arg("surfaceTitle") ) )    
        .def( 
            "SetTitle"
            , (void ( ::vgui::Frame::* )( wchar_t const *,bool ))(&::vgui::Frame::SetTitle)
            , (void ( Frame_wrapper::* )( wchar_t const *,bool ))(&Frame_wrapper::default_SetTitle)
            , ( bp::arg("title"), bp::arg("surfaceTitle") ) )    
        .def( 
            "SetTitleBarVisible"
            , (void ( ::vgui::Frame::* )( bool ))(&::vgui::Frame::SetTitleBarVisible)
            , (void ( Frame_wrapper::* )( bool ))(&Frame_wrapper::default_SetTitleBarVisible)
            , ( bp::arg("state") ) )    
        .def( 
            "AddToOverridableColors"
            , (void ( Frame_wrapper::* )( ::Color *,char const * ))(&Frame_wrapper::AddToOverridableColors)
            , ( bp::arg("pColor"), bp::arg("scriptname") ) )    
        .def( 
            "ApplyOverridableColors"
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::ApplyOverridableColors) )    
        .def( 
            "CreateDragData"
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::CreateDragData) )    
        .def( 
            "DragDropStartDragging"
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::DragDropStartDragging) )    
        .def( 
            "GetNavActivatePanel"
            , (::vgui::Panel * ( Frame_wrapper::* )(  ))(&Frame_wrapper::GetNavActivatePanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetNavBackPanel"
            , (::vgui::Panel * ( Frame_wrapper::* )(  ))(&Frame_wrapper::GetNavBackPanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetNavDownPanel"
            , (::vgui::Panel * ( Frame_wrapper::* )(  ))(&Frame_wrapper::GetNavDownPanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetNavLeftPanel"
            , (::vgui::Panel * ( Frame_wrapper::* )(  ))(&Frame_wrapper::GetNavLeftPanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetNavRightPanel"
            , (::vgui::Panel * ( Frame_wrapper::* )(  ))(&Frame_wrapper::GetNavRightPanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetNavToRelayPanel"
            , (::vgui::Panel * ( Frame_wrapper::* )(  ))(&Frame_wrapper::GetNavToRelayPanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetNavUpPanel"
            , (::vgui::Panel * ( Frame_wrapper::* )(  ))(&Frame_wrapper::GetNavUpPanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "InvalidateLayout"
            , (void ( ::vgui::Panel::* )( bool,bool ))(&::vgui::Panel::InvalidateLayout)
            , (void ( Frame_wrapper::* )( bool,bool ))(&Frame_wrapper::default_InvalidateLayout)
            , ( bp::arg("layoutNow")=(bool)(false), bp::arg("reloadScheme")=(bool)(false) ) )    
        .def( 
            "OnChildSettingsApplied"
            , (void ( Frame_wrapper::* )( ::KeyValues *,::vgui::Panel * ))(&Frame_wrapper::OnChildSettingsApplied)
            , ( bp::arg("pInResourceData"), bp::arg("pChild") ) )    
        .def( 
            "OnContinueDragging"
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::OnContinueDragging) )    
        .def( 
            "OnCurrentDefaultButtonSet"
            , (void ( Frame_wrapper::* )( ::vgui::VPANEL ))(&Frame_wrapper::OnCurrentDefaultButtonSet)
            , ( bp::arg("button") ) )    
        .def( 
            "OnCursorEntered"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::OnCursorEntered)
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::default_OnCursorEntered) )    
        .def( 
            "OnCursorExited"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::OnCursorExited)
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::default_OnCursorExited) )    
        .def( 
            "OnCursorMoved"
            , (void ( ::vgui::Panel::* )( int,int ))(&::vgui::Panel::OnCursorMoved)
            , (void ( Frame_wrapper::* )( int,int ))(&Frame_wrapper::default_OnCursorMoved)
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "OnDefaultButtonSet"
            , (void ( Frame_wrapper::* )( ::vgui::VPANEL ))(&Frame_wrapper::OnDefaultButtonSet)
            , ( bp::arg("button") ) )    
        .def( 
            "OnFindDefaultButton"
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::OnFindDefaultButton) )    
        .def( 
            "OnFinishDragging"
            , (void ( Frame_wrapper::* )( bool,::vgui::MouseCode,bool ))(&Frame_wrapper::OnFinishDragging)
            , ( bp::arg("mousereleased"), bp::arg("code"), bp::arg("aborted")=(bool)(false) ) )    
        .def( 
            "OnKeyCodePressed"
            , (void ( ::vgui::EditablePanel::* )( ::vgui::KeyCode ))(&::vgui::EditablePanel::OnKeyCodePressed)
            , (void ( Frame_wrapper::* )( ::vgui::KeyCode ))(&Frame_wrapper::default_OnKeyCodePressed)
            , ( bp::arg("code") ) )    
        .def( 
            "OnKillFocus"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::OnKillFocus)
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::default_OnKillFocus) )    
        .def( 
            "OnMouseCaptureLost"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::OnMouseCaptureLost)
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::default_OnMouseCaptureLost) )    
        .def( 
            "OnMouseDoublePressed"
            , (void ( ::vgui::Panel::* )( ::vgui::MouseCode ))(&::vgui::Panel::OnMouseDoublePressed)
            , (void ( Frame_wrapper::* )( ::vgui::MouseCode ))(&Frame_wrapper::default_OnMouseDoublePressed)
            , ( bp::arg("code") ) )    
        .def( 
            "OnMouseFocusTicked"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::OnMouseFocusTicked)
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::default_OnMouseFocusTicked) )    
        .def( 
            "OnMouseReleased"
            , (void ( ::vgui::Panel::* )( ::vgui::MouseCode ))(&::vgui::Panel::OnMouseReleased)
            , (void ( Frame_wrapper::* )( ::vgui::MouseCode ))(&Frame_wrapper::default_OnMouseReleased)
            , ( bp::arg("code") ) )    
        .def( 
            "OnMouseTriplePressed"
            , (void ( ::vgui::Panel::* )( ::vgui::MouseCode ))(&::vgui::Panel::OnMouseTriplePressed)
            , (void ( Frame_wrapper::* )( ::vgui::MouseCode ))(&Frame_wrapper::default_OnMouseTriplePressed)
            , ( bp::arg("code") ) )    
        .def( 
            "OnMouseWheeled"
            , (void ( ::vgui::Panel::* )( int ))(&::vgui::Panel::OnMouseWheeled)
            , (void ( Frame_wrapper::* )( int ))(&Frame_wrapper::default_OnMouseWheeled)
            , ( bp::arg("delta") ) )    
        .def( 
            "OnRequestFocus"
            , (void ( ::vgui::EditablePanel::* )( ::vgui::VPANEL,::vgui::VPANEL ))(&::vgui::EditablePanel::OnRequestFocus)
            , (void ( Frame_wrapper::* )( ::vgui::VPANEL,::vgui::VPANEL ))(&Frame_wrapper::default_OnRequestFocus)
            , ( bp::arg("subFocus"), bp::arg("defaultPanel") ) )    
        .def( 
            "OnSetFocus"
            , (void ( ::vgui::EditablePanel::* )(  ))(&::vgui::EditablePanel::OnSetFocus)
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::default_OnSetFocus) )    
        .def( 
            "OnSizeChanged"
            , (void ( Frame_wrapper::* )( int,int ))(&Frame_wrapper::default_OnSizeChanged)
            , ( bp::arg("wide"), bp::arg("tall") ) )    
        .def( 
            "OnStartDragging"
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::OnStartDragging) )    
        .def( 
            "OnTick"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::OnTick)
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::default_OnTick) )    
        .def( 
            "Paint"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::Paint)
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::default_Paint) )    
        .def( 
            "PaintBuildOverlay"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::PaintBuildOverlay)
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::default_PaintBuildOverlay) )    
        .def( 
            "PaintTraverse"
            , (void ( Frame_wrapper::* )( bool,bool ))(&Frame_wrapper::PaintTraverse)
            , ( bp::arg("Repaint"), bp::arg("allowForce")=(bool)(true) ) )    
        .def( 
            "PostChildPaint"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::PostChildPaint)
            , (void ( Frame_wrapper::* )(  ))(&Frame_wrapper::default_PostChildPaint) )    
        .def( 
            "SetBgColor"
            , (void ( ::vgui::Panel::* )( ::Color ))(&::vgui::Panel::SetBgColor)
            , (void ( Frame_wrapper::* )( ::Color ))(&Frame_wrapper::default_SetBgColor)
            , ( bp::arg("color") ) )    
        .def( 
            "SetBorder"
            , (void ( ::vgui::Panel::* )( ::vgui::IBorder * ))(&::vgui::Panel::SetBorder)
            , (void ( Frame_wrapper::* )( ::vgui::IBorder * ))(&Frame_wrapper::default_SetBorder)
            , ( bp::arg("border") ) )    
        .def( 
            "SetCursor"
            , (void ( ::vgui::Panel::* )( ::vgui::HCursor ))(&::vgui::Panel::SetCursor)
            , (void ( Frame_wrapper::* )( ::vgui::HCursor ))(&Frame_wrapper::default_SetCursor)
            , ( bp::arg("cursor") ) )    
        .def( 
            "SetDragEnabled"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetDragEnabled)
            , (void ( Frame_wrapper::* )( bool ))(&Frame_wrapper::default_SetDragEnabled)
            , ( bp::arg("enabled") ) )    
        .def( 
            "SetEnabled"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetEnabled)
            , (void ( Frame_wrapper::* )( bool ))(&Frame_wrapper::default_SetEnabled)
            , ( bp::arg("state") ) )    
        .def( 
            "SetFgColor"
            , (void ( ::vgui::Panel::* )( ::Color ))(&::vgui::Panel::SetFgColor)
            , (void ( Frame_wrapper::* )( ::Color ))(&Frame_wrapper::default_SetFgColor)
            , ( bp::arg("color") ) )    
        .def( 
            "SetKeyBoardInputEnabled"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetKeyBoardInputEnabled)
            , (void ( Frame_wrapper::* )( bool ))(&Frame_wrapper::default_SetKeyBoardInputEnabled)
            , ( bp::arg("state") ) )    
        .def( 
            "SetMouseInputEnabled"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetMouseInputEnabled)
            , (void ( Frame_wrapper::* )( bool ))(&Frame_wrapper::default_SetMouseInputEnabled)
            , ( bp::arg("state") ) )    
        .def( 
            "SetOverridableColor"
            , (void ( Frame_wrapper::* )( ::Color *,::Color const & ))(&Frame_wrapper::SetOverridableColor)
            , ( bp::arg("pColor"), bp::arg("newColor") ) )    
        .def( 
            "SetPaintBackgroundEnabled"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetPaintBackgroundEnabled)
            , (void ( Frame_wrapper::* )( bool ))(&Frame_wrapper::default_SetPaintBackgroundEnabled)
            , ( bp::arg("state") ) )    
        .def( 
            "SetPaintBackgroundType"
            , (void ( ::vgui::Panel::* )( int ))(&::vgui::Panel::SetPaintBackgroundType)
            , (void ( Frame_wrapper::* )( int ))(&Frame_wrapper::default_SetPaintBackgroundType)
            , ( bp::arg("type") ) )    
        .def( 
            "SetPaintBorderEnabled"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetPaintBorderEnabled)
            , (void ( Frame_wrapper::* )( bool ))(&Frame_wrapper::default_SetPaintBorderEnabled)
            , ( bp::arg("state") ) )    
        .def( 
            "SetPaintEnabled"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetPaintEnabled)
            , (void ( Frame_wrapper::* )( bool ))(&Frame_wrapper::default_SetPaintEnabled)
            , ( bp::arg("state") ) )    
        .def( 
            "SetParent"
            , (void ( ::vgui::Panel::* )( ::vgui::Panel * ))(&::vgui::Panel::SetParent)
            , (void ( Frame_wrapper::* )( ::vgui::Panel * ))(&Frame_wrapper::default_SetParent)
            , ( bp::arg("newParent") ) )    
        .def( 
            "SetParent"
            , (void ( ::vgui::Panel::* )( ::vgui::VPANEL ))(&::vgui::Panel::SetParent)
            , (void ( Frame_wrapper::* )( ::vgui::VPANEL ))(&Frame_wrapper::default_SetParent)
            , ( bp::arg("newParent") ) )    
        .def( 
            "SetScheme"
            , (void ( ::vgui::Panel::* )( char const * ))(&::vgui::Panel::SetScheme)
            , (void ( Frame_wrapper::* )( char const * ))(&Frame_wrapper::default_SetScheme)
            , ( bp::arg("tag") ) )    
        .def( 
            "SetScheme"
            , (void ( ::vgui::Panel::* )( ::vgui::HScheme ))(&::vgui::Panel::SetScheme)
            , (void ( Frame_wrapper::* )( ::vgui::HScheme ))(&Frame_wrapper::default_SetScheme)
            , ( bp::arg("scheme") ) )    
        .def( 
            "SetVisible"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetVisible)
            , (void ( Frame_wrapper::* )( bool ))(&Frame_wrapper::default_SetVisible)
            , ( bp::arg("state") ) )    
        .staticmethod( "GetPanelBaseClassName" )    
        .staticmethod( "GetPanelClassName" );

}
