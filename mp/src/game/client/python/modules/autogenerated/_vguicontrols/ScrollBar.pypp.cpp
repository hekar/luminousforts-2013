// This file has been generated by Py++.

#include "cbase.h"
#include "__convenience.pypp.hpp"
#include "__call_policies.pypp.hpp"
#include "cbase.h"
#include "vgui_controls/Panel.h"
#include "vgui_controls/AnimationController.h"
#include "vgui_controls/EditablePanel.h"
#include "vgui_controls/AnalogBar.h"
#include "vgui_controls/Image.h"
#include "vgui_controls/TextImage.h"
#include "vgui_controls/ScrollBar.h"
#include "vgui_controls/ScrollBarSlider.h"
#include "vgui_controls/Menu.h"
#include "vgui_controls/MenuButton.h"
#include "vgui_controls/Frame.h"
#include "vgui_controls/TextEntry.h"
#include "vgui_controls/RichText.h"
#include "vgui_controls/Tooltip.h"
#include "vgui/IBorder.h"
#include "vgui_bitmapimage.h"
#include "vgui_avatarimage.h"
#include "srcpy_vgui.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "ScrollBar.pypp.hpp"

namespace bp = boost::python;

struct ScrollBar_wrapper : vgui::ScrollBar, bp::wrapper< vgui::ScrollBar > {

    ScrollBar_wrapper(::vgui::Panel * parent, char const * panelName, bool vertical )
    : vgui::ScrollBar( parent, panelName, vertical )
      , bp::wrapper< vgui::ScrollBar >(){
        // constructor
    	g_PythonPanelCount++;
    }

    virtual void ApplySchemeSettings( ::vgui::IScheme * pScheme ){
        PY_OVERRIDE_CHECK( vgui::ScrollBar, ApplySchemeSettings )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::ScrollBar, ApplySchemeSettings )
        bp::override func_ApplySchemeSettings = this->get_override( "ApplySchemeSettings" );
        if( func_ApplySchemeSettings.ptr() != Py_None )
            try {
                func_ApplySchemeSettings( boost::python::ptr(pScheme) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::ScrollBar::ApplySchemeSettings( pScheme );
            }
        else
            this->vgui::ScrollBar::ApplySchemeSettings( pScheme );
    }
    
    virtual void default_ApplySchemeSettings( ::vgui::IScheme * pScheme ){
        vgui::ScrollBar::ApplySchemeSettings( pScheme );
    }

    ::vgui::Button * GetDepressedButton( int iIndex ){
        return vgui::ScrollBar::GetDepressedButton( iIndex );
    }

    static boost::python::tuple GetRange( ::vgui::ScrollBar & inst ){
        int min2;
        int max2;
        inst.GetRange(min2, max2);
        return bp::make_tuple( min2, max2 );
    }

    virtual void OnMouseFocusTicked(  ) {
        PY_OVERRIDE_CHECK( vgui::ScrollBar, OnMouseFocusTicked )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::ScrollBar, OnMouseFocusTicked )
        bp::override func_OnMouseFocusTicked = this->get_override( "OnMouseFocusTicked" );
        if( func_OnMouseFocusTicked.ptr() != Py_None )
            try {
                func_OnMouseFocusTicked(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::ScrollBar::OnMouseFocusTicked(  );
            }
        else
            this->vgui::ScrollBar::OnMouseFocusTicked(  );
    }
    
    void default_OnMouseFocusTicked(  ) {
        vgui::ScrollBar::OnMouseFocusTicked( );
    }

    virtual void OnSizeChanged( int wide, int tall ){
        PY_OVERRIDE_CHECK( vgui::ScrollBar, OnSizeChanged )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::ScrollBar, OnSizeChanged )
        bp::override func_OnSizeChanged = this->get_override( "OnSizeChanged" );
        if( func_OnSizeChanged.ptr() != Py_None )
            try {
                func_OnSizeChanged( wide, tall );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::ScrollBar::OnSizeChanged( wide, tall );
            }
        else
            this->vgui::ScrollBar::OnSizeChanged( wide, tall );
    }
    
    virtual void default_OnSizeChanged( int wide, int tall ){
        vgui::ScrollBar::OnSizeChanged( wide, tall );
    }

    void OnSliderMoved( int position ){
        vgui::ScrollBar::OnSliderMoved( position );
    }

    virtual void PerformLayout(  ){
        PY_OVERRIDE_CHECK( vgui::ScrollBar, PerformLayout )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::ScrollBar, PerformLayout )
        bp::override func_PerformLayout = this->get_override( "PerformLayout" );
        if( func_PerformLayout.ptr() != Py_None )
            try {
                func_PerformLayout(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::ScrollBar::PerformLayout(  );
            }
        else
            this->vgui::ScrollBar::PerformLayout(  );
    }
    
    virtual void default_PerformLayout(  ){
        vgui::ScrollBar::PerformLayout( );
    }

    void RespondToScrollArrow( int const direction ){
        vgui::ScrollBar::RespondToScrollArrow( direction );
    }

    void SendSliderMoveMessage( int value ){
        vgui::ScrollBar::SendSliderMoveMessage( value );
    }

    virtual void SetPaintBackgroundEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::ScrollBar, SetPaintBackgroundEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::ScrollBar, SetPaintBackgroundEnabled )
        bp::override func_SetPaintBackgroundEnabled = this->get_override( "SetPaintBackgroundEnabled" );
        if( func_SetPaintBackgroundEnabled.ptr() != Py_None )
            try {
                func_SetPaintBackgroundEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::ScrollBar::SetPaintBackgroundEnabled( state );
            }
        else
            this->vgui::ScrollBar::SetPaintBackgroundEnabled( state );
    }
    
    void default_SetPaintBackgroundEnabled( bool state ) {
        vgui::ScrollBar::SetPaintBackgroundEnabled( state );
    }

    virtual void SetPaintBorderEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::ScrollBar, SetPaintBorderEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::ScrollBar, SetPaintBorderEnabled )
        bp::override func_SetPaintBorderEnabled = this->get_override( "SetPaintBorderEnabled" );
        if( func_SetPaintBorderEnabled.ptr() != Py_None )
            try {
                func_SetPaintBorderEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::ScrollBar::SetPaintBorderEnabled( state );
            }
        else
            this->vgui::ScrollBar::SetPaintBorderEnabled( state );
    }
    
    void default_SetPaintBorderEnabled( bool state ) {
        vgui::ScrollBar::SetPaintBorderEnabled( state );
    }

    virtual void SetPaintEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::ScrollBar, SetPaintEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::ScrollBar, SetPaintEnabled )
        bp::override func_SetPaintEnabled = this->get_override( "SetPaintEnabled" );
        if( func_SetPaintEnabled.ptr() != Py_None )
            try {
                func_SetPaintEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::ScrollBar::SetPaintEnabled( state );
            }
        else
            this->vgui::ScrollBar::SetPaintEnabled( state );
    }
    
    void default_SetPaintEnabled( bool state ) {
        vgui::ScrollBar::SetPaintEnabled( state );
    }

    void UpdateButtonsForImages(  ){
        vgui::ScrollBar::UpdateButtonsForImages(  );
    }

    void UpdateSliderImages(  ){
        vgui::ScrollBar::UpdateSliderImages(  );
    }

    void AddToOverridableColors( ::Color * pColor, char const * scriptname ){
        vgui::Panel::AddToOverridableColors( pColor, scriptname );
    }

    void ApplyOverridableColors(  ){
        vgui::Panel::ApplyOverridableColors(  );
    }

    void CreateDragData(  ){
        vgui::Panel::CreateDragData(  );
    }

    void DragDropStartDragging(  ){
        vgui::Panel::DragDropStartDragging(  );
    }

    ::vgui::Panel * GetNavActivatePanel(  ){
        return vgui::Panel::GetNavActivatePanel(  );
    }

    ::vgui::Panel * GetNavBackPanel(  ){
        return vgui::Panel::GetNavBackPanel(  );
    }

    ::vgui::Panel * GetNavDownPanel(  ){
        return vgui::Panel::GetNavDownPanel(  );
    }

    ::vgui::Panel * GetNavLeftPanel(  ){
        return vgui::Panel::GetNavLeftPanel(  );
    }

    ::vgui::Panel * GetNavRightPanel(  ){
        return vgui::Panel::GetNavRightPanel(  );
    }

    ::vgui::Panel * GetNavToRelayPanel(  ){
        return vgui::Panel::GetNavToRelayPanel(  );
    }

    ::vgui::Panel * GetNavUpPanel(  ){
        return vgui::Panel::GetNavUpPanel(  );
    }

    virtual void InvalidateLayout( bool layoutNow=false, bool reloadScheme=false ) {
        PY_OVERRIDE_CHECK( vgui::Panel, InvalidateLayout )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, InvalidateLayout )
        bp::override func_InvalidateLayout = this->get_override( "InvalidateLayout" );
        if( func_InvalidateLayout.ptr() != Py_None )
            try {
                func_InvalidateLayout( layoutNow, reloadScheme );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::InvalidateLayout( layoutNow, reloadScheme );
            }
        else
            this->vgui::Panel::InvalidateLayout( layoutNow, reloadScheme );
    }
    
    void default_InvalidateLayout( bool layoutNow=false, bool reloadScheme=false ) {
        vgui::Panel::InvalidateLayout( layoutNow, reloadScheme );
    }

    virtual void OnChildAdded( ::vgui::VPANEL child ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnChildAdded )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnChildAdded )
        bp::override func_OnChildAdded = this->get_override( "OnChildAdded" );
        if( func_OnChildAdded.ptr() != Py_None )
            try {
                func_OnChildAdded( child );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnChildAdded( child );
            }
        else
            this->vgui::Panel::OnChildAdded( child );
    }
    
    void default_OnChildAdded( ::vgui::VPANEL child ) {
        vgui::Panel::OnChildAdded( child );
    }

    void OnChildSettingsApplied( ::KeyValues * pInResourceData, ::vgui::Panel * pChild ){
        vgui::Panel::OnChildSettingsApplied( pInResourceData, pChild );
    }

    virtual void OnCommand( char const * command ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnCommand )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnCommand )
        bp::override func_OnCommand = this->get_override( "OnCommand" );
        if( func_OnCommand.ptr() != Py_None )
            try {
                func_OnCommand( command );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnCommand( command );
            }
        else
            this->vgui::Panel::OnCommand( command );
    }
    
    void default_OnCommand( char const * command ) {
        vgui::Panel::OnCommand( command );
    }

    void OnContinueDragging(  ){
        vgui::Panel::OnContinueDragging(  );
    }

    virtual void OnCursorEntered(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnCursorEntered )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnCursorEntered )
        bp::override func_OnCursorEntered = this->get_override( "OnCursorEntered" );
        if( func_OnCursorEntered.ptr() != Py_None )
            try {
                func_OnCursorEntered(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnCursorEntered(  );
            }
        else
            this->vgui::Panel::OnCursorEntered(  );
    }
    
    void default_OnCursorEntered(  ) {
        vgui::Panel::OnCursorEntered( );
    }

    virtual void OnCursorExited(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnCursorExited )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnCursorExited )
        bp::override func_OnCursorExited = this->get_override( "OnCursorExited" );
        if( func_OnCursorExited.ptr() != Py_None )
            try {
                func_OnCursorExited(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnCursorExited(  );
            }
        else
            this->vgui::Panel::OnCursorExited(  );
    }
    
    void default_OnCursorExited(  ) {
        vgui::Panel::OnCursorExited( );
    }

    virtual void OnCursorMoved( int x, int y ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnCursorMoved )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnCursorMoved )
        bp::override func_OnCursorMoved = this->get_override( "OnCursorMoved" );
        if( func_OnCursorMoved.ptr() != Py_None )
            try {
                func_OnCursorMoved( x, y );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnCursorMoved( x, y );
            }
        else
            this->vgui::Panel::OnCursorMoved( x, y );
    }
    
    void default_OnCursorMoved( int x, int y ) {
        vgui::Panel::OnCursorMoved( x, y );
    }

    void OnFinishDragging( bool mousereleased, ::vgui::MouseCode code, bool aborted=false ){
        vgui::Panel::OnFinishDragging( mousereleased, code, aborted );
    }

    virtual void OnKeyCodePressed( ::vgui::KeyCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnKeyCodePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnKeyCodePressed )
        bp::override func_OnKeyCodePressed = this->get_override( "OnKeyCodePressed" );
        if( func_OnKeyCodePressed.ptr() != Py_None )
            try {
                func_OnKeyCodePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnKeyCodePressed( code );
            }
        else
            this->vgui::Panel::OnKeyCodePressed( code );
    }
    
    void default_OnKeyCodePressed( ::vgui::KeyCode code ) {
        vgui::Panel::OnKeyCodePressed( code );
    }

    virtual void OnKeyCodeReleased( ::vgui::KeyCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnKeyCodeReleased )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnKeyCodeReleased )
        bp::override func_OnKeyCodeReleased = this->get_override( "OnKeyCodeReleased" );
        if( func_OnKeyCodeReleased.ptr() != Py_None )
            try {
                func_OnKeyCodeReleased( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnKeyCodeReleased( code );
            }
        else
            this->vgui::Panel::OnKeyCodeReleased( code );
    }
    
    void default_OnKeyCodeReleased( ::vgui::KeyCode code ) {
        vgui::Panel::OnKeyCodeReleased( code );
    }

    virtual void OnKeyCodeTyped( ::vgui::KeyCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnKeyCodeTyped )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnKeyCodeTyped )
        bp::override func_OnKeyCodeTyped = this->get_override( "OnKeyCodeTyped" );
        if( func_OnKeyCodeTyped.ptr() != Py_None )
            try {
                func_OnKeyCodeTyped( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnKeyCodeTyped( code );
            }
        else
            this->vgui::Panel::OnKeyCodeTyped( code );
    }
    
    void default_OnKeyCodeTyped( ::vgui::KeyCode code ) {
        vgui::Panel::OnKeyCodeTyped( code );
    }

    virtual void OnKeyFocusTicked(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnKeyFocusTicked )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnKeyFocusTicked )
        bp::override func_OnKeyFocusTicked = this->get_override( "OnKeyFocusTicked" );
        if( func_OnKeyFocusTicked.ptr() != Py_None )
            try {
                func_OnKeyFocusTicked(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnKeyFocusTicked(  );
            }
        else
            this->vgui::Panel::OnKeyFocusTicked(  );
    }
    
    void default_OnKeyFocusTicked(  ) {
        vgui::Panel::OnKeyFocusTicked( );
    }

    virtual void OnKillFocus(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnKillFocus )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnKillFocus )
        bp::override func_OnKillFocus = this->get_override( "OnKillFocus" );
        if( func_OnKillFocus.ptr() != Py_None )
            try {
                func_OnKillFocus(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnKillFocus(  );
            }
        else
            this->vgui::Panel::OnKillFocus(  );
    }
    
    void default_OnKillFocus(  ) {
        vgui::Panel::OnKillFocus( );
    }

    virtual void OnMouseCaptureLost(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMouseCaptureLost )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMouseCaptureLost )
        bp::override func_OnMouseCaptureLost = this->get_override( "OnMouseCaptureLost" );
        if( func_OnMouseCaptureLost.ptr() != Py_None )
            try {
                func_OnMouseCaptureLost(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMouseCaptureLost(  );
            }
        else
            this->vgui::Panel::OnMouseCaptureLost(  );
    }
    
    void default_OnMouseCaptureLost(  ) {
        vgui::Panel::OnMouseCaptureLost( );
    }

    virtual void OnMouseDoublePressed( ::vgui::MouseCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMouseDoublePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMouseDoublePressed )
        bp::override func_OnMouseDoublePressed = this->get_override( "OnMouseDoublePressed" );
        if( func_OnMouseDoublePressed.ptr() != Py_None )
            try {
                func_OnMouseDoublePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMouseDoublePressed( code );
            }
        else
            this->vgui::Panel::OnMouseDoublePressed( code );
    }
    
    void default_OnMouseDoublePressed( ::vgui::MouseCode code ) {
        vgui::Panel::OnMouseDoublePressed( code );
    }

    virtual void OnMousePressed( ::vgui::MouseCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMousePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMousePressed )
        bp::override func_OnMousePressed = this->get_override( "OnMousePressed" );
        if( func_OnMousePressed.ptr() != Py_None )
            try {
                func_OnMousePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMousePressed( code );
            }
        else
            this->vgui::Panel::OnMousePressed( code );
    }
    
    void default_OnMousePressed( ::vgui::MouseCode code ) {
        vgui::Panel::OnMousePressed( code );
    }

    virtual void OnMouseReleased( ::vgui::MouseCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMouseReleased )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMouseReleased )
        bp::override func_OnMouseReleased = this->get_override( "OnMouseReleased" );
        if( func_OnMouseReleased.ptr() != Py_None )
            try {
                func_OnMouseReleased( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMouseReleased( code );
            }
        else
            this->vgui::Panel::OnMouseReleased( code );
    }
    
    void default_OnMouseReleased( ::vgui::MouseCode code ) {
        vgui::Panel::OnMouseReleased( code );
    }

    virtual void OnMouseTriplePressed( ::vgui::MouseCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMouseTriplePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMouseTriplePressed )
        bp::override func_OnMouseTriplePressed = this->get_override( "OnMouseTriplePressed" );
        if( func_OnMouseTriplePressed.ptr() != Py_None )
            try {
                func_OnMouseTriplePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMouseTriplePressed( code );
            }
        else
            this->vgui::Panel::OnMouseTriplePressed( code );
    }
    
    void default_OnMouseTriplePressed( ::vgui::MouseCode code ) {
        vgui::Panel::OnMouseTriplePressed( code );
    }

    virtual void OnMouseWheeled( int delta ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMouseWheeled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMouseWheeled )
        bp::override func_OnMouseWheeled = this->get_override( "OnMouseWheeled" );
        if( func_OnMouseWheeled.ptr() != Py_None )
            try {
                func_OnMouseWheeled( delta );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMouseWheeled( delta );
            }
        else
            this->vgui::Panel::OnMouseWheeled( delta );
    }
    
    void default_OnMouseWheeled( int delta ) {
        vgui::Panel::OnMouseWheeled( delta );
    }

    virtual void OnRequestFocus( ::vgui::VPANEL subFocus, ::vgui::VPANEL defaultPanel ){
        PY_OVERRIDE_CHECK( vgui::Panel, OnRequestFocus )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnRequestFocus )
        bp::override func_OnRequestFocus = this->get_override( "OnRequestFocus" );
        if( func_OnRequestFocus.ptr() != Py_None )
            try {
                func_OnRequestFocus( subFocus, defaultPanel );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnRequestFocus( subFocus, defaultPanel );
            }
        else
            this->vgui::Panel::OnRequestFocus( subFocus, defaultPanel );
    }
    
    virtual void default_OnRequestFocus( ::vgui::VPANEL subFocus, ::vgui::VPANEL defaultPanel ){
        vgui::Panel::OnRequestFocus( subFocus, defaultPanel );
    }

    virtual void OnScreenSizeChanged( int oldwide, int oldtall ){
        PY_OVERRIDE_CHECK( vgui::Panel, OnScreenSizeChanged )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnScreenSizeChanged )
        bp::override func_OnScreenSizeChanged = this->get_override( "OnScreenSizeChanged" );
        if( func_OnScreenSizeChanged.ptr() != Py_None )
            try {
                func_OnScreenSizeChanged( oldwide, oldtall );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnScreenSizeChanged( oldwide, oldtall );
            }
        else
            this->vgui::Panel::OnScreenSizeChanged( oldwide, oldtall );
    }
    
    virtual void default_OnScreenSizeChanged( int oldwide, int oldtall ){
        vgui::Panel::OnScreenSizeChanged( oldwide, oldtall );
    }

    virtual void OnSetFocus(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnSetFocus )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnSetFocus )
        bp::override func_OnSetFocus = this->get_override( "OnSetFocus" );
        if( func_OnSetFocus.ptr() != Py_None )
            try {
                func_OnSetFocus(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnSetFocus(  );
            }
        else
            this->vgui::Panel::OnSetFocus(  );
    }
    
    void default_OnSetFocus(  ) {
        vgui::Panel::OnSetFocus( );
    }

    void OnStartDragging(  ){
        vgui::Panel::OnStartDragging(  );
    }

    virtual void OnThink(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnThink )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnThink )
        bp::override func_OnThink = this->get_override( "OnThink" );
        if( func_OnThink.ptr() != Py_None )
            try {
                func_OnThink(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnThink(  );
            }
        else
            this->vgui::Panel::OnThink(  );
    }
    
    void default_OnThink(  ) {
        vgui::Panel::OnThink( );
    }

    virtual void OnTick(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnTick )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnTick )
        bp::override func_OnTick = this->get_override( "OnTick" );
        if( func_OnTick.ptr() != Py_None )
            try {
                func_OnTick(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnTick(  );
            }
        else
            this->vgui::Panel::OnTick(  );
    }
    
    void default_OnTick(  ) {
        vgui::Panel::OnTick( );
    }

    virtual void Paint(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, Paint )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, Paint )
        bp::override func_Paint = this->get_override( "Paint" );
        if( func_Paint.ptr() != Py_None )
            try {
                func_Paint(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::Paint(  );
            }
        else
            this->vgui::Panel::Paint(  );
    }
    
    void default_Paint(  ) {
        vgui::Panel::Paint( );
    }

    virtual void PaintBackground(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, PaintBackground )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, PaintBackground )
        bp::override func_PaintBackground = this->get_override( "PaintBackground" );
        if( func_PaintBackground.ptr() != Py_None )
            try {
                func_PaintBackground(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::PaintBackground(  );
            }
        else
            this->vgui::Panel::PaintBackground(  );
    }
    
    void default_PaintBackground(  ) {
        vgui::Panel::PaintBackground( );
    }

    virtual void PaintBuildOverlay(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, PaintBuildOverlay )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, PaintBuildOverlay )
        bp::override func_PaintBuildOverlay = this->get_override( "PaintBuildOverlay" );
        if( func_PaintBuildOverlay.ptr() != Py_None )
            try {
                func_PaintBuildOverlay(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::PaintBuildOverlay(  );
            }
        else
            this->vgui::Panel::PaintBuildOverlay(  );
    }
    
    void default_PaintBuildOverlay(  ) {
        vgui::Panel::PaintBuildOverlay( );
    }

    void PaintTraverse( bool Repaint, bool allowForce=true ){
        vgui::Panel::PaintTraverse( Repaint, allowForce );
    }

    virtual void PostChildPaint(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, PostChildPaint )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, PostChildPaint )
        bp::override func_PostChildPaint = this->get_override( "PostChildPaint" );
        if( func_PostChildPaint.ptr() != Py_None )
            try {
                func_PostChildPaint(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::PostChildPaint(  );
            }
        else
            this->vgui::Panel::PostChildPaint(  );
    }
    
    void default_PostChildPaint(  ) {
        vgui::Panel::PostChildPaint( );
    }

    virtual void SetBgColor( ::Color color ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetBgColor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetBgColor )
        bp::override func_SetBgColor = this->get_override( "SetBgColor" );
        if( func_SetBgColor.ptr() != Py_None )
            try {
                func_SetBgColor( color );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetBgColor( color );
            }
        else
            this->vgui::Panel::SetBgColor( color );
    }
    
    void default_SetBgColor( ::Color color ) {
        vgui::Panel::SetBgColor( color );
    }

    virtual void SetBorder( ::vgui::IBorder * border ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetBorder )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetBorder )
        bp::override func_SetBorder = this->get_override( "SetBorder" );
        if( func_SetBorder.ptr() != Py_None )
            try {
                func_SetBorder( boost::python::ptr(border) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetBorder( border );
            }
        else
            this->vgui::Panel::SetBorder( border );
    }
    
    void default_SetBorder( ::vgui::IBorder * border ) {
        vgui::Panel::SetBorder( border );
    }

    virtual void SetCursor( ::vgui::HCursor cursor ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetCursor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetCursor )
        bp::override func_SetCursor = this->get_override( "SetCursor" );
        if( func_SetCursor.ptr() != Py_None )
            try {
                func_SetCursor( cursor );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetCursor( cursor );
            }
        else
            this->vgui::Panel::SetCursor( cursor );
    }
    
    void default_SetCursor( ::vgui::HCursor cursor ) {
        vgui::Panel::SetCursor( cursor );
    }

    virtual void SetDragEnabled( bool enabled ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetDragEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetDragEnabled )
        bp::override func_SetDragEnabled = this->get_override( "SetDragEnabled" );
        if( func_SetDragEnabled.ptr() != Py_None )
            try {
                func_SetDragEnabled( enabled );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetDragEnabled( enabled );
            }
        else
            this->vgui::Panel::SetDragEnabled( enabled );
    }
    
    void default_SetDragEnabled( bool enabled ) {
        vgui::Panel::SetDragEnabled( enabled );
    }

    virtual void SetEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetEnabled )
        bp::override func_SetEnabled = this->get_override( "SetEnabled" );
        if( func_SetEnabled.ptr() != Py_None )
            try {
                func_SetEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetEnabled( state );
            }
        else
            this->vgui::Panel::SetEnabled( state );
    }
    
    void default_SetEnabled( bool state ) {
        vgui::Panel::SetEnabled( state );
    }

    virtual void SetFgColor( ::Color color ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetFgColor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetFgColor )
        bp::override func_SetFgColor = this->get_override( "SetFgColor" );
        if( func_SetFgColor.ptr() != Py_None )
            try {
                func_SetFgColor( color );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetFgColor( color );
            }
        else
            this->vgui::Panel::SetFgColor( color );
    }
    
    void default_SetFgColor( ::Color color ) {
        vgui::Panel::SetFgColor( color );
    }

    virtual void SetKeyBoardInputEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetKeyBoardInputEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetKeyBoardInputEnabled )
        bp::override func_SetKeyBoardInputEnabled = this->get_override( "SetKeyBoardInputEnabled" );
        if( func_SetKeyBoardInputEnabled.ptr() != Py_None )
            try {
                func_SetKeyBoardInputEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetKeyBoardInputEnabled( state );
            }
        else
            this->vgui::Panel::SetKeyBoardInputEnabled( state );
    }
    
    void default_SetKeyBoardInputEnabled( bool state ) {
        vgui::Panel::SetKeyBoardInputEnabled( state );
    }

    virtual void SetMouseInputEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetMouseInputEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetMouseInputEnabled )
        bp::override func_SetMouseInputEnabled = this->get_override( "SetMouseInputEnabled" );
        if( func_SetMouseInputEnabled.ptr() != Py_None )
            try {
                func_SetMouseInputEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetMouseInputEnabled( state );
            }
        else
            this->vgui::Panel::SetMouseInputEnabled( state );
    }
    
    void default_SetMouseInputEnabled( bool state ) {
        vgui::Panel::SetMouseInputEnabled( state );
    }

    void SetOverridableColor( ::Color * pColor, ::Color const & newColor ){
        vgui::Panel::SetOverridableColor( pColor, newColor );
    }

    virtual void SetPaintBackgroundType( int type ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintBackgroundType )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintBackgroundType )
        bp::override func_SetPaintBackgroundType = this->get_override( "SetPaintBackgroundType" );
        if( func_SetPaintBackgroundType.ptr() != Py_None )
            try {
                func_SetPaintBackgroundType( type );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintBackgroundType( type );
            }
        else
            this->vgui::Panel::SetPaintBackgroundType( type );
    }
    
    void default_SetPaintBackgroundType( int type ) {
        vgui::Panel::SetPaintBackgroundType( type );
    }

    virtual void SetParent( ::vgui::Panel * newParent ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetParent )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetParent )
        bp::override func_SetParent = this->get_override( "SetParent" );
        if( func_SetParent.ptr() != Py_None )
            try {
                func_SetParent( boost::python::object(*newParent) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetParent( newParent );
            }
        else
            this->vgui::Panel::SetParent( newParent );
    }
    
    void default_SetParent( ::vgui::Panel * newParent ) {
        vgui::Panel::SetParent( newParent );
    }

    virtual void SetParent( ::vgui::VPANEL newParent ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetParent )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetParent )
        bp::override func_SetParent = this->get_override( "SetParent" );
        if( func_SetParent.ptr() != Py_None )
            try {
                func_SetParent( newParent );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetParent( newParent );
            }
        else
            this->vgui::Panel::SetParent( newParent );
    }
    
    void default_SetParent( ::vgui::VPANEL newParent ) {
        vgui::Panel::SetParent( newParent );
    }

    virtual void SetScheme( char const * tag ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetScheme )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetScheme )
        bp::override func_SetScheme = this->get_override( "SetScheme" );
        if( func_SetScheme.ptr() != Py_None )
            try {
                func_SetScheme( tag );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetScheme( tag );
            }
        else
            this->vgui::Panel::SetScheme( tag );
    }
    
    void default_SetScheme( char const * tag ) {
        vgui::Panel::SetScheme( tag );
    }

    virtual void SetScheme( ::vgui::HScheme scheme ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetScheme )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetScheme )
        bp::override func_SetScheme = this->get_override( "SetScheme" );
        if( func_SetScheme.ptr() != Py_None )
            try {
                func_SetScheme( scheme );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetScheme( scheme );
            }
        else
            this->vgui::Panel::SetScheme( scheme );
    }
    
    void default_SetScheme( ::vgui::HScheme scheme ) {
        vgui::Panel::SetScheme( scheme );
    }

    virtual void SetVisible( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetVisible )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetVisible )
        bp::override func_SetVisible = this->get_override( "SetVisible" );
        if( func_SetVisible.ptr() != Py_None )
            try {
                func_SetVisible( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetVisible( state );
            }
        else
            this->vgui::Panel::SetVisible( state );
    }
    
    void default_SetVisible( bool state ) {
        vgui::Panel::SetVisible( state );
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual bool IsPythonManaged() { return true; }

    ~ScrollBar_wrapper( void ) { g_PythonPanelCount--; /*::PyDeletePanel( this, this );*/ }

};

void register_ScrollBar_class(){

    bp::class_< ScrollBar_wrapper, bp::bases< vgui::Panel >, boost::noncopyable >( "ScrollBar", bp::init< vgui::Panel *, char const *, bool >(( bp::arg("parent"), bp::arg("panelName"), bp::arg("vertical") )) )    
        .def( 
            "ApplySchemeSettings"
            , (void ( ScrollBar_wrapper::* )( ::vgui::IScheme * ))(&ScrollBar_wrapper::default_ApplySchemeSettings)
            , ( bp::arg("pScheme") ) )    
        .def( 
            "ApplySettings"
            , (void ( ::vgui::ScrollBar::* )( ::KeyValues * ))( &::vgui::ScrollBar::ApplySettings )
            , ( bp::arg("pInResourceData") ) )    
        .def( 
            "GetButton"
            , (::vgui::Button * ( ::vgui::ScrollBar::* )( int ))( &::vgui::ScrollBar::GetButton )
            , ( bp::arg("index") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetDepressedButton"
            , (::vgui::Button * ( ScrollBar_wrapper::* )( int ))(&ScrollBar_wrapper::GetDepressedButton)
            , ( bp::arg("iIndex") )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetPanelBaseClassName"
            , (char const * (*)(  ))( &::vgui::ScrollBar::GetPanelBaseClassName ) )    
        .def( 
            "GetPanelClassName"
            , (char const * (*)(  ))( &::vgui::ScrollBar::GetPanelClassName ) )    
        .def( 
            "GetRange"
            , (boost::python::tuple (*)( ::vgui::ScrollBar & ))( &ScrollBar_wrapper::GetRange )
            , ( bp::arg("inst") ) )    
        .def( 
            "GetRangeWindow"
            , (int ( ::vgui::ScrollBar::* )(  ))( &::vgui::ScrollBar::GetRangeWindow ) )    
        .def( 
            "GetSlider"
            , (::vgui::ScrollBarSlider * ( ::vgui::ScrollBar::* )(  ))( &::vgui::ScrollBar::GetSlider )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetValue"
            , (int ( ::vgui::ScrollBar::* )(  ))( &::vgui::ScrollBar::GetValue ) )    
        .def( 
            "HasFullRange"
            , (bool ( ::vgui::ScrollBar::* )(  ))( &::vgui::ScrollBar::HasFullRange ) )    
        .def( 
            "IsVertical"
            , (bool ( ::vgui::ScrollBar::* )(  ))( &::vgui::ScrollBar::IsVertical ) )    
        .def( 
            "OnMouseFocusTicked"
            , (void ( ::vgui::ScrollBar::* )(  ))(&::vgui::ScrollBar::OnMouseFocusTicked)
            , (void ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::default_OnMouseFocusTicked) )    
        .def( 
            "OnSizeChanged"
            , (void ( ScrollBar_wrapper::* )( int,int ))(&ScrollBar_wrapper::default_OnSizeChanged)
            , ( bp::arg("wide"), bp::arg("tall") ) )    
        .def( 
            "OnSliderMoved"
            , (void ( ScrollBar_wrapper::* )( int ))(&ScrollBar_wrapper::OnSliderMoved)
            , ( bp::arg("position") ) )    
        .def( 
            "PerformLayout"
            , (void ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::default_PerformLayout) )    
        .def( 
            "RespondToScrollArrow"
            , (void ( ScrollBar_wrapper::* )( int const ))(&ScrollBar_wrapper::RespondToScrollArrow)
            , ( bp::arg("direction") ) )    
        .def( 
            "SendSliderMoveMessage"
            , (void ( ScrollBar_wrapper::* )( int ))(&ScrollBar_wrapper::SendSliderMoveMessage)
            , ( bp::arg("value") ) )    
        .def( 
            "SetAutohideButtons"
            , (void ( ::vgui::ScrollBar::* )( bool ))( &::vgui::ScrollBar::SetAutohideButtons )
            , ( bp::arg("bAutohide") ) )    
        .def( 
            "SetButton"
            , (void ( ::vgui::ScrollBar::* )( ::vgui::Button *,int ))( &::vgui::ScrollBar::SetButton )
            , ( bp::arg("button"), bp::arg("index") ) )    
        .def( 
            "SetButtonPressedScrollValue"
            , (void ( ::vgui::ScrollBar::* )( int ))( &::vgui::ScrollBar::SetButtonPressedScrollValue )
            , ( bp::arg("value") ) )    
        .def( 
            "SetOverriddenButtons"
            , (void ( ::vgui::ScrollBar::* )( ::vgui::Button *,::vgui::Button * ))( &::vgui::ScrollBar::SetOverriddenButtons )
            , ( bp::arg("pB1"), bp::arg("pB2") ) )    
        .def( 
            "SetPaintBackgroundEnabled"
            , (void ( ::vgui::ScrollBar::* )( bool ))(&::vgui::ScrollBar::SetPaintBackgroundEnabled)
            , (void ( ScrollBar_wrapper::* )( bool ))(&ScrollBar_wrapper::default_SetPaintBackgroundEnabled)
            , ( bp::arg("state") ) )    
        .def( 
            "SetPaintBorderEnabled"
            , (void ( ::vgui::ScrollBar::* )( bool ))(&::vgui::ScrollBar::SetPaintBorderEnabled)
            , (void ( ScrollBar_wrapper::* )( bool ))(&ScrollBar_wrapper::default_SetPaintBorderEnabled)
            , ( bp::arg("state") ) )    
        .def( 
            "SetPaintEnabled"
            , (void ( ::vgui::ScrollBar::* )( bool ))(&::vgui::ScrollBar::SetPaintEnabled)
            , (void ( ScrollBar_wrapper::* )( bool ))(&ScrollBar_wrapper::default_SetPaintEnabled)
            , ( bp::arg("state") ) )    
        .def( 
            "SetRange"
            , (void ( ::vgui::ScrollBar::* )( int,int ))( &::vgui::ScrollBar::SetRange )
            , ( bp::arg("min"), bp::arg("max") ) )    
        .def( 
            "SetRangeWindow"
            , (void ( ::vgui::ScrollBar::* )( int ))( &::vgui::ScrollBar::SetRangeWindow )
            , ( bp::arg("rangeWindow") ) )    
        .def( 
            "SetScrollbarButtonsVisible"
            , (void ( ::vgui::ScrollBar::* )( bool ))( &::vgui::ScrollBar::SetScrollbarButtonsVisible )
            , ( bp::arg("visible") ) )    
        .def( 
            "SetSlider"
            , (void ( ::vgui::ScrollBar::* )( ::vgui::ScrollBarSlider * ))( &::vgui::ScrollBar::SetSlider )
            , ( bp::arg("slider") ) )    
        .def( 
            "SetValue"
            , (void ( ::vgui::ScrollBar::* )( int ))( &::vgui::ScrollBar::SetValue )
            , ( bp::arg("value") ) )    
        .def( 
            "UpdateButtonsForImages"
            , (void ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::UpdateButtonsForImages) )    
        .def( 
            "UpdateSliderImages"
            , (void ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::UpdateSliderImages) )    
        .def( 
            "UseImages"
            , (void ( ::vgui::ScrollBar::* )( char const *,char const *,char const *,char const * ))( &::vgui::ScrollBar::UseImages )
            , ( bp::arg("pszUpArrow"), bp::arg("pszDownArrow"), bp::arg("pszLine"), bp::arg("pszBox") ) )    
        .def( 
            "Validate"
            , (void ( ::vgui::ScrollBar::* )(  ))( &::vgui::ScrollBar::Validate ) )    
        .def( 
            "AddToOverridableColors"
            , (void ( ScrollBar_wrapper::* )( ::Color *,char const * ))(&ScrollBar_wrapper::AddToOverridableColors)
            , ( bp::arg("pColor"), bp::arg("scriptname") ) )    
        .def( 
            "ApplyOverridableColors"
            , (void ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::ApplyOverridableColors) )    
        .def( 
            "CreateDragData"
            , (void ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::CreateDragData) )    
        .def( 
            "DragDropStartDragging"
            , (void ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::DragDropStartDragging) )    
        .def( 
            "GetNavActivatePanel"
            , (::vgui::Panel * ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::GetNavActivatePanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetNavBackPanel"
            , (::vgui::Panel * ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::GetNavBackPanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetNavDownPanel"
            , (::vgui::Panel * ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::GetNavDownPanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetNavLeftPanel"
            , (::vgui::Panel * ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::GetNavLeftPanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetNavRightPanel"
            , (::vgui::Panel * ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::GetNavRightPanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetNavToRelayPanel"
            , (::vgui::Panel * ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::GetNavToRelayPanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetNavUpPanel"
            , (::vgui::Panel * ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::GetNavUpPanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "InvalidateLayout"
            , (void ( ::vgui::Panel::* )( bool,bool ))(&::vgui::Panel::InvalidateLayout)
            , (void ( ScrollBar_wrapper::* )( bool,bool ))(&ScrollBar_wrapper::default_InvalidateLayout)
            , ( bp::arg("layoutNow")=(bool)(false), bp::arg("reloadScheme")=(bool)(false) ) )    
        .def( 
            "OnChildAdded"
            , (void ( ::vgui::Panel::* )( ::vgui::VPANEL ))(&::vgui::Panel::OnChildAdded)
            , (void ( ScrollBar_wrapper::* )( ::vgui::VPANEL ))(&ScrollBar_wrapper::default_OnChildAdded)
            , ( bp::arg("child") ) )    
        .def( 
            "OnChildSettingsApplied"
            , (void ( ScrollBar_wrapper::* )( ::KeyValues *,::vgui::Panel * ))(&ScrollBar_wrapper::OnChildSettingsApplied)
            , ( bp::arg("pInResourceData"), bp::arg("pChild") ) )    
        .def( 
            "OnCommand"
            , (void ( ::vgui::Panel::* )( char const * ))(&::vgui::Panel::OnCommand)
            , (void ( ScrollBar_wrapper::* )( char const * ))(&ScrollBar_wrapper::default_OnCommand)
            , ( bp::arg("command") ) )    
        .def( 
            "OnContinueDragging"
            , (void ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::OnContinueDragging) )    
        .def( 
            "OnCursorEntered"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::OnCursorEntered)
            , (void ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::default_OnCursorEntered) )    
        .def( 
            "OnCursorExited"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::OnCursorExited)
            , (void ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::default_OnCursorExited) )    
        .def( 
            "OnCursorMoved"
            , (void ( ::vgui::Panel::* )( int,int ))(&::vgui::Panel::OnCursorMoved)
            , (void ( ScrollBar_wrapper::* )( int,int ))(&ScrollBar_wrapper::default_OnCursorMoved)
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "OnFinishDragging"
            , (void ( ScrollBar_wrapper::* )( bool,::vgui::MouseCode,bool ))(&ScrollBar_wrapper::OnFinishDragging)
            , ( bp::arg("mousereleased"), bp::arg("code"), bp::arg("aborted")=(bool)(false) ) )    
        .def( 
            "OnKeyCodePressed"
            , (void ( ::vgui::Panel::* )( ::vgui::KeyCode ))(&::vgui::Panel::OnKeyCodePressed)
            , (void ( ScrollBar_wrapper::* )( ::vgui::KeyCode ))(&ScrollBar_wrapper::default_OnKeyCodePressed)
            , ( bp::arg("code") ) )    
        .def( 
            "OnKeyCodeReleased"
            , (void ( ::vgui::Panel::* )( ::vgui::KeyCode ))(&::vgui::Panel::OnKeyCodeReleased)
            , (void ( ScrollBar_wrapper::* )( ::vgui::KeyCode ))(&ScrollBar_wrapper::default_OnKeyCodeReleased)
            , ( bp::arg("code") ) )    
        .def( 
            "OnKeyCodeTyped"
            , (void ( ::vgui::Panel::* )( ::vgui::KeyCode ))(&::vgui::Panel::OnKeyCodeTyped)
            , (void ( ScrollBar_wrapper::* )( ::vgui::KeyCode ))(&ScrollBar_wrapper::default_OnKeyCodeTyped)
            , ( bp::arg("code") ) )    
        .def( 
            "OnKeyFocusTicked"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::OnKeyFocusTicked)
            , (void ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::default_OnKeyFocusTicked) )    
        .def( 
            "OnKillFocus"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::OnKillFocus)
            , (void ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::default_OnKillFocus) )    
        .def( 
            "OnMouseCaptureLost"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::OnMouseCaptureLost)
            , (void ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::default_OnMouseCaptureLost) )    
        .def( 
            "OnMouseDoublePressed"
            , (void ( ::vgui::Panel::* )( ::vgui::MouseCode ))(&::vgui::Panel::OnMouseDoublePressed)
            , (void ( ScrollBar_wrapper::* )( ::vgui::MouseCode ))(&ScrollBar_wrapper::default_OnMouseDoublePressed)
            , ( bp::arg("code") ) )    
        .def( 
            "OnMousePressed"
            , (void ( ::vgui::Panel::* )( ::vgui::MouseCode ))(&::vgui::Panel::OnMousePressed)
            , (void ( ScrollBar_wrapper::* )( ::vgui::MouseCode ))(&ScrollBar_wrapper::default_OnMousePressed)
            , ( bp::arg("code") ) )    
        .def( 
            "OnMouseReleased"
            , (void ( ::vgui::Panel::* )( ::vgui::MouseCode ))(&::vgui::Panel::OnMouseReleased)
            , (void ( ScrollBar_wrapper::* )( ::vgui::MouseCode ))(&ScrollBar_wrapper::default_OnMouseReleased)
            , ( bp::arg("code") ) )    
        .def( 
            "OnMouseTriplePressed"
            , (void ( ::vgui::Panel::* )( ::vgui::MouseCode ))(&::vgui::Panel::OnMouseTriplePressed)
            , (void ( ScrollBar_wrapper::* )( ::vgui::MouseCode ))(&ScrollBar_wrapper::default_OnMouseTriplePressed)
            , ( bp::arg("code") ) )    
        .def( 
            "OnMouseWheeled"
            , (void ( ::vgui::Panel::* )( int ))(&::vgui::Panel::OnMouseWheeled)
            , (void ( ScrollBar_wrapper::* )( int ))(&ScrollBar_wrapper::default_OnMouseWheeled)
            , ( bp::arg("delta") ) )    
        .def( 
            "OnRequestFocus"
            , (void ( ScrollBar_wrapper::* )( ::vgui::VPANEL,::vgui::VPANEL ))(&ScrollBar_wrapper::default_OnRequestFocus)
            , ( bp::arg("subFocus"), bp::arg("defaultPanel") ) )    
        .def( 
            "OnScreenSizeChanged"
            , (void ( ScrollBar_wrapper::* )( int,int ))(&ScrollBar_wrapper::default_OnScreenSizeChanged)
            , ( bp::arg("oldwide"), bp::arg("oldtall") ) )    
        .def( 
            "OnSetFocus"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::OnSetFocus)
            , (void ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::default_OnSetFocus) )    
        .def( 
            "OnStartDragging"
            , (void ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::OnStartDragging) )    
        .def( 
            "OnThink"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::OnThink)
            , (void ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::default_OnThink) )    
        .def( 
            "OnTick"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::OnTick)
            , (void ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::default_OnTick) )    
        .def( 
            "Paint"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::Paint)
            , (void ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::default_Paint) )    
        .def( 
            "PaintBackground"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::PaintBackground)
            , (void ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::default_PaintBackground) )    
        .def( 
            "PaintBuildOverlay"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::PaintBuildOverlay)
            , (void ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::default_PaintBuildOverlay) )    
        .def( 
            "PaintTraverse"
            , (void ( ScrollBar_wrapper::* )( bool,bool ))(&ScrollBar_wrapper::PaintTraverse)
            , ( bp::arg("Repaint"), bp::arg("allowForce")=(bool)(true) ) )    
        .def( 
            "PostChildPaint"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::PostChildPaint)
            , (void ( ScrollBar_wrapper::* )(  ))(&ScrollBar_wrapper::default_PostChildPaint) )    
        .def( 
            "SetBgColor"
            , (void ( ::vgui::Panel::* )( ::Color ))(&::vgui::Panel::SetBgColor)
            , (void ( ScrollBar_wrapper::* )( ::Color ))(&ScrollBar_wrapper::default_SetBgColor)
            , ( bp::arg("color") ) )    
        .def( 
            "SetBorder"
            , (void ( ::vgui::Panel::* )( ::vgui::IBorder * ))(&::vgui::Panel::SetBorder)
            , (void ( ScrollBar_wrapper::* )( ::vgui::IBorder * ))(&ScrollBar_wrapper::default_SetBorder)
            , ( bp::arg("border") ) )    
        .def( 
            "SetCursor"
            , (void ( ::vgui::Panel::* )( ::vgui::HCursor ))(&::vgui::Panel::SetCursor)
            , (void ( ScrollBar_wrapper::* )( ::vgui::HCursor ))(&ScrollBar_wrapper::default_SetCursor)
            , ( bp::arg("cursor") ) )    
        .def( 
            "SetDragEnabled"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetDragEnabled)
            , (void ( ScrollBar_wrapper::* )( bool ))(&ScrollBar_wrapper::default_SetDragEnabled)
            , ( bp::arg("enabled") ) )    
        .def( 
            "SetEnabled"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetEnabled)
            , (void ( ScrollBar_wrapper::* )( bool ))(&ScrollBar_wrapper::default_SetEnabled)
            , ( bp::arg("state") ) )    
        .def( 
            "SetFgColor"
            , (void ( ::vgui::Panel::* )( ::Color ))(&::vgui::Panel::SetFgColor)
            , (void ( ScrollBar_wrapper::* )( ::Color ))(&ScrollBar_wrapper::default_SetFgColor)
            , ( bp::arg("color") ) )    
        .def( 
            "SetKeyBoardInputEnabled"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetKeyBoardInputEnabled)
            , (void ( ScrollBar_wrapper::* )( bool ))(&ScrollBar_wrapper::default_SetKeyBoardInputEnabled)
            , ( bp::arg("state") ) )    
        .def( 
            "SetMouseInputEnabled"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetMouseInputEnabled)
            , (void ( ScrollBar_wrapper::* )( bool ))(&ScrollBar_wrapper::default_SetMouseInputEnabled)
            , ( bp::arg("state") ) )    
        .def( 
            "SetOverridableColor"
            , (void ( ScrollBar_wrapper::* )( ::Color *,::Color const & ))(&ScrollBar_wrapper::SetOverridableColor)
            , ( bp::arg("pColor"), bp::arg("newColor") ) )    
        .def( 
            "SetPaintBackgroundType"
            , (void ( ::vgui::Panel::* )( int ))(&::vgui::Panel::SetPaintBackgroundType)
            , (void ( ScrollBar_wrapper::* )( int ))(&ScrollBar_wrapper::default_SetPaintBackgroundType)
            , ( bp::arg("type") ) )    
        .def( 
            "SetParent"
            , (void ( ::vgui::Panel::* )( ::vgui::Panel * ))(&::vgui::Panel::SetParent)
            , (void ( ScrollBar_wrapper::* )( ::vgui::Panel * ))(&ScrollBar_wrapper::default_SetParent)
            , ( bp::arg("newParent") ) )    
        .def( 
            "SetParent"
            , (void ( ::vgui::Panel::* )( ::vgui::VPANEL ))(&::vgui::Panel::SetParent)
            , (void ( ScrollBar_wrapper::* )( ::vgui::VPANEL ))(&ScrollBar_wrapper::default_SetParent)
            , ( bp::arg("newParent") ) )    
        .def( 
            "SetScheme"
            , (void ( ::vgui::Panel::* )( char const * ))(&::vgui::Panel::SetScheme)
            , (void ( ScrollBar_wrapper::* )( char const * ))(&ScrollBar_wrapper::default_SetScheme)
            , ( bp::arg("tag") ) )    
        .def( 
            "SetScheme"
            , (void ( ::vgui::Panel::* )( ::vgui::HScheme ))(&::vgui::Panel::SetScheme)
            , (void ( ScrollBar_wrapper::* )( ::vgui::HScheme ))(&ScrollBar_wrapper::default_SetScheme)
            , ( bp::arg("scheme") ) )    
        .def( 
            "SetVisible"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetVisible)
            , (void ( ScrollBar_wrapper::* )( bool ))(&ScrollBar_wrapper::default_SetVisible)
            , ( bp::arg("state") ) )    
        .staticmethod( "GetPanelBaseClassName" )    
        .staticmethod( "GetPanelClassName" );

}
