// This file has been generated by Py++.

#include "cbase.h"
#include "__convenience.pypp.hpp"
#include "__call_policies.pypp.hpp"
#include "cbase.h"
#include "vgui_controls/Panel.h"
#include "vgui_controls/AnimationController.h"
#include "vgui_controls/EditablePanel.h"
#include "vgui_controls/AnalogBar.h"
#include "vgui_controls/Image.h"
#include "vgui_controls/TextImage.h"
#include "vgui_controls/ScrollBar.h"
#include "vgui_controls/ScrollBarSlider.h"
#include "vgui_controls/Menu.h"
#include "vgui_controls/MenuButton.h"
#include "vgui_controls/Frame.h"
#include "vgui_controls/TextEntry.h"
#include "vgui_controls/RichText.h"
#include "vgui_controls/Tooltip.h"
#include "vgui/IBorder.h"
#include "vgui_bitmapimage.h"
#include "vgui_avatarimage.h"
#include "srcpy_vgui.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "IBorder.pypp.hpp"

namespace bp = boost::python;

struct IBorder_wrapper : vgui::IBorder, bp::wrapper< vgui::IBorder > {

    IBorder_wrapper( )
    : vgui::IBorder( )
      , bp::wrapper< vgui::IBorder >(){
        // null constructor
    
    }

    virtual void ApplySchemeSettings( ::vgui::IScheme * pScheme, ::KeyValues * inResourceData ){
        bp::override func_ApplySchemeSettings = this->get_override( "ApplySchemeSettings" );
        try {
            func_ApplySchemeSettings( boost::python::ptr(pScheme), boost::python::ptr(inResourceData) );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

    virtual ::vgui::IBorder::backgroundtype_e GetBackgroundType(  ){
        bp::override func_GetBackgroundType = this->get_override( "GetBackgroundType" );
        try {
            return func_GetBackgroundType(  );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

    virtual void GetInset( int & left, int & top, int & right, int & bottom ) {
        namespace bpl = boost::python;
        if( bpl::override func_GetInset = this->get_override( "GetInset" ) ){
            bpl::object py_result = bpl::call<bpl::object>( func_GetInset.ptr() );
            left = boost::python::extract< int >( pyplus_conv::get_out_argument( py_result, "left" ) );
            top = boost::python::extract< int >( pyplus_conv::get_out_argument( py_result, "top" ) );
            right = boost::python::extract< int >( pyplus_conv::get_out_argument( py_result, "right" ) );
            bottom = boost::python::extract< int >( pyplus_conv::get_out_argument( py_result, "bottom" ) );
        }
        else{
              PyErr_SetString(PyExc_NotImplementedError, "Attempted calling Pure Virtual function that is not implemented :GetInset");
              boost::python::throw_error_already_set();
        }
    }
    
    static boost::python::tuple default_GetInset( ::vgui::IBorder & inst ){
        int left2;
        int top2;
        int right2;
        int bottom2;
        if( dynamic_cast< IBorder_wrapper * >( boost::addressof( inst ) ) ){
              PyErr_SetString(PyExc_NotImplementedError, "Attempted calling Pure Virtual function that is not implemented :GetInset");
              boost::python::throw_error_already_set();
        }
        else{
            inst.GetInset(left2, top2, right2, bottom2);
        }
        return bp::make_tuple( left2, top2, right2, bottom2 );
    }

    virtual char const * GetName(  ){
        bp::override func_GetName = this->get_override( "GetName" );
        try {
            return func_GetName(  );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

    virtual void Paint( ::vgui::VPANEL panel ){
        bp::override func_Paint = this->get_override( "Paint" );
        try {
            func_Paint( panel );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

    virtual void Paint( int x0, int y0, int x1, int y1 ){
        bp::override func_Paint = this->get_override( "Paint" );
        try {
            func_Paint( x0, y0, x1, y1 );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

    virtual void Paint( int x0, int y0, int x1, int y1, int breakSide, int breakStart, int breakStop ){
        bp::override func_Paint = this->get_override( "Paint" );
        try {
            func_Paint( x0, y0, x1, y1, breakSide, breakStart, breakStop );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

    virtual bool PaintFirst(  ){
        bp::override func_PaintFirst = this->get_override( "PaintFirst" );
        try {
            return func_PaintFirst(  );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

    virtual void SetInset( int left, int top, int right, int bottom ){
        bp::override func_SetInset = this->get_override( "SetInset" );
        try {
            func_SetInset( left, top, right, bottom );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

    virtual void SetName( char const * name ){
        bp::override func_SetName = this->get_override( "SetName" );
        try {
            func_SetName( name );
        } catch(bp::error_already_set &) {
            throw boost::python::error_already_set();
        }
    }

};

void register_IBorder_class(){

    { //::vgui::IBorder
        typedef bp::class_< IBorder_wrapper, boost::noncopyable > IBorder_exposer_t;
        IBorder_exposer_t IBorder_exposer = IBorder_exposer_t( "IBorder", bp::init< >() );
        bp::scope IBorder_scope( IBorder_exposer );
        bp::enum_< vgui::IBorder::backgroundtype_e>("backgroundtype_e")
            .value("BACKGROUND_FILLED", vgui::IBorder::BACKGROUND_FILLED)
            .value("BACKGROUND_TEXTURED", vgui::IBorder::BACKGROUND_TEXTURED)
            .value("BACKGROUND_ROUNDEDCORNERS", vgui::IBorder::BACKGROUND_ROUNDEDCORNERS)
            .export_values()
            ;
        bp::enum_< vgui::IBorder::sides_e>("sides_e")
            .value("SIDE_LEFT", vgui::IBorder::SIDE_LEFT)
            .value("SIDE_TOP", vgui::IBorder::SIDE_TOP)
            .value("SIDE_RIGHT", vgui::IBorder::SIDE_RIGHT)
            .value("SIDE_BOTTOM", vgui::IBorder::SIDE_BOTTOM)
            .export_values()
            ;
        { //::vgui::IBorder::ApplySchemeSettings
        
            typedef void ( ::vgui::IBorder::*ApplySchemeSettings_function_type)( ::vgui::IScheme *,::KeyValues * ) ;
            
            IBorder_exposer.def( 
                "ApplySchemeSettings"
                , bp::pure_virtual( ApplySchemeSettings_function_type(&::vgui::IBorder::ApplySchemeSettings) )
                , ( bp::arg("pScheme"), bp::arg("inResourceData") ) );
        
        }
        { //::vgui::IBorder::GetBackgroundType
        
            typedef ::vgui::IBorder::backgroundtype_e ( ::vgui::IBorder::*GetBackgroundType_function_type)(  ) ;
            
            IBorder_exposer.def( 
                "GetBackgroundType"
                , bp::pure_virtual( GetBackgroundType_function_type(&::vgui::IBorder::GetBackgroundType) ) );
        
        }
        { //::vgui::IBorder::GetInset
        
            typedef boost::python::tuple ( *default_GetInset_function_type )( ::vgui::IBorder & );
            
            IBorder_exposer.def( 
                "GetInset"
                , default_GetInset_function_type( &IBorder_wrapper::default_GetInset )
                , ( bp::arg("inst") ) );
        
        }
        { //::vgui::IBorder::GetName
        
            typedef char const * ( ::vgui::IBorder::*GetName_function_type)(  ) ;
            
            IBorder_exposer.def( 
                "GetName"
                , bp::pure_virtual( GetName_function_type(&::vgui::IBorder::GetName) ) );
        
        }
        { //::vgui::IBorder::Paint
        
            typedef void ( ::vgui::IBorder::*Paint_function_type)( ::vgui::VPANEL ) ;
            
            IBorder_exposer.def( 
                "Paint"
                , bp::pure_virtual( Paint_function_type(&::vgui::IBorder::Paint) )
                , ( bp::arg("panel") ) );
        
        }
        { //::vgui::IBorder::Paint
        
            typedef void ( ::vgui::IBorder::*Paint_function_type)( int,int,int,int ) ;
            
            IBorder_exposer.def( 
                "Paint"
                , bp::pure_virtual( Paint_function_type(&::vgui::IBorder::Paint) )
                , ( bp::arg("x0"), bp::arg("y0"), bp::arg("x1"), bp::arg("y1") ) );
        
        }
        { //::vgui::IBorder::Paint
        
            typedef void ( ::vgui::IBorder::*Paint_function_type)( int,int,int,int,int,int,int ) ;
            
            IBorder_exposer.def( 
                "Paint"
                , bp::pure_virtual( Paint_function_type(&::vgui::IBorder::Paint) )
                , ( bp::arg("x0"), bp::arg("y0"), bp::arg("x1"), bp::arg("y1"), bp::arg("breakSide"), bp::arg("breakStart"), bp::arg("breakStop") ) );
        
        }
        { //::vgui::IBorder::PaintFirst
        
            typedef bool ( ::vgui::IBorder::*PaintFirst_function_type)(  ) ;
            
            IBorder_exposer.def( 
                "PaintFirst"
                , bp::pure_virtual( PaintFirst_function_type(&::vgui::IBorder::PaintFirst) ) );
        
        }
        { //::vgui::IBorder::SetInset
        
            typedef void ( ::vgui::IBorder::*SetInset_function_type)( int,int,int,int ) ;
            
            IBorder_exposer.def( 
                "SetInset"
                , bp::pure_virtual( SetInset_function_type(&::vgui::IBorder::SetInset) )
                , ( bp::arg("left"), bp::arg("top"), bp::arg("right"), bp::arg("bottom") ) );
        
        }
        { //::vgui::IBorder::SetName
        
            typedef void ( ::vgui::IBorder::*SetName_function_type)( char const * ) ;
            
            IBorder_exposer.def( 
                "SetName"
                , bp::pure_virtual( SetName_function_type(&::vgui::IBorder::SetName) )
                , ( bp::arg("name") ) );
        
        }
    }

}
