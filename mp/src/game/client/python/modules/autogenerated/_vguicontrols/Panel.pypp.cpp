// This file has been generated by Py++.

#include "cbase.h"
#include "__convenience.pypp.hpp"
#include "__call_policies.pypp.hpp"
#include "cbase.h"
#include "vgui_controls/Panel.h"
#include "vgui_controls/AnimationController.h"
#include "vgui_controls/EditablePanel.h"
#include "vgui_controls/AnalogBar.h"
#include "vgui_controls/Image.h"
#include "vgui_controls/TextImage.h"
#include "vgui_controls/ScrollBar.h"
#include "vgui_controls/ScrollBarSlider.h"
#include "vgui_controls/Menu.h"
#include "vgui_controls/MenuButton.h"
#include "vgui_controls/Frame.h"
#include "vgui_controls/TextEntry.h"
#include "vgui_controls/RichText.h"
#include "vgui_controls/Tooltip.h"
#include "vgui/IBorder.h"
#include "vgui_bitmapimage.h"
#include "vgui_avatarimage.h"
#include "srcpy_vgui.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "Panel.pypp.hpp"

namespace bp = boost::python;

struct Panel_wrapper : vgui::Panel, bp::wrapper< vgui::Panel > {

    Panel_wrapper( )
    : vgui::Panel( )
      , bp::wrapper< vgui::Panel >(){
        // null constructor
    	g_PythonPanelCount++;
    }

    Panel_wrapper(::vgui::Panel * parent )
    : vgui::Panel( parent )
      , bp::wrapper< vgui::Panel >(){
        // constructor
    	g_PythonPanelCount++;
    }

    Panel_wrapper(::vgui::Panel * parent, char const * panelName )
    : vgui::Panel( parent, panelName )
      , bp::wrapper< vgui::Panel >(){
        // constructor
    	g_PythonPanelCount++;
    }

    Panel_wrapper(::vgui::Panel * parent, char const * panelName, ::vgui::HScheme scheme )
    : vgui::Panel( parent, panelName, scheme )
      , bp::wrapper< vgui::Panel >(){
        // constructor
    	g_PythonPanelCount++;
    }

    void AddToOverridableColors( ::Color * pColor, char const * scriptname ){
        vgui::Panel::AddToOverridableColors( pColor, scriptname );
    }

    void ApplyOverridableColors(  ){
        vgui::Panel::ApplyOverridableColors(  );
    }

    virtual void ApplySchemeSettings( ::vgui::IScheme * pScheme ) {
        PY_OVERRIDE_CHECK( vgui::Panel, ApplySchemeSettings )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, ApplySchemeSettings )
        bp::override func_ApplySchemeSettings = this->get_override( "ApplySchemeSettings" );
        if( func_ApplySchemeSettings.ptr() != Py_None )
            try {
                func_ApplySchemeSettings( boost::python::ptr(pScheme) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::ApplySchemeSettings( pScheme );
            }
        else
            this->vgui::Panel::ApplySchemeSettings( pScheme );
    }
    
    void default_ApplySchemeSettings( ::vgui::IScheme * pScheme ) {
        vgui::Panel::ApplySchemeSettings( pScheme );
    }

    void CreateDragData(  ){
        vgui::Panel::CreateDragData(  );
    }

    void DragDropStartDragging(  ){
        vgui::Panel::DragDropStartDragging(  );
    }

    static boost::python::tuple GetBounds( ::vgui::Panel & inst ){
        int x2;
        int y2;
        int wide2;
        int tall2;
        inst.GetBounds(x2, y2, wide2, tall2);
        return bp::make_tuple( x2, y2, wide2, tall2 );
    }

    static boost::python::tuple GetClipRect( ::vgui::Panel & inst ){
        int x02;
        int y02;
        int x12;
        int y12;
        inst.GetClipRect(x02, y02, x12, y12);
        return bp::make_tuple( x02, y02, x12, y12 );
    }

    static boost::python::tuple GetCornerTextureSize( ::vgui::Panel & inst ){
        int w2;
        int h2;
        inst.GetCornerTextureSize(w2, h2);
        return bp::make_tuple( w2, h2 );
    }

    static boost::python::tuple GetInset( ::vgui::Panel & inst ){
        int left2;
        int top2;
        int right2;
        int bottom2;
        inst.GetInset(left2, top2, right2, bottom2);
        return bp::make_tuple( left2, top2, right2, bottom2 );
    }

    static boost::python::tuple GetMinimumSize( ::vgui::Panel & inst ){
        int wide2;
        int tall2;
        inst.GetMinimumSize(wide2, tall2);
        return bp::make_tuple( wide2, tall2 );
    }

    ::vgui::Panel * GetNavActivatePanel(  ){
        return vgui::Panel::GetNavActivatePanel(  );
    }

    ::vgui::Panel * GetNavBackPanel(  ){
        return vgui::Panel::GetNavBackPanel(  );
    }

    ::vgui::Panel * GetNavDownPanel(  ){
        return vgui::Panel::GetNavDownPanel(  );
    }

    ::vgui::Panel * GetNavLeftPanel(  ){
        return vgui::Panel::GetNavLeftPanel(  );
    }

    ::vgui::Panel * GetNavRightPanel(  ){
        return vgui::Panel::GetNavRightPanel(  );
    }

    ::vgui::Panel * GetNavToRelayPanel(  ){
        return vgui::Panel::GetNavToRelayPanel(  );
    }

    ::vgui::Panel * GetNavUpPanel(  ){
        return vgui::Panel::GetNavUpPanel(  );
    }

    static boost::python::tuple GetPaintSize( ::vgui::Panel & inst ){
        int wide2;
        int tall2;
        inst.GetPaintSize(wide2, tall2);
        return bp::make_tuple( wide2, tall2 );
    }

    static boost::python::tuple GetPinOffset( ::vgui::Panel & inst ){
        int dx2;
        int dy2;
        inst.GetPinOffset(dx2, dy2);
        return bp::make_tuple( dx2, dy2 );
    }

    static boost::python::tuple GetPos( ::vgui::Panel & inst ){
        int x2;
        int y2;
        inst.GetPos(x2, y2);
        return bp::make_tuple( x2, y2 );
    }

    static boost::python::tuple GetResizeOffset( ::vgui::Panel & inst ){
        int dx2;
        int dy2;
        inst.GetResizeOffset(dx2, dy2);
        return bp::make_tuple( dx2, dy2 );
    }

    static boost::python::tuple GetSize( ::vgui::Panel & inst ){
        int wide2;
        int tall2;
        inst.GetSize(wide2, tall2);
        return bp::make_tuple( wide2, tall2 );
    }

    virtual void InvalidateLayout( bool layoutNow=false, bool reloadScheme=false ) {
        PY_OVERRIDE_CHECK( vgui::Panel, InvalidateLayout )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, InvalidateLayout )
        bp::override func_InvalidateLayout = this->get_override( "InvalidateLayout" );
        if( func_InvalidateLayout.ptr() != Py_None )
            try {
                func_InvalidateLayout( layoutNow, reloadScheme );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::InvalidateLayout( layoutNow, reloadScheme );
            }
        else
            this->vgui::Panel::InvalidateLayout( layoutNow, reloadScheme );
    }
    
    void default_InvalidateLayout( bool layoutNow=false, bool reloadScheme=false ) {
        vgui::Panel::InvalidateLayout( layoutNow, reloadScheme );
    }

    static boost::python::tuple LocalToScreen( ::vgui::Panel & inst, int x, int y ){
        inst.LocalToScreen(x, y);
        return bp::make_tuple( x, y );
    }

    virtual void OnChildAdded( ::vgui::VPANEL child ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnChildAdded )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnChildAdded )
        bp::override func_OnChildAdded = this->get_override( "OnChildAdded" );
        if( func_OnChildAdded.ptr() != Py_None )
            try {
                func_OnChildAdded( child );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnChildAdded( child );
            }
        else
            this->vgui::Panel::OnChildAdded( child );
    }
    
    void default_OnChildAdded( ::vgui::VPANEL child ) {
        vgui::Panel::OnChildAdded( child );
    }

    void OnChildSettingsApplied( ::KeyValues * pInResourceData, ::vgui::Panel * pChild ){
        vgui::Panel::OnChildSettingsApplied( pInResourceData, pChild );
    }

    virtual void OnCommand( char const * command ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnCommand )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnCommand )
        bp::override func_OnCommand = this->get_override( "OnCommand" );
        if( func_OnCommand.ptr() != Py_None )
            try {
                func_OnCommand( command );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnCommand( command );
            }
        else
            this->vgui::Panel::OnCommand( command );
    }
    
    void default_OnCommand( char const * command ) {
        vgui::Panel::OnCommand( command );
    }

    void OnContinueDragging(  ){
        vgui::Panel::OnContinueDragging(  );
    }

    virtual void OnCursorEntered(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnCursorEntered )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnCursorEntered )
        bp::override func_OnCursorEntered = this->get_override( "OnCursorEntered" );
        if( func_OnCursorEntered.ptr() != Py_None )
            try {
                func_OnCursorEntered(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnCursorEntered(  );
            }
        else
            this->vgui::Panel::OnCursorEntered(  );
    }
    
    void default_OnCursorEntered(  ) {
        vgui::Panel::OnCursorEntered( );
    }

    virtual void OnCursorExited(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnCursorExited )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnCursorExited )
        bp::override func_OnCursorExited = this->get_override( "OnCursorExited" );
        if( func_OnCursorExited.ptr() != Py_None )
            try {
                func_OnCursorExited(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnCursorExited(  );
            }
        else
            this->vgui::Panel::OnCursorExited(  );
    }
    
    void default_OnCursorExited(  ) {
        vgui::Panel::OnCursorExited( );
    }

    virtual void OnCursorMoved( int x, int y ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnCursorMoved )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnCursorMoved )
        bp::override func_OnCursorMoved = this->get_override( "OnCursorMoved" );
        if( func_OnCursorMoved.ptr() != Py_None )
            try {
                func_OnCursorMoved( x, y );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnCursorMoved( x, y );
            }
        else
            this->vgui::Panel::OnCursorMoved( x, y );
    }
    
    void default_OnCursorMoved( int x, int y ) {
        vgui::Panel::OnCursorMoved( x, y );
    }

    void OnFinishDragging( bool mousereleased, ::vgui::MouseCode code, bool aborted=false ){
        vgui::Panel::OnFinishDragging( mousereleased, code, aborted );
    }

    virtual void OnKeyCodePressed( ::vgui::KeyCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnKeyCodePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnKeyCodePressed )
        bp::override func_OnKeyCodePressed = this->get_override( "OnKeyCodePressed" );
        if( func_OnKeyCodePressed.ptr() != Py_None )
            try {
                func_OnKeyCodePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnKeyCodePressed( code );
            }
        else
            this->vgui::Panel::OnKeyCodePressed( code );
    }
    
    void default_OnKeyCodePressed( ::vgui::KeyCode code ) {
        vgui::Panel::OnKeyCodePressed( code );
    }

    virtual void OnKeyCodeReleased( ::vgui::KeyCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnKeyCodeReleased )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnKeyCodeReleased )
        bp::override func_OnKeyCodeReleased = this->get_override( "OnKeyCodeReleased" );
        if( func_OnKeyCodeReleased.ptr() != Py_None )
            try {
                func_OnKeyCodeReleased( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnKeyCodeReleased( code );
            }
        else
            this->vgui::Panel::OnKeyCodeReleased( code );
    }
    
    void default_OnKeyCodeReleased( ::vgui::KeyCode code ) {
        vgui::Panel::OnKeyCodeReleased( code );
    }

    virtual void OnKeyCodeTyped( ::vgui::KeyCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnKeyCodeTyped )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnKeyCodeTyped )
        bp::override func_OnKeyCodeTyped = this->get_override( "OnKeyCodeTyped" );
        if( func_OnKeyCodeTyped.ptr() != Py_None )
            try {
                func_OnKeyCodeTyped( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnKeyCodeTyped( code );
            }
        else
            this->vgui::Panel::OnKeyCodeTyped( code );
    }
    
    void default_OnKeyCodeTyped( ::vgui::KeyCode code ) {
        vgui::Panel::OnKeyCodeTyped( code );
    }

    virtual void OnKeyFocusTicked(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnKeyFocusTicked )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnKeyFocusTicked )
        bp::override func_OnKeyFocusTicked = this->get_override( "OnKeyFocusTicked" );
        if( func_OnKeyFocusTicked.ptr() != Py_None )
            try {
                func_OnKeyFocusTicked(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnKeyFocusTicked(  );
            }
        else
            this->vgui::Panel::OnKeyFocusTicked(  );
    }
    
    void default_OnKeyFocusTicked(  ) {
        vgui::Panel::OnKeyFocusTicked( );
    }

    virtual void OnKillFocus(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnKillFocus )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnKillFocus )
        bp::override func_OnKillFocus = this->get_override( "OnKillFocus" );
        if( func_OnKillFocus.ptr() != Py_None )
            try {
                func_OnKillFocus(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnKillFocus(  );
            }
        else
            this->vgui::Panel::OnKillFocus(  );
    }
    
    void default_OnKillFocus(  ) {
        vgui::Panel::OnKillFocus( );
    }

    virtual void OnMouseCaptureLost(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMouseCaptureLost )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMouseCaptureLost )
        bp::override func_OnMouseCaptureLost = this->get_override( "OnMouseCaptureLost" );
        if( func_OnMouseCaptureLost.ptr() != Py_None )
            try {
                func_OnMouseCaptureLost(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMouseCaptureLost(  );
            }
        else
            this->vgui::Panel::OnMouseCaptureLost(  );
    }
    
    void default_OnMouseCaptureLost(  ) {
        vgui::Panel::OnMouseCaptureLost( );
    }

    virtual void OnMouseDoublePressed( ::vgui::MouseCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMouseDoublePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMouseDoublePressed )
        bp::override func_OnMouseDoublePressed = this->get_override( "OnMouseDoublePressed" );
        if( func_OnMouseDoublePressed.ptr() != Py_None )
            try {
                func_OnMouseDoublePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMouseDoublePressed( code );
            }
        else
            this->vgui::Panel::OnMouseDoublePressed( code );
    }
    
    void default_OnMouseDoublePressed( ::vgui::MouseCode code ) {
        vgui::Panel::OnMouseDoublePressed( code );
    }

    virtual void OnMouseFocusTicked(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMouseFocusTicked )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMouseFocusTicked )
        bp::override func_OnMouseFocusTicked = this->get_override( "OnMouseFocusTicked" );
        if( func_OnMouseFocusTicked.ptr() != Py_None )
            try {
                func_OnMouseFocusTicked(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMouseFocusTicked(  );
            }
        else
            this->vgui::Panel::OnMouseFocusTicked(  );
    }
    
    void default_OnMouseFocusTicked(  ) {
        vgui::Panel::OnMouseFocusTicked( );
    }

    virtual void OnMousePressed( ::vgui::MouseCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMousePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMousePressed )
        bp::override func_OnMousePressed = this->get_override( "OnMousePressed" );
        if( func_OnMousePressed.ptr() != Py_None )
            try {
                func_OnMousePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMousePressed( code );
            }
        else
            this->vgui::Panel::OnMousePressed( code );
    }
    
    void default_OnMousePressed( ::vgui::MouseCode code ) {
        vgui::Panel::OnMousePressed( code );
    }

    virtual void OnMouseReleased( ::vgui::MouseCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMouseReleased )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMouseReleased )
        bp::override func_OnMouseReleased = this->get_override( "OnMouseReleased" );
        if( func_OnMouseReleased.ptr() != Py_None )
            try {
                func_OnMouseReleased( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMouseReleased( code );
            }
        else
            this->vgui::Panel::OnMouseReleased( code );
    }
    
    void default_OnMouseReleased( ::vgui::MouseCode code ) {
        vgui::Panel::OnMouseReleased( code );
    }

    virtual void OnMouseTriplePressed( ::vgui::MouseCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMouseTriplePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMouseTriplePressed )
        bp::override func_OnMouseTriplePressed = this->get_override( "OnMouseTriplePressed" );
        if( func_OnMouseTriplePressed.ptr() != Py_None )
            try {
                func_OnMouseTriplePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMouseTriplePressed( code );
            }
        else
            this->vgui::Panel::OnMouseTriplePressed( code );
    }
    
    void default_OnMouseTriplePressed( ::vgui::MouseCode code ) {
        vgui::Panel::OnMouseTriplePressed( code );
    }

    virtual void OnMouseWheeled( int delta ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMouseWheeled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMouseWheeled )
        bp::override func_OnMouseWheeled = this->get_override( "OnMouseWheeled" );
        if( func_OnMouseWheeled.ptr() != Py_None )
            try {
                func_OnMouseWheeled( delta );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMouseWheeled( delta );
            }
        else
            this->vgui::Panel::OnMouseWheeled( delta );
    }
    
    void default_OnMouseWheeled( int delta ) {
        vgui::Panel::OnMouseWheeled( delta );
    }

    virtual void OnRequestFocus( ::vgui::VPANEL subFocus, ::vgui::VPANEL defaultPanel ){
        PY_OVERRIDE_CHECK( vgui::Panel, OnRequestFocus )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnRequestFocus )
        bp::override func_OnRequestFocus = this->get_override( "OnRequestFocus" );
        if( func_OnRequestFocus.ptr() != Py_None )
            try {
                func_OnRequestFocus( subFocus, defaultPanel );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnRequestFocus( subFocus, defaultPanel );
            }
        else
            this->vgui::Panel::OnRequestFocus( subFocus, defaultPanel );
    }
    
    virtual void default_OnRequestFocus( ::vgui::VPANEL subFocus, ::vgui::VPANEL defaultPanel ){
        vgui::Panel::OnRequestFocus( subFocus, defaultPanel );
    }

    virtual void OnScreenSizeChanged( int oldwide, int oldtall ){
        PY_OVERRIDE_CHECK( vgui::Panel, OnScreenSizeChanged )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnScreenSizeChanged )
        bp::override func_OnScreenSizeChanged = this->get_override( "OnScreenSizeChanged" );
        if( func_OnScreenSizeChanged.ptr() != Py_None )
            try {
                func_OnScreenSizeChanged( oldwide, oldtall );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnScreenSizeChanged( oldwide, oldtall );
            }
        else
            this->vgui::Panel::OnScreenSizeChanged( oldwide, oldtall );
    }
    
    virtual void default_OnScreenSizeChanged( int oldwide, int oldtall ){
        vgui::Panel::OnScreenSizeChanged( oldwide, oldtall );
    }

    virtual void OnSetFocus(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnSetFocus )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnSetFocus )
        bp::override func_OnSetFocus = this->get_override( "OnSetFocus" );
        if( func_OnSetFocus.ptr() != Py_None )
            try {
                func_OnSetFocus(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnSetFocus(  );
            }
        else
            this->vgui::Panel::OnSetFocus(  );
    }
    
    void default_OnSetFocus(  ) {
        vgui::Panel::OnSetFocus( );
    }

    virtual void OnSizeChanged( int newWide, int newTall ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnSizeChanged )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnSizeChanged )
        bp::override func_OnSizeChanged = this->get_override( "OnSizeChanged" );
        if( func_OnSizeChanged.ptr() != Py_None )
            try {
                func_OnSizeChanged( newWide, newTall );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnSizeChanged( newWide, newTall );
            }
        else
            this->vgui::Panel::OnSizeChanged( newWide, newTall );
    }
    
    void default_OnSizeChanged( int newWide, int newTall ) {
        vgui::Panel::OnSizeChanged( newWide, newTall );
    }

    void OnStartDragging(  ){
        vgui::Panel::OnStartDragging(  );
    }

    virtual void OnThink(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnThink )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnThink )
        bp::override func_OnThink = this->get_override( "OnThink" );
        if( func_OnThink.ptr() != Py_None )
            try {
                func_OnThink(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnThink(  );
            }
        else
            this->vgui::Panel::OnThink(  );
    }
    
    void default_OnThink(  ) {
        vgui::Panel::OnThink( );
    }

    virtual void OnTick(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnTick )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnTick )
        bp::override func_OnTick = this->get_override( "OnTick" );
        if( func_OnTick.ptr() != Py_None )
            try {
                func_OnTick(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnTick(  );
            }
        else
            this->vgui::Panel::OnTick(  );
    }
    
    void default_OnTick(  ) {
        vgui::Panel::OnTick( );
    }

    virtual void Paint(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, Paint )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, Paint )
        bp::override func_Paint = this->get_override( "Paint" );
        if( func_Paint.ptr() != Py_None )
            try {
                func_Paint(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::Paint(  );
            }
        else
            this->vgui::Panel::Paint(  );
    }
    
    void default_Paint(  ) {
        vgui::Panel::Paint( );
    }

    virtual void PaintBackground(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, PaintBackground )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, PaintBackground )
        bp::override func_PaintBackground = this->get_override( "PaintBackground" );
        if( func_PaintBackground.ptr() != Py_None )
            try {
                func_PaintBackground(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::PaintBackground(  );
            }
        else
            this->vgui::Panel::PaintBackground(  );
    }
    
    void default_PaintBackground(  ) {
        vgui::Panel::PaintBackground( );
    }

    virtual void PaintBuildOverlay(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, PaintBuildOverlay )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, PaintBuildOverlay )
        bp::override func_PaintBuildOverlay = this->get_override( "PaintBuildOverlay" );
        if( func_PaintBuildOverlay.ptr() != Py_None )
            try {
                func_PaintBuildOverlay(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::PaintBuildOverlay(  );
            }
        else
            this->vgui::Panel::PaintBuildOverlay(  );
    }
    
    void default_PaintBuildOverlay(  ) {
        vgui::Panel::PaintBuildOverlay( );
    }

    void PaintTraverse( bool Repaint, bool allowForce=true ){
        vgui::Panel::PaintTraverse( Repaint, allowForce );
    }

    static boost::python::tuple ParentLocalToScreen( ::vgui::Panel & inst, int x, int y ){
        inst.ParentLocalToScreen(x, y);
        return bp::make_tuple( x, y );
    }

    virtual void PerformLayout(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, PerformLayout )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, PerformLayout )
        bp::override func_PerformLayout = this->get_override( "PerformLayout" );
        if( func_PerformLayout.ptr() != Py_None )
            try {
                func_PerformLayout(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::PerformLayout(  );
            }
        else
            this->vgui::Panel::PerformLayout(  );
    }
    
    void default_PerformLayout(  ) {
        vgui::Panel::PerformLayout( );
    }

    virtual void PostChildPaint(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, PostChildPaint )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, PostChildPaint )
        bp::override func_PostChildPaint = this->get_override( "PostChildPaint" );
        if( func_PostChildPaint.ptr() != Py_None )
            try {
                func_PostChildPaint(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::PostChildPaint(  );
            }
        else
            this->vgui::Panel::PostChildPaint(  );
    }
    
    void default_PostChildPaint(  ) {
        vgui::Panel::PostChildPaint( );
    }

    static boost::python::tuple ScreenToLocal( ::vgui::Panel & inst, int x, int y ){
        inst.ScreenToLocal(x, y);
        return bp::make_tuple( x, y );
    }

    virtual void SetBgColor( ::Color color ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetBgColor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetBgColor )
        bp::override func_SetBgColor = this->get_override( "SetBgColor" );
        if( func_SetBgColor.ptr() != Py_None )
            try {
                func_SetBgColor( color );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetBgColor( color );
            }
        else
            this->vgui::Panel::SetBgColor( color );
    }
    
    void default_SetBgColor( ::Color color ) {
        vgui::Panel::SetBgColor( color );
    }

    virtual void SetBorder( ::vgui::IBorder * border ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetBorder )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetBorder )
        bp::override func_SetBorder = this->get_override( "SetBorder" );
        if( func_SetBorder.ptr() != Py_None )
            try {
                func_SetBorder( boost::python::ptr(border) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetBorder( border );
            }
        else
            this->vgui::Panel::SetBorder( border );
    }
    
    void default_SetBorder( ::vgui::IBorder * border ) {
        vgui::Panel::SetBorder( border );
    }

    virtual void SetCursor( ::vgui::HCursor cursor ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetCursor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetCursor )
        bp::override func_SetCursor = this->get_override( "SetCursor" );
        if( func_SetCursor.ptr() != Py_None )
            try {
                func_SetCursor( cursor );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetCursor( cursor );
            }
        else
            this->vgui::Panel::SetCursor( cursor );
    }
    
    void default_SetCursor( ::vgui::HCursor cursor ) {
        vgui::Panel::SetCursor( cursor );
    }

    virtual void SetDragEnabled( bool enabled ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetDragEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetDragEnabled )
        bp::override func_SetDragEnabled = this->get_override( "SetDragEnabled" );
        if( func_SetDragEnabled.ptr() != Py_None )
            try {
                func_SetDragEnabled( enabled );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetDragEnabled( enabled );
            }
        else
            this->vgui::Panel::SetDragEnabled( enabled );
    }
    
    void default_SetDragEnabled( bool enabled ) {
        vgui::Panel::SetDragEnabled( enabled );
    }

    virtual void SetEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetEnabled )
        bp::override func_SetEnabled = this->get_override( "SetEnabled" );
        if( func_SetEnabled.ptr() != Py_None )
            try {
                func_SetEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetEnabled( state );
            }
        else
            this->vgui::Panel::SetEnabled( state );
    }
    
    void default_SetEnabled( bool state ) {
        vgui::Panel::SetEnabled( state );
    }

    virtual void SetFgColor( ::Color color ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetFgColor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetFgColor )
        bp::override func_SetFgColor = this->get_override( "SetFgColor" );
        if( func_SetFgColor.ptr() != Py_None )
            try {
                func_SetFgColor( color );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetFgColor( color );
            }
        else
            this->vgui::Panel::SetFgColor( color );
    }
    
    void default_SetFgColor( ::Color color ) {
        vgui::Panel::SetFgColor( color );
    }

    virtual void SetKeyBoardInputEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetKeyBoardInputEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetKeyBoardInputEnabled )
        bp::override func_SetKeyBoardInputEnabled = this->get_override( "SetKeyBoardInputEnabled" );
        if( func_SetKeyBoardInputEnabled.ptr() != Py_None )
            try {
                func_SetKeyBoardInputEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetKeyBoardInputEnabled( state );
            }
        else
            this->vgui::Panel::SetKeyBoardInputEnabled( state );
    }
    
    void default_SetKeyBoardInputEnabled( bool state ) {
        vgui::Panel::SetKeyBoardInputEnabled( state );
    }

    virtual void SetMouseInputEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetMouseInputEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetMouseInputEnabled )
        bp::override func_SetMouseInputEnabled = this->get_override( "SetMouseInputEnabled" );
        if( func_SetMouseInputEnabled.ptr() != Py_None )
            try {
                func_SetMouseInputEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetMouseInputEnabled( state );
            }
        else
            this->vgui::Panel::SetMouseInputEnabled( state );
    }
    
    void default_SetMouseInputEnabled( bool state ) {
        vgui::Panel::SetMouseInputEnabled( state );
    }

    void SetOverridableColor( ::Color * pColor, ::Color const & newColor ){
        vgui::Panel::SetOverridableColor( pColor, newColor );
    }

    virtual void SetPaintBackgroundEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintBackgroundEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintBackgroundEnabled )
        bp::override func_SetPaintBackgroundEnabled = this->get_override( "SetPaintBackgroundEnabled" );
        if( func_SetPaintBackgroundEnabled.ptr() != Py_None )
            try {
                func_SetPaintBackgroundEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintBackgroundEnabled( state );
            }
        else
            this->vgui::Panel::SetPaintBackgroundEnabled( state );
    }
    
    void default_SetPaintBackgroundEnabled( bool state ) {
        vgui::Panel::SetPaintBackgroundEnabled( state );
    }

    virtual void SetPaintBackgroundType( int type ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintBackgroundType )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintBackgroundType )
        bp::override func_SetPaintBackgroundType = this->get_override( "SetPaintBackgroundType" );
        if( func_SetPaintBackgroundType.ptr() != Py_None )
            try {
                func_SetPaintBackgroundType( type );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintBackgroundType( type );
            }
        else
            this->vgui::Panel::SetPaintBackgroundType( type );
    }
    
    void default_SetPaintBackgroundType( int type ) {
        vgui::Panel::SetPaintBackgroundType( type );
    }

    virtual void SetPaintBorderEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintBorderEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintBorderEnabled )
        bp::override func_SetPaintBorderEnabled = this->get_override( "SetPaintBorderEnabled" );
        if( func_SetPaintBorderEnabled.ptr() != Py_None )
            try {
                func_SetPaintBorderEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintBorderEnabled( state );
            }
        else
            this->vgui::Panel::SetPaintBorderEnabled( state );
    }
    
    void default_SetPaintBorderEnabled( bool state ) {
        vgui::Panel::SetPaintBorderEnabled( state );
    }

    virtual void SetPaintEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintEnabled )
        bp::override func_SetPaintEnabled = this->get_override( "SetPaintEnabled" );
        if( func_SetPaintEnabled.ptr() != Py_None )
            try {
                func_SetPaintEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintEnabled( state );
            }
        else
            this->vgui::Panel::SetPaintEnabled( state );
    }
    
    void default_SetPaintEnabled( bool state ) {
        vgui::Panel::SetPaintEnabled( state );
    }

    virtual void SetParent( ::vgui::Panel * newParent ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetParent )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetParent )
        bp::override func_SetParent = this->get_override( "SetParent" );
        if( func_SetParent.ptr() != Py_None )
            try {
                func_SetParent( boost::python::object(*newParent) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetParent( newParent );
            }
        else
            this->vgui::Panel::SetParent( newParent );
    }
    
    void default_SetParent( ::vgui::Panel * newParent ) {
        vgui::Panel::SetParent( newParent );
    }

    virtual void SetParent( ::vgui::VPANEL newParent ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetParent )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetParent )
        bp::override func_SetParent = this->get_override( "SetParent" );
        if( func_SetParent.ptr() != Py_None )
            try {
                func_SetParent( newParent );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetParent( newParent );
            }
        else
            this->vgui::Panel::SetParent( newParent );
    }
    
    void default_SetParent( ::vgui::VPANEL newParent ) {
        vgui::Panel::SetParent( newParent );
    }

    virtual void SetScheme( char const * tag ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetScheme )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetScheme )
        bp::override func_SetScheme = this->get_override( "SetScheme" );
        if( func_SetScheme.ptr() != Py_None )
            try {
                func_SetScheme( tag );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetScheme( tag );
            }
        else
            this->vgui::Panel::SetScheme( tag );
    }
    
    void default_SetScheme( char const * tag ) {
        vgui::Panel::SetScheme( tag );
    }

    virtual void SetScheme( ::vgui::HScheme scheme ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetScheme )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetScheme )
        bp::override func_SetScheme = this->get_override( "SetScheme" );
        if( func_SetScheme.ptr() != Py_None )
            try {
                func_SetScheme( scheme );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetScheme( scheme );
            }
        else
            this->vgui::Panel::SetScheme( scheme );
    }
    
    void default_SetScheme( ::vgui::HScheme scheme ) {
        vgui::Panel::SetScheme( scheme );
    }

    virtual void SetVisible( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetVisible )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetVisible )
        bp::override func_SetVisible = this->get_override( "SetVisible" );
        if( func_SetVisible.ptr() != Py_None )
            try {
                func_SetVisible( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetVisible( state );
            }
        else
            this->vgui::Panel::SetVisible( state );
    }
    
    void default_SetVisible( bool state ) {
        vgui::Panel::SetVisible( state );
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual bool IsPythonManaged() { return true; }

    ~Panel_wrapper( void ) { g_PythonPanelCount--; /*::PyDeletePanel( this, this );*/ }

};

void register_Panel_class(){

    { //::vgui::Panel
        typedef bp::class_< Panel_wrapper, boost::noncopyable > Panel_exposer_t;
        Panel_exposer_t Panel_exposer = Panel_exposer_t( "Panel", bp::init< >() );
        bp::scope Panel_scope( Panel_exposer );
        bp::enum_< vgui::Panel::AutoResize_e>("AutoResize_e")
            .value("AUTORESIZE_NO", vgui::Panel::AUTORESIZE_NO)
            .value("AUTORESIZE_RIGHT", vgui::Panel::AUTORESIZE_RIGHT)
            .value("AUTORESIZE_DOWN", vgui::Panel::AUTORESIZE_DOWN)
            .value("AUTORESIZE_DOWNANDRIGHT", vgui::Panel::AUTORESIZE_DOWNANDRIGHT)
            .export_values()
            ;
        bp::enum_< vgui::Panel::NAV_DIRECTION>("NAV_DIRECTION")
            .value("ND_UP", vgui::Panel::ND_UP)
            .value("ND_DOWN", vgui::Panel::ND_DOWN)
            .value("ND_LEFT", vgui::Panel::ND_LEFT)
            .value("ND_RIGHT", vgui::Panel::ND_RIGHT)
            .value("ND_BACK", vgui::Panel::ND_BACK)
            .value("ND_NONE", vgui::Panel::ND_NONE)
            .export_values()
            ;
        bp::enum_< vgui::Panel::PinCorner_e>("PinCorner_e")
            .value("PIN_TOPLEFT", vgui::Panel::PIN_TOPLEFT)
            .value("PIN_TOPRIGHT", vgui::Panel::PIN_TOPRIGHT)
            .value("PIN_BOTTOMLEFT", vgui::Panel::PIN_BOTTOMLEFT)
            .value("PIN_BOTTOMRIGHT", vgui::Panel::PIN_BOTTOMRIGHT)
            .value("PIN_CENTER_TOP", vgui::Panel::PIN_CENTER_TOP)
            .value("PIN_CENTER_RIGHT", vgui::Panel::PIN_CENTER_RIGHT)
            .value("PIN_CENTER_BOTTOM", vgui::Panel::PIN_CENTER_BOTTOM)
            .value("PIN_CENTER_LEFT", vgui::Panel::PIN_CENTER_LEFT)
            .value("PIN_LAST", vgui::Panel::PIN_LAST)
            .export_values()
            ;
        Panel_exposer.def( bp::init< vgui::Panel * >(( bp::arg("parent") )) );
        bp::implicitly_convertible< vgui::Panel *, vgui::Panel >();
        Panel_exposer.def( bp::init< vgui::Panel *, char const * >(( bp::arg("parent"), bp::arg("panelName") )) );
        Panel_exposer.def( bp::init< vgui::Panel *, char const *, vgui::HScheme >(( bp::arg("parent"), bp::arg("panelName"), bp::arg("scheme") )) );
        { //::vgui::Panel::AddActionSignalTarget
        
            typedef void ( ::vgui::Panel::*AddActionSignalTarget_function_type)( ::vgui::Panel * ) ;
            
            Panel_exposer.def( 
                "AddActionSignalTarget"
                , AddActionSignalTarget_function_type( &::vgui::Panel::AddActionSignalTarget )
                , ( bp::arg("messageTarget") ) );
        
        }
        { //::vgui::Panel::AddActionSignalTarget
        
            typedef void ( ::vgui::Panel::*AddActionSignalTarget_function_type)( ::vgui::VPANEL ) ;
            
            Panel_exposer.def( 
                "AddActionSignalTarget"
                , AddActionSignalTarget_function_type( &::vgui::Panel::AddActionSignalTarget )
                , ( bp::arg("messageTarget") ) );
        
        }
        { //::vgui::Panel::AddKeyBinding
        
            typedef void ( ::vgui::Panel::*AddKeyBinding_function_type)( char const *,int,int ) ;
            
            Panel_exposer.def( 
                "AddKeyBinding"
                , AddKeyBinding_function_type( &::vgui::Panel::AddKeyBinding )
                , ( bp::arg("bindingName"), bp::arg("keycode"), bp::arg("modifiers") ) );
        
        }
        { //::vgui::Panel::AddToOverridableColors
        
            typedef void ( Panel_wrapper::*AddToOverridableColors_function_type)( ::Color *,char const * ) ;
            
            Panel_exposer.def( 
                "AddToOverridableColors"
                , AddToOverridableColors_function_type( &Panel_wrapper::AddToOverridableColors )
                , ( bp::arg("pColor"), bp::arg("scriptname") ) );
        
        }
        { //::vgui::Panel::ApplyOverridableColors
        
            typedef void ( Panel_wrapper::*ApplyOverridableColors_function_type)(  ) ;
            
            Panel_exposer.def( 
                "ApplyOverridableColors"
                , ApplyOverridableColors_function_type( &Panel_wrapper::ApplyOverridableColors ) );
        
        }
        { //::vgui::Panel::ApplySchemeSettings
        
            typedef void ( ::vgui::Panel::*ApplySchemeSettings_function_type)( ::vgui::IScheme * ) ;
            typedef void ( Panel_wrapper::*default_ApplySchemeSettings_function_type)( ::vgui::IScheme * ) ;
            
            Panel_exposer.def( 
                "ApplySchemeSettings"
                , ApplySchemeSettings_function_type(&::vgui::Panel::ApplySchemeSettings)
                , default_ApplySchemeSettings_function_type(&Panel_wrapper::default_ApplySchemeSettings)
                , ( bp::arg("pScheme") ) );
        
        }
        { //::vgui::Panel::ApplySettings
        
            typedef void ( ::vgui::Panel::*ApplySettings_function_type)( ::KeyValues * ) ;
            
            Panel_exposer.def( 
                "ApplySettings"
                , ApplySettings_function_type( &::vgui::Panel::ApplySettings )
                , ( bp::arg("inResourceData") ) );
        
        }
        { //::vgui::Panel::ApplyUserConfigSettings
        
            typedef void ( ::vgui::Panel::*ApplyUserConfigSettings_function_type)( ::KeyValues * ) ;
            
            Panel_exposer.def( 
                "ApplyUserConfigSettings"
                , ApplyUserConfigSettings_function_type( &::vgui::Panel::ApplyUserConfigSettings )
                , ( bp::arg("userConfig") ) );
        
        }
        { //::vgui::Panel::CallParentFunction
        
            typedef void ( ::vgui::Panel::*CallParentFunction_function_type)( ::KeyValues * ) ;
            
            Panel_exposer.def( 
                "CallParentFunction"
                , CallParentFunction_function_type( &::vgui::Panel::CallParentFunction )
                , ( bp::arg("message") ) );
        
        }
        { //::vgui::Panel::CanStartDragging
        
            typedef bool ( ::vgui::Panel::*CanStartDragging_function_type)( int,int,int,int ) ;
            
            Panel_exposer.def( 
                "CanStartDragging"
                , CanStartDragging_function_type( &::vgui::Panel::CanStartDragging )
                , ( bp::arg("startx"), bp::arg("starty"), bp::arg("mx"), bp::arg("my") ) );
        
        }
        { //::vgui::Panel::ComputePos
        
            typedef int ( ::vgui::Panel::*ComputePos_function_type)( char const *,int &,int const &,int const &,bool const & ) ;
            
            Panel_exposer.def( 
                "ComputePos"
                , ComputePos_function_type( &::vgui::Panel::ComputePos )
                , ( bp::arg("pszInput"), bp::arg("nPos"), bp::arg("nSize"), bp::arg("nParentSize"), bp::arg("bX") ) );
        
        }
        { //::vgui::Panel::CreateDragData
        
            typedef void ( Panel_wrapper::*CreateDragData_function_type)(  ) ;
            
            Panel_exposer.def( 
                "CreateDragData"
                , CreateDragData_function_type( &Panel_wrapper::CreateDragData ) );
        
        }
        { //::vgui::Panel::DeletePanel
        
            typedef void ( ::vgui::Panel::*DeletePanel_function_type)(  ) ;
            
            Panel_exposer.def( 
                "DeletePanel"
                , DeletePanel_function_type( &::vgui::Panel::DeletePanel ) );
        
        }
        { //::vgui::Panel::DisableMouseInputForThisPanel
        
            typedef void ( ::vgui::Panel::*DisableMouseInputForThisPanel_function_type)( bool ) ;
            
            Panel_exposer.def( 
                "DisableMouseInputForThisPanel"
                , DisableMouseInputForThisPanel_function_type( &::vgui::Panel::DisableMouseInputForThisPanel )
                , ( bp::arg("bDisable") ) );
        
        }
        { //::vgui::Panel::DragDropStartDragging
        
            typedef void ( Panel_wrapper::*DragDropStartDragging_function_type)(  ) ;
            
            Panel_exposer.def( 
                "DragDropStartDragging"
                , DragDropStartDragging_function_type( &Panel_wrapper::DragDropStartDragging ) );
        
        }
        { //::vgui::Panel::DrawBox
        
            typedef void ( ::vgui::Panel::*DrawBox_function_type)( int,int,int,int,::Color,float,bool ) ;
            
            Panel_exposer.def( 
                "DrawBox"
                , DrawBox_function_type( &::vgui::Panel::DrawBox )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("wide"), bp::arg("tall"), bp::arg("color"), bp::arg("normalizedAlpha"), bp::arg("hollow")=(bool)(false) ) );
        
        }
        { //::vgui::Panel::DrawBoxFade
        
            typedef void ( ::vgui::Panel::*DrawBoxFade_function_type)( int,int,int,int,::Color,float,unsigned int,unsigned int,bool,bool ) ;
            
            Panel_exposer.def( 
                "DrawBoxFade"
                , DrawBoxFade_function_type( &::vgui::Panel::DrawBoxFade )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("wide"), bp::arg("tall"), bp::arg("color"), bp::arg("normalizedAlpha"), bp::arg("alpha0"), bp::arg("alpha1"), bp::arg("bHorizontal"), bp::arg("hollow")=(bool)(false) ) );
        
        }
        { //::vgui::Panel::DrawHollowBox
        
            typedef void ( ::vgui::Panel::*DrawHollowBox_function_type)( int,int,int,int,::Color,float ) ;
            
            Panel_exposer.def( 
                "DrawHollowBox"
                , DrawHollowBox_function_type( &::vgui::Panel::DrawHollowBox )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("wide"), bp::arg("tall"), bp::arg("color"), bp::arg("normalizedAlpha") ) );
        
        }
        { //::vgui::Panel::DrawHollowBox
        
            typedef void ( ::vgui::Panel::*DrawHollowBox_function_type)( int,int,int,int,::Color,float,int,int ) ;
            
            Panel_exposer.def( 
                "DrawHollowBox"
                , DrawHollowBox_function_type( &::vgui::Panel::DrawHollowBox )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("wide"), bp::arg("tall"), bp::arg("color"), bp::arg("normalizedAlpha"), bp::arg("cornerWide"), bp::arg("cornerTall") ) );
        
        }
        { //::vgui::Panel::DrawTexturedBox
        
            typedef void ( ::vgui::Panel::*DrawTexturedBox_function_type)( int,int,int,int,::Color,float ) ;
            
            Panel_exposer.def( 
                "DrawTexturedBox"
                , DrawTexturedBox_function_type( &::vgui::Panel::DrawTexturedBox )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("wide"), bp::arg("tall"), bp::arg("color"), bp::arg("normalizedAlpha") ) );
        
        }
        { //::vgui::Panel::EditKeyBindings
        
            typedef void ( ::vgui::Panel::*EditKeyBindings_function_type)(  ) ;
            
            Panel_exposer.def( 
                "EditKeyBindings"
                , EditKeyBindings_function_type( &::vgui::Panel::EditKeyBindings ) );
        
        }
        { //::vgui::Panel::FillRectSkippingPanel
        
            typedef void ( ::vgui::Panel::*FillRectSkippingPanel_function_type)( ::Color const &,int,int,int,int,::vgui::Panel * ) ;
            
            Panel_exposer.def( 
                "FillRectSkippingPanel"
                , FillRectSkippingPanel_function_type( &::vgui::Panel::FillRectSkippingPanel )
                , ( bp::arg("clr"), bp::arg("x"), bp::arg("y"), bp::arg("w"), bp::arg("h"), bp::arg("skipPanel") ) );
        
        }
        { //::vgui::Panel::FindChildByName
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*FindChildByName_function_type)( char const *,bool ) ;
            
            Panel_exposer.def( 
                "FindChildByName"
                , FindChildByName_function_type( &::vgui::Panel::FindChildByName )
                , ( bp::arg("childName"), bp::arg("recurseDown")=(bool)(false) )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::FindChildIndexByName
        
            typedef int ( ::vgui::Panel::*FindChildIndexByName_function_type)( char const * ) ;
            
            Panel_exposer.def( 
                "FindChildIndexByName"
                , FindChildIndexByName_function_type( &::vgui::Panel::FindChildIndexByName )
                , ( bp::arg("childName") ) );
        
        }
        { //::vgui::Panel::FindSiblingByName
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*FindSiblingByName_function_type)( char const * ) ;
            
            Panel_exposer.def( 
                "FindSiblingByName"
                , FindSiblingByName_function_type( &::vgui::Panel::FindSiblingByName )
                , ( bp::arg("siblingName") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetAlpha
        
            typedef int ( ::vgui::Panel::*GetAlpha_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetAlpha"
                , GetAlpha_function_type( &::vgui::Panel::GetAlpha ) );
        
        }
        { //::vgui::Panel::GetAutoResize
        
            typedef ::vgui::Panel::AutoResize_e ( ::vgui::Panel::*GetAutoResize_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetAutoResize"
                , GetAutoResize_function_type( &::vgui::Panel::GetAutoResize ) );
        
        }
        { //::vgui::Panel::GetBgColor
        
            typedef ::Color ( ::vgui::Panel::*GetBgColor_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetBgColor"
                , GetBgColor_function_type( &::vgui::Panel::GetBgColor ) );
        
        }
        { //::vgui::Panel::GetBorder
        
            typedef ::vgui::IBorder * ( ::vgui::Panel::*GetBorder_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetBorder"
                , GetBorder_function_type( &::vgui::Panel::GetBorder )
                , bp::return_value_policy< bp::reference_existing_object >() );
        
        }
        { //::vgui::Panel::GetBounds
        
            typedef boost::python::tuple ( *GetBounds_function_type )( ::vgui::Panel & );
            
            Panel_exposer.def( 
                "GetBounds"
                , GetBounds_function_type( &Panel_wrapper::GetBounds )
                , ( bp::arg("inst") ) );
        
        }
        { //::vgui::Panel::GetChild
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*GetChild_function_type)( int ) ;
            
            Panel_exposer.def( 
                "GetChild"
                , GetChild_function_type( &::vgui::Panel::GetChild )
                , ( bp::arg("index") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetChildCount
        
            typedef int ( ::vgui::Panel::*GetChildCount_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetChildCount"
                , GetChildCount_function_type( &::vgui::Panel::GetChildCount ) );
        
        }
        { //::vgui::Panel::GetClassName
        
            typedef char const * ( ::vgui::Panel::*GetClassName_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetClassName"
                , GetClassName_function_type( &::vgui::Panel::GetClassName ) );
        
        }
        { //::vgui::Panel::GetClipRect
        
            typedef boost::python::tuple ( *GetClipRect_function_type )( ::vgui::Panel & );
            
            Panel_exposer.def( 
                "GetClipRect"
                , GetClipRect_function_type( &Panel_wrapper::GetClipRect )
                , ( bp::arg("inst") ) );
        
        }
        { //::vgui::Panel::GetCornerTextureSize
        
            typedef boost::python::tuple ( *GetCornerTextureSize_function_type )( ::vgui::Panel & );
            
            Panel_exposer.def( 
                "GetCornerTextureSize"
                , GetCornerTextureSize_function_type( &Panel_wrapper::GetCornerTextureSize )
                , ( bp::arg("inst") ) );
        
        }
        { //::vgui::Panel::GetCurrentKeyFocus
        
            typedef ::vgui::VPANEL ( ::vgui::Panel::*GetCurrentKeyFocus_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetCurrentKeyFocus"
                , GetCurrentKeyFocus_function_type( &::vgui::Panel::GetCurrentKeyFocus ) );
        
        }
        { //::vgui::Panel::GetCursor
        
            typedef ::vgui::HCursor ( ::vgui::Panel::*GetCursor_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetCursor"
                , GetCursor_function_type( &::vgui::Panel::GetCursor ) );
        
        }
        { //::vgui::Panel::GetDescription
        
            typedef char const * ( ::vgui::Panel::*GetDescription_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetDescription"
                , GetDescription_function_type( &::vgui::Panel::GetDescription ) );
        
        }
        { //::vgui::Panel::GetDragDropInfo
        
            typedef ::vgui::DragDrop_t * ( ::vgui::Panel::*GetDragDropInfo_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetDragDropInfo"
                , GetDragDropInfo_function_type( &::vgui::Panel::GetDragDropInfo )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetDragFrameColor
        
            typedef ::Color ( ::vgui::Panel::*GetDragFrameColor_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetDragFrameColor"
                , GetDragFrameColor_function_type( &::vgui::Panel::GetDragFrameColor ) );
        
        }
        { //::vgui::Panel::GetDragPanel
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*GetDragPanel_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetDragPanel"
                , GetDragPanel_function_type( &::vgui::Panel::GetDragPanel )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetDragStartTolerance
        
            typedef int ( ::vgui::Panel::*GetDragStartTolerance_function_type)(  ) const;
            
            Panel_exposer.def( 
                "GetDragStartTolerance"
                , GetDragStartTolerance_function_type( &::vgui::Panel::GetDragStartTolerance ) );
        
        }
        { //::vgui::Panel::GetDropFrameColor
        
            typedef ::Color ( ::vgui::Panel::*GetDropFrameColor_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetDropFrameColor"
                , GetDropFrameColor_function_type( &::vgui::Panel::GetDropFrameColor ) );
        
        }
        { //::vgui::Panel::GetEffectiveTooltipText
        
            typedef char const * ( ::vgui::Panel::*GetEffectiveTooltipText_function_type)(  ) const;
            
            Panel_exposer.def( 
                "GetEffectiveTooltipText"
                , GetEffectiveTooltipText_function_type( &::vgui::Panel::GetEffectiveTooltipText ) );
        
        }
        { //::vgui::Panel::GetFgColor
        
            typedef ::Color ( ::vgui::Panel::*GetFgColor_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetFgColor"
                , GetFgColor_function_type( &::vgui::Panel::GetFgColor ) );
        
        }
        { //::vgui::Panel::GetForceStereoRenderToFrameBuffer
        
            typedef bool ( ::vgui::Panel::*GetForceStereoRenderToFrameBuffer_function_type)(  ) const;
            
            Panel_exposer.def( 
                "GetForceStereoRenderToFrameBuffer"
                , GetForceStereoRenderToFrameBuffer_function_type( &::vgui::Panel::GetForceStereoRenderToFrameBuffer ) );
        
        }
        { //::vgui::Panel::GetInset
        
            typedef boost::python::tuple ( *GetInset_function_type )( ::vgui::Panel & );
            
            Panel_exposer.def( 
                "GetInset"
                , GetInset_function_type( &Panel_wrapper::GetInset )
                , ( bp::arg("inst") ) );
        
        }
        { //::vgui::Panel::GetKeyBindingsFile
        
            typedef char const * ( ::vgui::Panel::*GetKeyBindingsFile_function_type)(  ) const;
            
            Panel_exposer.def( 
                "GetKeyBindingsFile"
                , GetKeyBindingsFile_function_type( &::vgui::Panel::GetKeyBindingsFile ) );
        
        }
        { //::vgui::Panel::GetKeyBindingsFilePathID
        
            typedef char const * ( ::vgui::Panel::*GetKeyBindingsFilePathID_function_type)(  ) const;
            
            Panel_exposer.def( 
                "GetKeyBindingsFilePathID"
                , GetKeyBindingsFilePathID_function_type( &::vgui::Panel::GetKeyBindingsFilePathID ) );
        
        }
        { //::vgui::Panel::GetKeyMappingCount
        
            typedef int ( ::vgui::Panel::*GetKeyMappingCount_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetKeyMappingCount"
                , GetKeyMappingCount_function_type( &::vgui::Panel::GetKeyMappingCount ) );
        
        }
        { //::vgui::Panel::GetLastNavDirection
        
            typedef ::vgui::Panel::NAV_DIRECTION ( ::vgui::Panel::*GetLastNavDirection_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetLastNavDirection"
                , GetLastNavDirection_function_type( &::vgui::Panel::GetLastNavDirection ) );
        
        }
        { //::vgui::Panel::GetMinimumSize
        
            typedef boost::python::tuple ( *GetMinimumSize_function_type )( ::vgui::Panel & );
            
            Panel_exposer.def( 
                "GetMinimumSize"
                , GetMinimumSize_function_type( &Panel_wrapper::GetMinimumSize )
                , ( bp::arg("inst") ) );
        
        }
        { //::vgui::Panel::GetModuleName
        
            typedef char const * ( ::vgui::Panel::*GetModuleName_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetModuleName"
                , GetModuleName_function_type( &::vgui::Panel::GetModuleName ) );
        
        }
        { //::vgui::Panel::GetName
        
            typedef char const * ( ::vgui::Panel::*GetName_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetName"
                , GetName_function_type( &::vgui::Panel::GetName ) );
        
        }
        { //::vgui::Panel::GetNavActivate
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*GetNavActivate_function_type)( ::vgui::Panel * ) ;
            
            Panel_exposer.def( 
                "GetNavActivate"
                , GetNavActivate_function_type( &::vgui::Panel::GetNavActivate )
                , ( bp::arg("first")=bp::object() )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetNavActivateName
        
            typedef char const * ( ::vgui::Panel::*GetNavActivateName_function_type)(  ) const;
            
            Panel_exposer.def( 
                "GetNavActivateName"
                , GetNavActivateName_function_type( &::vgui::Panel::GetNavActivateName ) );
        
        }
        { //::vgui::Panel::GetNavActivatePanel
        
            typedef ::vgui::Panel * ( Panel_wrapper::*GetNavActivatePanel_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetNavActivatePanel"
                , GetNavActivatePanel_function_type( &Panel_wrapper::GetNavActivatePanel )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetNavBack
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*GetNavBack_function_type)( ::vgui::Panel * ) ;
            
            Panel_exposer.def( 
                "GetNavBack"
                , GetNavBack_function_type( &::vgui::Panel::GetNavBack )
                , ( bp::arg("first")=bp::object() )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetNavBackName
        
            typedef char const * ( ::vgui::Panel::*GetNavBackName_function_type)(  ) const;
            
            Panel_exposer.def( 
                "GetNavBackName"
                , GetNavBackName_function_type( &::vgui::Panel::GetNavBackName ) );
        
        }
        { //::vgui::Panel::GetNavBackPanel
        
            typedef ::vgui::Panel * ( Panel_wrapper::*GetNavBackPanel_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetNavBackPanel"
                , GetNavBackPanel_function_type( &Panel_wrapper::GetNavBackPanel )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetNavDown
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*GetNavDown_function_type)( ::vgui::Panel * ) ;
            
            Panel_exposer.def( 
                "GetNavDown"
                , GetNavDown_function_type( &::vgui::Panel::GetNavDown )
                , ( bp::arg("first")=bp::object() )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetNavDownName
        
            typedef char const * ( ::vgui::Panel::*GetNavDownName_function_type)(  ) const;
            
            Panel_exposer.def( 
                "GetNavDownName"
                , GetNavDownName_function_type( &::vgui::Panel::GetNavDownName ) );
        
        }
        { //::vgui::Panel::GetNavDownPanel
        
            typedef ::vgui::Panel * ( Panel_wrapper::*GetNavDownPanel_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetNavDownPanel"
                , GetNavDownPanel_function_type( &Panel_wrapper::GetNavDownPanel )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetNavLeft
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*GetNavLeft_function_type)( ::vgui::Panel * ) ;
            
            Panel_exposer.def( 
                "GetNavLeft"
                , GetNavLeft_function_type( &::vgui::Panel::GetNavLeft )
                , ( bp::arg("first")=bp::object() )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetNavLeftName
        
            typedef char const * ( ::vgui::Panel::*GetNavLeftName_function_type)(  ) const;
            
            Panel_exposer.def( 
                "GetNavLeftName"
                , GetNavLeftName_function_type( &::vgui::Panel::GetNavLeftName ) );
        
        }
        { //::vgui::Panel::GetNavLeftPanel
        
            typedef ::vgui::Panel * ( Panel_wrapper::*GetNavLeftPanel_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetNavLeftPanel"
                , GetNavLeftPanel_function_type( &Panel_wrapper::GetNavLeftPanel )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetNavRight
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*GetNavRight_function_type)( ::vgui::Panel * ) ;
            
            Panel_exposer.def( 
                "GetNavRight"
                , GetNavRight_function_type( &::vgui::Panel::GetNavRight )
                , ( bp::arg("first")=bp::object() )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetNavRightName
        
            typedef char const * ( ::vgui::Panel::*GetNavRightName_function_type)(  ) const;
            
            Panel_exposer.def( 
                "GetNavRightName"
                , GetNavRightName_function_type( &::vgui::Panel::GetNavRightName ) );
        
        }
        { //::vgui::Panel::GetNavRightPanel
        
            typedef ::vgui::Panel * ( Panel_wrapper::*GetNavRightPanel_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetNavRightPanel"
                , GetNavRightPanel_function_type( &Panel_wrapper::GetNavRightPanel )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetNavToRelay
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*GetNavToRelay_function_type)( ::vgui::Panel * ) ;
            
            Panel_exposer.def( 
                "GetNavToRelay"
                , GetNavToRelay_function_type( &::vgui::Panel::GetNavToRelay )
                , ( bp::arg("first")=bp::object() )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetNavToRelayName
        
            typedef char const * ( ::vgui::Panel::*GetNavToRelayName_function_type)(  ) const;
            
            Panel_exposer.def( 
                "GetNavToRelayName"
                , GetNavToRelayName_function_type( &::vgui::Panel::GetNavToRelayName ) );
        
        }
        { //::vgui::Panel::GetNavToRelayPanel
        
            typedef ::vgui::Panel * ( Panel_wrapper::*GetNavToRelayPanel_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetNavToRelayPanel"
                , GetNavToRelayPanel_function_type( &Panel_wrapper::GetNavToRelayPanel )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetNavUp
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*GetNavUp_function_type)( ::vgui::Panel * ) ;
            
            Panel_exposer.def( 
                "GetNavUp"
                , GetNavUp_function_type( &::vgui::Panel::GetNavUp )
                , ( bp::arg("first")=bp::object() )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetNavUpName
        
            typedef char const * ( ::vgui::Panel::*GetNavUpName_function_type)(  ) const;
            
            Panel_exposer.def( 
                "GetNavUpName"
                , GetNavUpName_function_type( &::vgui::Panel::GetNavUpName ) );
        
        }
        { //::vgui::Panel::GetNavUpPanel
        
            typedef ::vgui::Panel * ( Panel_wrapper::*GetNavUpPanel_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetNavUpPanel"
                , GetNavUpPanel_function_type( &Panel_wrapper::GetNavUpPanel )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetPaintBackgroundType
        
            typedef int ( ::vgui::Panel::*GetPaintBackgroundType_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetPaintBackgroundType"
                , GetPaintBackgroundType_function_type( &::vgui::Panel::GetPaintBackgroundType ) );
        
        }
        { //::vgui::Panel::GetPaintSize
        
            typedef boost::python::tuple ( *GetPaintSize_function_type )( ::vgui::Panel & );
            
            Panel_exposer.def( 
                "GetPaintSize"
                , GetPaintSize_function_type( &Panel_wrapper::GetPaintSize )
                , ( bp::arg("inst") ) );
        
        }
        { //::vgui::Panel::GetPanelBaseClassName
        
            typedef char const * ( *GetPanelBaseClassName_function_type )(  );
            
            Panel_exposer.def( 
                "GetPanelBaseClassName"
                , GetPanelBaseClassName_function_type( &::vgui::Panel::GetPanelBaseClassName ) );
        
        }
        { //::vgui::Panel::GetPanelClassName
        
            typedef char const * ( *GetPanelClassName_function_type )(  );
            
            Panel_exposer.def( 
                "GetPanelClassName"
                , GetPanelClassName_function_type( &::vgui::Panel::GetPanelClassName ) );
        
        }
        { //::vgui::Panel::GetParent
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*GetParent_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetParent"
                , GetParent_function_type( &::vgui::Panel::GetParent )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::GetPinCorner
        
            typedef ::vgui::Panel::PinCorner_e ( ::vgui::Panel::*GetPinCorner_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetPinCorner"
                , GetPinCorner_function_type( &::vgui::Panel::GetPinCorner ) );
        
        }
        { //::vgui::Panel::GetPinOffset
        
            typedef boost::python::tuple ( *GetPinOffset_function_type )( ::vgui::Panel & );
            
            Panel_exposer.def( 
                "GetPinOffset"
                , GetPinOffset_function_type( &Panel_wrapper::GetPinOffset )
                , ( bp::arg("inst") ) );
        
        }
        { //::vgui::Panel::GetPos
        
            typedef boost::python::tuple ( *GetPos_function_type )( ::vgui::Panel & );
            
            Panel_exposer.def( 
                "GetPos"
                , GetPos_function_type( &Panel_wrapper::GetPos )
                , ( bp::arg("inst") ) );
        
        }
        { //::vgui::Panel::GetResizeOffset
        
            typedef boost::python::tuple ( *GetResizeOffset_function_type )( ::vgui::Panel & );
            
            Panel_exposer.def( 
                "GetResizeOffset"
                , GetResizeOffset_function_type( &Panel_wrapper::GetResizeOffset )
                , ( bp::arg("inst") ) );
        
        }
        { //::vgui::Panel::GetRoundedCorners
        
            typedef unsigned char ( ::vgui::Panel::*GetRoundedCorners_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetRoundedCorners"
                , GetRoundedCorners_function_type( &::vgui::Panel::GetRoundedCorners ) );
        
        }
        { //::vgui::Panel::GetScheme
        
            typedef ::vgui::HScheme ( ::vgui::Panel::*GetScheme_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetScheme"
                , GetScheme_function_type( &::vgui::Panel::GetScheme ) );
        
        }
        { //::vgui::Panel::GetSchemeColor
        
            typedef ::Color ( ::vgui::Panel::*GetSchemeColor_function_type)( char const *,::vgui::IScheme * ) ;
            
            Panel_exposer.def( 
                "GetSchemeColor"
                , GetSchemeColor_function_type( &::vgui::Panel::GetSchemeColor )
                , ( bp::arg("keyName"), bp::arg("pScheme") ) );
        
        }
        { //::vgui::Panel::GetSchemeColor
        
            typedef ::Color ( ::vgui::Panel::*GetSchemeColor_function_type)( char const *,::Color,::vgui::IScheme * ) ;
            
            Panel_exposer.def( 
                "GetSchemeColor"
                , GetSchemeColor_function_type( &::vgui::Panel::GetSchemeColor )
                , ( bp::arg("keyName"), bp::arg("defaultColor"), bp::arg("pScheme") ) );
        
        }
        { //::vgui::Panel::GetSettings
        
            typedef void ( ::vgui::Panel::*GetSettings_function_type)( ::KeyValues * ) ;
            
            Panel_exposer.def( 
                "GetSettings"
                , GetSettings_function_type( &::vgui::Panel::GetSettings )
                , ( bp::arg("outResourceData") ) );
        
        }
        { //::vgui::Panel::GetSize
        
            typedef boost::python::tuple ( *GetSize_function_type )( ::vgui::Panel & );
            
            Panel_exposer.def( 
                "GetSize"
                , GetSize_function_type( &Panel_wrapper::GetSize )
                , ( bp::arg("inst") ) );
        
        }
        { //::vgui::Panel::GetTabPosition
        
            typedef int ( ::vgui::Panel::*GetTabPosition_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetTabPosition"
                , GetTabPosition_function_type( &::vgui::Panel::GetTabPosition ) );
        
        }
        { //::vgui::Panel::GetTall
        
            typedef int ( ::vgui::Panel::*GetTall_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetTall"
                , GetTall_function_type( &::vgui::Panel::GetTall ) );
        
        }
        { //::vgui::Panel::GetTooltip
        
            typedef ::vgui::BaseTooltip * ( ::vgui::Panel::*GetTooltip_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetTooltip"
                , GetTooltip_function_type( &::vgui::Panel::GetTooltip )
                , bp::return_internal_reference< >() );
        
        }
        { //::vgui::Panel::GetUserConfigSettings
        
            typedef void ( ::vgui::Panel::*GetUserConfigSettings_function_type)( ::KeyValues * ) ;
            
            Panel_exposer.def( 
                "GetUserConfigSettings"
                , GetUserConfigSettings_function_type( &::vgui::Panel::GetUserConfigSettings )
                , ( bp::arg("userConfig") ) );
        
        }
        { //::vgui::Panel::GetVPanel
        
            typedef ::vgui::VPANEL ( ::vgui::Panel::*GetVPanel_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetVPanel"
                , GetVPanel_function_type( &::vgui::Panel::GetVPanel ) );
        
        }
        { //::vgui::Panel::GetVParent
        
            typedef ::vgui::VPANEL ( ::vgui::Panel::*GetVParent_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetVParent"
                , GetVParent_function_type( &::vgui::Panel::GetVParent ) );
        
        }
        { //::vgui::Panel::GetWide
        
            typedef int ( ::vgui::Panel::*GetWide_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetWide"
                , GetWide_function_type( &::vgui::Panel::GetWide ) );
        
        }
        { //::vgui::Panel::GetWorldPositionCurrentFrame
        
            typedef bool ( ::vgui::Panel::*GetWorldPositionCurrentFrame_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetWorldPositionCurrentFrame"
                , GetWorldPositionCurrentFrame_function_type( &::vgui::Panel::GetWorldPositionCurrentFrame ) );
        
        }
        { //::vgui::Panel::GetXPos
        
            typedef int ( ::vgui::Panel::*GetXPos_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetXPos"
                , GetXPos_function_type( &::vgui::Panel::GetXPos ) );
        
        }
        { //::vgui::Panel::GetYPos
        
            typedef int ( ::vgui::Panel::*GetYPos_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetYPos"
                , GetYPos_function_type( &::vgui::Panel::GetYPos ) );
        
        }
        { //::vgui::Panel::GetZPos
        
            typedef int ( ::vgui::Panel::*GetZPos_function_type)(  ) ;
            
            Panel_exposer.def( 
                "GetZPos"
                , GetZPos_function_type( &::vgui::Panel::GetZPos ) );
        
        }
        { //::vgui::Panel::HasFocus
        
            typedef bool ( ::vgui::Panel::*HasFocus_function_type)(  ) ;
            
            Panel_exposer.def( 
                "HasFocus"
                , HasFocus_function_type( &::vgui::Panel::HasFocus ) );
        
        }
        { //::vgui::Panel::HasParent
        
            typedef bool ( ::vgui::Panel::*HasParent_function_type)( ::vgui::VPANEL ) ;
            
            Panel_exposer.def( 
                "HasParent"
                , HasParent_function_type( &::vgui::Panel::HasParent )
                , ( bp::arg("potentialParent") ) );
        
        }
        { //::vgui::Panel::HasUserConfigSettings
        
            typedef bool ( ::vgui::Panel::*HasUserConfigSettings_function_type)(  ) ;
            
            Panel_exposer.def( 
                "HasUserConfigSettings"
                , HasUserConfigSettings_function_type( &::vgui::Panel::HasUserConfigSettings ) );
        
        }
        { //::vgui::Panel::Init
        
            typedef void ( ::vgui::Panel::*Init_function_type)( int,int,int,int ) ;
            
            Panel_exposer.def( 
                "Init"
                , Init_function_type( &::vgui::Panel::Init )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("wide"), bp::arg("tall") ) );
        
        }
        { //::vgui::Panel::InitPropertyConverters
        
            typedef void ( *InitPropertyConverters_function_type )(  );
            
            Panel_exposer.def( 
                "InitPropertyConverters"
                , InitPropertyConverters_function_type( &::vgui::Panel::InitPropertyConverters ) );
        
        }
        { //::vgui::Panel::InstallMouseHandler
        
            typedef void ( ::vgui::Panel::*InstallMouseHandler_function_type)( ::vgui::Panel * ) ;
            
            Panel_exposer.def( 
                "InstallMouseHandler"
                , InstallMouseHandler_function_type( &::vgui::Panel::InstallMouseHandler )
                , ( bp::arg("pHandler") ) );
        
        }
        { //::vgui::Panel::InvalidateLayout
        
            typedef void ( ::vgui::Panel::*InvalidateLayout_function_type)( bool,bool ) ;
            typedef void ( Panel_wrapper::*default_InvalidateLayout_function_type)( bool,bool ) ;
            
            Panel_exposer.def( 
                "InvalidateLayout"
                , InvalidateLayout_function_type(&::vgui::Panel::InvalidateLayout)
                , default_InvalidateLayout_function_type(&Panel_wrapper::default_InvalidateLayout)
                , ( bp::arg("layoutNow")=(bool)(false), bp::arg("reloadScheme")=(bool)(false) ) );
        
        }
        { //::vgui::Panel::IsAutoDeleteSet
        
            typedef bool ( ::vgui::Panel::*IsAutoDeleteSet_function_type)(  ) ;
            
            Panel_exposer.def( 
                "IsAutoDeleteSet"
                , IsAutoDeleteSet_function_type( &::vgui::Panel::IsAutoDeleteSet ) );
        
        }
        { //::vgui::Panel::IsBeingDragged
        
            typedef bool ( ::vgui::Panel::*IsBeingDragged_function_type)(  ) ;
            
            Panel_exposer.def( 
                "IsBeingDragged"
                , IsBeingDragged_function_type( &::vgui::Panel::IsBeingDragged ) );
        
        }
        { //::vgui::Panel::IsBlockingDragChaining
        
            typedef bool ( ::vgui::Panel::*IsBlockingDragChaining_function_type)(  ) const;
            
            Panel_exposer.def( 
                "IsBlockingDragChaining"
                , IsBlockingDragChaining_function_type( &::vgui::Panel::IsBlockingDragChaining ) );
        
        }
        { //::vgui::Panel::IsBottomAligned
        
            typedef bool ( ::vgui::Panel::*IsBottomAligned_function_type)(  ) ;
            
            Panel_exposer.def( 
                "IsBottomAligned"
                , IsBottomAligned_function_type( &::vgui::Panel::IsBottomAligned ) );
        
        }
        { //::vgui::Panel::IsChildOfModalSubTree
        
            typedef bool ( ::vgui::Panel::*IsChildOfModalSubTree_function_type)(  ) ;
            
            Panel_exposer.def( 
                "IsChildOfModalSubTree"
                , IsChildOfModalSubTree_function_type( &::vgui::Panel::IsChildOfModalSubTree ) );
        
        }
        { //::vgui::Panel::IsChildOfSurfaceModalPanel
        
            typedef bool ( ::vgui::Panel::*IsChildOfSurfaceModalPanel_function_type)(  ) ;
            
            Panel_exposer.def( 
                "IsChildOfSurfaceModalPanel"
                , IsChildOfSurfaceModalPanel_function_type( &::vgui::Panel::IsChildOfSurfaceModalPanel ) );
        
        }
        { //::vgui::Panel::IsConsoleStylePanel
        
            typedef bool ( ::vgui::Panel::*IsConsoleStylePanel_function_type)(  ) const;
            
            Panel_exposer.def( 
                "IsConsoleStylePanel"
                , IsConsoleStylePanel_function_type( &::vgui::Panel::IsConsoleStylePanel ) );
        
        }
        { //::vgui::Panel::IsCursorNone
        
            typedef bool ( ::vgui::Panel::*IsCursorNone_function_type)(  ) ;
            
            Panel_exposer.def( 
                "IsCursorNone"
                , IsCursorNone_function_type( &::vgui::Panel::IsCursorNone ) );
        
        }
        { //::vgui::Panel::IsCursorOver
        
            typedef bool ( ::vgui::Panel::*IsCursorOver_function_type)(  ) ;
            
            Panel_exposer.def( 
                "IsCursorOver"
                , IsCursorOver_function_type( &::vgui::Panel::IsCursorOver ) );
        
        }
        { //::vgui::Panel::IsDragEnabled
        
            typedef bool ( ::vgui::Panel::*IsDragEnabled_function_type)(  ) const;
            
            Panel_exposer.def( 
                "IsDragEnabled"
                , IsDragEnabled_function_type( &::vgui::Panel::IsDragEnabled ) );
        
        }
        { //::vgui::Panel::IsDropEnabled
        
            typedef bool ( ::vgui::Panel::*IsDropEnabled_function_type)(  ) const;
            
            Panel_exposer.def( 
                "IsDropEnabled"
                , IsDropEnabled_function_type( &::vgui::Panel::IsDropEnabled ) );
        
        }
        { //::vgui::Panel::IsEnabled
        
            typedef bool ( ::vgui::Panel::*IsEnabled_function_type)(  ) ;
            
            Panel_exposer.def( 
                "IsEnabled"
                , IsEnabled_function_type( &::vgui::Panel::IsEnabled ) );
        
        }
        { //::vgui::Panel::IsKeyBindingChainToParentAllowed
        
            typedef bool ( ::vgui::Panel::*IsKeyBindingChainToParentAllowed_function_type)(  ) const;
            
            Panel_exposer.def( 
                "IsKeyBindingChainToParentAllowed"
                , IsKeyBindingChainToParentAllowed_function_type( &::vgui::Panel::IsKeyBindingChainToParentAllowed ) );
        
        }
        { //::vgui::Panel::IsKeyBoardInputEnabled
        
            typedef bool ( ::vgui::Panel::*IsKeyBoardInputEnabled_function_type)(  ) ;
            
            Panel_exposer.def( 
                "IsKeyBoardInputEnabled"
                , IsKeyBoardInputEnabled_function_type( &::vgui::Panel::IsKeyBoardInputEnabled ) );
        
        }
        { //::vgui::Panel::IsKeyOverridden
        
            typedef bool ( ::vgui::Panel::*IsKeyOverridden_function_type)( ::vgui::KeyCode,int ) ;
            
            Panel_exposer.def( 
                "IsKeyOverridden"
                , IsKeyOverridden_function_type( &::vgui::Panel::IsKeyOverridden )
                , ( bp::arg("code"), bp::arg("modifiers") ) );
        
        }
        { //::vgui::Panel::IsKeyRebound
        
            typedef bool ( ::vgui::Panel::*IsKeyRebound_function_type)( ::vgui::KeyCode,int ) ;
            
            Panel_exposer.def( 
                "IsKeyRebound"
                , IsKeyRebound_function_type( &::vgui::Panel::IsKeyRebound )
                , ( bp::arg("code"), bp::arg("modifiers") ) );
        
        }
        { //::vgui::Panel::IsLayoutInvalid
        
            typedef bool ( ::vgui::Panel::*IsLayoutInvalid_function_type)(  ) ;
            
            Panel_exposer.def( 
                "IsLayoutInvalid"
                , IsLayoutInvalid_function_type( &::vgui::Panel::IsLayoutInvalid ) );
        
        }
        { //::vgui::Panel::IsMouseInputDisabledForThisPanel
        
            typedef bool ( ::vgui::Panel::*IsMouseInputDisabledForThisPanel_function_type)(  ) const;
            
            Panel_exposer.def( 
                "IsMouseInputDisabledForThisPanel"
                , IsMouseInputDisabledForThisPanel_function_type( &::vgui::Panel::IsMouseInputDisabledForThisPanel ) );
        
        }
        { //::vgui::Panel::IsMouseInputEnabled
        
            typedef bool ( ::vgui::Panel::*IsMouseInputEnabled_function_type)(  ) ;
            
            Panel_exposer.def( 
                "IsMouseInputEnabled"
                , IsMouseInputEnabled_function_type( &::vgui::Panel::IsMouseInputEnabled ) );
        
        }
        { //::vgui::Panel::IsOpaque
        
            typedef bool ( ::vgui::Panel::*IsOpaque_function_type)(  ) ;
            
            Panel_exposer.def( 
                "IsOpaque"
                , IsOpaque_function_type( &::vgui::Panel::IsOpaque ) );
        
        }
        { //::vgui::Panel::IsPopup
        
            typedef bool ( ::vgui::Panel::*IsPopup_function_type)(  ) ;
            
            Panel_exposer.def( 
                "IsPopup"
                , IsPopup_function_type( &::vgui::Panel::IsPopup ) );
        
        }
        { //::vgui::Panel::IsProportional
        
            typedef bool ( ::vgui::Panel::*IsProportional_function_type)(  ) ;
            
            Panel_exposer.def( 
                "IsProportional"
                , IsProportional_function_type( &::vgui::Panel::IsProportional ) );
        
        }
        { //::vgui::Panel::IsRightAligned
        
            typedef bool ( ::vgui::Panel::*IsRightAligned_function_type)(  ) ;
            
            Panel_exposer.def( 
                "IsRightAligned"
                , IsRightAligned_function_type( &::vgui::Panel::IsRightAligned ) );
        
        }
        { //::vgui::Panel::IsStartDragWhenMouseExitsPanel
        
            typedef bool ( ::vgui::Panel::*IsStartDragWhenMouseExitsPanel_function_type)(  ) const;
            
            Panel_exposer.def( 
                "IsStartDragWhenMouseExitsPanel"
                , IsStartDragWhenMouseExitsPanel_function_type( &::vgui::Panel::IsStartDragWhenMouseExitsPanel ) );
        
        }
        { //::vgui::Panel::IsTriplePressAllowed
        
            typedef bool ( ::vgui::Panel::*IsTriplePressAllowed_function_type)(  ) const;
            
            Panel_exposer.def( 
                "IsTriplePressAllowed"
                , IsTriplePressAllowed_function_type( &::vgui::Panel::IsTriplePressAllowed ) );
        
        }
        { //::vgui::Panel::IsValidKeyBindingsContext
        
            typedef bool ( ::vgui::Panel::*IsValidKeyBindingsContext_function_type)(  ) const;
            
            Panel_exposer.def( 
                "IsValidKeyBindingsContext"
                , IsValidKeyBindingsContext_function_type( &::vgui::Panel::IsValidKeyBindingsContext ) );
        
        }
        { //::vgui::Panel::IsVisible
        
            typedef bool ( ::vgui::Panel::*IsVisible_function_type)(  ) ;
            
            Panel_exposer.def( 
                "IsVisible"
                , IsVisible_function_type( &::vgui::Panel::IsVisible ) );
        
        }
        { //::vgui::Panel::IsWithin
        
            typedef bool ( ::vgui::Panel::*IsWithin_function_type)( int,int ) ;
            
            Panel_exposer.def( 
                "IsWithin"
                , IsWithin_function_type( &::vgui::Panel::IsWithin )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::vgui::Panel::IsWithinTraverse
        
            typedef ::vgui::VPANEL ( ::vgui::Panel::*IsWithinTraverse_function_type)( int,int,bool ) ;
            
            Panel_exposer.def( 
                "IsWithinTraverse"
                , IsWithinTraverse_function_type( &::vgui::Panel::IsWithinTraverse )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("traversePopups") ) );
        
        }
        { //::vgui::Panel::KeyCodeModifiersToDisplayString
        
            typedef wchar_t const * ( *KeyCodeModifiersToDisplayString_function_type )( ::vgui::KeyCode,int );
            
            Panel_exposer.def( 
                "KeyCodeModifiersToDisplayString"
                , KeyCodeModifiersToDisplayString_function_type( &::vgui::Panel::KeyCodeModifiersToDisplayString )
                , ( bp::arg("code"), bp::arg("modifiers") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::KeyCodeToDisplayString
        
            typedef wchar_t const * ( *KeyCodeToDisplayString_function_type )( ::vgui::KeyCode );
            
            Panel_exposer.def( 
                "KeyCodeToDisplayString"
                , KeyCodeToDisplayString_function_type( &::vgui::Panel::KeyCodeToDisplayString )
                , ( bp::arg("code") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::KeyCodeToString
        
            typedef char const * ( *KeyCodeToString_function_type )( ::vgui::KeyCode );
            
            Panel_exposer.def( 
                "KeyCodeToString"
                , KeyCodeToString_function_type( &::vgui::Panel::KeyCodeToString )
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::Panel::LocalToScreen
        
            typedef boost::python::tuple ( *LocalToScreen_function_type )( ::vgui::Panel &,int,int );
            
            Panel_exposer.def( 
                "LocalToScreen"
                , LocalToScreen_function_type( &Panel_wrapper::LocalToScreen )
                , ( bp::arg("inst"), bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::vgui::Panel::LookupBinding
        
            typedef ::vgui::KeyBindingMap_t * ( ::vgui::Panel::*LookupBinding_function_type)( char const * ) ;
            
            Panel_exposer.def( 
                "LookupBinding"
                , LookupBinding_function_type( &::vgui::Panel::LookupBinding )
                , ( bp::arg("bindingName") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::LookupBindingByKeyCode
        
            typedef ::vgui::KeyBindingMap_t * ( ::vgui::Panel::*LookupBindingByKeyCode_function_type)( ::vgui::KeyCode,int ) ;
            
            Panel_exposer.def( 
                "LookupBindingByKeyCode"
                , LookupBindingByKeyCode_function_type( &::vgui::Panel::LookupBindingByKeyCode )
                , ( bp::arg("code"), bp::arg("modifiers") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::LookupDefaultKey
        
            typedef ::vgui::BoundKey_t * ( ::vgui::Panel::*LookupDefaultKey_function_type)( char const * ) ;
            
            Panel_exposer.def( 
                "LookupDefaultKey"
                , LookupDefaultKey_function_type( &::vgui::Panel::LookupDefaultKey )
                , ( bp::arg("bindingName") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::LookupMapForBinding
        
            typedef ::vgui::PanelKeyBindingMap * ( ::vgui::Panel::*LookupMapForBinding_function_type)( char const * ) ;
            
            Panel_exposer.def( 
                "LookupMapForBinding"
                , LookupMapForBinding_function_type( &::vgui::Panel::LookupMapForBinding )
                , ( bp::arg("bindingName") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::MakePopup
        
            typedef void ( ::vgui::Panel::*MakePopup_function_type)( bool,bool ) ;
            
            Panel_exposer.def( 
                "MakePopup"
                , MakePopup_function_type( &::vgui::Panel::MakePopup )
                , ( bp::arg("showTaskbarIcon")=(bool)(true), bp::arg("disabled")=(bool)(false) ) );
        
        }
        { //::vgui::Panel::MakeReadyForUse
        
            typedef void ( ::vgui::Panel::*MakeReadyForUse_function_type)(  ) ;
            
            Panel_exposer.def( 
                "MakeReadyForUse"
                , MakeReadyForUse_function_type( &::vgui::Panel::MakeReadyForUse ) );
        
        }
        { //::vgui::Panel::MoveToFront
        
            typedef void ( ::vgui::Panel::*MoveToFront_function_type)(  ) ;
            
            Panel_exposer.def( 
                "MoveToFront"
                , MoveToFront_function_type( &::vgui::Panel::MoveToFront ) );
        
        }
        { //::vgui::Panel::NavigateActivate
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*NavigateActivate_function_type)(  ) ;
            
            Panel_exposer.def( 
                "NavigateActivate"
                , NavigateActivate_function_type( &::vgui::Panel::NavigateActivate )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::NavigateBack
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*NavigateBack_function_type)(  ) ;
            
            Panel_exposer.def( 
                "NavigateBack"
                , NavigateBack_function_type( &::vgui::Panel::NavigateBack )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::NavigateDown
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*NavigateDown_function_type)(  ) ;
            
            Panel_exposer.def( 
                "NavigateDown"
                , NavigateDown_function_type( &::vgui::Panel::NavigateDown )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::NavigateFrom
        
            typedef void ( ::vgui::Panel::*NavigateFrom_function_type)(  ) ;
            
            Panel_exposer.def( 
                "NavigateFrom"
                , NavigateFrom_function_type( &::vgui::Panel::NavigateFrom ) );
        
        }
        { //::vgui::Panel::NavigateLeft
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*NavigateLeft_function_type)(  ) ;
            
            Panel_exposer.def( 
                "NavigateLeft"
                , NavigateLeft_function_type( &::vgui::Panel::NavigateLeft )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::NavigateRight
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*NavigateRight_function_type)(  ) ;
            
            Panel_exposer.def( 
                "NavigateRight"
                , NavigateRight_function_type( &::vgui::Panel::NavigateRight )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::NavigateTo
        
            typedef void ( ::vgui::Panel::*NavigateTo_function_type)(  ) ;
            
            Panel_exposer.def( 
                "NavigateTo"
                , NavigateTo_function_type( &::vgui::Panel::NavigateTo ) );
        
        }
        { //::vgui::Panel::NavigateToChild
        
            typedef void ( ::vgui::Panel::*NavigateToChild_function_type)( ::vgui::Panel * ) ;
            
            Panel_exposer.def( 
                "NavigateToChild"
                , NavigateToChild_function_type( &::vgui::Panel::NavigateToChild )
                , ( bp::arg("pNavigateTo") ) );
        
        }
        { //::vgui::Panel::NavigateUp
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*NavigateUp_function_type)(  ) ;
            
            Panel_exposer.def( 
                "NavigateUp"
                , NavigateUp_function_type( &::vgui::Panel::NavigateUp )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::OnChildAdded
        
            typedef void ( ::vgui::Panel::*OnChildAdded_function_type)( ::vgui::VPANEL ) ;
            typedef void ( Panel_wrapper::*default_OnChildAdded_function_type)( ::vgui::VPANEL ) ;
            
            Panel_exposer.def( 
                "OnChildAdded"
                , OnChildAdded_function_type(&::vgui::Panel::OnChildAdded)
                , default_OnChildAdded_function_type(&Panel_wrapper::default_OnChildAdded)
                , ( bp::arg("child") ) );
        
        }
        { //::vgui::Panel::OnChildSettingsApplied
        
            typedef void ( Panel_wrapper::*OnChildSettingsApplied_function_type)( ::KeyValues *,::vgui::Panel * ) ;
            
            Panel_exposer.def( 
                "OnChildSettingsApplied"
                , OnChildSettingsApplied_function_type( &Panel_wrapper::OnChildSettingsApplied )
                , ( bp::arg("pInResourceData"), bp::arg("pChild") ) );
        
        }
        { //::vgui::Panel::OnCommand
        
            typedef void ( ::vgui::Panel::*OnCommand_function_type)( char const * ) ;
            typedef void ( Panel_wrapper::*default_OnCommand_function_type)( char const * ) ;
            
            Panel_exposer.def( 
                "OnCommand"
                , OnCommand_function_type(&::vgui::Panel::OnCommand)
                , default_OnCommand_function_type(&Panel_wrapper::default_OnCommand)
                , ( bp::arg("command") ) );
        
        }
        { //::vgui::Panel::OnContinueDragging
        
            typedef void ( Panel_wrapper::*OnContinueDragging_function_type)(  ) ;
            
            Panel_exposer.def( 
                "OnContinueDragging"
                , OnContinueDragging_function_type( &Panel_wrapper::OnContinueDragging ) );
        
        }
        { //::vgui::Panel::OnCreateDragData
        
            typedef void ( ::vgui::Panel::*OnCreateDragData_function_type)( ::KeyValues * ) ;
            
            Panel_exposer.def( 
                "OnCreateDragData"
                , OnCreateDragData_function_type( &::vgui::Panel::OnCreateDragData )
                , ( bp::arg("msg") ) );
        
        }
        { //::vgui::Panel::OnCursorEntered
        
            typedef void ( ::vgui::Panel::*OnCursorEntered_function_type)(  ) ;
            typedef void ( Panel_wrapper::*default_OnCursorEntered_function_type)(  ) ;
            
            Panel_exposer.def( 
                "OnCursorEntered"
                , OnCursorEntered_function_type(&::vgui::Panel::OnCursorEntered)
                , default_OnCursorEntered_function_type(&Panel_wrapper::default_OnCursorEntered) );
        
        }
        { //::vgui::Panel::OnCursorExited
        
            typedef void ( ::vgui::Panel::*OnCursorExited_function_type)(  ) ;
            typedef void ( Panel_wrapper::*default_OnCursorExited_function_type)(  ) ;
            
            Panel_exposer.def( 
                "OnCursorExited"
                , OnCursorExited_function_type(&::vgui::Panel::OnCursorExited)
                , default_OnCursorExited_function_type(&Panel_wrapper::default_OnCursorExited) );
        
        }
        { //::vgui::Panel::OnCursorMoved
        
            typedef void ( ::vgui::Panel::*OnCursorMoved_function_type)( int,int ) ;
            typedef void ( Panel_wrapper::*default_OnCursorMoved_function_type)( int,int ) ;
            
            Panel_exposer.def( 
                "OnCursorMoved"
                , OnCursorMoved_function_type(&::vgui::Panel::OnCursorMoved)
                , default_OnCursorMoved_function_type(&Panel_wrapper::default_OnCursorMoved)
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::vgui::Panel::OnDraggablePanelPaint
        
            typedef void ( ::vgui::Panel::*OnDraggablePanelPaint_function_type)(  ) ;
            
            Panel_exposer.def( 
                "OnDraggablePanelPaint"
                , OnDraggablePanelPaint_function_type( &::vgui::Panel::OnDraggablePanelPaint ) );
        
        }
        { //::vgui::Panel::OnFinishDragging
        
            typedef void ( Panel_wrapper::*OnFinishDragging_function_type)( bool,::vgui::MouseCode,bool ) ;
            
            Panel_exposer.def( 
                "OnFinishDragging"
                , OnFinishDragging_function_type( &Panel_wrapper::OnFinishDragging )
                , ( bp::arg("mousereleased"), bp::arg("code"), bp::arg("aborted")=(bool)(false) ) );
        
        }
        { //::vgui::Panel::OnKeyCodePressed
        
            typedef void ( ::vgui::Panel::*OnKeyCodePressed_function_type)( ::vgui::KeyCode ) ;
            typedef void ( Panel_wrapper::*default_OnKeyCodePressed_function_type)( ::vgui::KeyCode ) ;
            
            Panel_exposer.def( 
                "OnKeyCodePressed"
                , OnKeyCodePressed_function_type(&::vgui::Panel::OnKeyCodePressed)
                , default_OnKeyCodePressed_function_type(&Panel_wrapper::default_OnKeyCodePressed)
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::Panel::OnKeyCodeReleased
        
            typedef void ( ::vgui::Panel::*OnKeyCodeReleased_function_type)( ::vgui::KeyCode ) ;
            typedef void ( Panel_wrapper::*default_OnKeyCodeReleased_function_type)( ::vgui::KeyCode ) ;
            
            Panel_exposer.def( 
                "OnKeyCodeReleased"
                , OnKeyCodeReleased_function_type(&::vgui::Panel::OnKeyCodeReleased)
                , default_OnKeyCodeReleased_function_type(&Panel_wrapper::default_OnKeyCodeReleased)
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::Panel::OnKeyCodeTyped
        
            typedef void ( ::vgui::Panel::*OnKeyCodeTyped_function_type)( ::vgui::KeyCode ) ;
            typedef void ( Panel_wrapper::*default_OnKeyCodeTyped_function_type)( ::vgui::KeyCode ) ;
            
            Panel_exposer.def( 
                "OnKeyCodeTyped"
                , OnKeyCodeTyped_function_type(&::vgui::Panel::OnKeyCodeTyped)
                , default_OnKeyCodeTyped_function_type(&Panel_wrapper::default_OnKeyCodeTyped)
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::Panel::OnKeyFocusTicked
        
            typedef void ( ::vgui::Panel::*OnKeyFocusTicked_function_type)(  ) ;
            typedef void ( Panel_wrapper::*default_OnKeyFocusTicked_function_type)(  ) ;
            
            Panel_exposer.def( 
                "OnKeyFocusTicked"
                , OnKeyFocusTicked_function_type(&::vgui::Panel::OnKeyFocusTicked)
                , default_OnKeyFocusTicked_function_type(&Panel_wrapper::default_OnKeyFocusTicked) );
        
        }
        { //::vgui::Panel::OnKillFocus
        
            typedef void ( ::vgui::Panel::*OnKillFocus_function_type)(  ) ;
            typedef void ( Panel_wrapper::*default_OnKillFocus_function_type)(  ) ;
            
            Panel_exposer.def( 
                "OnKillFocus"
                , OnKillFocus_function_type(&::vgui::Panel::OnKillFocus)
                , default_OnKillFocus_function_type(&Panel_wrapper::default_OnKillFocus) );
        
        }
        { //::vgui::Panel::OnMessage
        
            typedef void ( ::vgui::Panel::*OnMessage_function_type)( ::KeyValues const *,::vgui::VPANEL ) ;
            
            Panel_exposer.def( 
                "OnMessage"
                , OnMessage_function_type( &::vgui::Panel::OnMessage )
                , ( bp::arg("params"), bp::arg("fromPanel") ) );
        
        }
        { //::vgui::Panel::OnMouseCaptureLost
        
            typedef void ( ::vgui::Panel::*OnMouseCaptureLost_function_type)(  ) ;
            typedef void ( Panel_wrapper::*default_OnMouseCaptureLost_function_type)(  ) ;
            
            Panel_exposer.def( 
                "OnMouseCaptureLost"
                , OnMouseCaptureLost_function_type(&::vgui::Panel::OnMouseCaptureLost)
                , default_OnMouseCaptureLost_function_type(&Panel_wrapper::default_OnMouseCaptureLost) );
        
        }
        { //::vgui::Panel::OnMouseDoublePressed
        
            typedef void ( ::vgui::Panel::*OnMouseDoublePressed_function_type)( ::vgui::MouseCode ) ;
            typedef void ( Panel_wrapper::*default_OnMouseDoublePressed_function_type)( ::vgui::MouseCode ) ;
            
            Panel_exposer.def( 
                "OnMouseDoublePressed"
                , OnMouseDoublePressed_function_type(&::vgui::Panel::OnMouseDoublePressed)
                , default_OnMouseDoublePressed_function_type(&Panel_wrapper::default_OnMouseDoublePressed)
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::Panel::OnMouseFocusTicked
        
            typedef void ( ::vgui::Panel::*OnMouseFocusTicked_function_type)(  ) ;
            typedef void ( Panel_wrapper::*default_OnMouseFocusTicked_function_type)(  ) ;
            
            Panel_exposer.def( 
                "OnMouseFocusTicked"
                , OnMouseFocusTicked_function_type(&::vgui::Panel::OnMouseFocusTicked)
                , default_OnMouseFocusTicked_function_type(&Panel_wrapper::default_OnMouseFocusTicked) );
        
        }
        { //::vgui::Panel::OnMouseMismatchedRelease
        
            typedef void ( ::vgui::Panel::*OnMouseMismatchedRelease_function_type)( ::vgui::MouseCode,::vgui::Panel * ) ;
            
            Panel_exposer.def( 
                "OnMouseMismatchedRelease"
                , OnMouseMismatchedRelease_function_type( &::vgui::Panel::OnMouseMismatchedRelease )
                , ( bp::arg("code"), bp::arg("pPressedPanel") ) );
        
        }
        { //::vgui::Panel::OnMousePressed
        
            typedef void ( ::vgui::Panel::*OnMousePressed_function_type)( ::vgui::MouseCode ) ;
            typedef void ( Panel_wrapper::*default_OnMousePressed_function_type)( ::vgui::MouseCode ) ;
            
            Panel_exposer.def( 
                "OnMousePressed"
                , OnMousePressed_function_type(&::vgui::Panel::OnMousePressed)
                , default_OnMousePressed_function_type(&Panel_wrapper::default_OnMousePressed)
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::Panel::OnMouseReleased
        
            typedef void ( ::vgui::Panel::*OnMouseReleased_function_type)( ::vgui::MouseCode ) ;
            typedef void ( Panel_wrapper::*default_OnMouseReleased_function_type)( ::vgui::MouseCode ) ;
            
            Panel_exposer.def( 
                "OnMouseReleased"
                , OnMouseReleased_function_type(&::vgui::Panel::OnMouseReleased)
                , default_OnMouseReleased_function_type(&Panel_wrapper::default_OnMouseReleased)
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::Panel::OnMouseTriplePressed
        
            typedef void ( ::vgui::Panel::*OnMouseTriplePressed_function_type)( ::vgui::MouseCode ) ;
            typedef void ( Panel_wrapper::*default_OnMouseTriplePressed_function_type)( ::vgui::MouseCode ) ;
            
            Panel_exposer.def( 
                "OnMouseTriplePressed"
                , OnMouseTriplePressed_function_type(&::vgui::Panel::OnMouseTriplePressed)
                , default_OnMouseTriplePressed_function_type(&Panel_wrapper::default_OnMouseTriplePressed)
                , ( bp::arg("code") ) );
        
        }
        { //::vgui::Panel::OnMouseWheeled
        
            typedef void ( ::vgui::Panel::*OnMouseWheeled_function_type)( int ) ;
            typedef void ( Panel_wrapper::*default_OnMouseWheeled_function_type)( int ) ;
            
            Panel_exposer.def( 
                "OnMouseWheeled"
                , OnMouseWheeled_function_type(&::vgui::Panel::OnMouseWheeled)
                , default_OnMouseWheeled_function_type(&Panel_wrapper::default_OnMouseWheeled)
                , ( bp::arg("delta") ) );
        
        }
        { //::vgui::Panel::OnMove
        
            typedef void ( ::vgui::Panel::*OnMove_function_type)(  ) ;
            
            Panel_exposer.def( 
                "OnMove"
                , OnMove_function_type( &::vgui::Panel::OnMove ) );
        
        }
        { //::vgui::Panel::OnNavigateFrom
        
            typedef void ( ::vgui::Panel::*OnNavigateFrom_function_type)( char const * ) ;
            
            Panel_exposer.def( 
                "OnNavigateFrom"
                , OnNavigateFrom_function_type( &::vgui::Panel::OnNavigateFrom )
                , ( bp::arg("panelName") ) );
        
        }
        { //::vgui::Panel::OnNavigateTo
        
            typedef void ( ::vgui::Panel::*OnNavigateTo_function_type)( char const * ) ;
            
            Panel_exposer.def( 
                "OnNavigateTo"
                , OnNavigateTo_function_type( &::vgui::Panel::OnNavigateTo )
                , ( bp::arg("panelName") ) );
        
        }
        { //::vgui::Panel::OnRequestFocus
        
            typedef void ( Panel_wrapper::*OnRequestFocus_function_type)( ::vgui::VPANEL,::vgui::VPANEL ) ;
            
            Panel_exposer.def( 
                "OnRequestFocus"
                , OnRequestFocus_function_type( &Panel_wrapper::default_OnRequestFocus )
                , ( bp::arg("subFocus"), bp::arg("defaultPanel") ) );
        
        }
        { //::vgui::Panel::OnScreenSizeChanged
        
            typedef void ( Panel_wrapper::*OnScreenSizeChanged_function_type)( int,int ) ;
            
            Panel_exposer.def( 
                "OnScreenSizeChanged"
                , OnScreenSizeChanged_function_type( &Panel_wrapper::default_OnScreenSizeChanged )
                , ( bp::arg("oldwide"), bp::arg("oldtall") ) );
        
        }
        { //::vgui::Panel::OnSetFocus
        
            typedef void ( ::vgui::Panel::*OnSetFocus_function_type)(  ) ;
            typedef void ( Panel_wrapper::*default_OnSetFocus_function_type)(  ) ;
            
            Panel_exposer.def( 
                "OnSetFocus"
                , OnSetFocus_function_type(&::vgui::Panel::OnSetFocus)
                , default_OnSetFocus_function_type(&Panel_wrapper::default_OnSetFocus) );
        
        }
        { //::vgui::Panel::OnSizeChanged
        
            typedef void ( ::vgui::Panel::*OnSizeChanged_function_type)( int,int ) ;
            typedef void ( Panel_wrapper::*default_OnSizeChanged_function_type)( int,int ) ;
            
            Panel_exposer.def( 
                "OnSizeChanged"
                , OnSizeChanged_function_type(&::vgui::Panel::OnSizeChanged)
                , default_OnSizeChanged_function_type(&Panel_wrapper::default_OnSizeChanged)
                , ( bp::arg("newWide"), bp::arg("newTall") ) );
        
        }
        { //::vgui::Panel::OnStartDragging
        
            typedef void ( Panel_wrapper::*OnStartDragging_function_type)(  ) ;
            
            Panel_exposer.def( 
                "OnStartDragging"
                , OnStartDragging_function_type( &Panel_wrapper::OnStartDragging ) );
        
        }
        { //::vgui::Panel::OnThink
        
            typedef void ( ::vgui::Panel::*OnThink_function_type)(  ) ;
            typedef void ( Panel_wrapper::*default_OnThink_function_type)(  ) ;
            
            Panel_exposer.def( 
                "OnThink"
                , OnThink_function_type(&::vgui::Panel::OnThink)
                , default_OnThink_function_type(&Panel_wrapper::default_OnThink) );
        
        }
        { //::vgui::Panel::OnTick
        
            typedef void ( ::vgui::Panel::*OnTick_function_type)(  ) ;
            typedef void ( Panel_wrapper::*default_OnTick_function_type)(  ) ;
            
            Panel_exposer.def( 
                "OnTick"
                , OnTick_function_type(&::vgui::Panel::OnTick)
                , default_OnTick_function_type(&Panel_wrapper::default_OnTick) );
        
        }
        { //::vgui::Panel::Paint
        
            typedef void ( ::vgui::Panel::*Paint_function_type)(  ) ;
            typedef void ( Panel_wrapper::*default_Paint_function_type)(  ) ;
            
            Panel_exposer.def( 
                "Paint"
                , Paint_function_type(&::vgui::Panel::Paint)
                , default_Paint_function_type(&Panel_wrapper::default_Paint) );
        
        }
        { //::vgui::Panel::PaintBackground
        
            typedef void ( ::vgui::Panel::*PaintBackground_function_type)(  ) ;
            typedef void ( Panel_wrapper::*default_PaintBackground_function_type)(  ) ;
            
            Panel_exposer.def( 
                "PaintBackground"
                , PaintBackground_function_type(&::vgui::Panel::PaintBackground)
                , default_PaintBackground_function_type(&Panel_wrapper::default_PaintBackground) );
        
        }
        { //::vgui::Panel::PaintBorder
        
            typedef void ( ::vgui::Panel::*PaintBorder_function_type)(  ) ;
            
            Panel_exposer.def( 
                "PaintBorder"
                , PaintBorder_function_type( &::vgui::Panel::PaintBorder ) );
        
        }
        { //::vgui::Panel::PaintBuildOverlay
        
            typedef void ( ::vgui::Panel::*PaintBuildOverlay_function_type)(  ) ;
            typedef void ( Panel_wrapper::*default_PaintBuildOverlay_function_type)(  ) ;
            
            Panel_exposer.def( 
                "PaintBuildOverlay"
                , PaintBuildOverlay_function_type(&::vgui::Panel::PaintBuildOverlay)
                , default_PaintBuildOverlay_function_type(&Panel_wrapper::default_PaintBuildOverlay) );
        
        }
        { //::vgui::Panel::PaintTraverse
        
            typedef void ( Panel_wrapper::*PaintTraverse_function_type)( bool,bool ) ;
            
            Panel_exposer.def( 
                "PaintTraverse"
                , PaintTraverse_function_type( &Panel_wrapper::PaintTraverse )
                , ( bp::arg("Repaint"), bp::arg("allowForce")=(bool)(true) ) );
        
        }
        { //::vgui::Panel::ParentLocalToScreen
        
            typedef boost::python::tuple ( *ParentLocalToScreen_function_type )( ::vgui::Panel &,int,int );
            
            Panel_exposer.def( 
                "ParentLocalToScreen"
                , ParentLocalToScreen_function_type( &Panel_wrapper::ParentLocalToScreen )
                , ( bp::arg("inst"), bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::vgui::Panel::ParentNeedsCursorMoveEvents
        
            typedef bool ( ::vgui::Panel::*ParentNeedsCursorMoveEvents_function_type)(  ) const;
            
            Panel_exposer.def( 
                "ParentNeedsCursorMoveEvents"
                , ParentNeedsCursorMoveEvents_function_type( &::vgui::Panel::ParentNeedsCursorMoveEvents ) );
        
        }
        { //::vgui::Panel::ParseKeyBindings
        
            typedef bool ( ::vgui::Panel::*ParseKeyBindings_function_type)( ::KeyValues * ) ;
            
            Panel_exposer.def( 
                "ParseKeyBindings"
                , ParseKeyBindings_function_type( &::vgui::Panel::ParseKeyBindings )
                , ( bp::arg("kv") ) );
        
        }
        { //::vgui::Panel::PerformLayout
        
            typedef void ( ::vgui::Panel::*PerformLayout_function_type)(  ) ;
            typedef void ( Panel_wrapper::*default_PerformLayout_function_type)(  ) ;
            
            Panel_exposer.def( 
                "PerformLayout"
                , PerformLayout_function_type(&::vgui::Panel::PerformLayout)
                , default_PerformLayout_function_type(&Panel_wrapper::default_PerformLayout) );
        
        }
        { //::vgui::Panel::PinToSibling
        
            typedef void ( ::vgui::Panel::*PinToSibling_function_type)( char const *,::vgui::Panel::PinCorner_e,::vgui::Panel::PinCorner_e ) ;
            
            Panel_exposer.def( 
                "PinToSibling"
                , PinToSibling_function_type( &::vgui::Panel::PinToSibling )
                , ( bp::arg("pszSibling"), bp::arg("pinOurCorner"), bp::arg("pinSibling") ) );
        
        }
        { //::vgui::Panel::PostActionSignal
        
            typedef void ( ::vgui::Panel::*PostActionSignal_function_type)( ::KeyValues * ) ;
            
            Panel_exposer.def( 
                "PostActionSignal"
                , PostActionSignal_function_type( &::vgui::Panel::PostActionSignal )
                , ( bp::arg("message") ) );
        
        }
        { //::vgui::Panel::PostChildPaint
        
            typedef void ( ::vgui::Panel::*PostChildPaint_function_type)(  ) ;
            typedef void ( Panel_wrapper::*default_PostChildPaint_function_type)(  ) ;
            
            Panel_exposer.def( 
                "PostChildPaint"
                , PostChildPaint_function_type(&::vgui::Panel::PostChildPaint)
                , default_PostChildPaint_function_type(&Panel_wrapper::default_PostChildPaint) );
        
        }
        { //::vgui::Panel::PostMessage
        
            typedef void ( ::vgui::Panel::*PostMessage_function_type)( ::vgui::VPANEL,::KeyValues *,float ) ;
            
            Panel_exposer.def( 
                "PostMessage"
                , PostMessage_function_type( &::vgui::Panel::PostMessage )
                , ( bp::arg("target"), bp::arg("message"), bp::arg("delaySeconds")=0.F ) );
        
        }
        { //::vgui::Panel::PostMessage
        
            typedef void ( ::vgui::Panel::*PostMessage_function_type)( ::vgui::Panel *,::KeyValues *,float ) ;
            
            Panel_exposer.def( 
                "PostMessage"
                , PostMessage_function_type( &::vgui::Panel::PostMessage )
                , ( bp::arg("target"), bp::arg("message"), bp::arg("delaySeconds")=0.F ) );
        
        }
        { //::vgui::Panel::PostMessageToAllSiblings
        
            typedef void ( ::vgui::Panel::*PostMessageToAllSiblings_function_type)( ::KeyValues *,float ) ;
            
            Panel_exposer.def( 
                "PostMessageToAllSiblings"
                , PostMessageToAllSiblings_function_type( &::vgui::Panel::PostMessageToAllSiblings )
                , ( bp::arg("msg"), bp::arg("delaySeconds")=0.F ) );
        
        }
        { //::vgui::Panel::PostMessageToChild
        
            typedef void ( ::vgui::Panel::*PostMessageToChild_function_type)( char const *,::KeyValues * ) ;
            
            Panel_exposer.def( 
                "PostMessageToChild"
                , PostMessageToChild_function_type( &::vgui::Panel::PostMessageToChild )
                , ( bp::arg("childName"), bp::arg("messsage") ) );
        
        }
        { //::vgui::Panel::ReloadKeyBindings
        
            typedef void ( ::vgui::Panel::*ReloadKeyBindings_function_type)(  ) ;
            
            Panel_exposer.def( 
                "ReloadKeyBindings"
                , ReloadKeyBindings_function_type( &::vgui::Panel::ReloadKeyBindings ) );
        
        }
        { //::vgui::Panel::RemoveActionSignalTarget
        
            typedef void ( ::vgui::Panel::*RemoveActionSignalTarget_function_type)( ::vgui::Panel * ) ;
            
            Panel_exposer.def( 
                "RemoveActionSignalTarget"
                , RemoveActionSignalTarget_function_type( &::vgui::Panel::RemoveActionSignalTarget )
                , ( bp::arg("oldTarget") ) );
        
        }
        { //::vgui::Panel::RemoveAllKeyBindings
        
            typedef void ( ::vgui::Panel::*RemoveAllKeyBindings_function_type)(  ) ;
            
            Panel_exposer.def( 
                "RemoveAllKeyBindings"
                , RemoveAllKeyBindings_function_type( &::vgui::Panel::RemoveAllKeyBindings ) );
        
        }
        { //::vgui::Panel::Repaint
        
            typedef void ( ::vgui::Panel::*Repaint_function_type)(  ) ;
            
            Panel_exposer.def( 
                "Repaint"
                , Repaint_function_type( &::vgui::Panel::Repaint ) );
        
        }
        { //::vgui::Panel::RequestFocus
        
            typedef void ( ::vgui::Panel::*RequestFocus_function_type)( int ) ;
            
            Panel_exposer.def( 
                "RequestFocus"
                , RequestFocus_function_type( &::vgui::Panel::RequestFocus )
                , ( bp::arg("direction")=(int)(0) ) );
        
        }
        { //::vgui::Panel::RequestFocusNext
        
            typedef bool ( ::vgui::Panel::*RequestFocusNext_function_type)( ::vgui::VPANEL ) ;
            
            Panel_exposer.def( 
                "RequestFocusNext"
                , RequestFocusNext_function_type( &::vgui::Panel::RequestFocusNext )
                , ( bp::arg("panel")=(::vgui::VPANEL)(0) ) );
        
        }
        { //::vgui::Panel::RequestFocusPrev
        
            typedef bool ( ::vgui::Panel::*RequestFocusPrev_function_type)( ::vgui::VPANEL ) ;
            
            Panel_exposer.def( 
                "RequestFocusPrev"
                , RequestFocusPrev_function_type( &::vgui::Panel::RequestFocusPrev )
                , ( bp::arg("panel")=(::vgui::VPANEL)(0) ) );
        
        }
        { //::vgui::Panel::RequestInfo
        
            typedef bool ( ::vgui::Panel::*RequestInfo_function_type)( ::KeyValues * ) ;
            
            Panel_exposer.def( 
                "RequestInfo"
                , RequestInfo_function_type( &::vgui::Panel::RequestInfo )
                , ( bp::arg("outputData") ) );
        
        }
        { //::vgui::Panel::RequestInfoFromChild
        
            typedef bool ( ::vgui::Panel::*RequestInfoFromChild_function_type)( char const *,::KeyValues * ) ;
            
            Panel_exposer.def( 
                "RequestInfoFromChild"
                , RequestInfoFromChild_function_type( &::vgui::Panel::RequestInfoFromChild )
                , ( bp::arg("childName"), bp::arg("outputData") ) );
        
        }
        { //::vgui::Panel::RevertKeyBindingsToDefault
        
            typedef void ( ::vgui::Panel::*RevertKeyBindingsToDefault_function_type)(  ) ;
            
            Panel_exposer.def( 
                "RevertKeyBindingsToDefault"
                , RevertKeyBindingsToDefault_function_type( &::vgui::Panel::RevertKeyBindingsToDefault ) );
        
        }
        { //::vgui::Panel::ScreenToLocal
        
            typedef boost::python::tuple ( *ScreenToLocal_function_type )( ::vgui::Panel &,int,int );
            
            Panel_exposer.def( 
                "ScreenToLocal"
                , ScreenToLocal_function_type( &Panel_wrapper::ScreenToLocal )
                , ( bp::arg("inst"), bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::vgui::Panel::SetAllowKeyBindingChainToParent
        
            typedef void ( ::vgui::Panel::*SetAllowKeyBindingChainToParent_function_type)( bool ) ;
            
            Panel_exposer.def( 
                "SetAllowKeyBindingChainToParent"
                , SetAllowKeyBindingChainToParent_function_type( &::vgui::Panel::SetAllowKeyBindingChainToParent )
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetAlpha
        
            typedef void ( ::vgui::Panel::*SetAlpha_function_type)( int ) ;
            
            Panel_exposer.def( 
                "SetAlpha"
                , SetAlpha_function_type( &::vgui::Panel::SetAlpha )
                , ( bp::arg("alpha") ) );
        
        }
        { //::vgui::Panel::SetAutoDelete
        
            typedef void ( ::vgui::Panel::*SetAutoDelete_function_type)( bool ) ;
            
            Panel_exposer.def( 
                "SetAutoDelete"
                , SetAutoDelete_function_type( &::vgui::Panel::SetAutoDelete )
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetAutoResize
        
            typedef void ( ::vgui::Panel::*SetAutoResize_function_type)( ::vgui::Panel::PinCorner_e,::vgui::Panel::AutoResize_e,int,int,int,int ) ;
            
            Panel_exposer.def( 
                "SetAutoResize"
                , SetAutoResize_function_type( &::vgui::Panel::SetAutoResize )
                , ( bp::arg("pinCorner"), bp::arg("resizeDir"), bp::arg("nPinOffsetX"), bp::arg("nPinOffsetY"), bp::arg("nUnpinnedCornerOffsetX"), bp::arg("nUnpinnedCornerOffsetY") ) );
        
        }
        { //::vgui::Panel::SetBgColor
        
            typedef void ( ::vgui::Panel::*SetBgColor_function_type)( ::Color ) ;
            typedef void ( Panel_wrapper::*default_SetBgColor_function_type)( ::Color ) ;
            
            Panel_exposer.def( 
                "SetBgColor"
                , SetBgColor_function_type(&::vgui::Panel::SetBgColor)
                , default_SetBgColor_function_type(&Panel_wrapper::default_SetBgColor)
                , ( bp::arg("color") ) );
        
        }
        { //::vgui::Panel::SetBlockDragChaining
        
            typedef void ( ::vgui::Panel::*SetBlockDragChaining_function_type)( bool ) ;
            
            Panel_exposer.def( 
                "SetBlockDragChaining"
                , SetBlockDragChaining_function_type( &::vgui::Panel::SetBlockDragChaining )
                , ( bp::arg("block") ) );
        
        }
        { //::vgui::Panel::SetBorder
        
            typedef void ( ::vgui::Panel::*SetBorder_function_type)( ::vgui::IBorder * ) ;
            typedef void ( Panel_wrapper::*default_SetBorder_function_type)( ::vgui::IBorder * ) ;
            
            Panel_exposer.def( 
                "SetBorder"
                , SetBorder_function_type(&::vgui::Panel::SetBorder)
                , default_SetBorder_function_type(&Panel_wrapper::default_SetBorder)
                , ( bp::arg("border") ) );
        
        }
        { //::vgui::Panel::SetBounds
        
            typedef void ( ::vgui::Panel::*SetBounds_function_type)( int,int,int,int ) ;
            
            Panel_exposer.def( 
                "SetBounds"
                , SetBounds_function_type( &::vgui::Panel::SetBounds )
                , ( bp::arg("x"), bp::arg("y"), bp::arg("wide"), bp::arg("tall") ) );
        
        }
        { //::vgui::Panel::SetConsoleStylePanel
        
            typedef void ( ::vgui::Panel::*SetConsoleStylePanel_function_type)( bool ) ;
            
            Panel_exposer.def( 
                "SetConsoleStylePanel"
                , SetConsoleStylePanel_function_type( &::vgui::Panel::SetConsoleStylePanel )
                , ( bp::arg("bConsoleStyle") ) );
        
        }
        { //::vgui::Panel::SetCursor
        
            typedef void ( ::vgui::Panel::*SetCursor_function_type)( ::vgui::HCursor ) ;
            typedef void ( Panel_wrapper::*default_SetCursor_function_type)( ::vgui::HCursor ) ;
            
            Panel_exposer.def( 
                "SetCursor"
                , SetCursor_function_type(&::vgui::Panel::SetCursor)
                , default_SetCursor_function_type(&Panel_wrapper::default_SetCursor)
                , ( bp::arg("cursor") ) );
        
        }
        { //::vgui::Panel::SetCursorAlwaysVisible
        
            typedef void ( ::vgui::Panel::*SetCursorAlwaysVisible_function_type)( bool ) ;
            
            Panel_exposer.def( 
                "SetCursorAlwaysVisible"
                , SetCursorAlwaysVisible_function_type( &::vgui::Panel::SetCursorAlwaysVisible )
                , ( bp::arg("visible") ) );
        
        }
        { //::vgui::Panel::SetDragEnabled
        
            typedef void ( ::vgui::Panel::*SetDragEnabled_function_type)( bool ) ;
            typedef void ( Panel_wrapper::*default_SetDragEnabled_function_type)( bool ) ;
            
            Panel_exposer.def( 
                "SetDragEnabled"
                , SetDragEnabled_function_type(&::vgui::Panel::SetDragEnabled)
                , default_SetDragEnabled_function_type(&Panel_wrapper::default_SetDragEnabled)
                , ( bp::arg("enabled") ) );
        
        }
        { //::vgui::Panel::SetDragSTartTolerance
        
            typedef void ( ::vgui::Panel::*SetDragSTartTolerance_function_type)( int ) ;
            
            Panel_exposer.def( 
                "SetDragSTartTolerance"
                , SetDragSTartTolerance_function_type( &::vgui::Panel::SetDragSTartTolerance )
                , ( bp::arg("nTolerance") ) );
        
        }
        { //::vgui::Panel::SetDropEnabled
        
            typedef void ( ::vgui::Panel::*SetDropEnabled_function_type)( bool,float ) ;
            
            Panel_exposer.def( 
                "SetDropEnabled"
                , SetDropEnabled_function_type( &::vgui::Panel::SetDropEnabled )
                , ( bp::arg("enabled"), bp::arg("m_flHoverContextTime")=0.F ) );
        
        }
        { //::vgui::Panel::SetEnabled
        
            typedef void ( ::vgui::Panel::*SetEnabled_function_type)( bool ) ;
            typedef void ( Panel_wrapper::*default_SetEnabled_function_type)( bool ) ;
            
            Panel_exposer.def( 
                "SetEnabled"
                , SetEnabled_function_type(&::vgui::Panel::SetEnabled)
                , default_SetEnabled_function_type(&Panel_wrapper::default_SetEnabled)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetFgColor
        
            typedef void ( ::vgui::Panel::*SetFgColor_function_type)( ::Color ) ;
            typedef void ( Panel_wrapper::*default_SetFgColor_function_type)( ::Color ) ;
            
            Panel_exposer.def( 
                "SetFgColor"
                , SetFgColor_function_type(&::vgui::Panel::SetFgColor)
                , default_SetFgColor_function_type(&Panel_wrapper::default_SetFgColor)
                , ( bp::arg("color") ) );
        
        }
        { //::vgui::Panel::SetForceStereoRenderToFrameBuffer
        
            typedef void ( ::vgui::Panel::*SetForceStereoRenderToFrameBuffer_function_type)( bool ) ;
            
            Panel_exposer.def( 
                "SetForceStereoRenderToFrameBuffer"
                , SetForceStereoRenderToFrameBuffer_function_type( &::vgui::Panel::SetForceStereoRenderToFrameBuffer )
                , ( bp::arg("bForce") ) );
        
        }
        { //::vgui::Panel::SetInfo
        
            typedef bool ( ::vgui::Panel::*SetInfo_function_type)( ::KeyValues * ) ;
            
            Panel_exposer.def( 
                "SetInfo"
                , SetInfo_function_type( &::vgui::Panel::SetInfo )
                , ( bp::arg("inputData") ) );
        
        }
        { //::vgui::Panel::SetKeyBoardInputEnabled
        
            typedef void ( ::vgui::Panel::*SetKeyBoardInputEnabled_function_type)( bool ) ;
            typedef void ( Panel_wrapper::*default_SetKeyBoardInputEnabled_function_type)( bool ) ;
            
            Panel_exposer.def( 
                "SetKeyBoardInputEnabled"
                , SetKeyBoardInputEnabled_function_type(&::vgui::Panel::SetKeyBoardInputEnabled)
                , default_SetKeyBoardInputEnabled_function_type(&Panel_wrapper::default_SetKeyBoardInputEnabled)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetMinimumSize
        
            typedef void ( ::vgui::Panel::*SetMinimumSize_function_type)( int,int ) ;
            
            Panel_exposer.def( 
                "SetMinimumSize"
                , SetMinimumSize_function_type( &::vgui::Panel::SetMinimumSize )
                , ( bp::arg("wide"), bp::arg("tall") ) );
        
        }
        { //::vgui::Panel::SetMouseInputEnabled
        
            typedef void ( ::vgui::Panel::*SetMouseInputEnabled_function_type)( bool ) ;
            typedef void ( Panel_wrapper::*default_SetMouseInputEnabled_function_type)( bool ) ;
            
            Panel_exposer.def( 
                "SetMouseInputEnabled"
                , SetMouseInputEnabled_function_type(&::vgui::Panel::SetMouseInputEnabled)
                , default_SetMouseInputEnabled_function_type(&Panel_wrapper::default_SetMouseInputEnabled)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetName
        
            typedef void ( ::vgui::Panel::*SetName_function_type)( char const * ) ;
            
            Panel_exposer.def( 
                "SetName"
                , SetName_function_type( &::vgui::Panel::SetName )
                , ( bp::arg("panelName") ) );
        
        }
        { //::vgui::Panel::SetNavActivate
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*SetNavActivate_function_type)( ::vgui::Panel * ) ;
            
            Panel_exposer.def( 
                "SetNavActivate"
                , SetNavActivate_function_type( &::vgui::Panel::SetNavActivate )
                , ( bp::arg("navActivate") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavActivate
        
            typedef void ( ::vgui::Panel::*SetNavActivate_function_type)( char const * ) ;
            
            Panel_exposer.def( 
                "SetNavActivate"
                , SetNavActivate_function_type( &::vgui::Panel::SetNavActivate )
                , ( bp::arg("controlName") ) );
        
        }
        { //::vgui::Panel::SetNavBack
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*SetNavBack_function_type)( ::vgui::Panel * ) ;
            
            Panel_exposer.def( 
                "SetNavBack"
                , SetNavBack_function_type( &::vgui::Panel::SetNavBack )
                , ( bp::arg("navBack") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavBack
        
            typedef void ( ::vgui::Panel::*SetNavBack_function_type)( char const * ) ;
            
            Panel_exposer.def( 
                "SetNavBack"
                , SetNavBack_function_type( &::vgui::Panel::SetNavBack )
                , ( bp::arg("controlName") ) );
        
        }
        { //::vgui::Panel::SetNavDown
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*SetNavDown_function_type)( ::vgui::Panel * ) ;
            
            Panel_exposer.def( 
                "SetNavDown"
                , SetNavDown_function_type( &::vgui::Panel::SetNavDown )
                , ( bp::arg("navDown") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavDown
        
            typedef void ( ::vgui::Panel::*SetNavDown_function_type)( char const * ) ;
            
            Panel_exposer.def( 
                "SetNavDown"
                , SetNavDown_function_type( &::vgui::Panel::SetNavDown )
                , ( bp::arg("controlName") ) );
        
        }
        { //::vgui::Panel::SetNavLeft
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*SetNavLeft_function_type)( ::vgui::Panel * ) ;
            
            Panel_exposer.def( 
                "SetNavLeft"
                , SetNavLeft_function_type( &::vgui::Panel::SetNavLeft )
                , ( bp::arg("navLeft") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavLeft
        
            typedef void ( ::vgui::Panel::*SetNavLeft_function_type)( char const * ) ;
            
            Panel_exposer.def( 
                "SetNavLeft"
                , SetNavLeft_function_type( &::vgui::Panel::SetNavLeft )
                , ( bp::arg("controlName") ) );
        
        }
        { //::vgui::Panel::SetNavRight
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*SetNavRight_function_type)( ::vgui::Panel * ) ;
            
            Panel_exposer.def( 
                "SetNavRight"
                , SetNavRight_function_type( &::vgui::Panel::SetNavRight )
                , ( bp::arg("navRight") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavRight
        
            typedef void ( ::vgui::Panel::*SetNavRight_function_type)( char const * ) ;
            
            Panel_exposer.def( 
                "SetNavRight"
                , SetNavRight_function_type( &::vgui::Panel::SetNavRight )
                , ( bp::arg("controlName") ) );
        
        }
        { //::vgui::Panel::SetNavToRelay
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*SetNavToRelay_function_type)( ::vgui::Panel * ) ;
            
            Panel_exposer.def( 
                "SetNavToRelay"
                , SetNavToRelay_function_type( &::vgui::Panel::SetNavToRelay )
                , ( bp::arg("navToRelay") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavToRelay
        
            typedef void ( ::vgui::Panel::*SetNavToRelay_function_type)( char const * ) ;
            
            Panel_exposer.def( 
                "SetNavToRelay"
                , SetNavToRelay_function_type( &::vgui::Panel::SetNavToRelay )
                , ( bp::arg("controlName") ) );
        
        }
        { //::vgui::Panel::SetNavUp
        
            typedef ::vgui::Panel * ( ::vgui::Panel::*SetNavUp_function_type)( ::vgui::Panel * ) ;
            
            Panel_exposer.def( 
                "SetNavUp"
                , SetNavUp_function_type( &::vgui::Panel::SetNavUp )
                , ( bp::arg("navUp") )
                , bp::return_value_policy< bp::return_by_value >() );
        
        }
        { //::vgui::Panel::SetNavUp
        
            typedef void ( ::vgui::Panel::*SetNavUp_function_type)( char const * ) ;
            
            Panel_exposer.def( 
                "SetNavUp"
                , SetNavUp_function_type( &::vgui::Panel::SetNavUp )
                , ( bp::arg("controlName") ) );
        
        }
        { //::vgui::Panel::SetOverridableColor
        
            typedef void ( Panel_wrapper::*SetOverridableColor_function_type)( ::Color *,::Color const & ) ;
            
            Panel_exposer.def( 
                "SetOverridableColor"
                , SetOverridableColor_function_type( &Panel_wrapper::SetOverridableColor )
                , ( bp::arg("pColor"), bp::arg("newColor") ) );
        
        }
        { //::vgui::Panel::SetPaintBackgroundEnabled
        
            typedef void ( ::vgui::Panel::*SetPaintBackgroundEnabled_function_type)( bool ) ;
            typedef void ( Panel_wrapper::*default_SetPaintBackgroundEnabled_function_type)( bool ) ;
            
            Panel_exposer.def( 
                "SetPaintBackgroundEnabled"
                , SetPaintBackgroundEnabled_function_type(&::vgui::Panel::SetPaintBackgroundEnabled)
                , default_SetPaintBackgroundEnabled_function_type(&Panel_wrapper::default_SetPaintBackgroundEnabled)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetPaintBackgroundType
        
            typedef void ( ::vgui::Panel::*SetPaintBackgroundType_function_type)( int ) ;
            typedef void ( Panel_wrapper::*default_SetPaintBackgroundType_function_type)( int ) ;
            
            Panel_exposer.def( 
                "SetPaintBackgroundType"
                , SetPaintBackgroundType_function_type(&::vgui::Panel::SetPaintBackgroundType)
                , default_SetPaintBackgroundType_function_type(&Panel_wrapper::default_SetPaintBackgroundType)
                , ( bp::arg("type") ) );
        
        }
        { //::vgui::Panel::SetPaintBorderEnabled
        
            typedef void ( ::vgui::Panel::*SetPaintBorderEnabled_function_type)( bool ) ;
            typedef void ( Panel_wrapper::*default_SetPaintBorderEnabled_function_type)( bool ) ;
            
            Panel_exposer.def( 
                "SetPaintBorderEnabled"
                , SetPaintBorderEnabled_function_type(&::vgui::Panel::SetPaintBorderEnabled)
                , default_SetPaintBorderEnabled_function_type(&Panel_wrapper::default_SetPaintBorderEnabled)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetPaintEnabled
        
            typedef void ( ::vgui::Panel::*SetPaintEnabled_function_type)( bool ) ;
            typedef void ( Panel_wrapper::*default_SetPaintEnabled_function_type)( bool ) ;
            
            Panel_exposer.def( 
                "SetPaintEnabled"
                , SetPaintEnabled_function_type(&::vgui::Panel::SetPaintEnabled)
                , default_SetPaintEnabled_function_type(&Panel_wrapper::default_SetPaintEnabled)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetParent
        
            typedef void ( ::vgui::Panel::*SetParent_function_type)( ::vgui::Panel * ) ;
            typedef void ( Panel_wrapper::*default_SetParent_function_type)( ::vgui::Panel * ) ;
            
            Panel_exposer.def( 
                "SetParent"
                , SetParent_function_type(&::vgui::Panel::SetParent)
                , default_SetParent_function_type(&Panel_wrapper::default_SetParent)
                , ( bp::arg("newParent") ) );
        
        }
        { //::vgui::Panel::SetParent
        
            typedef void ( ::vgui::Panel::*SetParent_function_type)( ::vgui::VPANEL ) ;
            typedef void ( Panel_wrapper::*default_SetParent_function_type)( ::vgui::VPANEL ) ;
            
            Panel_exposer.def( 
                "SetParent"
                , SetParent_function_type(&::vgui::Panel::SetParent)
                , default_SetParent_function_type(&Panel_wrapper::default_SetParent)
                , ( bp::arg("newParent") ) );
        
        }
        { //::vgui::Panel::SetParentNeedsCursorMoveEvents
        
            typedef void ( ::vgui::Panel::*SetParentNeedsCursorMoveEvents_function_type)( bool ) ;
            
            Panel_exposer.def( 
                "SetParentNeedsCursorMoveEvents"
                , SetParentNeedsCursorMoveEvents_function_type( &::vgui::Panel::SetParentNeedsCursorMoveEvents )
                , ( bp::arg("bNeedsEvents") ) );
        
        }
        { //::vgui::Panel::SetPinCorner
        
            typedef void ( ::vgui::Panel::*SetPinCorner_function_type)( ::vgui::Panel::PinCorner_e,int,int ) ;
            
            Panel_exposer.def( 
                "SetPinCorner"
                , SetPinCorner_function_type( &::vgui::Panel::SetPinCorner )
                , ( bp::arg("pinCorner"), bp::arg("nOffsetX"), bp::arg("nOffsetY") ) );
        
        }
        { //::vgui::Panel::SetPos
        
            typedef void ( ::vgui::Panel::*SetPos_function_type)( int,int ) ;
            
            Panel_exposer.def( 
                "SetPos"
                , SetPos_function_type( &::vgui::Panel::SetPos )
                , ( bp::arg("x"), bp::arg("y") ) );
        
        }
        { //::vgui::Panel::SetPostChildPaintEnabled
        
            typedef void ( ::vgui::Panel::*SetPostChildPaintEnabled_function_type)( bool ) ;
            
            Panel_exposer.def( 
                "SetPostChildPaintEnabled"
                , SetPostChildPaintEnabled_function_type( &::vgui::Panel::SetPostChildPaintEnabled )
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetProportional
        
            typedef void ( ::vgui::Panel::*SetProportional_function_type)( bool ) ;
            
            Panel_exposer.def( 
                "SetProportional"
                , SetProportional_function_type( &::vgui::Panel::SetProportional )
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetRoundedCorners
        
            typedef void ( ::vgui::Panel::*SetRoundedCorners_function_type)( unsigned char ) ;
            
            Panel_exposer.def( 
                "SetRoundedCorners"
                , SetRoundedCorners_function_type( &::vgui::Panel::SetRoundedCorners )
                , ( bp::arg("cornerFlags") ) );
        
        }
        { //::vgui::Panel::SetScheme
        
            typedef void ( ::vgui::Panel::*SetScheme_function_type)( char const * ) ;
            typedef void ( Panel_wrapper::*default_SetScheme_function_type)( char const * ) ;
            
            Panel_exposer.def( 
                "SetScheme"
                , SetScheme_function_type(&::vgui::Panel::SetScheme)
                , default_SetScheme_function_type(&Panel_wrapper::default_SetScheme)
                , ( bp::arg("tag") ) );
        
        }
        { //::vgui::Panel::SetScheme
        
            typedef void ( ::vgui::Panel::*SetScheme_function_type)( ::vgui::HScheme ) ;
            typedef void ( Panel_wrapper::*default_SetScheme_function_type)( ::vgui::HScheme ) ;
            
            Panel_exposer.def( 
                "SetScheme"
                , SetScheme_function_type(&::vgui::Panel::SetScheme)
                , default_SetScheme_function_type(&Panel_wrapper::default_SetScheme)
                , ( bp::arg("scheme") ) );
        
        }
        { //::vgui::Panel::SetShowDragHelper
        
            typedef void ( ::vgui::Panel::*SetShowDragHelper_function_type)( bool ) ;
            
            Panel_exposer.def( 
                "SetShowDragHelper"
                , SetShowDragHelper_function_type( &::vgui::Panel::SetShowDragHelper )
                , ( bp::arg("enabled") ) );
        
        }
        { //::vgui::Panel::SetSilentMode
        
            typedef void ( ::vgui::Panel::*SetSilentMode_function_type)( bool ) ;
            
            Panel_exposer.def( 
                "SetSilentMode"
                , SetSilentMode_function_type( &::vgui::Panel::SetSilentMode )
                , ( bp::arg("bSilent") ) );
        
        }
        { //::vgui::Panel::SetSize
        
            typedef void ( ::vgui::Panel::*SetSize_function_type)( int,int ) ;
            
            Panel_exposer.def( 
                "SetSize"
                , SetSize_function_type( &::vgui::Panel::SetSize )
                , ( bp::arg("wide"), bp::arg("tall") ) );
        
        }
        { //::vgui::Panel::SetSkipChildDuringPainting
        
            typedef void ( ::vgui::Panel::*SetSkipChildDuringPainting_function_type)( ::vgui::Panel * ) ;
            
            Panel_exposer.def( 
                "SetSkipChildDuringPainting"
                , SetSkipChildDuringPainting_function_type( &::vgui::Panel::SetSkipChildDuringPainting )
                , ( bp::arg("child") ) );
        
        }
        { //::vgui::Panel::SetStartDragWhenMouseExitsPanel
        
            typedef void ( ::vgui::Panel::*SetStartDragWhenMouseExitsPanel_function_type)( bool ) ;
            
            Panel_exposer.def( 
                "SetStartDragWhenMouseExitsPanel"
                , SetStartDragWhenMouseExitsPanel_function_type( &::vgui::Panel::SetStartDragWhenMouseExitsPanel )
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetTabPosition
        
            typedef void ( ::vgui::Panel::*SetTabPosition_function_type)( int ) ;
            
            Panel_exposer.def( 
                "SetTabPosition"
                , SetTabPosition_function_type( &::vgui::Panel::SetTabPosition )
                , ( bp::arg("position") ) );
        
        }
        { //::vgui::Panel::SetTall
        
            typedef void ( ::vgui::Panel::*SetTall_function_type)( int ) ;
            
            Panel_exposer.def( 
                "SetTall"
                , SetTall_function_type( &::vgui::Panel::SetTall )
                , ( bp::arg("tall") ) );
        
        }
        { //::vgui::Panel::SetTooltip
        
            typedef void ( ::vgui::Panel::*SetTooltip_function_type)( ::vgui::BaseTooltip *,char const * ) ;
            
            Panel_exposer.def( 
                "SetTooltip"
                , SetTooltip_function_type( &::vgui::Panel::SetTooltip )
                , ( bp::arg("pToolTip"), bp::arg("pszText") ) );
        
        }
        { //::vgui::Panel::SetTriplePressAllowed
        
            typedef void ( ::vgui::Panel::*SetTriplePressAllowed_function_type)( bool ) ;
            
            Panel_exposer.def( 
                "SetTriplePressAllowed"
                , SetTriplePressAllowed_function_type( &::vgui::Panel::SetTriplePressAllowed )
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetVisible
        
            typedef void ( ::vgui::Panel::*SetVisible_function_type)( bool ) ;
            typedef void ( Panel_wrapper::*default_SetVisible_function_type)( bool ) ;
            
            Panel_exposer.def( 
                "SetVisible"
                , SetVisible_function_type(&::vgui::Panel::SetVisible)
                , default_SetVisible_function_type(&Panel_wrapper::default_SetVisible)
                , ( bp::arg("state") ) );
        
        }
        { //::vgui::Panel::SetWide
        
            typedef void ( ::vgui::Panel::*SetWide_function_type)( int ) ;
            
            Panel_exposer.def( 
                "SetWide"
                , SetWide_function_type( &::vgui::Panel::SetWide )
                , ( bp::arg("wide") ) );
        
        }
        { //::vgui::Panel::SetWorldPositionCurrentFrame
        
            typedef void ( ::vgui::Panel::*SetWorldPositionCurrentFrame_function_type)( bool ) ;
            
            Panel_exposer.def( 
                "SetWorldPositionCurrentFrame"
                , SetWorldPositionCurrentFrame_function_type( &::vgui::Panel::SetWorldPositionCurrentFrame )
                , ( bp::arg("bWorldPositionCurrentFrame") ) );
        
        }
        { //::vgui::Panel::SetZPos
        
            typedef void ( ::vgui::Panel::*SetZPos_function_type)( int ) ;
            
            Panel_exposer.def( 
                "SetZPos"
                , SetZPos_function_type( &::vgui::Panel::SetZPos )
                , ( bp::arg("z") ) );
        
        }
        { //::vgui::Panel::ShouldDrawBottomLeftCornerRounded
        
            typedef bool ( ::vgui::Panel::*ShouldDrawBottomLeftCornerRounded_function_type)(  ) ;
            
            Panel_exposer.def( 
                "ShouldDrawBottomLeftCornerRounded"
                , ShouldDrawBottomLeftCornerRounded_function_type( &::vgui::Panel::ShouldDrawBottomLeftCornerRounded ) );
        
        }
        { //::vgui::Panel::ShouldDrawBottomRightCornerRounded
        
            typedef bool ( ::vgui::Panel::*ShouldDrawBottomRightCornerRounded_function_type)(  ) ;
            
            Panel_exposer.def( 
                "ShouldDrawBottomRightCornerRounded"
                , ShouldDrawBottomRightCornerRounded_function_type( &::vgui::Panel::ShouldDrawBottomRightCornerRounded ) );
        
        }
        { //::vgui::Panel::ShouldDrawTopLeftCornerRounded
        
            typedef bool ( ::vgui::Panel::*ShouldDrawTopLeftCornerRounded_function_type)(  ) ;
            
            Panel_exposer.def( 
                "ShouldDrawTopLeftCornerRounded"
                , ShouldDrawTopLeftCornerRounded_function_type( &::vgui::Panel::ShouldDrawTopLeftCornerRounded ) );
        
        }
        { //::vgui::Panel::ShouldDrawTopRightCornerRounded
        
            typedef bool ( ::vgui::Panel::*ShouldDrawTopRightCornerRounded_function_type)(  ) ;
            
            Panel_exposer.def( 
                "ShouldDrawTopRightCornerRounded"
                , ShouldDrawTopRightCornerRounded_function_type( &::vgui::Panel::ShouldDrawTopRightCornerRounded ) );
        
        }
        { //::vgui::Panel::ShouldHandleInputMessage
        
            typedef bool ( ::vgui::Panel::*ShouldHandleInputMessage_function_type)(  ) ;
            
            Panel_exposer.def( 
                "ShouldHandleInputMessage"
                , ShouldHandleInputMessage_function_type( &::vgui::Panel::ShouldHandleInputMessage ) );
        
        }
        { //::vgui::Panel::StringToKeyCode
        
            typedef ::vgui::KeyCode ( *StringToKeyCode_function_type )( char const * );
            
            Panel_exposer.def( 
                "StringToKeyCode"
                , StringToKeyCode_function_type( &::vgui::Panel::StringToKeyCode )
                , ( bp::arg("str") ) );
        
        }
        { //::vgui::Panel::ToHandle
        
            typedef ::vgui::HPanel ( ::vgui::Panel::*ToHandle_function_type)(  ) const;
            
            Panel_exposer.def( 
                "ToHandle"
                , ToHandle_function_type( &::vgui::Panel::ToHandle ) );
        
        }
        { //::vgui::Panel::UpdateSiblingPin
        
            typedef void ( ::vgui::Panel::*UpdateSiblingPin_function_type)(  ) ;
            
            Panel_exposer.def( 
                "UpdateSiblingPin"
                , UpdateSiblingPin_function_type( &::vgui::Panel::UpdateSiblingPin ) );
        
        }
        Panel_exposer.staticmethod( "GetPanelBaseClassName" );
        Panel_exposer.staticmethod( "GetPanelClassName" );
        Panel_exposer.staticmethod( "InitPropertyConverters" );
        Panel_exposer.staticmethod( "KeyCodeModifiersToDisplayString" );
        Panel_exposer.staticmethod( "KeyCodeToDisplayString" );
        Panel_exposer.staticmethod( "KeyCodeToString" );
        Panel_exposer.staticmethod( "StringToKeyCode" );
    }

}
