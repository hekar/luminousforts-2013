// This file has been generated by Py++.

#include "cbase.h"
#include "cbase.h"
#include "vgui_controls/Panel.h"
#include "vgui_controls/AnimationController.h"
#include "vgui_controls/EditablePanel.h"
#include "vgui_controls/AnalogBar.h"
#include "vgui_controls/Image.h"
#include "vgui_controls/TextImage.h"
#include "vgui_controls/ScrollBar.h"
#include "vgui_controls/ScrollBarSlider.h"
#include "vgui_controls/Menu.h"
#include "vgui_controls/MenuButton.h"
#include "vgui_controls/Frame.h"
#include "vgui_controls/TextEntry.h"
#include "vgui_controls/RichText.h"
#include "vgui_controls/Tooltip.h"
#include "vgui/IBorder.h"
#include "vgui_bitmapimage.h"
#include "vgui_avatarimage.h"
#include "srcpy_vgui.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "RichText.pypp.hpp"

namespace bp = boost::python;

struct RichText_wrapper : vgui::RichText, bp::wrapper< vgui::RichText > {

    RichText_wrapper(::vgui::Panel * parent, char const * panelName )
    : vgui::RichText( parent, panelName )
      , bp::wrapper< vgui::RichText >(){
        // constructor
    	g_PythonPanelCount++;
    }

    virtual void ApplySchemeSettings( ::vgui::IScheme * pScheme ){
        PY_OVERRIDE_CHECK( vgui::RichText, ApplySchemeSettings )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, ApplySchemeSettings )
        bp::override func_ApplySchemeSettings = this->get_override( "ApplySchemeSettings" );
        if( func_ApplySchemeSettings.ptr() != Py_None )
            try {
                func_ApplySchemeSettings( boost::python::ptr(pScheme) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::ApplySchemeSettings( pScheme );
            }
        else
            this->vgui::RichText::ApplySchemeSettings( pScheme );
    }
    
    virtual void default_ApplySchemeSettings( ::vgui::IScheme * pScheme ){
        vgui::RichText::ApplySchemeSettings( pScheme );
    }

    void ApplySettings( ::KeyValues * inResourceData ){
        vgui::RichText::ApplySettings( inResourceData );
    }

    char const * GetDescription(  ){
        return vgui::RichText::GetDescription(  );
    }

    void GetSettings( ::KeyValues * outResourceData ){
        vgui::RichText::GetSettings( outResourceData );
    }

    void OnClickPanel( int index ){
        vgui::RichText::OnClickPanel( index );
    }

    virtual void OnCursorEntered(  ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnCursorEntered )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnCursorEntered )
        bp::override func_OnCursorEntered = this->get_override( "OnCursorEntered" );
        if( func_OnCursorEntered.ptr() != Py_None )
            try {
                func_OnCursorEntered(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnCursorEntered(  );
            }
        else
            this->vgui::RichText::OnCursorEntered(  );
    }
    
    virtual void default_OnCursorEntered(  ){
        vgui::RichText::OnCursorEntered( );
    }

    virtual void OnCursorExited(  ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnCursorExited )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnCursorExited )
        bp::override func_OnCursorExited = this->get_override( "OnCursorExited" );
        if( func_OnCursorExited.ptr() != Py_None )
            try {
                func_OnCursorExited(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnCursorExited(  );
            }
        else
            this->vgui::RichText::OnCursorExited(  );
    }
    
    virtual void default_OnCursorExited(  ){
        vgui::RichText::OnCursorExited( );
    }

    virtual void OnCursorMoved( int x, int y ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnCursorMoved )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnCursorMoved )
        bp::override func_OnCursorMoved = this->get_override( "OnCursorMoved" );
        if( func_OnCursorMoved.ptr() != Py_None )
            try {
                func_OnCursorMoved( x, y );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnCursorMoved( x, y );
            }
        else
            this->vgui::RichText::OnCursorMoved( x, y );
    }
    
    virtual void default_OnCursorMoved( int x, int y ){
        vgui::RichText::OnCursorMoved( x, y );
    }

    virtual void OnKeyCodeTyped( ::vgui::KeyCode code ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnKeyCodeTyped )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnKeyCodeTyped )
        bp::override func_OnKeyCodeTyped = this->get_override( "OnKeyCodeTyped" );
        if( func_OnKeyCodeTyped.ptr() != Py_None )
            try {
                func_OnKeyCodeTyped( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnKeyCodeTyped( code );
            }
        else
            this->vgui::RichText::OnKeyCodeTyped( code );
    }
    
    virtual void default_OnKeyCodeTyped( ::vgui::KeyCode code ){
        vgui::RichText::OnKeyCodeTyped( code );
    }

    virtual void OnKillFocus(  ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnKillFocus )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnKillFocus )
        bp::override func_OnKillFocus = this->get_override( "OnKillFocus" );
        if( func_OnKillFocus.ptr() != Py_None )
            try {
                func_OnKillFocus(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnKillFocus(  );
            }
        else
            this->vgui::RichText::OnKillFocus(  );
    }
    
    virtual void default_OnKillFocus(  ){
        vgui::RichText::OnKillFocus( );
    }

    virtual void OnMouseCaptureLost(  ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnMouseCaptureLost )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnMouseCaptureLost )
        bp::override func_OnMouseCaptureLost = this->get_override( "OnMouseCaptureLost" );
        if( func_OnMouseCaptureLost.ptr() != Py_None )
            try {
                func_OnMouseCaptureLost(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnMouseCaptureLost(  );
            }
        else
            this->vgui::RichText::OnMouseCaptureLost(  );
    }
    
    virtual void default_OnMouseCaptureLost(  ){
        vgui::RichText::OnMouseCaptureLost( );
    }

    virtual void OnMouseDoublePressed( ::vgui::MouseCode code ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnMouseDoublePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnMouseDoublePressed )
        bp::override func_OnMouseDoublePressed = this->get_override( "OnMouseDoublePressed" );
        if( func_OnMouseDoublePressed.ptr() != Py_None )
            try {
                func_OnMouseDoublePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnMouseDoublePressed( code );
            }
        else
            this->vgui::RichText::OnMouseDoublePressed( code );
    }
    
    virtual void default_OnMouseDoublePressed( ::vgui::MouseCode code ){
        vgui::RichText::OnMouseDoublePressed( code );
    }

    virtual void OnMouseFocusTicked(  ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnMouseFocusTicked )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnMouseFocusTicked )
        bp::override func_OnMouseFocusTicked = this->get_override( "OnMouseFocusTicked" );
        if( func_OnMouseFocusTicked.ptr() != Py_None )
            try {
                func_OnMouseFocusTicked(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnMouseFocusTicked(  );
            }
        else
            this->vgui::RichText::OnMouseFocusTicked(  );
    }
    
    virtual void default_OnMouseFocusTicked(  ){
        vgui::RichText::OnMouseFocusTicked( );
    }

    virtual void OnMousePressed( ::vgui::MouseCode code ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnMousePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnMousePressed )
        bp::override func_OnMousePressed = this->get_override( "OnMousePressed" );
        if( func_OnMousePressed.ptr() != Py_None )
            try {
                func_OnMousePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnMousePressed( code );
            }
        else
            this->vgui::RichText::OnMousePressed( code );
    }
    
    virtual void default_OnMousePressed( ::vgui::MouseCode code ){
        vgui::RichText::OnMousePressed( code );
    }

    virtual void OnMouseReleased( ::vgui::MouseCode code ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnMouseReleased )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnMouseReleased )
        bp::override func_OnMouseReleased = this->get_override( "OnMouseReleased" );
        if( func_OnMouseReleased.ptr() != Py_None )
            try {
                func_OnMouseReleased( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnMouseReleased( code );
            }
        else
            this->vgui::RichText::OnMouseReleased( code );
    }
    
    virtual void default_OnMouseReleased( ::vgui::MouseCode code ){
        vgui::RichText::OnMouseReleased( code );
    }

    virtual void OnMouseWheeled( int delta ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnMouseWheeled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnMouseWheeled )
        bp::override func_OnMouseWheeled = this->get_override( "OnMouseWheeled" );
        if( func_OnMouseWheeled.ptr() != Py_None )
            try {
                func_OnMouseWheeled( delta );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnMouseWheeled( delta );
            }
        else
            this->vgui::RichText::OnMouseWheeled( delta );
    }
    
    virtual void default_OnMouseWheeled( int delta ){
        vgui::RichText::OnMouseWheeled( delta );
    }

    virtual void OnSetFocus(  ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnSetFocus )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnSetFocus )
        bp::override func_OnSetFocus = this->get_override( "OnSetFocus" );
        if( func_OnSetFocus.ptr() != Py_None )
            try {
                func_OnSetFocus(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnSetFocus(  );
            }
        else
            this->vgui::RichText::OnSetFocus(  );
    }
    
    virtual void default_OnSetFocus(  ){
        vgui::RichText::OnSetFocus( );
    }

    void OnSetText( wchar_t const * text ){
        vgui::RichText::OnSetText( text );
    }

    virtual void OnSizeChanged( int newWide, int newTall ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnSizeChanged )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnSizeChanged )
        bp::override func_OnSizeChanged = this->get_override( "OnSizeChanged" );
        if( func_OnSizeChanged.ptr() != Py_None )
            try {
                func_OnSizeChanged( newWide, newTall );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnSizeChanged( newWide, newTall );
            }
        else
            this->vgui::RichText::OnSizeChanged( newWide, newTall );
    }
    
    virtual void default_OnSizeChanged( int newWide, int newTall ){
        vgui::RichText::OnSizeChanged( newWide, newTall );
    }

    void OnSliderMoved(  ){
        vgui::RichText::OnSliderMoved(  );
    }

    void OnTextClicked( wchar_t const * text ){
        vgui::RichText::OnTextClicked( text );
    }

    virtual void OnThink(  ){
        PY_OVERRIDE_CHECK( vgui::RichText, OnThink )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, OnThink )
        bp::override func_OnThink = this->get_override( "OnThink" );
        if( func_OnThink.ptr() != Py_None )
            try {
                func_OnThink(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::OnThink(  );
            }
        else
            this->vgui::RichText::OnThink(  );
    }
    
    virtual void default_OnThink(  ){
        vgui::RichText::OnThink( );
    }

    virtual void Paint(  ){
        PY_OVERRIDE_CHECK( vgui::RichText, Paint )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, Paint )
        bp::override func_Paint = this->get_override( "Paint" );
        if( func_Paint.ptr() != Py_None )
            try {
                func_Paint(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::Paint(  );
            }
        else
            this->vgui::RichText::Paint(  );
    }
    
    virtual void default_Paint(  ){
        vgui::RichText::Paint( );
    }

    int ParseTextStringForUrls( char const * text, int startPos, char * pchURLText, int cchURLText, char * pchURL, int cchURL, bool & clickable ){
        return vgui::RichText::ParseTextStringForUrls( text, startPos, pchURLText, cchURLText, pchURL, cchURL, clickable );
    }

    virtual void PerformLayout(  ){
        PY_OVERRIDE_CHECK( vgui::RichText, PerformLayout )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, PerformLayout )
        bp::override func_PerformLayout = this->get_override( "PerformLayout" );
        if( func_PerformLayout.ptr() != Py_None )
            try {
                func_PerformLayout(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::PerformLayout(  );
            }
        else
            this->vgui::RichText::PerformLayout(  );
    }
    
    virtual void default_PerformLayout(  ){
        vgui::RichText::PerformLayout( );
    }

    virtual void SetFgColor( ::Color color ) {
        PY_OVERRIDE_CHECK( vgui::RichText, SetFgColor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, SetFgColor )
        bp::override func_SetFgColor = this->get_override( "SetFgColor" );
        if( func_SetFgColor.ptr() != Py_None )
            try {
                func_SetFgColor( color );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::SetFgColor( color );
            }
        else
            this->vgui::RichText::SetFgColor( color );
    }
    
    void default_SetFgColor( ::Color color ) {
        vgui::RichText::SetFgColor( color );
    }

    virtual void SetText( wchar_t const * text ) {
        PY_OVERRIDE_CHECK( vgui::RichText, SetText )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, SetText )
        bp::override func_SetText = this->get_override( "SetText" );
        if( func_SetText.ptr() != Py_None )
            try {
                func_SetText( text );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::SetText( text );
            }
        else
            this->vgui::RichText::SetText( text );
    }
    
    void default_SetText( wchar_t const * text ) {
        vgui::RichText::SetText( text );
    }

    virtual void SetVerticalScrollbar( bool state ) {
        PY_OVERRIDE_CHECK( vgui::RichText, SetVerticalScrollbar )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::RichText, SetVerticalScrollbar )
        bp::override func_SetVerticalScrollbar = this->get_override( "SetVerticalScrollbar" );
        if( func_SetVerticalScrollbar.ptr() != Py_None )
            try {
                func_SetVerticalScrollbar( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::RichText::SetVerticalScrollbar( state );
            }
        else
            this->vgui::RichText::SetVerticalScrollbar( state );
    }
    
    void default_SetVerticalScrollbar( bool state ) {
        vgui::RichText::SetVerticalScrollbar( state );
    }

    void AddToOverridableColors( ::Color * pColor, char const * scriptname ){
        vgui::Panel::AddToOverridableColors( pColor, scriptname );
    }

    void ApplyOverridableColors(  ){
        vgui::Panel::ApplyOverridableColors(  );
    }

    void CreateDragData(  ){
        vgui::Panel::CreateDragData(  );
    }

    void DragDropStartDragging(  ){
        vgui::Panel::DragDropStartDragging(  );
    }

    ::vgui::Panel * GetNavActivatePanel(  ){
        return vgui::Panel::GetNavActivatePanel(  );
    }

    ::vgui::Panel * GetNavBackPanel(  ){
        return vgui::Panel::GetNavBackPanel(  );
    }

    ::vgui::Panel * GetNavDownPanel(  ){
        return vgui::Panel::GetNavDownPanel(  );
    }

    ::vgui::Panel * GetNavLeftPanel(  ){
        return vgui::Panel::GetNavLeftPanel(  );
    }

    ::vgui::Panel * GetNavRightPanel(  ){
        return vgui::Panel::GetNavRightPanel(  );
    }

    ::vgui::Panel * GetNavToRelayPanel(  ){
        return vgui::Panel::GetNavToRelayPanel(  );
    }

    ::vgui::Panel * GetNavUpPanel(  ){
        return vgui::Panel::GetNavUpPanel(  );
    }

    virtual void InvalidateLayout( bool layoutNow=false, bool reloadScheme=false ) {
        PY_OVERRIDE_CHECK( vgui::Panel, InvalidateLayout )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, InvalidateLayout )
        bp::override func_InvalidateLayout = this->get_override( "InvalidateLayout" );
        if( func_InvalidateLayout.ptr() != Py_None )
            try {
                func_InvalidateLayout( layoutNow, reloadScheme );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::InvalidateLayout( layoutNow, reloadScheme );
            }
        else
            this->vgui::Panel::InvalidateLayout( layoutNow, reloadScheme );
    }
    
    void default_InvalidateLayout( bool layoutNow=false, bool reloadScheme=false ) {
        vgui::Panel::InvalidateLayout( layoutNow, reloadScheme );
    }

    virtual void OnChildAdded( ::vgui::VPANEL child ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnChildAdded )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnChildAdded )
        bp::override func_OnChildAdded = this->get_override( "OnChildAdded" );
        if( func_OnChildAdded.ptr() != Py_None )
            try {
                func_OnChildAdded( child );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnChildAdded( child );
            }
        else
            this->vgui::Panel::OnChildAdded( child );
    }
    
    void default_OnChildAdded( ::vgui::VPANEL child ) {
        vgui::Panel::OnChildAdded( child );
    }

    void OnChildSettingsApplied( ::KeyValues * pInResourceData, ::vgui::Panel * pChild ){
        vgui::Panel::OnChildSettingsApplied( pInResourceData, pChild );
    }

    virtual void OnCommand( char const * command ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnCommand )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnCommand )
        bp::override func_OnCommand = this->get_override( "OnCommand" );
        if( func_OnCommand.ptr() != Py_None )
            try {
                func_OnCommand( command );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnCommand( command );
            }
        else
            this->vgui::Panel::OnCommand( command );
    }
    
    void default_OnCommand( char const * command ) {
        vgui::Panel::OnCommand( command );
    }

    void OnContinueDragging(  ){
        vgui::Panel::OnContinueDragging(  );
    }

    void OnFinishDragging( bool mousereleased, ::vgui::MouseCode code, bool aborted=false ){
        vgui::Panel::OnFinishDragging( mousereleased, code, aborted );
    }

    virtual void OnKeyCodePressed( ::vgui::KeyCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnKeyCodePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnKeyCodePressed )
        bp::override func_OnKeyCodePressed = this->get_override( "OnKeyCodePressed" );
        if( func_OnKeyCodePressed.ptr() != Py_None )
            try {
                func_OnKeyCodePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnKeyCodePressed( code );
            }
        else
            this->vgui::Panel::OnKeyCodePressed( code );
    }
    
    void default_OnKeyCodePressed( ::vgui::KeyCode code ) {
        vgui::Panel::OnKeyCodePressed( code );
    }

    virtual void OnKeyCodeReleased( ::vgui::KeyCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnKeyCodeReleased )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnKeyCodeReleased )
        bp::override func_OnKeyCodeReleased = this->get_override( "OnKeyCodeReleased" );
        if( func_OnKeyCodeReleased.ptr() != Py_None )
            try {
                func_OnKeyCodeReleased( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnKeyCodeReleased( code );
            }
        else
            this->vgui::Panel::OnKeyCodeReleased( code );
    }
    
    void default_OnKeyCodeReleased( ::vgui::KeyCode code ) {
        vgui::Panel::OnKeyCodeReleased( code );
    }

    virtual void OnKeyFocusTicked(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnKeyFocusTicked )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnKeyFocusTicked )
        bp::override func_OnKeyFocusTicked = this->get_override( "OnKeyFocusTicked" );
        if( func_OnKeyFocusTicked.ptr() != Py_None )
            try {
                func_OnKeyFocusTicked(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnKeyFocusTicked(  );
            }
        else
            this->vgui::Panel::OnKeyFocusTicked(  );
    }
    
    void default_OnKeyFocusTicked(  ) {
        vgui::Panel::OnKeyFocusTicked( );
    }

    virtual void OnMouseTriplePressed( ::vgui::MouseCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnMouseTriplePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnMouseTriplePressed )
        bp::override func_OnMouseTriplePressed = this->get_override( "OnMouseTriplePressed" );
        if( func_OnMouseTriplePressed.ptr() != Py_None )
            try {
                func_OnMouseTriplePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnMouseTriplePressed( code );
            }
        else
            this->vgui::Panel::OnMouseTriplePressed( code );
    }
    
    void default_OnMouseTriplePressed( ::vgui::MouseCode code ) {
        vgui::Panel::OnMouseTriplePressed( code );
    }

    virtual void OnRequestFocus( ::vgui::VPANEL subFocus, ::vgui::VPANEL defaultPanel ){
        PY_OVERRIDE_CHECK( vgui::Panel, OnRequestFocus )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnRequestFocus )
        bp::override func_OnRequestFocus = this->get_override( "OnRequestFocus" );
        if( func_OnRequestFocus.ptr() != Py_None )
            try {
                func_OnRequestFocus( subFocus, defaultPanel );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnRequestFocus( subFocus, defaultPanel );
            }
        else
            this->vgui::Panel::OnRequestFocus( subFocus, defaultPanel );
    }
    
    virtual void default_OnRequestFocus( ::vgui::VPANEL subFocus, ::vgui::VPANEL defaultPanel ){
        vgui::Panel::OnRequestFocus( subFocus, defaultPanel );
    }

    virtual void OnScreenSizeChanged( int oldwide, int oldtall ){
        PY_OVERRIDE_CHECK( vgui::Panel, OnScreenSizeChanged )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnScreenSizeChanged )
        bp::override func_OnScreenSizeChanged = this->get_override( "OnScreenSizeChanged" );
        if( func_OnScreenSizeChanged.ptr() != Py_None )
            try {
                func_OnScreenSizeChanged( oldwide, oldtall );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnScreenSizeChanged( oldwide, oldtall );
            }
        else
            this->vgui::Panel::OnScreenSizeChanged( oldwide, oldtall );
    }
    
    virtual void default_OnScreenSizeChanged( int oldwide, int oldtall ){
        vgui::Panel::OnScreenSizeChanged( oldwide, oldtall );
    }

    void OnStartDragging(  ){
        vgui::Panel::OnStartDragging(  );
    }

    virtual void OnTick(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnTick )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnTick )
        bp::override func_OnTick = this->get_override( "OnTick" );
        if( func_OnTick.ptr() != Py_None )
            try {
                func_OnTick(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnTick(  );
            }
        else
            this->vgui::Panel::OnTick(  );
    }
    
    void default_OnTick(  ) {
        vgui::Panel::OnTick( );
    }

    virtual void PaintBackground(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, PaintBackground )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, PaintBackground )
        bp::override func_PaintBackground = this->get_override( "PaintBackground" );
        if( func_PaintBackground.ptr() != Py_None )
            try {
                func_PaintBackground(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::PaintBackground(  );
            }
        else
            this->vgui::Panel::PaintBackground(  );
    }
    
    void default_PaintBackground(  ) {
        vgui::Panel::PaintBackground( );
    }

    virtual void PaintBuildOverlay(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, PaintBuildOverlay )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, PaintBuildOverlay )
        bp::override func_PaintBuildOverlay = this->get_override( "PaintBuildOverlay" );
        if( func_PaintBuildOverlay.ptr() != Py_None )
            try {
                func_PaintBuildOverlay(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::PaintBuildOverlay(  );
            }
        else
            this->vgui::Panel::PaintBuildOverlay(  );
    }
    
    void default_PaintBuildOverlay(  ) {
        vgui::Panel::PaintBuildOverlay( );
    }

    void PaintTraverse( bool Repaint, bool allowForce=true ){
        vgui::Panel::PaintTraverse( Repaint, allowForce );
    }

    virtual void PostChildPaint(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, PostChildPaint )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, PostChildPaint )
        bp::override func_PostChildPaint = this->get_override( "PostChildPaint" );
        if( func_PostChildPaint.ptr() != Py_None )
            try {
                func_PostChildPaint(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::PostChildPaint(  );
            }
        else
            this->vgui::Panel::PostChildPaint(  );
    }
    
    void default_PostChildPaint(  ) {
        vgui::Panel::PostChildPaint( );
    }

    virtual void SetBgColor( ::Color color ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetBgColor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetBgColor )
        bp::override func_SetBgColor = this->get_override( "SetBgColor" );
        if( func_SetBgColor.ptr() != Py_None )
            try {
                func_SetBgColor( color );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetBgColor( color );
            }
        else
            this->vgui::Panel::SetBgColor( color );
    }
    
    void default_SetBgColor( ::Color color ) {
        vgui::Panel::SetBgColor( color );
    }

    virtual void SetBorder( ::vgui::IBorder * border ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetBorder )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetBorder )
        bp::override func_SetBorder = this->get_override( "SetBorder" );
        if( func_SetBorder.ptr() != Py_None )
            try {
                func_SetBorder( boost::python::ptr(border) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetBorder( border );
            }
        else
            this->vgui::Panel::SetBorder( border );
    }
    
    void default_SetBorder( ::vgui::IBorder * border ) {
        vgui::Panel::SetBorder( border );
    }

    virtual void SetCursor( ::vgui::HCursor cursor ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetCursor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetCursor )
        bp::override func_SetCursor = this->get_override( "SetCursor" );
        if( func_SetCursor.ptr() != Py_None )
            try {
                func_SetCursor( cursor );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetCursor( cursor );
            }
        else
            this->vgui::Panel::SetCursor( cursor );
    }
    
    void default_SetCursor( ::vgui::HCursor cursor ) {
        vgui::Panel::SetCursor( cursor );
    }

    virtual void SetDragEnabled( bool enabled ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetDragEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetDragEnabled )
        bp::override func_SetDragEnabled = this->get_override( "SetDragEnabled" );
        if( func_SetDragEnabled.ptr() != Py_None )
            try {
                func_SetDragEnabled( enabled );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetDragEnabled( enabled );
            }
        else
            this->vgui::Panel::SetDragEnabled( enabled );
    }
    
    void default_SetDragEnabled( bool enabled ) {
        vgui::Panel::SetDragEnabled( enabled );
    }

    virtual void SetEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetEnabled )
        bp::override func_SetEnabled = this->get_override( "SetEnabled" );
        if( func_SetEnabled.ptr() != Py_None )
            try {
                func_SetEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetEnabled( state );
            }
        else
            this->vgui::Panel::SetEnabled( state );
    }
    
    void default_SetEnabled( bool state ) {
        vgui::Panel::SetEnabled( state );
    }

    virtual void SetKeyBoardInputEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetKeyBoardInputEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetKeyBoardInputEnabled )
        bp::override func_SetKeyBoardInputEnabled = this->get_override( "SetKeyBoardInputEnabled" );
        if( func_SetKeyBoardInputEnabled.ptr() != Py_None )
            try {
                func_SetKeyBoardInputEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetKeyBoardInputEnabled( state );
            }
        else
            this->vgui::Panel::SetKeyBoardInputEnabled( state );
    }
    
    void default_SetKeyBoardInputEnabled( bool state ) {
        vgui::Panel::SetKeyBoardInputEnabled( state );
    }

    virtual void SetMouseInputEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetMouseInputEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetMouseInputEnabled )
        bp::override func_SetMouseInputEnabled = this->get_override( "SetMouseInputEnabled" );
        if( func_SetMouseInputEnabled.ptr() != Py_None )
            try {
                func_SetMouseInputEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetMouseInputEnabled( state );
            }
        else
            this->vgui::Panel::SetMouseInputEnabled( state );
    }
    
    void default_SetMouseInputEnabled( bool state ) {
        vgui::Panel::SetMouseInputEnabled( state );
    }

    void SetOverridableColor( ::Color * pColor, ::Color const & newColor ){
        vgui::Panel::SetOverridableColor( pColor, newColor );
    }

    virtual void SetPaintBackgroundEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintBackgroundEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintBackgroundEnabled )
        bp::override func_SetPaintBackgroundEnabled = this->get_override( "SetPaintBackgroundEnabled" );
        if( func_SetPaintBackgroundEnabled.ptr() != Py_None )
            try {
                func_SetPaintBackgroundEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintBackgroundEnabled( state );
            }
        else
            this->vgui::Panel::SetPaintBackgroundEnabled( state );
    }
    
    void default_SetPaintBackgroundEnabled( bool state ) {
        vgui::Panel::SetPaintBackgroundEnabled( state );
    }

    virtual void SetPaintBackgroundType( int type ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintBackgroundType )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintBackgroundType )
        bp::override func_SetPaintBackgroundType = this->get_override( "SetPaintBackgroundType" );
        if( func_SetPaintBackgroundType.ptr() != Py_None )
            try {
                func_SetPaintBackgroundType( type );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintBackgroundType( type );
            }
        else
            this->vgui::Panel::SetPaintBackgroundType( type );
    }
    
    void default_SetPaintBackgroundType( int type ) {
        vgui::Panel::SetPaintBackgroundType( type );
    }

    virtual void SetPaintBorderEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintBorderEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintBorderEnabled )
        bp::override func_SetPaintBorderEnabled = this->get_override( "SetPaintBorderEnabled" );
        if( func_SetPaintBorderEnabled.ptr() != Py_None )
            try {
                func_SetPaintBorderEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintBorderEnabled( state );
            }
        else
            this->vgui::Panel::SetPaintBorderEnabled( state );
    }
    
    void default_SetPaintBorderEnabled( bool state ) {
        vgui::Panel::SetPaintBorderEnabled( state );
    }

    virtual void SetPaintEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintEnabled )
        bp::override func_SetPaintEnabled = this->get_override( "SetPaintEnabled" );
        if( func_SetPaintEnabled.ptr() != Py_None )
            try {
                func_SetPaintEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintEnabled( state );
            }
        else
            this->vgui::Panel::SetPaintEnabled( state );
    }
    
    void default_SetPaintEnabled( bool state ) {
        vgui::Panel::SetPaintEnabled( state );
    }

    virtual void SetParent( ::vgui::Panel * newParent ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetParent )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetParent )
        bp::override func_SetParent = this->get_override( "SetParent" );
        if( func_SetParent.ptr() != Py_None )
            try {
                func_SetParent( boost::python::object(*newParent) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetParent( newParent );
            }
        else
            this->vgui::Panel::SetParent( newParent );
    }
    
    void default_SetParent( ::vgui::Panel * newParent ) {
        vgui::Panel::SetParent( newParent );
    }

    virtual void SetParent( ::vgui::VPANEL newParent ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetParent )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetParent )
        bp::override func_SetParent = this->get_override( "SetParent" );
        if( func_SetParent.ptr() != Py_None )
            try {
                func_SetParent( newParent );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetParent( newParent );
            }
        else
            this->vgui::Panel::SetParent( newParent );
    }
    
    void default_SetParent( ::vgui::VPANEL newParent ) {
        vgui::Panel::SetParent( newParent );
    }

    virtual void SetScheme( char const * tag ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetScheme )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetScheme )
        bp::override func_SetScheme = this->get_override( "SetScheme" );
        if( func_SetScheme.ptr() != Py_None )
            try {
                func_SetScheme( tag );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetScheme( tag );
            }
        else
            this->vgui::Panel::SetScheme( tag );
    }
    
    void default_SetScheme( char const * tag ) {
        vgui::Panel::SetScheme( tag );
    }

    virtual void SetScheme( ::vgui::HScheme scheme ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetScheme )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetScheme )
        bp::override func_SetScheme = this->get_override( "SetScheme" );
        if( func_SetScheme.ptr() != Py_None )
            try {
                func_SetScheme( scheme );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetScheme( scheme );
            }
        else
            this->vgui::Panel::SetScheme( scheme );
    }
    
    void default_SetScheme( ::vgui::HScheme scheme ) {
        vgui::Panel::SetScheme( scheme );
    }

    virtual void SetVisible( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetVisible )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetVisible )
        bp::override func_SetVisible = this->get_override( "SetVisible" );
        if( func_SetVisible.ptr() != Py_None )
            try {
                func_SetVisible( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetVisible( state );
            }
        else
            this->vgui::Panel::SetVisible( state );
    }
    
    void default_SetVisible( bool state ) {
        vgui::Panel::SetVisible( state );
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual bool IsPythonManaged() { return true; }

    ~RichText_wrapper( void ) { g_PythonPanelCount--; /*::PyDeletePanel( this, this );*/ }

};

void register_RichText_class(){

    bp::class_< RichText_wrapper, bp::bases< vgui::Panel >, boost::noncopyable >( "RichText", bp::init< vgui::Panel *, char const * >(( bp::arg("parent"), bp::arg("panelName") )) )    
        .def( 
            "ApplySchemeSettings"
            , (void ( RichText_wrapper::* )( ::vgui::IScheme * ))(&RichText_wrapper::default_ApplySchemeSettings)
            , ( bp::arg("pScheme") ) )    
        .def( 
            "ApplySettings"
            , (void ( RichText_wrapper::* )( ::KeyValues * ))(&RichText_wrapper::ApplySettings)
            , ( bp::arg("inResourceData") ) )    
        .def( 
            "CopySelected"
            , (void ( ::vgui::RichText::* )(  ))( &::vgui::RichText::CopySelected ) )    
        .def( 
            "CutSelected"
            , (void ( ::vgui::RichText::* )(  ))( &::vgui::RichText::CutSelected ) )    
        .def( 
            "GetDescription"
            , (char const * ( RichText_wrapper::* )(  ))(&RichText_wrapper::GetDescription) )    
        .def( 
            "GetNumLines"
            , (int ( ::vgui::RichText::* )(  ))( &::vgui::RichText::GetNumLines ) )    
        .def( 
            "GetPanelBaseClassName"
            , (char const * (*)(  ))( &::vgui::RichText::GetPanelBaseClassName ) )    
        .def( 
            "GetPanelClassName"
            , (char const * (*)(  ))( &::vgui::RichText::GetPanelClassName ) )    
        .def( 
            "GetSettings"
            , (void ( RichText_wrapper::* )( ::KeyValues * ))(&RichText_wrapper::GetSettings)
            , ( bp::arg("outResourceData") ) )    
        .def( 
            "GetText"
            , (void ( ::vgui::RichText::* )( int,wchar_t *,int ))( &::vgui::RichText::GetText )
            , ( bp::arg("offset"), bp::arg("buf"), bp::arg("bufLenInBytes") ) )    
        .def( 
            "GetText"
            , (void ( ::vgui::RichText::* )( int,char *,int ))( &::vgui::RichText::GetText )
            , ( bp::arg("offset"), bp::arg("pch"), bp::arg("bufLenInBytes") ) )    
        .def( 
            "GotoTextEnd"
            , (void ( ::vgui::RichText::* )(  ))( &::vgui::RichText::GotoTextEnd ) )    
        .def( 
            "GotoTextStart"
            , (void ( ::vgui::RichText::* )(  ))( &::vgui::RichText::GotoTextStart ) )    
        .def( 
            "HasText"
            , (bool ( ::vgui::RichText::* )(  )const)( &::vgui::RichText::HasText ) )    
        .def( 
            "InsertChar"
            , (void ( ::vgui::RichText::* )( wchar_t ))( &::vgui::RichText::InsertChar )
            , ( bp::arg("ch") ) )    
        .def( 
            "InsertClickableTextEnd"
            , (void ( ::vgui::RichText::* )(  ))( &::vgui::RichText::InsertClickableTextEnd ) )    
        .def( 
            "InsertClickableTextStart"
            , (void ( ::vgui::RichText::* )( char const * ))( &::vgui::RichText::InsertClickableTextStart )
            , ( bp::arg("pchClickAction")=bp::object() ) )    
        .def( 
            "InsertColorChange"
            , (void ( ::vgui::RichText::* )( ::Color ))( &::vgui::RichText::InsertColorChange )
            , ( bp::arg("col") ) )    
        .def( 
            "InsertFade"
            , (void ( ::vgui::RichText::* )( float,float ))( &::vgui::RichText::InsertFade )
            , ( bp::arg("flSustain"), bp::arg("flLength") ) )    
        .def( 
            "InsertIndentChange"
            , (void ( ::vgui::RichText::* )( int ))( &::vgui::RichText::InsertIndentChange )
            , ( bp::arg("pixelsIndent") ) )    
        .def( 
            "InsertPossibleURLString"
            , (void ( ::vgui::RichText::* )( char const *,::Color,::Color ))( &::vgui::RichText::InsertPossibleURLString )
            , ( bp::arg("text"), bp::arg("URLTextColor"), bp::arg("normalTextColor") ) )    
        .def( 
            "InsertString"
            , (void ( ::vgui::RichText::* )( wchar_t const * ))( &::vgui::RichText::InsertString )
            , ( bp::arg("wszText") ) )    
        .def( 
            "IsAllTextAlphaZero"
            , (bool ( ::vgui::RichText::* )(  )const)( &::vgui::RichText::IsAllTextAlphaZero ) )    
        .def( 
            "IsScrollbarVisible"
            , (bool ( ::vgui::RichText::* )(  ))( &::vgui::RichText::IsScrollbarVisible ) )    
        .def( 
            "OnClickPanel"
            , (void ( RichText_wrapper::* )( int ))(&RichText_wrapper::OnClickPanel)
            , ( bp::arg("index") ) )    
        .def( 
            "OnCursorEntered"
            , (void ( RichText_wrapper::* )(  ))(&RichText_wrapper::default_OnCursorEntered) )    
        .def( 
            "OnCursorExited"
            , (void ( RichText_wrapper::* )(  ))(&RichText_wrapper::default_OnCursorExited) )    
        .def( 
            "OnCursorMoved"
            , (void ( RichText_wrapper::* )( int,int ))(&RichText_wrapper::default_OnCursorMoved)
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "OnKeyCodeTyped"
            , (void ( RichText_wrapper::* )( ::vgui::KeyCode ))(&RichText_wrapper::default_OnKeyCodeTyped)
            , ( bp::arg("code") ) )    
        .def( 
            "OnKillFocus"
            , (void ( RichText_wrapper::* )(  ))(&RichText_wrapper::default_OnKillFocus) )    
        .def( 
            "OnMouseCaptureLost"
            , (void ( RichText_wrapper::* )(  ))(&RichText_wrapper::default_OnMouseCaptureLost) )    
        .def( 
            "OnMouseDoublePressed"
            , (void ( RichText_wrapper::* )( ::vgui::MouseCode ))(&RichText_wrapper::default_OnMouseDoublePressed)
            , ( bp::arg("code") ) )    
        .def( 
            "OnMouseFocusTicked"
            , (void ( RichText_wrapper::* )(  ))(&RichText_wrapper::default_OnMouseFocusTicked) )    
        .def( 
            "OnMousePressed"
            , (void ( RichText_wrapper::* )( ::vgui::MouseCode ))(&RichText_wrapper::default_OnMousePressed)
            , ( bp::arg("code") ) )    
        .def( 
            "OnMouseReleased"
            , (void ( RichText_wrapper::* )( ::vgui::MouseCode ))(&RichText_wrapper::default_OnMouseReleased)
            , ( bp::arg("code") ) )    
        .def( 
            "OnMouseWheeled"
            , (void ( RichText_wrapper::* )( int ))(&RichText_wrapper::default_OnMouseWheeled)
            , ( bp::arg("delta") ) )    
        .def( 
            "OnSetFocus"
            , (void ( RichText_wrapper::* )(  ))(&RichText_wrapper::default_OnSetFocus) )    
        .def( 
            "OnSetText"
            , (void ( RichText_wrapper::* )( wchar_t const * ))(&RichText_wrapper::OnSetText)
            , ( bp::arg("text") ) )    
        .def( 
            "OnSizeChanged"
            , (void ( RichText_wrapper::* )( int,int ))(&RichText_wrapper::default_OnSizeChanged)
            , ( bp::arg("newWide"), bp::arg("newTall") ) )    
        .def( 
            "OnSliderMoved"
            , (void ( RichText_wrapper::* )(  ))(&RichText_wrapper::OnSliderMoved) )    
        .def( 
            "OnTextClicked"
            , (void ( RichText_wrapper::* )( wchar_t const * ))(&RichText_wrapper::OnTextClicked)
            , ( bp::arg("text") ) )    
        .def( 
            "OnThink"
            , (void ( RichText_wrapper::* )(  ))(&RichText_wrapper::default_OnThink) )    
        .def( 
            "Paint"
            , (void ( RichText_wrapper::* )(  ))(&RichText_wrapper::default_Paint) )    
        .def( 
            "ParseTextStringForUrls"
            , (int ( RichText_wrapper::* )( char const *,int,char *,int,char *,int,bool & ))(&RichText_wrapper::ParseTextStringForUrls)
            , ( bp::arg("text"), bp::arg("startPos"), bp::arg("pchURLText"), bp::arg("cchURLText"), bp::arg("pchURL"), bp::arg("cchURL"), bp::arg("clickable") ) )    
        .def( 
            "PerformLayout"
            , (void ( RichText_wrapper::* )(  ))(&RichText_wrapper::default_PerformLayout) )    
        .def( 
            "RequestInfo"
            , (bool ( ::vgui::RichText::* )( ::KeyValues * ))( &::vgui::RichText::RequestInfo )
            , ( bp::arg("outputData") ) )    
        .def( 
            "ResetAllFades"
            , (void ( ::vgui::RichText::* )( bool,bool,float ))( &::vgui::RichText::ResetAllFades )
            , ( bp::arg("bHold"), bp::arg("bOnlyExpired")=(bool)(false), bp::arg("flNewSustain")=-1.F ) )    
        .def( 
            "SelectAllText"
            , (void ( ::vgui::RichText::* )(  ))( &::vgui::RichText::SelectAllText ) )    
        .def( 
            "SelectNoText"
            , (void ( ::vgui::RichText::* )(  ))( &::vgui::RichText::SelectNoText ) )    
        .def( 
            "SelectNone"
            , (void ( ::vgui::RichText::* )(  ))( &::vgui::RichText::SelectNone ) )    
        .def( 
            "SetDrawOffsets"
            , (void ( ::vgui::RichText::* )( int,int ))( &::vgui::RichText::SetDrawOffsets )
            , ( bp::arg("ofsx"), bp::arg("ofsy") ) )    
        .def( 
            "SetDrawTextOnly"
            , (void ( ::vgui::RichText::* )(  ))( &::vgui::RichText::SetDrawTextOnly ) )    
        .def( 
            "SetFgColor"
            , (void ( ::vgui::RichText::* )( ::Color ))(&::vgui::RichText::SetFgColor)
            , (void ( RichText_wrapper::* )( ::Color ))(&RichText_wrapper::default_SetFgColor)
            , ( bp::arg("color") ) )    
        .def( 
            "SetFont"
            , (void ( ::vgui::RichText::* )( ::vgui::HFont ))( &::vgui::RichText::SetFont )
            , ( bp::arg("font") ) )    
        .def( 
            "SetMaximumCharCount"
            , (void ( ::vgui::RichText::* )( int ))( &::vgui::RichText::SetMaximumCharCount )
            , ( bp::arg("maxChars") ) )    
        .def( 
            "SetPanelInteractive"
            , (void ( ::vgui::RichText::* )( bool ))( &::vgui::RichText::SetPanelInteractive )
            , ( bp::arg("bInteractive") ) )    
        .def( 
            "SetText"
            , (void ( ::vgui::RichText::* )( wchar_t const * ))(&::vgui::RichText::SetText)
            , (void ( RichText_wrapper::* )( wchar_t const * ))(&RichText_wrapper::default_SetText)
            , ( bp::arg("text") ) )    
        .def( 
            "SetToFullHeight"
            , (void ( ::vgui::RichText::* )(  ))( &::vgui::RichText::SetToFullHeight ) )    
        .def( 
            "SetURLClickedHandler"
            , (void ( ::vgui::RichText::* )( ::vgui::Panel * ))( &::vgui::RichText::SetURLClickedHandler )
            , ( bp::arg("pPanelToHandleClickMsg") ) )    
        .def( 
            "SetUnderlineFont"
            , (void ( ::vgui::RichText::* )( ::vgui::HFont ))( &::vgui::RichText::SetUnderlineFont )
            , ( bp::arg("font") ) )    
        .def( 
            "SetUnusedScrollbarInvisible"
            , (void ( ::vgui::RichText::* )( bool ))( &::vgui::RichText::SetUnusedScrollbarInvisible )
            , ( bp::arg("bInvis") ) )    
        .def( 
            "SetVerticalScrollbar"
            , (void ( ::vgui::RichText::* )( bool ))(&::vgui::RichText::SetVerticalScrollbar)
            , (void ( RichText_wrapper::* )( bool ))(&RichText_wrapper::default_SetVerticalScrollbar)
            , ( bp::arg("state") ) )    
        .def( 
            "AddToOverridableColors"
            , (void ( RichText_wrapper::* )( ::Color *,char const * ))(&RichText_wrapper::AddToOverridableColors)
            , ( bp::arg("pColor"), bp::arg("scriptname") ) )    
        .def( 
            "ApplyOverridableColors"
            , (void ( RichText_wrapper::* )(  ))(&RichText_wrapper::ApplyOverridableColors) )    
        .def( 
            "CreateDragData"
            , (void ( RichText_wrapper::* )(  ))(&RichText_wrapper::CreateDragData) )    
        .def( 
            "DragDropStartDragging"
            , (void ( RichText_wrapper::* )(  ))(&RichText_wrapper::DragDropStartDragging) )    
        .def( 
            "GetNavActivatePanel"
            , (::vgui::Panel * ( RichText_wrapper::* )(  ))(&RichText_wrapper::GetNavActivatePanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetNavBackPanel"
            , (::vgui::Panel * ( RichText_wrapper::* )(  ))(&RichText_wrapper::GetNavBackPanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetNavDownPanel"
            , (::vgui::Panel * ( RichText_wrapper::* )(  ))(&RichText_wrapper::GetNavDownPanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetNavLeftPanel"
            , (::vgui::Panel * ( RichText_wrapper::* )(  ))(&RichText_wrapper::GetNavLeftPanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetNavRightPanel"
            , (::vgui::Panel * ( RichText_wrapper::* )(  ))(&RichText_wrapper::GetNavRightPanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetNavToRelayPanel"
            , (::vgui::Panel * ( RichText_wrapper::* )(  ))(&RichText_wrapper::GetNavToRelayPanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetNavUpPanel"
            , (::vgui::Panel * ( RichText_wrapper::* )(  ))(&RichText_wrapper::GetNavUpPanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "InvalidateLayout"
            , (void ( ::vgui::Panel::* )( bool,bool ))(&::vgui::Panel::InvalidateLayout)
            , (void ( RichText_wrapper::* )( bool,bool ))(&RichText_wrapper::default_InvalidateLayout)
            , ( bp::arg("layoutNow")=(bool)(false), bp::arg("reloadScheme")=(bool)(false) ) )    
        .def( 
            "OnChildAdded"
            , (void ( ::vgui::Panel::* )( ::vgui::VPANEL ))(&::vgui::Panel::OnChildAdded)
            , (void ( RichText_wrapper::* )( ::vgui::VPANEL ))(&RichText_wrapper::default_OnChildAdded)
            , ( bp::arg("child") ) )    
        .def( 
            "OnChildSettingsApplied"
            , (void ( RichText_wrapper::* )( ::KeyValues *,::vgui::Panel * ))(&RichText_wrapper::OnChildSettingsApplied)
            , ( bp::arg("pInResourceData"), bp::arg("pChild") ) )    
        .def( 
            "OnCommand"
            , (void ( ::vgui::Panel::* )( char const * ))(&::vgui::Panel::OnCommand)
            , (void ( RichText_wrapper::* )( char const * ))(&RichText_wrapper::default_OnCommand)
            , ( bp::arg("command") ) )    
        .def( 
            "OnContinueDragging"
            , (void ( RichText_wrapper::* )(  ))(&RichText_wrapper::OnContinueDragging) )    
        .def( 
            "OnFinishDragging"
            , (void ( RichText_wrapper::* )( bool,::vgui::MouseCode,bool ))(&RichText_wrapper::OnFinishDragging)
            , ( bp::arg("mousereleased"), bp::arg("code"), bp::arg("aborted")=(bool)(false) ) )    
        .def( 
            "OnKeyCodePressed"
            , (void ( ::vgui::Panel::* )( ::vgui::KeyCode ))(&::vgui::Panel::OnKeyCodePressed)
            , (void ( RichText_wrapper::* )( ::vgui::KeyCode ))(&RichText_wrapper::default_OnKeyCodePressed)
            , ( bp::arg("code") ) )    
        .def( 
            "OnKeyCodeReleased"
            , (void ( ::vgui::Panel::* )( ::vgui::KeyCode ))(&::vgui::Panel::OnKeyCodeReleased)
            , (void ( RichText_wrapper::* )( ::vgui::KeyCode ))(&RichText_wrapper::default_OnKeyCodeReleased)
            , ( bp::arg("code") ) )    
        .def( 
            "OnKeyFocusTicked"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::OnKeyFocusTicked)
            , (void ( RichText_wrapper::* )(  ))(&RichText_wrapper::default_OnKeyFocusTicked) )    
        .def( 
            "OnMouseTriplePressed"
            , (void ( ::vgui::Panel::* )( ::vgui::MouseCode ))(&::vgui::Panel::OnMouseTriplePressed)
            , (void ( RichText_wrapper::* )( ::vgui::MouseCode ))(&RichText_wrapper::default_OnMouseTriplePressed)
            , ( bp::arg("code") ) )    
        .def( 
            "OnRequestFocus"
            , (void ( RichText_wrapper::* )( ::vgui::VPANEL,::vgui::VPANEL ))(&RichText_wrapper::default_OnRequestFocus)
            , ( bp::arg("subFocus"), bp::arg("defaultPanel") ) )    
        .def( 
            "OnScreenSizeChanged"
            , (void ( RichText_wrapper::* )( int,int ))(&RichText_wrapper::default_OnScreenSizeChanged)
            , ( bp::arg("oldwide"), bp::arg("oldtall") ) )    
        .def( 
            "OnStartDragging"
            , (void ( RichText_wrapper::* )(  ))(&RichText_wrapper::OnStartDragging) )    
        .def( 
            "OnTick"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::OnTick)
            , (void ( RichText_wrapper::* )(  ))(&RichText_wrapper::default_OnTick) )    
        .def( 
            "PaintBackground"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::PaintBackground)
            , (void ( RichText_wrapper::* )(  ))(&RichText_wrapper::default_PaintBackground) )    
        .def( 
            "PaintBuildOverlay"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::PaintBuildOverlay)
            , (void ( RichText_wrapper::* )(  ))(&RichText_wrapper::default_PaintBuildOverlay) )    
        .def( 
            "PaintTraverse"
            , (void ( RichText_wrapper::* )( bool,bool ))(&RichText_wrapper::PaintTraverse)
            , ( bp::arg("Repaint"), bp::arg("allowForce")=(bool)(true) ) )    
        .def( 
            "PostChildPaint"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::PostChildPaint)
            , (void ( RichText_wrapper::* )(  ))(&RichText_wrapper::default_PostChildPaint) )    
        .def( 
            "SetBgColor"
            , (void ( ::vgui::Panel::* )( ::Color ))(&::vgui::Panel::SetBgColor)
            , (void ( RichText_wrapper::* )( ::Color ))(&RichText_wrapper::default_SetBgColor)
            , ( bp::arg("color") ) )    
        .def( 
            "SetBorder"
            , (void ( ::vgui::Panel::* )( ::vgui::IBorder * ))(&::vgui::Panel::SetBorder)
            , (void ( RichText_wrapper::* )( ::vgui::IBorder * ))(&RichText_wrapper::default_SetBorder)
            , ( bp::arg("border") ) )    
        .def( 
            "SetCursor"
            , (void ( ::vgui::Panel::* )( ::vgui::HCursor ))(&::vgui::Panel::SetCursor)
            , (void ( RichText_wrapper::* )( ::vgui::HCursor ))(&RichText_wrapper::default_SetCursor)
            , ( bp::arg("cursor") ) )    
        .def( 
            "SetDragEnabled"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetDragEnabled)
            , (void ( RichText_wrapper::* )( bool ))(&RichText_wrapper::default_SetDragEnabled)
            , ( bp::arg("enabled") ) )    
        .def( 
            "SetEnabled"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetEnabled)
            , (void ( RichText_wrapper::* )( bool ))(&RichText_wrapper::default_SetEnabled)
            , ( bp::arg("state") ) )    
        .def( 
            "SetKeyBoardInputEnabled"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetKeyBoardInputEnabled)
            , (void ( RichText_wrapper::* )( bool ))(&RichText_wrapper::default_SetKeyBoardInputEnabled)
            , ( bp::arg("state") ) )    
        .def( 
            "SetMouseInputEnabled"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetMouseInputEnabled)
            , (void ( RichText_wrapper::* )( bool ))(&RichText_wrapper::default_SetMouseInputEnabled)
            , ( bp::arg("state") ) )    
        .def( 
            "SetOverridableColor"
            , (void ( RichText_wrapper::* )( ::Color *,::Color const & ))(&RichText_wrapper::SetOverridableColor)
            , ( bp::arg("pColor"), bp::arg("newColor") ) )    
        .def( 
            "SetPaintBackgroundEnabled"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetPaintBackgroundEnabled)
            , (void ( RichText_wrapper::* )( bool ))(&RichText_wrapper::default_SetPaintBackgroundEnabled)
            , ( bp::arg("state") ) )    
        .def( 
            "SetPaintBackgroundType"
            , (void ( ::vgui::Panel::* )( int ))(&::vgui::Panel::SetPaintBackgroundType)
            , (void ( RichText_wrapper::* )( int ))(&RichText_wrapper::default_SetPaintBackgroundType)
            , ( bp::arg("type") ) )    
        .def( 
            "SetPaintBorderEnabled"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetPaintBorderEnabled)
            , (void ( RichText_wrapper::* )( bool ))(&RichText_wrapper::default_SetPaintBorderEnabled)
            , ( bp::arg("state") ) )    
        .def( 
            "SetPaintEnabled"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetPaintEnabled)
            , (void ( RichText_wrapper::* )( bool ))(&RichText_wrapper::default_SetPaintEnabled)
            , ( bp::arg("state") ) )    
        .def( 
            "SetParent"
            , (void ( ::vgui::Panel::* )( ::vgui::Panel * ))(&::vgui::Panel::SetParent)
            , (void ( RichText_wrapper::* )( ::vgui::Panel * ))(&RichText_wrapper::default_SetParent)
            , ( bp::arg("newParent") ) )    
        .def( 
            "SetParent"
            , (void ( ::vgui::Panel::* )( ::vgui::VPANEL ))(&::vgui::Panel::SetParent)
            , (void ( RichText_wrapper::* )( ::vgui::VPANEL ))(&RichText_wrapper::default_SetParent)
            , ( bp::arg("newParent") ) )    
        .def( 
            "SetScheme"
            , (void ( ::vgui::Panel::* )( char const * ))(&::vgui::Panel::SetScheme)
            , (void ( RichText_wrapper::* )( char const * ))(&RichText_wrapper::default_SetScheme)
            , ( bp::arg("tag") ) )    
        .def( 
            "SetScheme"
            , (void ( ::vgui::Panel::* )( ::vgui::HScheme ))(&::vgui::Panel::SetScheme)
            , (void ( RichText_wrapper::* )( ::vgui::HScheme ))(&RichText_wrapper::default_SetScheme)
            , ( bp::arg("scheme") ) )    
        .def( 
            "SetVisible"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetVisible)
            , (void ( RichText_wrapper::* )( bool ))(&RichText_wrapper::default_SetVisible)
            , ( bp::arg("state") ) )    
        .staticmethod( "GetPanelBaseClassName" )    
        .staticmethod( "GetPanelClassName" );

}
