// This file has been generated by Py++.

#include "cbase.h"
#include "__convenience.pypp.hpp"
#include "__call_policies.pypp.hpp"
#include "cbase.h"
#include "vgui_controls/Panel.h"
#include "vgui_controls/AnimationController.h"
#include "vgui_controls/EditablePanel.h"
#include "vgui_controls/AnalogBar.h"
#include "vgui_controls/Image.h"
#include "vgui_controls/TextImage.h"
#include "vgui_controls/ScrollBar.h"
#include "vgui_controls/ScrollBarSlider.h"
#include "vgui_controls/Menu.h"
#include "vgui_controls/MenuButton.h"
#include "vgui_controls/Frame.h"
#include "vgui_controls/TextEntry.h"
#include "vgui_controls/RichText.h"
#include "vgui_controls/Tooltip.h"
#include "vgui/IBorder.h"
#include "vgui_bitmapimage.h"
#include "vgui_avatarimage.h"
#include "srcpy_vgui.h"
#include "srcpy.h"
#include "tier0/memdbgon.h"
#include "TextEntry.pypp.hpp"

namespace bp = boost::python;

struct TextEntry_wrapper : vgui::TextEntry, bp::wrapper< vgui::TextEntry > {

    TextEntry_wrapper(::vgui::Panel * parent, char const * panelName )
    : vgui::TextEntry( parent, panelName )
      , bp::wrapper< vgui::TextEntry >(){
        // constructor
    	g_PythonPanelCount++;
    }

    void AddAnotherLine( int & cx, int & cy ){
        vgui::TextEntry::AddAnotherLine( cx, cy );
    }

    virtual void ApplySchemeSettings( ::vgui::IScheme * pScheme ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, ApplySchemeSettings )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, ApplySchemeSettings )
        bp::override func_ApplySchemeSettings = this->get_override( "ApplySchemeSettings" );
        if( func_ApplySchemeSettings.ptr() != Py_None )
            try {
                func_ApplySchemeSettings( boost::python::ptr(pScheme) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::ApplySchemeSettings( pScheme );
            }
        else
            this->vgui::TextEntry::ApplySchemeSettings( pScheme );
    }
    
    virtual void default_ApplySchemeSettings( ::vgui::IScheme * pScheme ){
        vgui::TextEntry::ApplySchemeSettings( pScheme );
    }

    void ApplySettings( ::KeyValues * inResourceData ){
        vgui::TextEntry::ApplySettings( inResourceData );
    }

    void CursorToPixelSpace( int cursorPos, int & cx, int & cy ){
        vgui::TextEntry::CursorToPixelSpace( cursorPos, cx, cy );
    }

    int DrawChar( wchar_t ch, ::vgui::HFont font, int index, int x, int y ){
        return vgui::TextEntry::DrawChar( ch, font, index, x, y );
    }

    bool DrawCursor( int x, int y ){
        return vgui::TextEntry::DrawCursor( x, y );
    }

    void FireActionSignal(  ){
        vgui::TextEntry::FireActionSignal(  );
    }

    char const * GetDescription(  ){
        return vgui::TextEntry::GetDescription(  );
    }

    bool GetSelectedRange( int & cx0, int & cx1 ){
        return vgui::TextEntry::GetSelectedRange( cx0, cx1 );
    }

    void GetSettings( ::KeyValues * outResourceData ){
        vgui::TextEntry::GetSettings( outResourceData );
    }

    int GetStartDrawIndex( int & lineBreakIndexIndex ){
        return vgui::TextEntry::GetStartDrawIndex( lineBreakIndexIndex );
    }

    int GetYStart(  ){
        return vgui::TextEntry::GetYStart(  );
    }

    bool IsCursorOffLeftSideOfWindow( int cursorPos ){
        return vgui::TextEntry::IsCursorOffLeftSideOfWindow( cursorPos );
    }

    bool IsCursorOffRightSideOfWindow( int cursorPos ){
        return vgui::TextEntry::IsCursorOffRightSideOfWindow( cursorPos );
    }

    virtual void MoveCursor( int line, int pixelsAcross ) {
        PY_OVERRIDE_CHECK( vgui::TextEntry, MoveCursor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, MoveCursor )
        bp::override func_MoveCursor = this->get_override( "MoveCursor" );
        if( func_MoveCursor.ptr() != Py_None )
            try {
                func_MoveCursor( line, pixelsAcross );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::MoveCursor( line, pixelsAcross );
            }
        else
            this->vgui::TextEntry::MoveCursor( line, pixelsAcross );
    }
    
    void default_MoveCursor( int line, int pixelsAcross ) {
        vgui::TextEntry::MoveCursor( line, pixelsAcross );
    }

    bool NeedsEllipses( ::vgui::HFont font, int * pIndex ){
        return vgui::TextEntry::NeedsEllipses( font, pIndex );
    }

    void OnChangeIME( bool forward ){
        vgui::TextEntry::OnChangeIME( forward );
    }

    virtual void OnCursorEntered(  ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnCursorEntered )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnCursorEntered )
        bp::override func_OnCursorEntered = this->get_override( "OnCursorEntered" );
        if( func_OnCursorEntered.ptr() != Py_None )
            try {
                func_OnCursorEntered(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnCursorEntered(  );
            }
        else
            this->vgui::TextEntry::OnCursorEntered(  );
    }
    
    virtual void default_OnCursorEntered(  ){
        vgui::TextEntry::OnCursorEntered( );
    }

    virtual void OnCursorExited(  ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnCursorExited )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnCursorExited )
        bp::override func_OnCursorExited = this->get_override( "OnCursorExited" );
        if( func_OnCursorExited.ptr() != Py_None )
            try {
                func_OnCursorExited(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnCursorExited(  );
            }
        else
            this->vgui::TextEntry::OnCursorExited(  );
    }
    
    virtual void default_OnCursorExited(  ){
        vgui::TextEntry::OnCursorExited( );
    }

    virtual void OnCursorMoved( int x, int y ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnCursorMoved )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnCursorMoved )
        bp::override func_OnCursorMoved = this->get_override( "OnCursorMoved" );
        if( func_OnCursorMoved.ptr() != Py_None )
            try {
                func_OnCursorMoved( x, y );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnCursorMoved( x, y );
            }
        else
            this->vgui::TextEntry::OnCursorMoved( x, y );
    }
    
    virtual void default_OnCursorMoved( int x, int y ){
        vgui::TextEntry::OnCursorMoved( x, y );
    }

    virtual void OnKeyCodePressed( ::vgui::KeyCode code ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnKeyCodePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnKeyCodePressed )
        bp::override func_OnKeyCodePressed = this->get_override( "OnKeyCodePressed" );
        if( func_OnKeyCodePressed.ptr() != Py_None )
            try {
                func_OnKeyCodePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnKeyCodePressed( code );
            }
        else
            this->vgui::TextEntry::OnKeyCodePressed( code );
    }
    
    virtual void default_OnKeyCodePressed( ::vgui::KeyCode code ){
        vgui::TextEntry::OnKeyCodePressed( code );
    }

    virtual void OnKeyCodeTyped( ::vgui::KeyCode code ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnKeyCodeTyped )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnKeyCodeTyped )
        bp::override func_OnKeyCodeTyped = this->get_override( "OnKeyCodeTyped" );
        if( func_OnKeyCodeTyped.ptr() != Py_None )
            try {
                func_OnKeyCodeTyped( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnKeyCodeTyped( code );
            }
        else
            this->vgui::TextEntry::OnKeyCodeTyped( code );
    }
    
    virtual void default_OnKeyCodeTyped( ::vgui::KeyCode code ){
        vgui::TextEntry::OnKeyCodeTyped( code );
    }

    virtual void OnKeyFocusTicked(  ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnKeyFocusTicked )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnKeyFocusTicked )
        bp::override func_OnKeyFocusTicked = this->get_override( "OnKeyFocusTicked" );
        if( func_OnKeyFocusTicked.ptr() != Py_None )
            try {
                func_OnKeyFocusTicked(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnKeyFocusTicked(  );
            }
        else
            this->vgui::TextEntry::OnKeyFocusTicked(  );
    }
    
    virtual void default_OnKeyFocusTicked(  ){
        vgui::TextEntry::OnKeyFocusTicked( );
    }

    virtual void OnKillFocus(  ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnKillFocus )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnKillFocus )
        bp::override func_OnKillFocus = this->get_override( "OnKillFocus" );
        if( func_OnKillFocus.ptr() != Py_None )
            try {
                func_OnKillFocus(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnKillFocus(  );
            }
        else
            this->vgui::TextEntry::OnKillFocus(  );
    }
    
    virtual void default_OnKillFocus(  ){
        vgui::TextEntry::OnKillFocus( );
    }

    virtual void OnMouseCaptureLost(  ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnMouseCaptureLost )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnMouseCaptureLost )
        bp::override func_OnMouseCaptureLost = this->get_override( "OnMouseCaptureLost" );
        if( func_OnMouseCaptureLost.ptr() != Py_None )
            try {
                func_OnMouseCaptureLost(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnMouseCaptureLost(  );
            }
        else
            this->vgui::TextEntry::OnMouseCaptureLost(  );
    }
    
    virtual void default_OnMouseCaptureLost(  ){
        vgui::TextEntry::OnMouseCaptureLost( );
    }

    virtual void OnMouseDoublePressed( ::vgui::MouseCode code ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnMouseDoublePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnMouseDoublePressed )
        bp::override func_OnMouseDoublePressed = this->get_override( "OnMouseDoublePressed" );
        if( func_OnMouseDoublePressed.ptr() != Py_None )
            try {
                func_OnMouseDoublePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnMouseDoublePressed( code );
            }
        else
            this->vgui::TextEntry::OnMouseDoublePressed( code );
    }
    
    virtual void default_OnMouseDoublePressed( ::vgui::MouseCode code ){
        vgui::TextEntry::OnMouseDoublePressed( code );
    }

    virtual void OnMouseFocusTicked(  ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnMouseFocusTicked )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnMouseFocusTicked )
        bp::override func_OnMouseFocusTicked = this->get_override( "OnMouseFocusTicked" );
        if( func_OnMouseFocusTicked.ptr() != Py_None )
            try {
                func_OnMouseFocusTicked(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnMouseFocusTicked(  );
            }
        else
            this->vgui::TextEntry::OnMouseFocusTicked(  );
    }
    
    virtual void default_OnMouseFocusTicked(  ){
        vgui::TextEntry::OnMouseFocusTicked( );
    }

    virtual void OnMousePressed( ::vgui::MouseCode code ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnMousePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnMousePressed )
        bp::override func_OnMousePressed = this->get_override( "OnMousePressed" );
        if( func_OnMousePressed.ptr() != Py_None )
            try {
                func_OnMousePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnMousePressed( code );
            }
        else
            this->vgui::TextEntry::OnMousePressed( code );
    }
    
    virtual void default_OnMousePressed( ::vgui::MouseCode code ){
        vgui::TextEntry::OnMousePressed( code );
    }

    virtual void OnMouseReleased( ::vgui::MouseCode code ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnMouseReleased )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnMouseReleased )
        bp::override func_OnMouseReleased = this->get_override( "OnMouseReleased" );
        if( func_OnMouseReleased.ptr() != Py_None )
            try {
                func_OnMouseReleased( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnMouseReleased( code );
            }
        else
            this->vgui::TextEntry::OnMouseReleased( code );
    }
    
    virtual void default_OnMouseReleased( ::vgui::MouseCode code ){
        vgui::TextEntry::OnMouseReleased( code );
    }

    virtual void OnMouseTriplePressed( ::vgui::MouseCode code ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnMouseTriplePressed )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnMouseTriplePressed )
        bp::override func_OnMouseTriplePressed = this->get_override( "OnMouseTriplePressed" );
        if( func_OnMouseTriplePressed.ptr() != Py_None )
            try {
                func_OnMouseTriplePressed( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnMouseTriplePressed( code );
            }
        else
            this->vgui::TextEntry::OnMouseTriplePressed( code );
    }
    
    virtual void default_OnMouseTriplePressed( ::vgui::MouseCode code ){
        vgui::TextEntry::OnMouseTriplePressed( code );
    }

    virtual void OnMouseWheeled( int delta ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnMouseWheeled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnMouseWheeled )
        bp::override func_OnMouseWheeled = this->get_override( "OnMouseWheeled" );
        if( func_OnMouseWheeled.ptr() != Py_None )
            try {
                func_OnMouseWheeled( delta );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnMouseWheeled( delta );
            }
        else
            this->vgui::TextEntry::OnMouseWheeled( delta );
    }
    
    virtual void default_OnMouseWheeled( int delta ){
        vgui::TextEntry::OnMouseWheeled( delta );
    }

    virtual void OnSetFocus(  ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnSetFocus )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnSetFocus )
        bp::override func_OnSetFocus = this->get_override( "OnSetFocus" );
        if( func_OnSetFocus.ptr() != Py_None )
            try {
                func_OnSetFocus(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnSetFocus(  );
            }
        else
            this->vgui::TextEntry::OnSetFocus(  );
    }
    
    virtual void default_OnSetFocus(  ){
        vgui::TextEntry::OnSetFocus( );
    }

    void OnSetText( wchar_t const * text ){
        vgui::TextEntry::OnSetText( text );
    }

    virtual void OnSizeChanged( int newWide, int newTall ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, OnSizeChanged )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, OnSizeChanged )
        bp::override func_OnSizeChanged = this->get_override( "OnSizeChanged" );
        if( func_OnSizeChanged.ptr() != Py_None )
            try {
                func_OnSizeChanged( newWide, newTall );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::OnSizeChanged( newWide, newTall );
            }
        else
            this->vgui::TextEntry::OnSizeChanged( newWide, newTall );
    }
    
    virtual void default_OnSizeChanged( int newWide, int newTall ){
        vgui::TextEntry::OnSizeChanged( newWide, newTall );
    }

    void OnSliderMoved(  ){
        vgui::TextEntry::OnSliderMoved(  );
    }

    virtual void PaintBackground(  ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, PaintBackground )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, PaintBackground )
        bp::override func_PaintBackground = this->get_override( "PaintBackground" );
        if( func_PaintBackground.ptr() != Py_None )
            try {
                func_PaintBackground(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::PaintBackground(  );
            }
        else
            this->vgui::TextEntry::PaintBackground(  );
    }
    
    virtual void default_PaintBackground(  ){
        vgui::TextEntry::PaintBackground( );
    }

    virtual void PerformLayout(  ){
        PY_OVERRIDE_CHECK( vgui::TextEntry, PerformLayout )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, PerformLayout )
        bp::override func_PerformLayout = this->get_override( "PerformLayout" );
        if( func_PerformLayout.ptr() != Py_None )
            try {
                func_PerformLayout(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::PerformLayout(  );
            }
        else
            this->vgui::TextEntry::PerformLayout(  );
    }
    
    virtual void default_PerformLayout(  ){
        vgui::TextEntry::PerformLayout( );
    }

    int PixelToCursorSpace( int cx, int cy ){
        return vgui::TextEntry::PixelToCursorSpace( cx, cy );
    }

    void ResetCursorBlink(  ){
        vgui::TextEntry::ResetCursorBlink(  );
    }

    void ScrollLeft(  ){
        vgui::TextEntry::ScrollLeft(  );
    }

    void ScrollLeftForResize(  ){
        vgui::TextEntry::ScrollLeftForResize(  );
    }

    void ScrollRight(  ){
        vgui::TextEntry::ScrollRight(  );
    }

    bool SelectCheck( bool fromMouse=false ){
        return vgui::TextEntry::SelectCheck( fromMouse );
    }

    void SetCharAt( wchar_t ch, int index ){
        vgui::TextEntry::SetCharAt( ch, index );
    }

    virtual void SetDisabledBgColor( ::Color col ) {
        PY_OVERRIDE_CHECK( vgui::TextEntry, SetDisabledBgColor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, SetDisabledBgColor )
        bp::override func_SetDisabledBgColor = this->get_override( "SetDisabledBgColor" );
        if( func_SetDisabledBgColor.ptr() != Py_None )
            try {
                func_SetDisabledBgColor( col );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::SetDisabledBgColor( col );
            }
        else
            this->vgui::TextEntry::SetDisabledBgColor( col );
    }
    
    void default_SetDisabledBgColor( ::Color col ) {
        vgui::TextEntry::SetDisabledBgColor( col );
    }

    virtual void SetEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::TextEntry, SetEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, SetEnabled )
        bp::override func_SetEnabled = this->get_override( "SetEnabled" );
        if( func_SetEnabled.ptr() != Py_None )
            try {
                func_SetEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::SetEnabled( state );
            }
        else
            this->vgui::TextEntry::SetEnabled( state );
    }
    
    void default_SetEnabled( bool state ) {
        vgui::TextEntry::SetEnabled( state );
    }

    virtual void SetMultiline( bool state ) {
        PY_OVERRIDE_CHECK( vgui::TextEntry, SetMultiline )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, SetMultiline )
        bp::override func_SetMultiline = this->get_override( "SetMultiline" );
        if( func_SetMultiline.ptr() != Py_None )
            try {
                func_SetMultiline( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::SetMultiline( state );
            }
        else
            this->vgui::TextEntry::SetMultiline( state );
    }
    
    void default_SetMultiline( bool state ) {
        vgui::TextEntry::SetMultiline( state );
    }

    virtual void SetText( wchar_t const * wszText ) {
        PY_OVERRIDE_CHECK( vgui::TextEntry, SetText )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, SetText )
        bp::override func_SetText = this->get_override( "SetText" );
        if( func_SetText.ptr() != Py_None )
            try {
                func_SetText( wszText );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::SetText( wszText );
            }
        else
            this->vgui::TextEntry::SetText( wszText );
    }
    
    void default_SetText( wchar_t const * wszText ) {
        vgui::TextEntry::SetText( wszText );
    }

    virtual void SetVerticalScrollbar( bool state ) {
        PY_OVERRIDE_CHECK( vgui::TextEntry, SetVerticalScrollbar )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::TextEntry, SetVerticalScrollbar )
        bp::override func_SetVerticalScrollbar = this->get_override( "SetVerticalScrollbar" );
        if( func_SetVerticalScrollbar.ptr() != Py_None )
            try {
                func_SetVerticalScrollbar( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::TextEntry::SetVerticalScrollbar( state );
            }
        else
            this->vgui::TextEntry::SetVerticalScrollbar( state );
    }
    
    void default_SetVerticalScrollbar( bool state ) {
        vgui::TextEntry::SetVerticalScrollbar( state );
    }

    void AddToOverridableColors( ::Color * pColor, char const * scriptname ){
        vgui::Panel::AddToOverridableColors( pColor, scriptname );
    }

    void ApplyOverridableColors(  ){
        vgui::Panel::ApplyOverridableColors(  );
    }

    void CreateDragData(  ){
        vgui::Panel::CreateDragData(  );
    }

    void DragDropStartDragging(  ){
        vgui::Panel::DragDropStartDragging(  );
    }

    ::vgui::Panel * GetNavActivatePanel(  ){
        return vgui::Panel::GetNavActivatePanel(  );
    }

    ::vgui::Panel * GetNavBackPanel(  ){
        return vgui::Panel::GetNavBackPanel(  );
    }

    ::vgui::Panel * GetNavDownPanel(  ){
        return vgui::Panel::GetNavDownPanel(  );
    }

    ::vgui::Panel * GetNavLeftPanel(  ){
        return vgui::Panel::GetNavLeftPanel(  );
    }

    ::vgui::Panel * GetNavRightPanel(  ){
        return vgui::Panel::GetNavRightPanel(  );
    }

    ::vgui::Panel * GetNavToRelayPanel(  ){
        return vgui::Panel::GetNavToRelayPanel(  );
    }

    ::vgui::Panel * GetNavUpPanel(  ){
        return vgui::Panel::GetNavUpPanel(  );
    }

    virtual void InvalidateLayout( bool layoutNow=false, bool reloadScheme=false ) {
        PY_OVERRIDE_CHECK( vgui::Panel, InvalidateLayout )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, InvalidateLayout )
        bp::override func_InvalidateLayout = this->get_override( "InvalidateLayout" );
        if( func_InvalidateLayout.ptr() != Py_None )
            try {
                func_InvalidateLayout( layoutNow, reloadScheme );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::InvalidateLayout( layoutNow, reloadScheme );
            }
        else
            this->vgui::Panel::InvalidateLayout( layoutNow, reloadScheme );
    }
    
    void default_InvalidateLayout( bool layoutNow=false, bool reloadScheme=false ) {
        vgui::Panel::InvalidateLayout( layoutNow, reloadScheme );
    }

    virtual void OnChildAdded( ::vgui::VPANEL child ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnChildAdded )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnChildAdded )
        bp::override func_OnChildAdded = this->get_override( "OnChildAdded" );
        if( func_OnChildAdded.ptr() != Py_None )
            try {
                func_OnChildAdded( child );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnChildAdded( child );
            }
        else
            this->vgui::Panel::OnChildAdded( child );
    }
    
    void default_OnChildAdded( ::vgui::VPANEL child ) {
        vgui::Panel::OnChildAdded( child );
    }

    void OnChildSettingsApplied( ::KeyValues * pInResourceData, ::vgui::Panel * pChild ){
        vgui::Panel::OnChildSettingsApplied( pInResourceData, pChild );
    }

    virtual void OnCommand( char const * command ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnCommand )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnCommand )
        bp::override func_OnCommand = this->get_override( "OnCommand" );
        if( func_OnCommand.ptr() != Py_None )
            try {
                func_OnCommand( command );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnCommand( command );
            }
        else
            this->vgui::Panel::OnCommand( command );
    }
    
    void default_OnCommand( char const * command ) {
        vgui::Panel::OnCommand( command );
    }

    void OnContinueDragging(  ){
        vgui::Panel::OnContinueDragging(  );
    }

    void OnFinishDragging( bool mousereleased, ::vgui::MouseCode code, bool aborted=false ){
        vgui::Panel::OnFinishDragging( mousereleased, code, aborted );
    }

    virtual void OnKeyCodeReleased( ::vgui::KeyCode code ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnKeyCodeReleased )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnKeyCodeReleased )
        bp::override func_OnKeyCodeReleased = this->get_override( "OnKeyCodeReleased" );
        if( func_OnKeyCodeReleased.ptr() != Py_None )
            try {
                func_OnKeyCodeReleased( code );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnKeyCodeReleased( code );
            }
        else
            this->vgui::Panel::OnKeyCodeReleased( code );
    }
    
    void default_OnKeyCodeReleased( ::vgui::KeyCode code ) {
        vgui::Panel::OnKeyCodeReleased( code );
    }

    virtual void OnRequestFocus( ::vgui::VPANEL subFocus, ::vgui::VPANEL defaultPanel ){
        PY_OVERRIDE_CHECK( vgui::Panel, OnRequestFocus )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnRequestFocus )
        bp::override func_OnRequestFocus = this->get_override( "OnRequestFocus" );
        if( func_OnRequestFocus.ptr() != Py_None )
            try {
                func_OnRequestFocus( subFocus, defaultPanel );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnRequestFocus( subFocus, defaultPanel );
            }
        else
            this->vgui::Panel::OnRequestFocus( subFocus, defaultPanel );
    }
    
    virtual void default_OnRequestFocus( ::vgui::VPANEL subFocus, ::vgui::VPANEL defaultPanel ){
        vgui::Panel::OnRequestFocus( subFocus, defaultPanel );
    }

    virtual void OnScreenSizeChanged( int oldwide, int oldtall ){
        PY_OVERRIDE_CHECK( vgui::Panel, OnScreenSizeChanged )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnScreenSizeChanged )
        bp::override func_OnScreenSizeChanged = this->get_override( "OnScreenSizeChanged" );
        if( func_OnScreenSizeChanged.ptr() != Py_None )
            try {
                func_OnScreenSizeChanged( oldwide, oldtall );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnScreenSizeChanged( oldwide, oldtall );
            }
        else
            this->vgui::Panel::OnScreenSizeChanged( oldwide, oldtall );
    }
    
    virtual void default_OnScreenSizeChanged( int oldwide, int oldtall ){
        vgui::Panel::OnScreenSizeChanged( oldwide, oldtall );
    }

    void OnStartDragging(  ){
        vgui::Panel::OnStartDragging(  );
    }

    virtual void OnThink(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnThink )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnThink )
        bp::override func_OnThink = this->get_override( "OnThink" );
        if( func_OnThink.ptr() != Py_None )
            try {
                func_OnThink(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnThink(  );
            }
        else
            this->vgui::Panel::OnThink(  );
    }
    
    void default_OnThink(  ) {
        vgui::Panel::OnThink( );
    }

    virtual void OnTick(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, OnTick )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, OnTick )
        bp::override func_OnTick = this->get_override( "OnTick" );
        if( func_OnTick.ptr() != Py_None )
            try {
                func_OnTick(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::OnTick(  );
            }
        else
            this->vgui::Panel::OnTick(  );
    }
    
    void default_OnTick(  ) {
        vgui::Panel::OnTick( );
    }

    virtual void Paint(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, Paint )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, Paint )
        bp::override func_Paint = this->get_override( "Paint" );
        if( func_Paint.ptr() != Py_None )
            try {
                func_Paint(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::Paint(  );
            }
        else
            this->vgui::Panel::Paint(  );
    }
    
    void default_Paint(  ) {
        vgui::Panel::Paint( );
    }

    virtual void PaintBuildOverlay(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, PaintBuildOverlay )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, PaintBuildOverlay )
        bp::override func_PaintBuildOverlay = this->get_override( "PaintBuildOverlay" );
        if( func_PaintBuildOverlay.ptr() != Py_None )
            try {
                func_PaintBuildOverlay(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::PaintBuildOverlay(  );
            }
        else
            this->vgui::Panel::PaintBuildOverlay(  );
    }
    
    void default_PaintBuildOverlay(  ) {
        vgui::Panel::PaintBuildOverlay( );
    }

    void PaintTraverse( bool Repaint, bool allowForce=true ){
        vgui::Panel::PaintTraverse( Repaint, allowForce );
    }

    virtual void PostChildPaint(  ) {
        PY_OVERRIDE_CHECK( vgui::Panel, PostChildPaint )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, PostChildPaint )
        bp::override func_PostChildPaint = this->get_override( "PostChildPaint" );
        if( func_PostChildPaint.ptr() != Py_None )
            try {
                func_PostChildPaint(  );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::PostChildPaint(  );
            }
        else
            this->vgui::Panel::PostChildPaint(  );
    }
    
    void default_PostChildPaint(  ) {
        vgui::Panel::PostChildPaint( );
    }

    virtual void SetBgColor( ::Color color ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetBgColor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetBgColor )
        bp::override func_SetBgColor = this->get_override( "SetBgColor" );
        if( func_SetBgColor.ptr() != Py_None )
            try {
                func_SetBgColor( color );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetBgColor( color );
            }
        else
            this->vgui::Panel::SetBgColor( color );
    }
    
    void default_SetBgColor( ::Color color ) {
        vgui::Panel::SetBgColor( color );
    }

    virtual void SetBorder( ::vgui::IBorder * border ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetBorder )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetBorder )
        bp::override func_SetBorder = this->get_override( "SetBorder" );
        if( func_SetBorder.ptr() != Py_None )
            try {
                func_SetBorder( boost::python::ptr(border) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetBorder( border );
            }
        else
            this->vgui::Panel::SetBorder( border );
    }
    
    void default_SetBorder( ::vgui::IBorder * border ) {
        vgui::Panel::SetBorder( border );
    }

    virtual void SetCursor( ::vgui::HCursor cursor ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetCursor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetCursor )
        bp::override func_SetCursor = this->get_override( "SetCursor" );
        if( func_SetCursor.ptr() != Py_None )
            try {
                func_SetCursor( cursor );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetCursor( cursor );
            }
        else
            this->vgui::Panel::SetCursor( cursor );
    }
    
    void default_SetCursor( ::vgui::HCursor cursor ) {
        vgui::Panel::SetCursor( cursor );
    }

    virtual void SetDragEnabled( bool enabled ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetDragEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetDragEnabled )
        bp::override func_SetDragEnabled = this->get_override( "SetDragEnabled" );
        if( func_SetDragEnabled.ptr() != Py_None )
            try {
                func_SetDragEnabled( enabled );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetDragEnabled( enabled );
            }
        else
            this->vgui::Panel::SetDragEnabled( enabled );
    }
    
    void default_SetDragEnabled( bool enabled ) {
        vgui::Panel::SetDragEnabled( enabled );
    }

    virtual void SetFgColor( ::Color color ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetFgColor )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetFgColor )
        bp::override func_SetFgColor = this->get_override( "SetFgColor" );
        if( func_SetFgColor.ptr() != Py_None )
            try {
                func_SetFgColor( color );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetFgColor( color );
            }
        else
            this->vgui::Panel::SetFgColor( color );
    }
    
    void default_SetFgColor( ::Color color ) {
        vgui::Panel::SetFgColor( color );
    }

    virtual void SetKeyBoardInputEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetKeyBoardInputEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetKeyBoardInputEnabled )
        bp::override func_SetKeyBoardInputEnabled = this->get_override( "SetKeyBoardInputEnabled" );
        if( func_SetKeyBoardInputEnabled.ptr() != Py_None )
            try {
                func_SetKeyBoardInputEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetKeyBoardInputEnabled( state );
            }
        else
            this->vgui::Panel::SetKeyBoardInputEnabled( state );
    }
    
    void default_SetKeyBoardInputEnabled( bool state ) {
        vgui::Panel::SetKeyBoardInputEnabled( state );
    }

    virtual void SetMouseInputEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetMouseInputEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetMouseInputEnabled )
        bp::override func_SetMouseInputEnabled = this->get_override( "SetMouseInputEnabled" );
        if( func_SetMouseInputEnabled.ptr() != Py_None )
            try {
                func_SetMouseInputEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetMouseInputEnabled( state );
            }
        else
            this->vgui::Panel::SetMouseInputEnabled( state );
    }
    
    void default_SetMouseInputEnabled( bool state ) {
        vgui::Panel::SetMouseInputEnabled( state );
    }

    void SetOverridableColor( ::Color * pColor, ::Color const & newColor ){
        vgui::Panel::SetOverridableColor( pColor, newColor );
    }

    virtual void SetPaintBackgroundEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintBackgroundEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintBackgroundEnabled )
        bp::override func_SetPaintBackgroundEnabled = this->get_override( "SetPaintBackgroundEnabled" );
        if( func_SetPaintBackgroundEnabled.ptr() != Py_None )
            try {
                func_SetPaintBackgroundEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintBackgroundEnabled( state );
            }
        else
            this->vgui::Panel::SetPaintBackgroundEnabled( state );
    }
    
    void default_SetPaintBackgroundEnabled( bool state ) {
        vgui::Panel::SetPaintBackgroundEnabled( state );
    }

    virtual void SetPaintBackgroundType( int type ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintBackgroundType )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintBackgroundType )
        bp::override func_SetPaintBackgroundType = this->get_override( "SetPaintBackgroundType" );
        if( func_SetPaintBackgroundType.ptr() != Py_None )
            try {
                func_SetPaintBackgroundType( type );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintBackgroundType( type );
            }
        else
            this->vgui::Panel::SetPaintBackgroundType( type );
    }
    
    void default_SetPaintBackgroundType( int type ) {
        vgui::Panel::SetPaintBackgroundType( type );
    }

    virtual void SetPaintBorderEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintBorderEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintBorderEnabled )
        bp::override func_SetPaintBorderEnabled = this->get_override( "SetPaintBorderEnabled" );
        if( func_SetPaintBorderEnabled.ptr() != Py_None )
            try {
                func_SetPaintBorderEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintBorderEnabled( state );
            }
        else
            this->vgui::Panel::SetPaintBorderEnabled( state );
    }
    
    void default_SetPaintBorderEnabled( bool state ) {
        vgui::Panel::SetPaintBorderEnabled( state );
    }

    virtual void SetPaintEnabled( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetPaintEnabled )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetPaintEnabled )
        bp::override func_SetPaintEnabled = this->get_override( "SetPaintEnabled" );
        if( func_SetPaintEnabled.ptr() != Py_None )
            try {
                func_SetPaintEnabled( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetPaintEnabled( state );
            }
        else
            this->vgui::Panel::SetPaintEnabled( state );
    }
    
    void default_SetPaintEnabled( bool state ) {
        vgui::Panel::SetPaintEnabled( state );
    }

    virtual void SetParent( ::vgui::Panel * newParent ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetParent )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetParent )
        bp::override func_SetParent = this->get_override( "SetParent" );
        if( func_SetParent.ptr() != Py_None )
            try {
                func_SetParent( boost::python::object(*newParent) );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetParent( newParent );
            }
        else
            this->vgui::Panel::SetParent( newParent );
    }
    
    void default_SetParent( ::vgui::Panel * newParent ) {
        vgui::Panel::SetParent( newParent );
    }

    virtual void SetParent( ::vgui::VPANEL newParent ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetParent )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetParent )
        bp::override func_SetParent = this->get_override( "SetParent" );
        if( func_SetParent.ptr() != Py_None )
            try {
                func_SetParent( newParent );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetParent( newParent );
            }
        else
            this->vgui::Panel::SetParent( newParent );
    }
    
    void default_SetParent( ::vgui::VPANEL newParent ) {
        vgui::Panel::SetParent( newParent );
    }

    virtual void SetScheme( char const * tag ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetScheme )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetScheme )
        bp::override func_SetScheme = this->get_override( "SetScheme" );
        if( func_SetScheme.ptr() != Py_None )
            try {
                func_SetScheme( tag );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetScheme( tag );
            }
        else
            this->vgui::Panel::SetScheme( tag );
    }
    
    void default_SetScheme( char const * tag ) {
        vgui::Panel::SetScheme( tag );
    }

    virtual void SetScheme( ::vgui::HScheme scheme ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetScheme )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetScheme )
        bp::override func_SetScheme = this->get_override( "SetScheme" );
        if( func_SetScheme.ptr() != Py_None )
            try {
                func_SetScheme( scheme );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetScheme( scheme );
            }
        else
            this->vgui::Panel::SetScheme( scheme );
    }
    
    void default_SetScheme( ::vgui::HScheme scheme ) {
        vgui::Panel::SetScheme( scheme );
    }

    virtual void SetVisible( bool state ) {
        PY_OVERRIDE_CHECK( vgui::Panel, SetVisible )
        PY_OVERRIDE_LOG( _vguicontrols, vgui::Panel, SetVisible )
        bp::override func_SetVisible = this->get_override( "SetVisible" );
        if( func_SetVisible.ptr() != Py_None )
            try {
                func_SetVisible( state );
            } catch(bp::error_already_set &) {
                PyErr_Print();
                this->vgui::Panel::SetVisible( state );
            }
        else
            this->vgui::Panel::SetVisible( state );
    }
    
    void default_SetVisible( bool state ) {
        vgui::Panel::SetVisible( state );
    }

    virtual PyObject *GetPySelf() const { return bp::detail::wrapper_base_::get_owner(*this); }

    virtual bool IsPythonManaged() { return true; }

    ~TextEntry_wrapper( void ) { g_PythonPanelCount--; /*::PyDeletePanel( this, this );*/ }

    boost::python::object GetText() {
        const char *buf = (const char *)malloc( (GetTextLength()+1)*sizeof(char) );
        TextEntry::GetText((char *)buf, GetTextLength()+1);
        boost::python::object rv(buf);
        delete buf;
        return rv;
    }

};

void register_TextEntry_class(){

    bp::class_< TextEntry_wrapper, bp::bases< vgui::Panel >, boost::noncopyable >( "TextEntry", bp::init< vgui::Panel *, char const * >(( bp::arg("parent"), bp::arg("panelName") )) )    
        .def( 
            "AddAnotherLine"
            , (void ( TextEntry_wrapper::* )( int &,int & ))(&TextEntry_wrapper::AddAnotherLine)
            , ( bp::arg("cx"), bp::arg("cy") ) )    
        .def( 
            "ApplySchemeSettings"
            , (void ( TextEntry_wrapper::* )( ::vgui::IScheme * ))(&TextEntry_wrapper::default_ApplySchemeSettings)
            , ( bp::arg("pScheme") ) )    
        .def( 
            "ApplySettings"
            , (void ( TextEntry_wrapper::* )( ::KeyValues * ))(&TextEntry_wrapper::ApplySettings)
            , ( bp::arg("inResourceData") ) )    
        .def( 
            "Backspace"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::Backspace ) )    
        .def( 
            "CompositionString"
            , (void ( ::vgui::TextEntry::* )( wchar_t const * ))( &::vgui::TextEntry::CompositionString )
            , ( bp::arg("string") ) )    
        .def( 
            "ConversionModeChanged"
            , (void ( ::vgui::TextEntry::* )( int ))( &::vgui::TextEntry::ConversionModeChanged )
            , ( bp::arg("handle") ) )    
        .def( 
            "CopySelected"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::CopySelected ) )    
        .def( 
            "CursorToPixelSpace"
            , (void ( TextEntry_wrapper::* )( int,int &,int & ))(&TextEntry_wrapper::CursorToPixelSpace)
            , ( bp::arg("cursorPos"), bp::arg("cx"), bp::arg("cy") ) )    
        .def( 
            "CutSelected"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::CutSelected ) )    
        .def( 
            "Delete"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::Delete ) )    
        .def( 
            "DeleteSelected"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::DeleteSelected ) )    
        .def( 
            "DrawChar"
            , (int ( TextEntry_wrapper::* )( wchar_t,::vgui::HFont,int,int,int ))(&TextEntry_wrapper::DrawChar)
            , ( bp::arg("ch"), bp::arg("font"), bp::arg("index"), bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "DrawCursor"
            , (bool ( TextEntry_wrapper::* )( int,int ))(&TextEntry_wrapper::DrawCursor)
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "FireActionSignal"
            , (void ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::FireActionSignal) )    
        .def( 
            "GetDescription"
            , (char const * ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::GetDescription) )    
        .def( 
            "GetDragPanel"
            , (::vgui::Panel * ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::GetDragPanel )
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetDrawWidth"
            , (int ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::GetDrawWidth ) )    
        .def( 
            "GetMaximumCharCount"
            , (int ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::GetMaximumCharCount ) )    
        .def( 
            "GetNumLines"
            , (int ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::GetNumLines ) )    
        .def( 
            "GetPanelBaseClassName"
            , (char const * (*)(  ))( &::vgui::TextEntry::GetPanelBaseClassName ) )    
        .def( 
            "GetPanelClassName"
            , (char const * (*)(  ))( &::vgui::TextEntry::GetPanelClassName ) )    
        .def( 
            "GetSelectedRange"
            , (bool ( TextEntry_wrapper::* )( int &,int & ))(&TextEntry_wrapper::GetSelectedRange)
            , ( bp::arg("cx0"), bp::arg("cx1") ) )    
        .def( 
            "GetSettings"
            , (void ( TextEntry_wrapper::* )( ::KeyValues * ))(&TextEntry_wrapper::GetSettings)
            , ( bp::arg("outResourceData") ) )    
        .def( 
            "GetStartDrawIndex"
            , (int ( TextEntry_wrapper::* )( int & ))(&TextEntry_wrapper::GetStartDrawIndex)
            , ( bp::arg("lineBreakIndexIndex") ) )    
        .def( 
            "GetTextLength"
            , (int ( ::vgui::TextEntry::* )(  )const)( &::vgui::TextEntry::GetTextLength ) )    
        .def( 
            "GetTextRange"
            , (void ( ::vgui::TextEntry::* )( wchar_t *,int,int ))( &::vgui::TextEntry::GetTextRange )
            , ( bp::arg("buf"), bp::arg("from"), bp::arg("numchars") ) )    
        .def( 
            "GetTextRange"
            , (void ( ::vgui::TextEntry::* )( char *,int,int ))( &::vgui::TextEntry::GetTextRange )
            , ( bp::arg("buf"), bp::arg("from"), bp::arg("numchars") ) )    
        .def( 
            "GetValueAsFloat"
            , (float ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::GetValueAsFloat ) )    
        .def( 
            "GetValueAsInt"
            , (int ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::GetValueAsInt ) )    
        .def( 
            "GetYStart"
            , (int ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::GetYStart) )    
        .def( 
            "GotoDown"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::GotoDown ) )    
        .def( 
            "GotoEndOfLine"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::GotoEndOfLine ) )    
        .def( 
            "GotoFirstOfLine"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::GotoFirstOfLine ) )    
        .def( 
            "GotoLeft"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::GotoLeft ) )    
        .def( 
            "GotoRight"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::GotoRight ) )    
        .def( 
            "GotoTextEnd"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::GotoTextEnd ) )    
        .def( 
            "GotoTextStart"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::GotoTextStart ) )    
        .def( 
            "GotoUp"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::GotoUp ) )    
        .def( 
            "GotoWordLeft"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::GotoWordLeft ) )    
        .def( 
            "GotoWordRight"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::GotoWordRight ) )    
        .def( 
            "HideIMECandidates"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::HideIMECandidates ) )    
        .def( 
            "InsertChar"
            , (void ( ::vgui::TextEntry::* )( wchar_t ))( &::vgui::TextEntry::InsertChar )
            , ( bp::arg("ch") ) )    
        .def( 
            "InsertString"
            , (void ( ::vgui::TextEntry::* )( wchar_t const * ))( &::vgui::TextEntry::InsertString )
            , ( bp::arg("wszText") ) )    
        .def( 
            "IsCursorOffLeftSideOfWindow"
            , (bool ( TextEntry_wrapper::* )( int ))(&TextEntry_wrapper::IsCursorOffLeftSideOfWindow)
            , ( bp::arg("cursorPos") ) )    
        .def( 
            "IsCursorOffRightSideOfWindow"
            , (bool ( TextEntry_wrapper::* )( int ))(&TextEntry_wrapper::IsCursorOffRightSideOfWindow)
            , ( bp::arg("cursorPos") ) )    
        .def( 
            "IsEditable"
            , (bool ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::IsEditable ) )    
        .def( 
            "IsMultiline"
            , (bool ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::IsMultiline ) )    
        .def( 
            "IsTextFullySelected"
            , (bool ( ::vgui::TextEntry::* )(  )const)( &::vgui::TextEntry::IsTextFullySelected ) )    
        .def( 
            "LanguageChanged"
            , (void ( ::vgui::TextEntry::* )( int ))( &::vgui::TextEntry::LanguageChanged )
            , ( bp::arg("handle") ) )    
        .def( 
            "LayoutVerticalScrollBarSlider"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::LayoutVerticalScrollBarSlider ) )    
        .def( 
            "MoveCursor"
            , (void ( ::vgui::TextEntry::* )( int,int ))(&::vgui::TextEntry::MoveCursor)
            , (void ( TextEntry_wrapper::* )( int,int ))(&TextEntry_wrapper::default_MoveCursor)
            , ( bp::arg("line"), bp::arg("pixelsAcross") ) )    
        .def( 
            "NeedsEllipses"
            , (bool ( TextEntry_wrapper::* )( ::vgui::HFont,int * ))(&TextEntry_wrapper::NeedsEllipses)
            , ( bp::arg("font"), bp::arg("pIndex") ) )    
        .def( 
            "OnChangeIME"
            , (void ( TextEntry_wrapper::* )( bool ))(&TextEntry_wrapper::OnChangeIME)
            , ( bp::arg("forward") ) )    
        .def( 
            "OnCreateDragData"
            , (void ( ::vgui::TextEntry::* )( ::KeyValues * ))( &::vgui::TextEntry::OnCreateDragData )
            , ( bp::arg("msg") ) )    
        .def( 
            "OnCursorEntered"
            , (void ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::default_OnCursorEntered) )    
        .def( 
            "OnCursorExited"
            , (void ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::default_OnCursorExited) )    
        .def( 
            "OnCursorMoved"
            , (void ( TextEntry_wrapper::* )( int,int ))(&TextEntry_wrapper::default_OnCursorMoved)
            , ( bp::arg("x"), bp::arg("y") ) )    
        .def( 
            "OnKeyCodePressed"
            , (void ( TextEntry_wrapper::* )( ::vgui::KeyCode ))(&TextEntry_wrapper::default_OnKeyCodePressed)
            , ( bp::arg("code") ) )    
        .def( 
            "OnKeyCodeTyped"
            , (void ( TextEntry_wrapper::* )( ::vgui::KeyCode ))(&TextEntry_wrapper::default_OnKeyCodeTyped)
            , ( bp::arg("code") ) )    
        .def( 
            "OnKeyFocusTicked"
            , (void ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::default_OnKeyFocusTicked) )    
        .def( 
            "OnKillFocus"
            , (void ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::default_OnKillFocus) )    
        .def( 
            "OnMouseCaptureLost"
            , (void ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::default_OnMouseCaptureLost) )    
        .def( 
            "OnMouseDoublePressed"
            , (void ( TextEntry_wrapper::* )( ::vgui::MouseCode ))(&TextEntry_wrapper::default_OnMouseDoublePressed)
            , ( bp::arg("code") ) )    
        .def( 
            "OnMouseFocusTicked"
            , (void ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::default_OnMouseFocusTicked) )    
        .def( 
            "OnMousePressed"
            , (void ( TextEntry_wrapper::* )( ::vgui::MouseCode ))(&TextEntry_wrapper::default_OnMousePressed)
            , ( bp::arg("code") ) )    
        .def( 
            "OnMouseReleased"
            , (void ( TextEntry_wrapper::* )( ::vgui::MouseCode ))(&TextEntry_wrapper::default_OnMouseReleased)
            , ( bp::arg("code") ) )    
        .def( 
            "OnMouseTriplePressed"
            , (void ( TextEntry_wrapper::* )( ::vgui::MouseCode ))(&TextEntry_wrapper::default_OnMouseTriplePressed)
            , ( bp::arg("code") ) )    
        .def( 
            "OnMouseWheeled"
            , (void ( TextEntry_wrapper::* )( int ))(&TextEntry_wrapper::default_OnMouseWheeled)
            , ( bp::arg("delta") ) )    
        .def( 
            "OnSetFocus"
            , (void ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::default_OnSetFocus) )    
        .def( 
            "OnSetText"
            , (void ( TextEntry_wrapper::* )( wchar_t const * ))(&TextEntry_wrapper::OnSetText)
            , ( bp::arg("text") ) )    
        .def( 
            "OnSizeChanged"
            , (void ( TextEntry_wrapper::* )( int,int ))(&TextEntry_wrapper::default_OnSizeChanged)
            , ( bp::arg("newWide"), bp::arg("newTall") ) )    
        .def( 
            "OnSliderMoved"
            , (void ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::OnSliderMoved) )    
        .def( 
            "OpenEditMenu"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::OpenEditMenu ) )    
        .def( 
            "PaintBackground"
            , (void ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::default_PaintBackground) )    
        .def( 
            "Paste"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::Paste ) )    
        .def( 
            "PerformLayout"
            , (void ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::default_PerformLayout) )    
        .def( 
            "PixelToCursorSpace"
            , (int ( TextEntry_wrapper::* )( int,int ))(&TextEntry_wrapper::PixelToCursorSpace)
            , ( bp::arg("cx"), bp::arg("cy") ) )    
        .def( 
            "RecalculateLineBreaks"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::RecalculateLineBreaks ) )    
        .def( 
            "RequestInfo"
            , (bool ( ::vgui::TextEntry::* )( ::KeyValues * ))( &::vgui::TextEntry::RequestInfo )
            , ( bp::arg("outputData") ) )    
        .def( 
            "ResetCursorBlink"
            , (void ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::ResetCursorBlink) )    
        .def( 
            "SaveUndoState"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::SaveUndoState ) )    
        .def( 
            "ScrollLeft"
            , (void ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::ScrollLeft) )    
        .def( 
            "ScrollLeftForResize"
            , (void ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::ScrollLeftForResize) )    
        .def( 
            "ScrollRight"
            , (void ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::ScrollRight) )    
        .def( 
            "SelectAllOnFirstFocus"
            , (void ( ::vgui::TextEntry::* )( bool ))( &::vgui::TextEntry::SelectAllOnFirstFocus )
            , ( bp::arg("status") ) )    
        .def( 
            "SelectAllOnFocusAlways"
            , (void ( ::vgui::TextEntry::* )( bool ))( &::vgui::TextEntry::SelectAllOnFocusAlways )
            , ( bp::arg("status") ) )    
        .def( 
            "SelectAllText"
            , (void ( ::vgui::TextEntry::* )( bool ))( &::vgui::TextEntry::SelectAllText )
            , ( bp::arg("bResetCursorPos") ) )    
        .def( 
            "SelectCheck"
            , (bool ( TextEntry_wrapper::* )( bool ))(&TextEntry_wrapper::SelectCheck)
            , ( bp::arg("fromMouse")=(bool)(false) ) )    
        .def( 
            "SelectNoText"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::SelectNoText ) )    
        .def( 
            "SelectNone"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::SelectNone ) )    
        .def( 
            "SendNewLine"
            , (void ( ::vgui::TextEntry::* )( bool ))( &::vgui::TextEntry::SendNewLine )
            , ( bp::arg("send") ) )    
        .def( 
            "SentenceModeChanged"
            , (void ( ::vgui::TextEntry::* )( int ))( &::vgui::TextEntry::SentenceModeChanged )
            , ( bp::arg("handle") ) )    
        .def( 
            "SetAllowNonAsciiCharacters"
            , (void ( ::vgui::TextEntry::* )( bool ))( &::vgui::TextEntry::SetAllowNonAsciiCharacters )
            , ( bp::arg("state") ) )    
        .def( 
            "SetAllowNumericInputOnly"
            , (void ( ::vgui::TextEntry::* )( bool ))( &::vgui::TextEntry::SetAllowNumericInputOnly )
            , ( bp::arg("state") ) )    
        .def( 
            "SetAutoProgressOnHittingCharLimit"
            , (void ( ::vgui::TextEntry::* )( bool ))( &::vgui::TextEntry::SetAutoProgressOnHittingCharLimit )
            , ( bp::arg("state") ) )    
        .def( 
            "SetCatchEnterKey"
            , (void ( ::vgui::TextEntry::* )( bool ))( &::vgui::TextEntry::SetCatchEnterKey )
            , ( bp::arg("state") ) )    
        .def( 
            "SetCharAt"
            , (void ( TextEntry_wrapper::* )( wchar_t,int ))(&TextEntry_wrapper::SetCharAt)
            , ( bp::arg("ch"), bp::arg("index") ) )    
        .def( 
            "SetDisabledBgColor"
            , (void ( ::vgui::TextEntry::* )( ::Color ))(&::vgui::TextEntry::SetDisabledBgColor)
            , (void ( TextEntry_wrapper::* )( ::Color ))(&TextEntry_wrapper::default_SetDisabledBgColor)
            , ( bp::arg("col") ) )    
        .def( 
            "SetDrawLanguageIDAtLeft"
            , (void ( ::vgui::TextEntry::* )( bool ))( &::vgui::TextEntry::SetDrawLanguageIDAtLeft )
            , ( bp::arg("state") ) )    
        .def( 
            "SetDrawWidth"
            , (void ( ::vgui::TextEntry::* )( int ))( &::vgui::TextEntry::SetDrawWidth )
            , ( bp::arg("width") ) )    
        .def( 
            "SetEditable"
            , (void ( ::vgui::TextEntry::* )( bool ))( &::vgui::TextEntry::SetEditable )
            , ( bp::arg("state") ) )    
        .def( 
            "SetEnabled"
            , (void ( ::vgui::TextEntry::* )( bool ))(&::vgui::TextEntry::SetEnabled)
            , (void ( TextEntry_wrapper::* )( bool ))(&TextEntry_wrapper::default_SetEnabled)
            , ( bp::arg("state") ) )    
        .def( 
            "SetFont"
            , (void ( ::vgui::TextEntry::* )( ::vgui::HFont ))( &::vgui::TextEntry::SetFont )
            , ( bp::arg("font") ) )    
        .def( 
            "SetHorizontalScrolling"
            , (void ( ::vgui::TextEntry::* )( bool ))( &::vgui::TextEntry::SetHorizontalScrolling )
            , ( bp::arg("status") ) )    
        .def( 
            "SetMaximumCharCount"
            , (void ( ::vgui::TextEntry::* )( int ))( &::vgui::TextEntry::SetMaximumCharCount )
            , ( bp::arg("maxChars") ) )    
        .def( 
            "SetMultiline"
            , (void ( ::vgui::TextEntry::* )( bool ))(&::vgui::TextEntry::SetMultiline)
            , (void ( TextEntry_wrapper::* )( bool ))(&TextEntry_wrapper::default_SetMultiline)
            , ( bp::arg("state") ) )    
        .def( 
            "SetSelectionBgColor"
            , (void ( ::vgui::TextEntry::* )( ::Color const & ))( &::vgui::TextEntry::SetSelectionBgColor )
            , ( bp::arg("clr") ) )    
        .def( 
            "SetSelectionTextColor"
            , (void ( ::vgui::TextEntry::* )( ::Color const & ))( &::vgui::TextEntry::SetSelectionTextColor )
            , ( bp::arg("clr") ) )    
        .def( 
            "SetSelectionUnfocusedBgColor"
            , (void ( ::vgui::TextEntry::* )( ::Color const & ))( &::vgui::TextEntry::SetSelectionUnfocusedBgColor )
            , ( bp::arg("clr") ) )    
        .def( 
            "SetText"
            , (void ( ::vgui::TextEntry::* )( wchar_t const * ))(&::vgui::TextEntry::SetText)
            , (void ( TextEntry_wrapper::* )( wchar_t const * ))(&TextEntry_wrapper::default_SetText)
            , ( bp::arg("wszText") ) )    
        .def( 
            "SetTextHidden"
            , (void ( ::vgui::TextEntry::* )( bool ))( &::vgui::TextEntry::SetTextHidden )
            , ( bp::arg("bHideText") ) )    
        .def( 
            "SetToFullHeight"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::SetToFullHeight ) )    
        .def( 
            "SetToFullWidth"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::SetToFullWidth ) )    
        .def( 
            "SetUseFallbackFont"
            , (void ( ::vgui::TextEntry::* )( bool,::vgui::HFont ))( &::vgui::TextEntry::SetUseFallbackFont )
            , ( bp::arg("bState"), bp::arg("hFallback") ) )    
        .def( 
            "SetVerticalScrollbar"
            , (void ( ::vgui::TextEntry::* )( bool ))(&::vgui::TextEntry::SetVerticalScrollbar)
            , (void ( TextEntry_wrapper::* )( bool ))(&TextEntry_wrapper::default_SetVerticalScrollbar)
            , ( bp::arg("state") ) )    
        .def( 
            "SetWrap"
            , (void ( ::vgui::TextEntry::* )( bool ))( &::vgui::TextEntry::SetWrap )
            , ( bp::arg("wrap") ) )    
        .def( 
            "ShowIMECandidates"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::ShowIMECandidates ) )    
        .def( 
            "Undo"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::Undo ) )    
        .def( 
            "UpdateIMECandidates"
            , (void ( ::vgui::TextEntry::* )(  ))( &::vgui::TextEntry::UpdateIMECandidates ) )    
        .def( 
            "AddToOverridableColors"
            , (void ( TextEntry_wrapper::* )( ::Color *,char const * ))(&TextEntry_wrapper::AddToOverridableColors)
            , ( bp::arg("pColor"), bp::arg("scriptname") ) )    
        .def( 
            "ApplyOverridableColors"
            , (void ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::ApplyOverridableColors) )    
        .def( 
            "CreateDragData"
            , (void ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::CreateDragData) )    
        .def( 
            "DragDropStartDragging"
            , (void ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::DragDropStartDragging) )    
        .def( 
            "GetNavActivatePanel"
            , (::vgui::Panel * ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::GetNavActivatePanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetNavBackPanel"
            , (::vgui::Panel * ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::GetNavBackPanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetNavDownPanel"
            , (::vgui::Panel * ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::GetNavDownPanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetNavLeftPanel"
            , (::vgui::Panel * ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::GetNavLeftPanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetNavRightPanel"
            , (::vgui::Panel * ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::GetNavRightPanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetNavToRelayPanel"
            , (::vgui::Panel * ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::GetNavToRelayPanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "GetNavUpPanel"
            , (::vgui::Panel * ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::GetNavUpPanel)
            , bp::return_value_policy< bp::return_by_value >() )    
        .def( 
            "InvalidateLayout"
            , (void ( ::vgui::Panel::* )( bool,bool ))(&::vgui::Panel::InvalidateLayout)
            , (void ( TextEntry_wrapper::* )( bool,bool ))(&TextEntry_wrapper::default_InvalidateLayout)
            , ( bp::arg("layoutNow")=(bool)(false), bp::arg("reloadScheme")=(bool)(false) ) )    
        .def( 
            "OnChildAdded"
            , (void ( ::vgui::Panel::* )( ::vgui::VPANEL ))(&::vgui::Panel::OnChildAdded)
            , (void ( TextEntry_wrapper::* )( ::vgui::VPANEL ))(&TextEntry_wrapper::default_OnChildAdded)
            , ( bp::arg("child") ) )    
        .def( 
            "OnChildSettingsApplied"
            , (void ( TextEntry_wrapper::* )( ::KeyValues *,::vgui::Panel * ))(&TextEntry_wrapper::OnChildSettingsApplied)
            , ( bp::arg("pInResourceData"), bp::arg("pChild") ) )    
        .def( 
            "OnCommand"
            , (void ( ::vgui::Panel::* )( char const * ))(&::vgui::Panel::OnCommand)
            , (void ( TextEntry_wrapper::* )( char const * ))(&TextEntry_wrapper::default_OnCommand)
            , ( bp::arg("command") ) )    
        .def( 
            "OnContinueDragging"
            , (void ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::OnContinueDragging) )    
        .def( 
            "OnFinishDragging"
            , (void ( TextEntry_wrapper::* )( bool,::vgui::MouseCode,bool ))(&TextEntry_wrapper::OnFinishDragging)
            , ( bp::arg("mousereleased"), bp::arg("code"), bp::arg("aborted")=(bool)(false) ) )    
        .def( 
            "OnKeyCodeReleased"
            , (void ( ::vgui::Panel::* )( ::vgui::KeyCode ))(&::vgui::Panel::OnKeyCodeReleased)
            , (void ( TextEntry_wrapper::* )( ::vgui::KeyCode ))(&TextEntry_wrapper::default_OnKeyCodeReleased)
            , ( bp::arg("code") ) )    
        .def( 
            "OnRequestFocus"
            , (void ( TextEntry_wrapper::* )( ::vgui::VPANEL,::vgui::VPANEL ))(&TextEntry_wrapper::default_OnRequestFocus)
            , ( bp::arg("subFocus"), bp::arg("defaultPanel") ) )    
        .def( 
            "OnScreenSizeChanged"
            , (void ( TextEntry_wrapper::* )( int,int ))(&TextEntry_wrapper::default_OnScreenSizeChanged)
            , ( bp::arg("oldwide"), bp::arg("oldtall") ) )    
        .def( 
            "OnStartDragging"
            , (void ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::OnStartDragging) )    
        .def( 
            "OnThink"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::OnThink)
            , (void ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::default_OnThink) )    
        .def( 
            "OnTick"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::OnTick)
            , (void ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::default_OnTick) )    
        .def( 
            "Paint"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::Paint)
            , (void ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::default_Paint) )    
        .def( 
            "PaintBuildOverlay"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::PaintBuildOverlay)
            , (void ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::default_PaintBuildOverlay) )    
        .def( 
            "PaintTraverse"
            , (void ( TextEntry_wrapper::* )( bool,bool ))(&TextEntry_wrapper::PaintTraverse)
            , ( bp::arg("Repaint"), bp::arg("allowForce")=(bool)(true) ) )    
        .def( 
            "PostChildPaint"
            , (void ( ::vgui::Panel::* )(  ))(&::vgui::Panel::PostChildPaint)
            , (void ( TextEntry_wrapper::* )(  ))(&TextEntry_wrapper::default_PostChildPaint) )    
        .def( 
            "SetBgColor"
            , (void ( ::vgui::Panel::* )( ::Color ))(&::vgui::Panel::SetBgColor)
            , (void ( TextEntry_wrapper::* )( ::Color ))(&TextEntry_wrapper::default_SetBgColor)
            , ( bp::arg("color") ) )    
        .def( 
            "SetBorder"
            , (void ( ::vgui::Panel::* )( ::vgui::IBorder * ))(&::vgui::Panel::SetBorder)
            , (void ( TextEntry_wrapper::* )( ::vgui::IBorder * ))(&TextEntry_wrapper::default_SetBorder)
            , ( bp::arg("border") ) )    
        .def( 
            "SetCursor"
            , (void ( ::vgui::Panel::* )( ::vgui::HCursor ))(&::vgui::Panel::SetCursor)
            , (void ( TextEntry_wrapper::* )( ::vgui::HCursor ))(&TextEntry_wrapper::default_SetCursor)
            , ( bp::arg("cursor") ) )    
        .def( 
            "SetDragEnabled"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetDragEnabled)
            , (void ( TextEntry_wrapper::* )( bool ))(&TextEntry_wrapper::default_SetDragEnabled)
            , ( bp::arg("enabled") ) )    
        .def( 
            "SetFgColor"
            , (void ( ::vgui::Panel::* )( ::Color ))(&::vgui::Panel::SetFgColor)
            , (void ( TextEntry_wrapper::* )( ::Color ))(&TextEntry_wrapper::default_SetFgColor)
            , ( bp::arg("color") ) )    
        .def( 
            "SetKeyBoardInputEnabled"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetKeyBoardInputEnabled)
            , (void ( TextEntry_wrapper::* )( bool ))(&TextEntry_wrapper::default_SetKeyBoardInputEnabled)
            , ( bp::arg("state") ) )    
        .def( 
            "SetMouseInputEnabled"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetMouseInputEnabled)
            , (void ( TextEntry_wrapper::* )( bool ))(&TextEntry_wrapper::default_SetMouseInputEnabled)
            , ( bp::arg("state") ) )    
        .def( 
            "SetOverridableColor"
            , (void ( TextEntry_wrapper::* )( ::Color *,::Color const & ))(&TextEntry_wrapper::SetOverridableColor)
            , ( bp::arg("pColor"), bp::arg("newColor") ) )    
        .def( 
            "SetPaintBackgroundEnabled"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetPaintBackgroundEnabled)
            , (void ( TextEntry_wrapper::* )( bool ))(&TextEntry_wrapper::default_SetPaintBackgroundEnabled)
            , ( bp::arg("state") ) )    
        .def( 
            "SetPaintBackgroundType"
            , (void ( ::vgui::Panel::* )( int ))(&::vgui::Panel::SetPaintBackgroundType)
            , (void ( TextEntry_wrapper::* )( int ))(&TextEntry_wrapper::default_SetPaintBackgroundType)
            , ( bp::arg("type") ) )    
        .def( 
            "SetPaintBorderEnabled"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetPaintBorderEnabled)
            , (void ( TextEntry_wrapper::* )( bool ))(&TextEntry_wrapper::default_SetPaintBorderEnabled)
            , ( bp::arg("state") ) )    
        .def( 
            "SetPaintEnabled"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetPaintEnabled)
            , (void ( TextEntry_wrapper::* )( bool ))(&TextEntry_wrapper::default_SetPaintEnabled)
            , ( bp::arg("state") ) )    
        .def( 
            "SetParent"
            , (void ( ::vgui::Panel::* )( ::vgui::Panel * ))(&::vgui::Panel::SetParent)
            , (void ( TextEntry_wrapper::* )( ::vgui::Panel * ))(&TextEntry_wrapper::default_SetParent)
            , ( bp::arg("newParent") ) )    
        .def( 
            "SetParent"
            , (void ( ::vgui::Panel::* )( ::vgui::VPANEL ))(&::vgui::Panel::SetParent)
            , (void ( TextEntry_wrapper::* )( ::vgui::VPANEL ))(&TextEntry_wrapper::default_SetParent)
            , ( bp::arg("newParent") ) )    
        .def( 
            "SetScheme"
            , (void ( ::vgui::Panel::* )( char const * ))(&::vgui::Panel::SetScheme)
            , (void ( TextEntry_wrapper::* )( char const * ))(&TextEntry_wrapper::default_SetScheme)
            , ( bp::arg("tag") ) )    
        .def( 
            "SetScheme"
            , (void ( ::vgui::Panel::* )( ::vgui::HScheme ))(&::vgui::Panel::SetScheme)
            , (void ( TextEntry_wrapper::* )( ::vgui::HScheme ))(&TextEntry_wrapper::default_SetScheme)
            , ( bp::arg("scheme") ) )    
        .def( 
            "SetVisible"
            , (void ( ::vgui::Panel::* )( bool ))(&::vgui::Panel::SetVisible)
            , (void ( TextEntry_wrapper::* )( bool ))(&TextEntry_wrapper::default_SetVisible)
            , ( bp::arg("state") ) )    
        .staticmethod( "GetPanelBaseClassName" )    
        .staticmethod( "GetPanelClassName" )    
        .def( 
            "GetText"
            , (boost::python::object ( TextEntry_wrapper::* )())( &TextEntry_wrapper::GetText ) );

}
