import os
from collections import defaultdict
import functools


# VPC Template
vpctemplate = '''
//-----------------------------------------------------------------------------
//	PYSOURCE_AUTOGEN.VPC
//
//	Project Script
//-----------------------------------------------------------------------------

$Macro SRCDIR		"..\.."

$Configuration
{
	$Compiler
	{
		$PreprocessorDefinitions			"$BASE;%(Symbols)s"
		// Suppress warnings (https://msdn.microsoft.com/en-us/library/thxezb7y.aspx)
		// C4510: '<unnamed-tag>' : default constructor could not be generated
		// C4610: struct '<unnamed-tag>' can never be instantiated - user defined constructor required
		// Caused by including header pyhash.h...
		$AdditionalOptions					"$BASE /wd4510 /wd4610"
	}
}

$Project
{
	$Folder	"Source Files"
	{
		$Folder	"Python"
		{
%(CoreFiles)s
			
			$Folder	"Modules"
			{
				$Folder	"AutoGenerated"
				{
%(AutoGeneratedModules)s
				}
			}
		}
	}
}
'''

filtertemplate = '''					$Folder	"%(FilterName)s"
					{
%(AutoGeneratedModules)s
					}
'''


def AutoGeneratedModules(settings, filepaths):
    """ Create auto_generated_modules content with filenames. """
    auto_generated_modules = ''
    filters = defaultdict(str)
    
    filepaths = sorted(filepaths)
    
    for path in filepaths:
        basepath, filtername = path.split(settings.autogenfoldername)
        filtername = os.path.dirname(filtername).lstrip('\\')
        if filtername:
            filters[filtername] += '\t\t\t\t\t\t$File	"$SRCDIR\%s"\n' % (path)
        else:
            auto_generated_modules += '\t\t\t\t\t$File	"$SRCDIR\%s"\n' % (path)
            
    for filter, filtercontent in sorted(filters.items()):
        auto_generated_modules += filtertemplate % {'FilterName': filter, 'AutoGeneratedModules': filtercontent}
        
    return auto_generated_modules


def indent(level, path):
    return ('\t' * level) + path


indent3times = functools.partial(indent, 3)


def UnpackRequiredFile(is_client, file_path):
    return file_path if type(file_path) == str else file_path(is_client)


def ParseRequiredFile(file_path):
    return '$File	"%s"' % file_path


def GenerateVPCs(settings, is_client, module_file_paths, required_file_paths, symbols, out_path):
    """ Generates VPC file, to be included in the main vpc project file.

        Contains the file paths of the autogenerated modules, as well as the core
        required srcpy file paths.
    """
    auto_generated_modules = AutoGeneratedModules(settings, module_file_paths)

    unpack_required_file = functools.partial(UnpackRequiredFile, is_client)

    core_files = '\n'.join(
        sorted(set(
            map(indent3times, map(ParseRequiredFile, filter(bool, map(unpack_required_file, required_file_paths))))
        ))
    )

    # Write out file using the template
    with open(out_path, 'w') as fp:
        fp.write(vpctemplate % {
            'AutoGeneratedModules': auto_generated_modules,
            'CoreFiles': core_files,
            'Symbols': ';'.join(sorted(symbols))
        })
